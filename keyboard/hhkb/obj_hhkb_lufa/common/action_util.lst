   1               		.file	"action_util.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.add_key,"ax",@progbits
  11               	.global	add_key
  13               	add_key:
  14               	.LFB101:
  15               		.file 1 "../../tmk_core/common/action_util.c"
   1:../../tmk_core/common/action_util.c **** /*
   2:../../tmk_core/common/action_util.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/action_util.c **** 
   4:../../tmk_core/common/action_util.c **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/action_util.c **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/action_util.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/action_util.c **** (at your option) any later version.
   8:../../tmk_core/common/action_util.c **** 
   9:../../tmk_core/common/action_util.c **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/action_util.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/action_util.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/action_util.c **** GNU General Public License for more details.
  13:../../tmk_core/common/action_util.c **** 
  14:../../tmk_core/common/action_util.c **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/action_util.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/action_util.c **** */
  17:../../tmk_core/common/action_util.c **** #include "host.h"
  18:../../tmk_core/common/action_util.c **** #include "report.h"
  19:../../tmk_core/common/action_util.c **** #include "debug.h"
  20:../../tmk_core/common/action_util.c **** #include "action_util.h"
  21:../../tmk_core/common/action_util.c **** #include "timer.h"
  22:../../tmk_core/common/action_util.c **** 
  23:../../tmk_core/common/action_util.c **** static inline void add_key_byte(uint8_t code);
  24:../../tmk_core/common/action_util.c **** static inline void del_key_byte(uint8_t code);
  25:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  26:../../tmk_core/common/action_util.c **** static inline void add_key_bit(uint8_t code);
  27:../../tmk_core/common/action_util.c **** static inline void del_key_bit(uint8_t code);
  28:../../tmk_core/common/action_util.c **** #endif
  29:../../tmk_core/common/action_util.c **** 
  30:../../tmk_core/common/action_util.c **** static uint8_t real_mods = 0;
  31:../../tmk_core/common/action_util.c **** static uint8_t weak_mods = 0;
  32:../../tmk_core/common/action_util.c **** 
  33:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
  34:../../tmk_core/common/action_util.c **** #define RO_ADD(a, b) ((a + b) % KEYBOARD_REPORT_KEYS)
  35:../../tmk_core/common/action_util.c **** #define RO_SUB(a, b) ((a - b + KEYBOARD_REPORT_KEYS) % KEYBOARD_REPORT_KEYS)
  36:../../tmk_core/common/action_util.c **** #define RO_INC(a) RO_ADD(a, 1)
  37:../../tmk_core/common/action_util.c **** #define RO_DEC(a) RO_SUB(a, 1)
  38:../../tmk_core/common/action_util.c **** static int8_t cb_head = 0;
  39:../../tmk_core/common/action_util.c **** static int8_t cb_tail = 0;
  40:../../tmk_core/common/action_util.c **** static int8_t cb_count = 0;
  41:../../tmk_core/common/action_util.c **** #endif
  42:../../tmk_core/common/action_util.c **** 
  43:../../tmk_core/common/action_util.c **** // TODO: pointer variable is not needed
  44:../../tmk_core/common/action_util.c **** //report_keyboard_t keyboard_report = {};
  45:../../tmk_core/common/action_util.c **** report_keyboard_t *keyboard_report = &(report_keyboard_t){};
  46:../../tmk_core/common/action_util.c **** 
  47:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  48:../../tmk_core/common/action_util.c **** static int8_t oneshot_mods = 0;
  49:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  50:../../tmk_core/common/action_util.c **** static int16_t oneshot_time = 0;
  51:../../tmk_core/common/action_util.c **** #endif
  52:../../tmk_core/common/action_util.c **** #endif
  53:../../tmk_core/common/action_util.c **** 
  54:../../tmk_core/common/action_util.c **** 
  55:../../tmk_core/common/action_util.c **** void send_keyboard_report(void) {
  56:../../tmk_core/common/action_util.c ****     keyboard_report->mods  = real_mods;
  57:../../tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
  58:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  59:../../tmk_core/common/action_util.c ****     if (oneshot_mods) {
  60:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  61:../../tmk_core/common/action_util.c ****         if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
  62:../../tmk_core/common/action_util.c ****             dprintf("Oneshot: timeout\n");
  63:../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
  64:../../tmk_core/common/action_util.c ****         }
  65:../../tmk_core/common/action_util.c **** #endif
  66:../../tmk_core/common/action_util.c ****         keyboard_report->mods |= oneshot_mods;
  67:../../tmk_core/common/action_util.c ****         if (has_anykey()) {
  68:../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
  69:../../tmk_core/common/action_util.c ****         }
  70:../../tmk_core/common/action_util.c ****     }
  71:../../tmk_core/common/action_util.c **** #endif
  72:../../tmk_core/common/action_util.c ****     host_keyboard_send(keyboard_report);
  73:../../tmk_core/common/action_util.c **** }
  74:../../tmk_core/common/action_util.c **** 
  75:../../tmk_core/common/action_util.c **** /* key */
  76:../../tmk_core/common/action_util.c **** void add_key(uint8_t key)
  77:../../tmk_core/common/action_util.c **** {
  16               		.loc 1 77 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  78:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  79:../../tmk_core/common/action_util.c ****     if (keyboard_protocol && keyboard_nkro) {
  23               		.loc 1 79 0
  24 0000 9091 0000 		lds r25,keyboard_protocol
  25 0004 9923      		tst r25
  26 0006 01F0      		breq .L2
  27               		.loc 1 79 0 is_stmt 0 discriminator 1
  28 0008 9091 0000 		lds r25,keyboard_nkro
  29 000c 9923      		tst r25
  30 000e 01F0      		breq .L2
  31               	.LVL1:
  32               	.LBB7:
  33               	.LBB8:
  80:../../tmk_core/common/action_util.c ****         add_key_bit(key);
  81:../../tmk_core/common/action_util.c ****         return;
  82:../../tmk_core/common/action_util.c ****     }
  83:../../tmk_core/common/action_util.c **** #endif
  84:../../tmk_core/common/action_util.c ****     add_key_byte(key);
  85:../../tmk_core/common/action_util.c **** }
  86:../../tmk_core/common/action_util.c **** 
  87:../../tmk_core/common/action_util.c **** void del_key(uint8_t key)
  88:../../tmk_core/common/action_util.c **** {
  89:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  90:../../tmk_core/common/action_util.c ****     if (keyboard_protocol && keyboard_nkro) {
  91:../../tmk_core/common/action_util.c ****         del_key_bit(key);
  92:../../tmk_core/common/action_util.c ****         return;
  93:../../tmk_core/common/action_util.c ****     }
  94:../../tmk_core/common/action_util.c **** #endif
  95:../../tmk_core/common/action_util.c ****     del_key_byte(key);
  96:../../tmk_core/common/action_util.c **** }
  97:../../tmk_core/common/action_util.c **** 
  98:../../tmk_core/common/action_util.c **** void clear_keys(void)
  99:../../tmk_core/common/action_util.c **** {
 100:../../tmk_core/common/action_util.c ****     // not clear mods
 101:../../tmk_core/common/action_util.c ****     for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 102:../../tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 103:../../tmk_core/common/action_util.c ****     }
 104:../../tmk_core/common/action_util.c **** }
 105:../../tmk_core/common/action_util.c **** 
 106:../../tmk_core/common/action_util.c **** 
 107:../../tmk_core/common/action_util.c **** /* modifier */
 108:../../tmk_core/common/action_util.c **** uint8_t get_mods(void) { return real_mods; }
 109:../../tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 110:../../tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 111:../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 112:../../tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 113:../../tmk_core/common/action_util.c **** 
 114:../../tmk_core/common/action_util.c **** /* weak modifier */
 115:../../tmk_core/common/action_util.c **** uint8_t get_weak_mods(void) { return weak_mods; }
 116:../../tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 117:../../tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 118:../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 119:../../tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 120:../../tmk_core/common/action_util.c **** 
 121:../../tmk_core/common/action_util.c **** /* Oneshot modifier */
 122:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 123:../../tmk_core/common/action_util.c **** void set_oneshot_mods(uint8_t mods)
 124:../../tmk_core/common/action_util.c **** {
 125:../../tmk_core/common/action_util.c ****     oneshot_mods = mods;
 126:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 127:../../tmk_core/common/action_util.c ****     oneshot_time = timer_read();
 128:../../tmk_core/common/action_util.c **** #endif
 129:../../tmk_core/common/action_util.c **** }
 130:../../tmk_core/common/action_util.c **** void clear_oneshot_mods(void)
 131:../../tmk_core/common/action_util.c **** {
 132:../../tmk_core/common/action_util.c ****     oneshot_mods = 0;
 133:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 134:../../tmk_core/common/action_util.c ****     oneshot_time = 0;
 135:../../tmk_core/common/action_util.c **** #endif
 136:../../tmk_core/common/action_util.c **** }
 137:../../tmk_core/common/action_util.c **** #endif
 138:../../tmk_core/common/action_util.c **** 
 139:../../tmk_core/common/action_util.c **** 
 140:../../tmk_core/common/action_util.c **** 
 141:../../tmk_core/common/action_util.c **** 
 142:../../tmk_core/common/action_util.c **** /*
 143:../../tmk_core/common/action_util.c ****  * inspect keyboard state
 144:../../tmk_core/common/action_util.c ****  */
 145:../../tmk_core/common/action_util.c **** uint8_t has_anykey(void)
 146:../../tmk_core/common/action_util.c **** {
 147:../../tmk_core/common/action_util.c ****     uint8_t cnt = 0;
 148:../../tmk_core/common/action_util.c ****     for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 149:../../tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 150:../../tmk_core/common/action_util.c ****             cnt++;
 151:../../tmk_core/common/action_util.c ****     }
 152:../../tmk_core/common/action_util.c ****     return cnt;
 153:../../tmk_core/common/action_util.c **** }
 154:../../tmk_core/common/action_util.c **** 
 155:../../tmk_core/common/action_util.c **** uint8_t has_anymod(void)
 156:../../tmk_core/common/action_util.c **** {
 157:../../tmk_core/common/action_util.c ****     return bitpop(real_mods);
 158:../../tmk_core/common/action_util.c **** }
 159:../../tmk_core/common/action_util.c **** 
 160:../../tmk_core/common/action_util.c **** uint8_t get_first_key(void)
 161:../../tmk_core/common/action_util.c **** {
 162:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 163:../../tmk_core/common/action_util.c ****     if (keyboard_protocol && keyboard_nkro) {
 164:../../tmk_core/common/action_util.c ****         uint8_t i = 0;
 165:../../tmk_core/common/action_util.c ****         for (; i < KEYBOARD_REPORT_BITS && !keyboard_report->nkro.bits[i]; i++)
 166:../../tmk_core/common/action_util.c ****             ;
 167:../../tmk_core/common/action_util.c ****         return i<<3 | biton(keyboard_report->nkro.bits[i]);
 168:../../tmk_core/common/action_util.c ****     }
 169:../../tmk_core/common/action_util.c **** #endif
 170:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 171:../../tmk_core/common/action_util.c ****     uint8_t i = cb_head;
 172:../../tmk_core/common/action_util.c ****     do {
 173:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] != 0) {
 174:../../tmk_core/common/action_util.c ****             break;
 175:../../tmk_core/common/action_util.c ****         }
 176:../../tmk_core/common/action_util.c ****         i = RO_INC(i);
 177:../../tmk_core/common/action_util.c ****     } while (i != cb_tail);
 178:../../tmk_core/common/action_util.c ****     return keyboard_report->keys[i];
 179:../../tmk_core/common/action_util.c **** #else
 180:../../tmk_core/common/action_util.c ****     return keyboard_report->keys[0];
 181:../../tmk_core/common/action_util.c **** #endif
 182:../../tmk_core/common/action_util.c **** }
 183:../../tmk_core/common/action_util.c **** 
 184:../../tmk_core/common/action_util.c **** 
 185:../../tmk_core/common/action_util.c **** 
 186:../../tmk_core/common/action_util.c **** /* local functions */
 187:../../tmk_core/common/action_util.c **** static inline void add_key_byte(uint8_t code)
 188:../../tmk_core/common/action_util.c **** {
 189:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 190:../../tmk_core/common/action_util.c ****     int8_t i = cb_head;
 191:../../tmk_core/common/action_util.c ****     int8_t empty = -1;
 192:../../tmk_core/common/action_util.c ****     if (cb_count) {
 193:../../tmk_core/common/action_util.c ****         do {
 194:../../tmk_core/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 195:../../tmk_core/common/action_util.c ****                 return;
 196:../../tmk_core/common/action_util.c ****             }
 197:../../tmk_core/common/action_util.c ****             if (empty == -1 && keyboard_report->keys[i] == 0) {
 198:../../tmk_core/common/action_util.c ****                 empty = i;
 199:../../tmk_core/common/action_util.c ****             }
 200:../../tmk_core/common/action_util.c ****             i = RO_INC(i);
 201:../../tmk_core/common/action_util.c ****         } while (i != cb_tail);
 202:../../tmk_core/common/action_util.c ****         if (i == cb_tail) {
 203:../../tmk_core/common/action_util.c ****             if (cb_tail == cb_head) {
 204:../../tmk_core/common/action_util.c ****                 // buffer is full
 205:../../tmk_core/common/action_util.c ****                 if (empty == -1) {
 206:../../tmk_core/common/action_util.c ****                     // pop head when has no empty space
 207:../../tmk_core/common/action_util.c ****                     cb_head = RO_INC(cb_head);
 208:../../tmk_core/common/action_util.c ****                     cb_count--;
 209:../../tmk_core/common/action_util.c ****                 }
 210:../../tmk_core/common/action_util.c ****                 else {
 211:../../tmk_core/common/action_util.c ****                     // left shift when has empty space
 212:../../tmk_core/common/action_util.c ****                     uint8_t offset = 1;
 213:../../tmk_core/common/action_util.c ****                     i = RO_INC(empty);
 214:../../tmk_core/common/action_util.c ****                     do {
 215:../../tmk_core/common/action_util.c ****                         if (keyboard_report->keys[i] != 0) {
 216:../../tmk_core/common/action_util.c ****                             keyboard_report->keys[empty] = keyboard_report->keys[i];
 217:../../tmk_core/common/action_util.c ****                             keyboard_report->keys[i] = 0;
 218:../../tmk_core/common/action_util.c ****                             empty = RO_INC(empty);
 219:../../tmk_core/common/action_util.c ****                         }
 220:../../tmk_core/common/action_util.c ****                         else {
 221:../../tmk_core/common/action_util.c ****                             offset++;
 222:../../tmk_core/common/action_util.c ****                         }
 223:../../tmk_core/common/action_util.c ****                         i = RO_INC(i);
 224:../../tmk_core/common/action_util.c ****                     } while (i != cb_tail);
 225:../../tmk_core/common/action_util.c ****                     cb_tail = RO_SUB(cb_tail, offset);
 226:../../tmk_core/common/action_util.c ****                 }
 227:../../tmk_core/common/action_util.c ****             }
 228:../../tmk_core/common/action_util.c ****         }
 229:../../tmk_core/common/action_util.c ****     }
 230:../../tmk_core/common/action_util.c ****     // add to tail
 231:../../tmk_core/common/action_util.c ****     keyboard_report->keys[cb_tail] = code;
 232:../../tmk_core/common/action_util.c ****     cb_tail = RO_INC(cb_tail);
 233:../../tmk_core/common/action_util.c ****     cb_count++;
 234:../../tmk_core/common/action_util.c **** #else
 235:../../tmk_core/common/action_util.c ****     int8_t i = 0;
 236:../../tmk_core/common/action_util.c ****     int8_t empty = -1;
 237:../../tmk_core/common/action_util.c ****     for (; i < KEYBOARD_REPORT_KEYS; i++) {
 238:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 239:../../tmk_core/common/action_util.c ****             break;
 240:../../tmk_core/common/action_util.c ****         }
 241:../../tmk_core/common/action_util.c ****         if (empty == -1 && keyboard_report->keys[i] == 0) {
 242:../../tmk_core/common/action_util.c ****             empty = i;
 243:../../tmk_core/common/action_util.c ****         }
 244:../../tmk_core/common/action_util.c ****     }
 245:../../tmk_core/common/action_util.c ****     if (i == KEYBOARD_REPORT_KEYS) {
 246:../../tmk_core/common/action_util.c ****         if (empty != -1) {
 247:../../tmk_core/common/action_util.c ****             keyboard_report->keys[empty] = code;
 248:../../tmk_core/common/action_util.c ****         }
 249:../../tmk_core/common/action_util.c ****     }
 250:../../tmk_core/common/action_util.c **** #endif
 251:../../tmk_core/common/action_util.c **** }
 252:../../tmk_core/common/action_util.c **** 
 253:../../tmk_core/common/action_util.c **** static inline void del_key_byte(uint8_t code)
 254:../../tmk_core/common/action_util.c **** {
 255:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 256:../../tmk_core/common/action_util.c ****     uint8_t i = cb_head;
 257:../../tmk_core/common/action_util.c ****     if (cb_count) {
 258:../../tmk_core/common/action_util.c ****         do {
 259:../../tmk_core/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 260:../../tmk_core/common/action_util.c ****                 keyboard_report->keys[i] = 0;
 261:../../tmk_core/common/action_util.c ****                 cb_count--;
 262:../../tmk_core/common/action_util.c ****                 if (cb_count == 0) {
 263:../../tmk_core/common/action_util.c ****                     // reset head and tail
 264:../../tmk_core/common/action_util.c ****                     cb_tail = cb_head = 0;
 265:../../tmk_core/common/action_util.c ****                 }
 266:../../tmk_core/common/action_util.c ****                 if (i == RO_DEC(cb_tail)) {
 267:../../tmk_core/common/action_util.c ****                     // left shift when next to tail
 268:../../tmk_core/common/action_util.c ****                     do {
 269:../../tmk_core/common/action_util.c ****                         cb_tail = RO_DEC(cb_tail);
 270:../../tmk_core/common/action_util.c ****                         if (keyboard_report->keys[RO_DEC(cb_tail)] != 0) {
 271:../../tmk_core/common/action_util.c ****                             break;
 272:../../tmk_core/common/action_util.c ****                         }
 273:../../tmk_core/common/action_util.c ****                     } while (cb_tail != cb_head);
 274:../../tmk_core/common/action_util.c ****                 }
 275:../../tmk_core/common/action_util.c ****                 break;
 276:../../tmk_core/common/action_util.c ****             }
 277:../../tmk_core/common/action_util.c ****             i = RO_INC(i);
 278:../../tmk_core/common/action_util.c ****         } while (i != cb_tail);
 279:../../tmk_core/common/action_util.c ****     }
 280:../../tmk_core/common/action_util.c **** #else
 281:../../tmk_core/common/action_util.c ****     for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
 282:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 283:../../tmk_core/common/action_util.c ****             keyboard_report->keys[i] = 0;
 284:../../tmk_core/common/action_util.c ****         }
 285:../../tmk_core/common/action_util.c ****     }
 286:../../tmk_core/common/action_util.c **** #endif
 287:../../tmk_core/common/action_util.c **** }
 288:../../tmk_core/common/action_util.c **** 
 289:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 290:../../tmk_core/common/action_util.c **** static inline void add_key_bit(uint8_t code)
 291:../../tmk_core/common/action_util.c **** {
 292:../../tmk_core/common/action_util.c ****     if ((code>>3) < KEYBOARD_REPORT_BITS) {
  34               		.loc 1 292 0 is_stmt 1
  35 0010 982F      		mov r25,r24
  36 0012 9695      		lsr r25
  37 0014 9695      		lsr r25
  38 0016 9695      		lsr r25
  39 0018 9F30      		cpi r25,lo8(15)
  40 001a 00F4      		brsh .L3
 293:../../tmk_core/common/action_util.c ****         keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
  41               		.loc 1 293 0
  42 001c E091 0000 		lds r30,keyboard_report
  43 0020 F091 0000 		lds r31,keyboard_report+1
  44 0024 E90F      		add r30,r25
  45 0026 F11D      		adc r31,__zero_reg__
  46 0028 8770      		andi r24,lo8(7)
  47               	.LVL2:
  48 002a 21E0      		ldi r18,lo8(1)
  49 002c 30E0      		ldi r19,0
  50 002e 00C0      		rjmp 2f
  51               		1:
  52 0030 220F      		lsl r18
  53               		2:
  54 0032 8A95      		dec r24
  55 0034 02F4      		brpl 1b
  56 0036 8181      		ldd r24,Z+1
  57 0038 822B      		or r24,r18
  58 003a 8183      		std Z+1,r24
  59 003c 0895      		ret
  60               	.LVL3:
  61               	.L3:
 294:../../tmk_core/common/action_util.c ****     } else {
 295:../../tmk_core/common/action_util.c ****         dprintf("add_key_bit: can't add: %02X\n", code);
  62               		.loc 1 295 0
  63 003e 9091 0000 		lds r25,debug_config
  64 0042 90FF      		sbrs r25,0
  65 0044 00C0      		rjmp .L1
  66 0046 1F92      		push __zero_reg__
  67               	.LCFI0:
  68               		.cfi_def_cfa_offset 3
  69 0048 8F93      		push r24
  70               	.LCFI1:
  71               		.cfi_def_cfa_offset 4
  72 004a 80E0      		ldi r24,lo8(__c.4565)
  73 004c 90E0      		ldi r25,hi8(__c.4565)
  74               	.LVL4:
  75 004e 9F93      		push r25
  76               	.LCFI2:
  77               		.cfi_def_cfa_offset 5
  78               	.LVL5:
  79 0050 8F93      		push r24
  80               	.LCFI3:
  81               		.cfi_def_cfa_offset 6
  82               	.LVL6:
  83 0052 0E94 0000 		call __xprintf
  84               	.LVL7:
  85 0056 0F90      		pop __tmp_reg__
  86 0058 0F90      		pop __tmp_reg__
  87 005a 0F90      		pop __tmp_reg__
  88 005c 0F90      		pop __tmp_reg__
  89               	.LCFI4:
  90               		.cfi_def_cfa_offset 2
  91 005e 0895      		ret
  92               	.LVL8:
  93               	.L2:
  94               	.LBE8:
  95               	.LBE7:
  96               	.LBB9:
  97               	.LBB10:
 238:../../tmk_core/common/action_util.c ****             break;
  98               		.loc 1 238 0
  99 0060 4091 0000 		lds r20,keyboard_report
 100 0064 5091 0000 		lds r21,keyboard_report+1
 101 0068 20E0      		ldi r18,0
 102 006a 30E0      		ldi r19,0
 103 006c 9FEF      		ldi r25,lo8(-1)
 104               	.L7:
 105               	.LVL9:
 106 006e FA01      		movw r30,r20
 107 0070 E20F      		add r30,r18
 108 0072 F31F      		adc r31,r19
 109 0074 6281      		ldd r22,Z+2
 110 0076 6817      		cp r22,r24
 111 0078 01F0      		breq .L1
 241:../../tmk_core/common/action_util.c ****             empty = i;
 112               		.loc 1 241 0
 113 007a 9F3F      		cpi r25,lo8(-1)
 114 007c 01F4      		brne .L5
 115 007e 6111      		cpse r22,__zero_reg__
 116 0080 00C0      		rjmp .L5
 117 0082 922F      		mov r25,r18
 118               	.LVL10:
 119               	.L5:
 120 0084 2F5F      		subi r18,-1
 121 0086 3F4F      		sbci r19,-1
 122               	.LVL11:
 237:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 123               		.loc 1 237 0
 124 0088 2E30      		cpi r18,14
 125 008a 3105      		cpc r19,__zero_reg__
 126 008c 01F4      		brne .L7
 246:../../tmk_core/common/action_util.c ****             keyboard_report->keys[empty] = code;
 127               		.loc 1 246 0
 128 008e 9F3F      		cpi r25,lo8(-1)
 129 0090 01F0      		breq .L1
 247:../../tmk_core/common/action_util.c ****         }
 130               		.loc 1 247 0
 131 0092 FA01      		movw r30,r20
 132 0094 E90F      		add r30,r25
 133 0096 F11D      		adc r31,__zero_reg__
 134 0098 97FD      		sbrc r25,7
 135 009a FA95      		dec r31
 136 009c 8283      		std Z+2,r24
 137 009e 0895      		ret
 138               	.LVL12:
 139               	.L1:
 140 00a0 0895      		ret
 141               	.LBE10:
 142               	.LBE9:
 143               		.cfi_endproc
 144               	.LFE101:
 146               		.section	.text.del_key,"ax",@progbits
 147               	.global	del_key
 149               	del_key:
 150               	.LFB102:
  88:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 151               		.loc 1 88 0
 152               		.cfi_startproc
 153               	.LVL13:
 154               	/* prologue: function */
 155               	/* frame size = 0 */
 156               	/* stack size = 0 */
 157               	.L__stack_usage = 0
  90:../../tmk_core/common/action_util.c ****         del_key_bit(key);
 158               		.loc 1 90 0
 159 0000 9091 0000 		lds r25,keyboard_protocol
 160 0004 9923      		tst r25
 161 0006 01F0      		breq .L21
  90:../../tmk_core/common/action_util.c ****         del_key_bit(key);
 162               		.loc 1 90 0 is_stmt 0 discriminator 1
 163 0008 9091 0000 		lds r25,keyboard_nkro
 164 000c 9923      		tst r25
 165 000e 01F0      		breq .L21
 166               	.LVL14:
 167               	.LBB17:
 168               	.LBB18:
 296:../../tmk_core/common/action_util.c ****     }
 297:../../tmk_core/common/action_util.c **** }
 298:../../tmk_core/common/action_util.c **** 
 299:../../tmk_core/common/action_util.c **** static inline void del_key_bit(uint8_t code)
 300:../../tmk_core/common/action_util.c **** {
 301:../../tmk_core/common/action_util.c ****     if ((code>>3) < KEYBOARD_REPORT_BITS) {
 169               		.loc 1 301 0 is_stmt 1
 170 0010 982F      		mov r25,r24
 171 0012 9695      		lsr r25
 172 0014 9695      		lsr r25
 173 0016 9695      		lsr r25
 174 0018 9F30      		cpi r25,lo8(15)
 175 001a 00F4      		brsh .L22
 302:../../tmk_core/common/action_util.c ****         keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
 176               		.loc 1 302 0
 177 001c E091 0000 		lds r30,keyboard_report
 178 0020 F091 0000 		lds r31,keyboard_report+1
 179 0024 E90F      		add r30,r25
 180 0026 F11D      		adc r31,__zero_reg__
 181 0028 8770      		andi r24,lo8(7)
 182               	.LVL15:
 183 002a 21E0      		ldi r18,lo8(1)
 184 002c 30E0      		ldi r19,0
 185 002e 00C0      		rjmp 2f
 186               		1:
 187 0030 220F      		lsl r18
 188               		2:
 189 0032 8A95      		dec r24
 190 0034 02F4      		brpl 1b
 191 0036 2095      		com r18
 192 0038 8181      		ldd r24,Z+1
 193 003a 2823      		and r18,r24
 194 003c 2183      		std Z+1,r18
 195 003e 0895      		ret
 196               	.LVL16:
 197               	.L22:
 303:../../tmk_core/common/action_util.c ****     } else {
 304:../../tmk_core/common/action_util.c ****         dprintf("del_key_bit: can't del: %02X\n", code);
 198               		.loc 1 304 0
 199 0040 9091 0000 		lds r25,debug_config
 200 0044 90FF      		sbrs r25,0
 201 0046 00C0      		rjmp .L20
 202 0048 1F92      		push __zero_reg__
 203               	.LCFI5:
 204               		.cfi_def_cfa_offset 3
 205 004a 8F93      		push r24
 206               	.LCFI6:
 207               		.cfi_def_cfa_offset 4
 208 004c 80E0      		ldi r24,lo8(__c.4570)
 209 004e 90E0      		ldi r25,hi8(__c.4570)
 210               	.LVL17:
 211 0050 9F93      		push r25
 212               	.LCFI7:
 213               		.cfi_def_cfa_offset 5
 214               	.LVL18:
 215 0052 8F93      		push r24
 216               	.LCFI8:
 217               		.cfi_def_cfa_offset 6
 218               	.LVL19:
 219 0054 0E94 0000 		call __xprintf
 220               	.LVL20:
 221 0058 0F90      		pop __tmp_reg__
 222 005a 0F90      		pop __tmp_reg__
 223 005c 0F90      		pop __tmp_reg__
 224 005e 0F90      		pop __tmp_reg__
 225               	.LCFI9:
 226               		.cfi_def_cfa_offset 2
 227 0060 0895      		ret
 228               	.LVL21:
 229               	.L21:
 230               	.LBE18:
 231               	.LBE17:
 232               	.LBB19:
 233               	.LBB20:
 282:../../tmk_core/common/action_util.c ****             keyboard_report->keys[i] = 0;
 234               		.loc 1 282 0
 235 0062 4091 0000 		lds r20,keyboard_report
 236 0066 5091 0000 		lds r21,keyboard_report+1
 237 006a 20E0      		ldi r18,0
 238 006c 30E0      		ldi r19,0
 239               	.L27:
 240               	.LVL22:
 241 006e FA01      		movw r30,r20
 242 0070 E20F      		add r30,r18
 243 0072 F31F      		adc r31,r19
 244 0074 9281      		ldd r25,Z+2
 245 0076 9813      		cpse r25,r24
 246 0078 00C0      		rjmp .L25
 283:../../tmk_core/common/action_util.c ****         }
 247               		.loc 1 283 0
 248 007a 1282      		std Z+2,__zero_reg__
 249               	.L25:
 250               	.LVL23:
 251 007c 2F5F      		subi r18,-1
 252 007e 3F4F      		sbci r19,-1
 253               	.LVL24:
 281:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 254               		.loc 1 281 0
 255 0080 2E30      		cpi r18,14
 256 0082 3105      		cpc r19,__zero_reg__
 257 0084 01F4      		brne .L27
 258               	.LVL25:
 259               	.L20:
 260 0086 0895      		ret
 261               	.LBE20:
 262               	.LBE19:
 263               		.cfi_endproc
 264               	.LFE102:
 266               		.section	.text.clear_keys,"ax",@progbits
 267               	.global	clear_keys
 269               	clear_keys:
 270               	.LFB103:
  99:../../tmk_core/common/action_util.c ****     // not clear mods
 271               		.loc 1 99 0
 272               		.cfi_startproc
 273               	/* prologue: function */
 274               	/* frame size = 0 */
 275               	/* stack size = 0 */
 276               	.L__stack_usage = 0
 277               	.LVL26:
  99:../../tmk_core/common/action_util.c ****     // not clear mods
 278               		.loc 1 99 0
 279 0000 81E0      		ldi r24,lo8(1)
 280 0002 90E0      		ldi r25,0
 281               	.LVL27:
 282               	.L39:
 283               	.LBB21:
 102:../../tmk_core/common/action_util.c ****     }
 284               		.loc 1 102 0 discriminator 2
 285 0004 E091 0000 		lds r30,keyboard_report
 286 0008 F091 0000 		lds r31,keyboard_report+1
 287 000c E80F      		add r30,r24
 288 000e F91F      		adc r31,r25
 289 0010 1082      		st Z,__zero_reg__
 290               	.LVL28:
 291 0012 0196      		adiw r24,1
 292               	.LVL29:
 101:../../tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 293               		.loc 1 101 0 discriminator 2
 294 0014 8031      		cpi r24,16
 295 0016 9105      		cpc r25,__zero_reg__
 296 0018 01F4      		brne .L39
 297               	/* epilogue start */
 298               	.LBE21:
 104:../../tmk_core/common/action_util.c **** 
 299               		.loc 1 104 0
 300 001a 0895      		ret
 301               		.cfi_endproc
 302               	.LFE103:
 304               		.section	.text.get_mods,"ax",@progbits
 305               	.global	get_mods
 307               	get_mods:
 308               	.LFB104:
 108:../../tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 309               		.loc 1 108 0
 310               		.cfi_startproc
 311               	/* prologue: function */
 312               	/* frame size = 0 */
 313               	/* stack size = 0 */
 314               	.L__stack_usage = 0
 108:../../tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 315               		.loc 1 108 0
 316 0000 8091 0000 		lds r24,real_mods
 317 0004 0895      		ret
 318               		.cfi_endproc
 319               	.LFE104:
 321               		.section	.text.add_mods,"ax",@progbits
 322               	.global	add_mods
 324               	add_mods:
 325               	.LFB105:
 109:../../tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 326               		.loc 1 109 0
 327               		.cfi_startproc
 328               	.LVL30:
 329               	/* prologue: function */
 330               	/* frame size = 0 */
 331               	/* stack size = 0 */
 332               	.L__stack_usage = 0
 109:../../tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 333               		.loc 1 109 0
 334 0000 9091 0000 		lds r25,real_mods
 335 0004 982B      		or r25,r24
 336 0006 9093 0000 		sts real_mods,r25
 337 000a 0895      		ret
 338               		.cfi_endproc
 339               	.LFE105:
 341               		.section	.text.del_mods,"ax",@progbits
 342               	.global	del_mods
 344               	del_mods:
 345               	.LFB106:
 110:../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 346               		.loc 1 110 0
 347               		.cfi_startproc
 348               	.LVL31:
 349               	/* prologue: function */
 350               	/* frame size = 0 */
 351               	/* stack size = 0 */
 352               	.L__stack_usage = 0
 110:../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 353               		.loc 1 110 0
 354 0000 8095      		com r24
 355               	.LVL32:
 356 0002 9091 0000 		lds r25,real_mods
 357 0006 9823      		and r25,r24
 358 0008 9093 0000 		sts real_mods,r25
 359 000c 0895      		ret
 360               		.cfi_endproc
 361               	.LFE106:
 363               		.section	.text.set_mods,"ax",@progbits
 364               	.global	set_mods
 366               	set_mods:
 367               	.LFB107:
 111:../../tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 368               		.loc 1 111 0
 369               		.cfi_startproc
 370               	.LVL33:
 371               	/* prologue: function */
 372               	/* frame size = 0 */
 373               	/* stack size = 0 */
 374               	.L__stack_usage = 0
 111:../../tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 375               		.loc 1 111 0
 376 0000 8093 0000 		sts real_mods,r24
 377 0004 0895      		ret
 378               		.cfi_endproc
 379               	.LFE107:
 381               		.section	.text.clear_mods,"ax",@progbits
 382               	.global	clear_mods
 384               	clear_mods:
 385               	.LFB108:
 112:../../tmk_core/common/action_util.c **** 
 386               		.loc 1 112 0
 387               		.cfi_startproc
 388               	/* prologue: function */
 389               	/* frame size = 0 */
 390               	/* stack size = 0 */
 391               	.L__stack_usage = 0
 112:../../tmk_core/common/action_util.c **** 
 392               		.loc 1 112 0
 393 0000 1092 0000 		sts real_mods,__zero_reg__
 394 0004 0895      		ret
 395               		.cfi_endproc
 396               	.LFE108:
 398               		.section	.text.get_weak_mods,"ax",@progbits
 399               	.global	get_weak_mods
 401               	get_weak_mods:
 402               	.LFB109:
 115:../../tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 403               		.loc 1 115 0
 404               		.cfi_startproc
 405               	/* prologue: function */
 406               	/* frame size = 0 */
 407               	/* stack size = 0 */
 408               	.L__stack_usage = 0
 115:../../tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 409               		.loc 1 115 0
 410 0000 8091 0000 		lds r24,weak_mods
 411 0004 0895      		ret
 412               		.cfi_endproc
 413               	.LFE109:
 415               		.section	.text.add_weak_mods,"ax",@progbits
 416               	.global	add_weak_mods
 418               	add_weak_mods:
 419               	.LFB110:
 116:../../tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 420               		.loc 1 116 0
 421               		.cfi_startproc
 422               	.LVL34:
 423               	/* prologue: function */
 424               	/* frame size = 0 */
 425               	/* stack size = 0 */
 426               	.L__stack_usage = 0
 116:../../tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 427               		.loc 1 116 0
 428 0000 9091 0000 		lds r25,weak_mods
 429 0004 982B      		or r25,r24
 430 0006 9093 0000 		sts weak_mods,r25
 431 000a 0895      		ret
 432               		.cfi_endproc
 433               	.LFE110:
 435               		.section	.text.del_weak_mods,"ax",@progbits
 436               	.global	del_weak_mods
 438               	del_weak_mods:
 439               	.LFB111:
 117:../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 440               		.loc 1 117 0
 441               		.cfi_startproc
 442               	.LVL35:
 443               	/* prologue: function */
 444               	/* frame size = 0 */
 445               	/* stack size = 0 */
 446               	.L__stack_usage = 0
 117:../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 447               		.loc 1 117 0
 448 0000 8095      		com r24
 449               	.LVL36:
 450 0002 9091 0000 		lds r25,weak_mods
 451 0006 9823      		and r25,r24
 452 0008 9093 0000 		sts weak_mods,r25
 453 000c 0895      		ret
 454               		.cfi_endproc
 455               	.LFE111:
 457               		.section	.text.set_weak_mods,"ax",@progbits
 458               	.global	set_weak_mods
 460               	set_weak_mods:
 461               	.LFB112:
 118:../../tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 462               		.loc 1 118 0
 463               		.cfi_startproc
 464               	.LVL37:
 465               	/* prologue: function */
 466               	/* frame size = 0 */
 467               	/* stack size = 0 */
 468               	.L__stack_usage = 0
 118:../../tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 469               		.loc 1 118 0
 470 0000 8093 0000 		sts weak_mods,r24
 471 0004 0895      		ret
 472               		.cfi_endproc
 473               	.LFE112:
 475               		.section	.text.clear_weak_mods,"ax",@progbits
 476               	.global	clear_weak_mods
 478               	clear_weak_mods:
 479               	.LFB113:
 119:../../tmk_core/common/action_util.c **** 
 480               		.loc 1 119 0
 481               		.cfi_startproc
 482               	/* prologue: function */
 483               	/* frame size = 0 */
 484               	/* stack size = 0 */
 485               	.L__stack_usage = 0
 119:../../tmk_core/common/action_util.c **** 
 486               		.loc 1 119 0
 487 0000 1092 0000 		sts weak_mods,__zero_reg__
 488 0004 0895      		ret
 489               		.cfi_endproc
 490               	.LFE113:
 492               		.section	.text.set_oneshot_mods,"ax",@progbits
 493               	.global	set_oneshot_mods
 495               	set_oneshot_mods:
 496               	.LFB114:
 124:../../tmk_core/common/action_util.c ****     oneshot_mods = mods;
 497               		.loc 1 124 0
 498               		.cfi_startproc
 499               	.LVL38:
 500               	/* prologue: function */
 501               	/* frame size = 0 */
 502               	/* stack size = 0 */
 503               	.L__stack_usage = 0
 125:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 504               		.loc 1 125 0
 505 0000 8093 0000 		sts oneshot_mods,r24
 127:../../tmk_core/common/action_util.c **** #endif
 506               		.loc 1 127 0
 507 0004 0E94 0000 		call timer_read
 508               	.LVL39:
 509 0008 9093 0000 		sts oneshot_time+1,r25
 510 000c 8093 0000 		sts oneshot_time,r24
 511 0010 0895      		ret
 512               		.cfi_endproc
 513               	.LFE114:
 515               		.section	.text.clear_oneshot_mods,"ax",@progbits
 516               	.global	clear_oneshot_mods
 518               	clear_oneshot_mods:
 519               	.LFB115:
 131:../../tmk_core/common/action_util.c ****     oneshot_mods = 0;
 520               		.loc 1 131 0
 521               		.cfi_startproc
 522               	/* prologue: function */
 523               	/* frame size = 0 */
 524               	/* stack size = 0 */
 525               	.L__stack_usage = 0
 132:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 526               		.loc 1 132 0
 527 0000 1092 0000 		sts oneshot_mods,__zero_reg__
 134:../../tmk_core/common/action_util.c **** #endif
 528               		.loc 1 134 0
 529 0004 1092 0000 		sts oneshot_time+1,__zero_reg__
 530 0008 1092 0000 		sts oneshot_time,__zero_reg__
 531 000c 0895      		ret
 532               		.cfi_endproc
 533               	.LFE115:
 535               		.section	.text.has_anykey,"ax",@progbits
 536               	.global	has_anykey
 538               	has_anykey:
 539               	.LFB116:
 146:../../tmk_core/common/action_util.c ****     uint8_t cnt = 0;
 540               		.loc 1 146 0
 541               		.cfi_startproc
 542               	/* prologue: function */
 543               	/* frame size = 0 */
 544               	/* stack size = 0 */
 545               	.L__stack_usage = 0
 546               	.LVL40:
 547               	.LBB22:
 149:../../tmk_core/common/action_util.c ****             cnt++;
 548               		.loc 1 149 0
 549 0000 4091 0000 		lds r20,keyboard_report
 550 0004 5091 0000 		lds r21,keyboard_report+1
 551 0008 20E0      		ldi r18,0
 552 000a 30E0      		ldi r19,0
 553               	.LBE22:
 147:../../tmk_core/common/action_util.c ****     for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 554               		.loc 1 147 0
 555 000c 80E0      		ldi r24,0
 556               	.LVL41:
 557               	.L55:
 558 000e FA01      		movw r30,r20
 559 0010 E20F      		add r30,r18
 560 0012 F31F      		adc r31,r19
 561               	.LBB23:
 149:../../tmk_core/common/action_util.c ****             cnt++;
 562               		.loc 1 149 0
 563 0014 9181      		ldd r25,Z+1
 564 0016 9111      		cpse r25,__zero_reg__
 150:../../tmk_core/common/action_util.c ****     }
 565               		.loc 1 150 0
 566 0018 8F5F      		subi r24,lo8(-(1))
 567               	.LVL42:
 568               	.L53:
 569 001a 2F5F      		subi r18,-1
 570 001c 3F4F      		sbci r19,-1
 571               	.LVL43:
 148:../../tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 572               		.loc 1 148 0
 573 001e 2F30      		cpi r18,15
 574 0020 3105      		cpc r19,__zero_reg__
 575 0022 01F4      		brne .L55
 576               	/* epilogue start */
 577               	.LBE23:
 153:../../tmk_core/common/action_util.c **** 
 578               		.loc 1 153 0
 579 0024 0895      		ret
 580               		.cfi_endproc
 581               	.LFE116:
 583               		.section	.text.send_keyboard_report,"ax",@progbits
 584               	.global	send_keyboard_report
 586               	send_keyboard_report:
 587               	.LFB100:
  55:../../tmk_core/common/action_util.c ****     keyboard_report->mods  = real_mods;
 588               		.loc 1 55 0
 589               		.cfi_startproc
 590               	/* prologue: function */
 591               	/* frame size = 0 */
 592               	/* stack size = 0 */
 593               	.L__stack_usage = 0
  56:../../tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 594               		.loc 1 56 0
 595 0000 E091 0000 		lds r30,keyboard_report
 596 0004 F091 0000 		lds r31,keyboard_report+1
 597 0008 8091 0000 		lds r24,real_mods
 598 000c 8083      		st Z,r24
  57:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 599               		.loc 1 57 0
 600 000e E091 0000 		lds r30,keyboard_report
 601 0012 F091 0000 		lds r31,keyboard_report+1
 602 0016 8081      		ld r24,Z
 603 0018 9091 0000 		lds r25,weak_mods
 604 001c 892B      		or r24,r25
 605 001e 8083      		st Z,r24
  59:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 606               		.loc 1 59 0
 607 0020 8091 0000 		lds r24,oneshot_mods
 608 0024 8823      		tst r24
 609 0026 01F4      		brne .+2
 610 0028 00C0      		rjmp .L61
  61:../../tmk_core/common/action_util.c ****             dprintf("Oneshot: timeout\n");
 611               		.loc 1 61 0
 612 002a 0E94 0000 		call timer_read
 613               	.LVL44:
 614 002e 2091 0000 		lds r18,oneshot_time
 615 0032 3091 0000 		lds r19,oneshot_time+1
 616 0036 8217      		cp r24,r18
 617 0038 9307      		cpc r25,r19
 618 003a 00F0      		brlo .L62
  61:../../tmk_core/common/action_util.c ****             dprintf("Oneshot: timeout\n");
 619               		.loc 1 61 0 is_stmt 0 discriminator 1
 620 003c 0E94 0000 		call timer_read
 621               	.LVL45:
 622 0040 2091 0000 		lds r18,oneshot_time
 623 0044 3091 0000 		lds r19,oneshot_time+1
 624 0048 821B      		sub r24,r18
 625 004a 930B      		sbc r25,r19
 626 004c 8C32      		cpi r24,44
 627 004e 9140      		sbci r25,1
 628 0050 00F4      		brsh .L72
 629 0052 00C0      		rjmp .L66
 630               	.L62:
  61:../../tmk_core/common/action_util.c ****             dprintf("Oneshot: timeout\n");
 631               		.loc 1 61 0 discriminator 2
 632 0054 0E94 0000 		call timer_read
 633               	.LVL46:
 634 0058 2091 0000 		lds r18,oneshot_time
 635 005c 3091 0000 		lds r19,oneshot_time+1
 636 0060 2095      		com r18
 637 0062 3095      		com r19
 638 0064 280F      		add r18,r24
 639 0066 391F      		adc r19,r25
 640 0068 2C32      		cpi r18,44
 641 006a 3140      		sbci r19,1
 642 006c 00F0      		brlo .L66
 643               	.L72:
  62:../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
 644               		.loc 1 62 0 is_stmt 1
 645 006e 8091 0000 		lds r24,debug_config
 646 0072 80FF      		sbrs r24,0
 647 0074 00C0      		rjmp .L67
  62:../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
 648               		.loc 1 62 0 is_stmt 0 discriminator 1
 649 0076 80E0      		ldi r24,lo8(__c.4478)
 650 0078 90E0      		ldi r25,hi8(__c.4478)
 651 007a 9F93      		push r25
 652               	.LCFI10:
 653               		.cfi_def_cfa_offset 3
 654 007c 8F93      		push r24
 655               	.LCFI11:
 656               		.cfi_def_cfa_offset 4
 657 007e 0E94 0000 		call __xprintf
 658               	.LVL47:
 659 0082 0F90      		pop __tmp_reg__
 660 0084 0F90      		pop __tmp_reg__
 661               	.LCFI12:
 662               		.cfi_def_cfa_offset 2
 663               	.L67:
  63:../../tmk_core/common/action_util.c ****         }
 664               		.loc 1 63 0 is_stmt 1
 665 0086 0E94 0000 		call clear_oneshot_mods
 666               	.LVL48:
 667               	.L66:
  66:../../tmk_core/common/action_util.c ****         if (has_anykey()) {
 668               		.loc 1 66 0
 669 008a E091 0000 		lds r30,keyboard_report
 670 008e F091 0000 		lds r31,keyboard_report+1
 671 0092 8081      		ld r24,Z
 672 0094 9091 0000 		lds r25,oneshot_mods
 673 0098 892B      		or r24,r25
 674 009a 8083      		st Z,r24
  67:../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
 675               		.loc 1 67 0
 676 009c 0E94 0000 		call has_anykey
 677               	.LVL49:
 678 00a0 8111      		cpse r24,__zero_reg__
  68:../../tmk_core/common/action_util.c ****         }
 679               		.loc 1 68 0
 680 00a2 0E94 0000 		call clear_oneshot_mods
 681               	.LVL50:
 682               	.L61:
  72:../../tmk_core/common/action_util.c **** }
 683               		.loc 1 72 0
 684 00a6 8091 0000 		lds r24,keyboard_report
 685 00aa 9091 0000 		lds r25,keyboard_report+1
 686 00ae 0C94 0000 		jmp host_keyboard_send
 687               	.LVL51:
 688               		.cfi_endproc
 689               	.LFE100:
 691               		.section	.text.has_anymod,"ax",@progbits
 692               	.global	has_anymod
 694               	has_anymod:
 695               	.LFB117:
 156:../../tmk_core/common/action_util.c ****     return bitpop(real_mods);
 696               		.loc 1 156 0
 697               		.cfi_startproc
 698               	/* prologue: function */
 699               	/* frame size = 0 */
 700               	/* stack size = 0 */
 701               	.L__stack_usage = 0
 157:../../tmk_core/common/action_util.c **** }
 702               		.loc 1 157 0
 703 0000 8091 0000 		lds r24,real_mods
 704 0004 0C94 0000 		jmp bitpop
 705               	.LVL52:
 706               		.cfi_endproc
 707               	.LFE117:
 709               		.section	.text.get_first_key,"ax",@progbits
 710               	.global	get_first_key
 712               	get_first_key:
 713               	.LFB118:
 161:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 714               		.loc 1 161 0
 715               		.cfi_startproc
 716 0000 CF93      		push r28
 717               	.LCFI13:
 718               		.cfi_def_cfa_offset 3
 719               		.cfi_offset 28, -2
 720 0002 DF93      		push r29
 721               	.LCFI14:
 722               		.cfi_def_cfa_offset 4
 723               		.cfi_offset 29, -3
 724               	/* prologue: function */
 725               	/* frame size = 0 */
 726               	/* stack size = 2 */
 727               	.L__stack_usage = 2
 163:../../tmk_core/common/action_util.c ****         uint8_t i = 0;
 728               		.loc 1 163 0
 729 0004 8091 0000 		lds r24,keyboard_protocol
 730 0008 E091 0000 		lds r30,keyboard_report
 731 000c F091 0000 		lds r31,keyboard_report+1
 732 0010 8823      		tst r24
 733 0012 01F0      		breq .L79
 163:../../tmk_core/common/action_util.c ****         uint8_t i = 0;
 734               		.loc 1 163 0 is_stmt 0 discriminator 1
 735 0014 8091 0000 		lds r24,keyboard_nkro
 736 0018 8823      		tst r24
 737 001a 01F0      		breq .L79
 738               	.LBB24:
 165:../../tmk_core/common/action_util.c ****             ;
 739               		.loc 1 165 0 is_stmt 1
 740 001c 20E0      		ldi r18,0
 741 001e 30E0      		ldi r19,0
 742               	.L80:
 743 0020 C22F      		mov r28,r18
 744               	.LVL53:
 745 0022 DF01      		movw r26,r30
 746 0024 A20F      		add r26,r18
 747 0026 B31F      		adc r27,r19
 165:../../tmk_core/common/action_util.c ****             ;
 748               		.loc 1 165 0 is_stmt 0 discriminator 2
 749 0028 1196      		adiw r26,1
 750 002a 8C91      		ld r24,X
 751 002c 8111      		cpse r24,__zero_reg__
 752 002e 00C0      		rjmp .L81
 753               	.LVL54:
 754 0030 2F5F      		subi r18,-1
 755 0032 3F4F      		sbci r19,-1
 756               	.LVL55:
 165:../../tmk_core/common/action_util.c ****             ;
 757               		.loc 1 165 0 discriminator 1
 758 0034 2F30      		cpi r18,15
 759 0036 3105      		cpc r19,__zero_reg__
 760 0038 01F4      		brne .L80
 761 003a CFE0      		ldi r28,lo8(15)
 762               	.LVL56:
 763               	.L81:
 167:../../tmk_core/common/action_util.c ****     }
 764               		.loc 1 167 0 is_stmt 1
 765 003c D0E0      		ldi r29,0
 766 003e EC0F      		add r30,r28
 767 0040 FD1F      		adc r31,r29
 768 0042 8181      		ldd r24,Z+1
 769 0044 0E94 0000 		call biton
 770               	.LVL57:
 771 0048 93E0      		ldi r25,3
 772               		1:
 773 004a CC0F      		lsl r28
 774 004c DD1F      		rol r29
 775 004e 9A95      		dec r25
 776 0050 01F4      		brne 1b
 777 0052 8C2B      		or r24,r28
 778 0054 00C0      		rjmp .L83
 779               	.L79:
 780               	.LBE24:
 180:../../tmk_core/common/action_util.c **** #endif
 781               		.loc 1 180 0
 782 0056 8281      		ldd r24,Z+2
 783               	.L83:
 784               	/* epilogue start */
 182:../../tmk_core/common/action_util.c **** 
 785               		.loc 1 182 0
 786 0058 DF91      		pop r29
 787 005a CF91      		pop r28
 788 005c 0895      		ret
 789               		.cfi_endproc
 790               	.LFE118:
 792               		.section	.progmem.data.__c.4570,"a",@progbits
 795               	__c.4570:
 796 0000 6465 6C5F 		.string	"del_key_bit: can't del: %02X\n"
 796      6B65 795F 
 796      6269 743A 
 796      2063 616E 
 796      2774 2064 
 797               		.section	.progmem.data.__c.4565,"a",@progbits
 800               	__c.4565:
 801 0000 6164 645F 		.string	"add_key_bit: can't add: %02X\n"
 801      6B65 795F 
 801      6269 743A 
 801      2063 616E 
 801      2774 2061 
 802               		.section	.progmem.data.__c.4478,"a",@progbits
 805               	__c.4478:
 806 0000 4F6E 6573 		.string	"Oneshot: timeout\n"
 806      686F 743A 
 806      2074 696D 
 806      656F 7574 
 806      0A00 
 807               		.section	.bss.oneshot_time,"aw",@nobits
 810               	oneshot_time:
 811 0000 0000      		.zero	2
 812               		.section	.bss.oneshot_mods,"aw",@nobits
 815               	oneshot_mods:
 816 0000 00        		.zero	1
 817               	.global	keyboard_report
 818               		.section	.data.keyboard_report,"aw",@progbits
 821               	keyboard_report:
 822 0000 0000      		.word	__compound_literal.0
 823               		.section	.bss.__compound_literal.0,"aw",@nobits
 826               	__compound_literal.0:
 827 0000 0000 0000 		.zero	16
 827      0000 0000 
 827      0000 0000 
 827      0000 0000 
 828               		.section	.bss.weak_mods,"aw",@nobits
 831               	weak_mods:
 832 0000 00        		.zero	1
 833               		.section	.bss.real_mods,"aw",@nobits
 836               	real_mods:
 837 0000 00        		.zero	1
 838               		.text
 839               	.Letext0:
 840               		.file 2 "/usr/lib/avr/include/stdint.h"
 841               		.file 3 "../../tmk_core/common/report.h"
 842               		.file 4 "../../tmk_core/common/debug.h"
 843               		.file 5 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 844               		.file 6 "../../tmk_core/common/host.h"
 845               		.file 7 "../../tmk_core/common/avr/xprintf.h"
 846               		.file 8 "../../tmk_core/common/util.h"
 847               		.file 9 "../../tmk_core/common/timer.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_util.c
     /tmp/cc5ndrG6.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc5ndrG6.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc5ndrG6.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc5ndrG6.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc5ndrG6.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc5ndrG6.s:13     .text.add_key:0000000000000000 add_key
     /tmp/cc5ndrG6.s:821    .data.keyboard_report:0000000000000000 keyboard_report
     /tmp/cc5ndrG6.s:800    .progmem.data.__c.4565:0000000000000000 __c.4565
     /tmp/cc5ndrG6.s:149    .text.del_key:0000000000000000 del_key
     /tmp/cc5ndrG6.s:795    .progmem.data.__c.4570:0000000000000000 __c.4570
     /tmp/cc5ndrG6.s:269    .text.clear_keys:0000000000000000 clear_keys
     /tmp/cc5ndrG6.s:307    .text.get_mods:0000000000000000 get_mods
     /tmp/cc5ndrG6.s:836    .bss.real_mods:0000000000000000 real_mods
     /tmp/cc5ndrG6.s:324    .text.add_mods:0000000000000000 add_mods
     /tmp/cc5ndrG6.s:344    .text.del_mods:0000000000000000 del_mods
     /tmp/cc5ndrG6.s:366    .text.set_mods:0000000000000000 set_mods
     /tmp/cc5ndrG6.s:384    .text.clear_mods:0000000000000000 clear_mods
     /tmp/cc5ndrG6.s:401    .text.get_weak_mods:0000000000000000 get_weak_mods
     /tmp/cc5ndrG6.s:831    .bss.weak_mods:0000000000000000 weak_mods
     /tmp/cc5ndrG6.s:418    .text.add_weak_mods:0000000000000000 add_weak_mods
     /tmp/cc5ndrG6.s:438    .text.del_weak_mods:0000000000000000 del_weak_mods
     /tmp/cc5ndrG6.s:460    .text.set_weak_mods:0000000000000000 set_weak_mods
     /tmp/cc5ndrG6.s:478    .text.clear_weak_mods:0000000000000000 clear_weak_mods
     /tmp/cc5ndrG6.s:495    .text.set_oneshot_mods:0000000000000000 set_oneshot_mods
     /tmp/cc5ndrG6.s:815    .bss.oneshot_mods:0000000000000000 oneshot_mods
     /tmp/cc5ndrG6.s:810    .bss.oneshot_time:0000000000000000 oneshot_time
     /tmp/cc5ndrG6.s:518    .text.clear_oneshot_mods:0000000000000000 clear_oneshot_mods
     /tmp/cc5ndrG6.s:538    .text.has_anykey:0000000000000000 has_anykey
     /tmp/cc5ndrG6.s:586    .text.send_keyboard_report:0000000000000000 send_keyboard_report
     /tmp/cc5ndrG6.s:805    .progmem.data.__c.4478:0000000000000000 __c.4478
     /tmp/cc5ndrG6.s:694    .text.has_anymod:0000000000000000 has_anymod
     /tmp/cc5ndrG6.s:712    .text.get_first_key:0000000000000000 get_first_key
     /tmp/cc5ndrG6.s:826    .bss.__compound_literal.0:0000000000000000 __compound_literal.0

UNDEFINED SYMBOLS
keyboard_protocol
keyboard_nkro
debug_config
__xprintf
timer_read
host_keyboard_send
bitpop
biton
__do_copy_data
__do_clear_bss
