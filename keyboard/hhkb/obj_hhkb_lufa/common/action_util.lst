   1               		.file	"action_util.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.add_key,"ax",@progbits
  11               	.global	add_key
  13               	add_key:
  14               	.LFB101:
  15               		.file 1 "../../tmk_core/common/action_util.c"
   1:../../tmk_core/common/action_util.c **** /*
   2:../../tmk_core/common/action_util.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/action_util.c **** 
   4:../../tmk_core/common/action_util.c **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/action_util.c **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/action_util.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/action_util.c **** (at your option) any later version.
   8:../../tmk_core/common/action_util.c **** 
   9:../../tmk_core/common/action_util.c **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/action_util.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/action_util.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/action_util.c **** GNU General Public License for more details.
  13:../../tmk_core/common/action_util.c **** 
  14:../../tmk_core/common/action_util.c **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/action_util.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/action_util.c **** */
  17:../../tmk_core/common/action_util.c **** #include "host.h"
  18:../../tmk_core/common/action_util.c **** #include "report.h"
  19:../../tmk_core/common/action_util.c **** #include "debug.h"
  20:../../tmk_core/common/action_util.c **** #include "action_util.h"
  21:../../tmk_core/common/action_util.c **** #include "timer.h"
  22:../../tmk_core/common/action_util.c **** 
  23:../../tmk_core/common/action_util.c **** static inline void add_key_byte(uint8_t code);
  24:../../tmk_core/common/action_util.c **** static inline void del_key_byte(uint8_t code);
  25:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  26:../../tmk_core/common/action_util.c **** static inline void add_key_bit(uint8_t code);
  27:../../tmk_core/common/action_util.c **** static inline void del_key_bit(uint8_t code);
  28:../../tmk_core/common/action_util.c **** #endif
  29:../../tmk_core/common/action_util.c **** 
  30:../../tmk_core/common/action_util.c **** static uint8_t real_mods = 0;
  31:../../tmk_core/common/action_util.c **** static uint8_t weak_mods = 0;
  32:../../tmk_core/common/action_util.c **** 
  33:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
  34:../../tmk_core/common/action_util.c **** #define RO_ADD(a, b) ((a + b) % KEYBOARD_REPORT_KEYS)
  35:../../tmk_core/common/action_util.c **** #define RO_SUB(a, b) ((a - b + KEYBOARD_REPORT_KEYS) % KEYBOARD_REPORT_KEYS)
  36:../../tmk_core/common/action_util.c **** #define RO_INC(a) RO_ADD(a, 1)
  37:../../tmk_core/common/action_util.c **** #define RO_DEC(a) RO_SUB(a, 1)
  38:../../tmk_core/common/action_util.c **** static int8_t cb_head = 0;
  39:../../tmk_core/common/action_util.c **** static int8_t cb_tail = 0;
  40:../../tmk_core/common/action_util.c **** static int8_t cb_count = 0;
  41:../../tmk_core/common/action_util.c **** #endif
  42:../../tmk_core/common/action_util.c **** 
  43:../../tmk_core/common/action_util.c **** // TODO: pointer variable is not needed
  44:../../tmk_core/common/action_util.c **** //report_keyboard_t keyboard_report = {};
  45:../../tmk_core/common/action_util.c **** report_keyboard_t *keyboard_report = &(report_keyboard_t){};
  46:../../tmk_core/common/action_util.c **** 
  47:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  48:../../tmk_core/common/action_util.c **** static int8_t oneshot_mods = 0;
  49:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  50:../../tmk_core/common/action_util.c **** static int16_t oneshot_time = 0;
  51:../../tmk_core/common/action_util.c **** #endif
  52:../../tmk_core/common/action_util.c **** #endif
  53:../../tmk_core/common/action_util.c **** 
  54:../../tmk_core/common/action_util.c **** 
  55:../../tmk_core/common/action_util.c **** void send_keyboard_report(void) {
  56:../../tmk_core/common/action_util.c ****     keyboard_report->mods  = real_mods;
  57:../../tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
  58:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  59:../../tmk_core/common/action_util.c ****     if (oneshot_mods) {
  60:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  61:../../tmk_core/common/action_util.c ****         if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
  62:../../tmk_core/common/action_util.c ****             dprintf("Oneshot: timeout\n");
  63:../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
  64:../../tmk_core/common/action_util.c ****         }
  65:../../tmk_core/common/action_util.c **** #endif
  66:../../tmk_core/common/action_util.c ****         keyboard_report->mods |= oneshot_mods;
  67:../../tmk_core/common/action_util.c ****         if (has_anykey()) {
  68:../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
  69:../../tmk_core/common/action_util.c ****         }
  70:../../tmk_core/common/action_util.c ****     }
  71:../../tmk_core/common/action_util.c **** #endif
  72:../../tmk_core/common/action_util.c ****     host_keyboard_send(keyboard_report);
  73:../../tmk_core/common/action_util.c **** }
  74:../../tmk_core/common/action_util.c **** 
  75:../../tmk_core/common/action_util.c **** /* key */
  76:../../tmk_core/common/action_util.c **** void add_key(uint8_t key)
  77:../../tmk_core/common/action_util.c **** {
  16               		.loc 1 77 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  78:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  79:../../tmk_core/common/action_util.c ****     if (keyboard_protocol && keyboard_nkro) {
  23               		.loc 1 79 0
  24 0000 9091 0000 		lds r25,keyboard_protocol
  25 0004 9923      		tst r25
  26 0006 01F0      		breq .L2
  27               		.loc 1 79 0 is_stmt 0 discriminator 1
  28 0008 9091 0000 		lds r25,keyboard_nkro
  29 000c 9111      		cpse r25,__zero_reg__
  30 000e 00C0      		rjmp .L3
  31               	.L2:
  32               	.LBB7:
  33               	.LBB8:
  80:../../tmk_core/common/action_util.c ****         add_key_bit(key);
  81:../../tmk_core/common/action_util.c ****         return;
  82:../../tmk_core/common/action_util.c ****     }
  83:../../tmk_core/common/action_util.c **** #endif
  84:../../tmk_core/common/action_util.c ****     add_key_byte(key);
  85:../../tmk_core/common/action_util.c **** }
  86:../../tmk_core/common/action_util.c **** 
  87:../../tmk_core/common/action_util.c **** void del_key(uint8_t key)
  88:../../tmk_core/common/action_util.c **** {
  89:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  90:../../tmk_core/common/action_util.c ****     if (keyboard_protocol && keyboard_nkro) {
  91:../../tmk_core/common/action_util.c ****         del_key_bit(key);
  92:../../tmk_core/common/action_util.c ****         return;
  93:../../tmk_core/common/action_util.c ****     }
  94:../../tmk_core/common/action_util.c **** #endif
  95:../../tmk_core/common/action_util.c ****     del_key_byte(key);
  96:../../tmk_core/common/action_util.c **** }
  97:../../tmk_core/common/action_util.c **** 
  98:../../tmk_core/common/action_util.c **** void clear_keys(void)
  99:../../tmk_core/common/action_util.c **** {
 100:../../tmk_core/common/action_util.c ****     // not clear mods
 101:../../tmk_core/common/action_util.c ****     for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 102:../../tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 103:../../tmk_core/common/action_util.c ****     }
 104:../../tmk_core/common/action_util.c **** }
 105:../../tmk_core/common/action_util.c **** 
 106:../../tmk_core/common/action_util.c **** 
 107:../../tmk_core/common/action_util.c **** /* modifier */
 108:../../tmk_core/common/action_util.c **** uint8_t get_mods(void) { return real_mods; }
 109:../../tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 110:../../tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 111:../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 112:../../tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 113:../../tmk_core/common/action_util.c **** 
 114:../../tmk_core/common/action_util.c **** /* weak modifier */
 115:../../tmk_core/common/action_util.c **** uint8_t get_weak_mods(void) { return weak_mods; }
 116:../../tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 117:../../tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 118:../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 119:../../tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 120:../../tmk_core/common/action_util.c **** 
 121:../../tmk_core/common/action_util.c **** /* Oneshot modifier */
 122:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 123:../../tmk_core/common/action_util.c **** void set_oneshot_mods(uint8_t mods)
 124:../../tmk_core/common/action_util.c **** {
 125:../../tmk_core/common/action_util.c ****     oneshot_mods = mods;
 126:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 127:../../tmk_core/common/action_util.c ****     oneshot_time = timer_read();
 128:../../tmk_core/common/action_util.c **** #endif
 129:../../tmk_core/common/action_util.c **** }
 130:../../tmk_core/common/action_util.c **** void clear_oneshot_mods(void)
 131:../../tmk_core/common/action_util.c **** {
 132:../../tmk_core/common/action_util.c ****     oneshot_mods = 0;
 133:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 134:../../tmk_core/common/action_util.c ****     oneshot_time = 0;
 135:../../tmk_core/common/action_util.c **** #endif
 136:../../tmk_core/common/action_util.c **** }
 137:../../tmk_core/common/action_util.c **** #endif
 138:../../tmk_core/common/action_util.c **** 
 139:../../tmk_core/common/action_util.c **** 
 140:../../tmk_core/common/action_util.c **** 
 141:../../tmk_core/common/action_util.c **** 
 142:../../tmk_core/common/action_util.c **** /*
 143:../../tmk_core/common/action_util.c ****  * inspect keyboard state
 144:../../tmk_core/common/action_util.c ****  */
 145:../../tmk_core/common/action_util.c **** uint8_t has_anykey(void)
 146:../../tmk_core/common/action_util.c **** {
 147:../../tmk_core/common/action_util.c ****     uint8_t cnt = 0;
 148:../../tmk_core/common/action_util.c ****     for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 149:../../tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 150:../../tmk_core/common/action_util.c ****             cnt++;
 151:../../tmk_core/common/action_util.c ****     }
 152:../../tmk_core/common/action_util.c ****     return cnt;
 153:../../tmk_core/common/action_util.c **** }
 154:../../tmk_core/common/action_util.c **** 
 155:../../tmk_core/common/action_util.c **** uint8_t has_anymod(void)
 156:../../tmk_core/common/action_util.c **** {
 157:../../tmk_core/common/action_util.c ****     return bitpop(real_mods);
 158:../../tmk_core/common/action_util.c **** }
 159:../../tmk_core/common/action_util.c **** 
 160:../../tmk_core/common/action_util.c **** uint8_t get_first_key(void)
 161:../../tmk_core/common/action_util.c **** {
 162:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 163:../../tmk_core/common/action_util.c ****     if (keyboard_protocol && keyboard_nkro) {
 164:../../tmk_core/common/action_util.c ****         uint8_t i = 0;
 165:../../tmk_core/common/action_util.c ****         for (; i < KEYBOARD_REPORT_BITS && !keyboard_report->nkro.bits[i]; i++)
 166:../../tmk_core/common/action_util.c ****             ;
 167:../../tmk_core/common/action_util.c ****         return i<<3 | biton(keyboard_report->nkro.bits[i]);
 168:../../tmk_core/common/action_util.c ****     }
 169:../../tmk_core/common/action_util.c **** #endif
 170:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 171:../../tmk_core/common/action_util.c ****     uint8_t i = cb_head;
 172:../../tmk_core/common/action_util.c ****     do {
 173:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] != 0) {
 174:../../tmk_core/common/action_util.c ****             break;
 175:../../tmk_core/common/action_util.c ****         }
 176:../../tmk_core/common/action_util.c ****         i = RO_INC(i);
 177:../../tmk_core/common/action_util.c ****     } while (i != cb_tail);
 178:../../tmk_core/common/action_util.c ****     return keyboard_report->keys[i];
 179:../../tmk_core/common/action_util.c **** #else
 180:../../tmk_core/common/action_util.c ****     return keyboard_report->keys[0];
 181:../../tmk_core/common/action_util.c **** #endif
 182:../../tmk_core/common/action_util.c **** }
 183:../../tmk_core/common/action_util.c **** 
 184:../../tmk_core/common/action_util.c **** 
 185:../../tmk_core/common/action_util.c **** 
 186:../../tmk_core/common/action_util.c **** /* local functions */
 187:../../tmk_core/common/action_util.c **** static inline void add_key_byte(uint8_t code)
 188:../../tmk_core/common/action_util.c **** {
 189:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 190:../../tmk_core/common/action_util.c ****     int8_t i = cb_head;
 191:../../tmk_core/common/action_util.c ****     int8_t empty = -1;
 192:../../tmk_core/common/action_util.c ****     if (cb_count) {
 193:../../tmk_core/common/action_util.c ****         do {
 194:../../tmk_core/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 195:../../tmk_core/common/action_util.c ****                 return;
 196:../../tmk_core/common/action_util.c ****             }
 197:../../tmk_core/common/action_util.c ****             if (empty == -1 && keyboard_report->keys[i] == 0) {
 198:../../tmk_core/common/action_util.c ****                 empty = i;
 199:../../tmk_core/common/action_util.c ****             }
 200:../../tmk_core/common/action_util.c ****             i = RO_INC(i);
 201:../../tmk_core/common/action_util.c ****         } while (i != cb_tail);
 202:../../tmk_core/common/action_util.c ****         if (i == cb_tail) {
 203:../../tmk_core/common/action_util.c ****             if (cb_tail == cb_head) {
 204:../../tmk_core/common/action_util.c ****                 // buffer is full
 205:../../tmk_core/common/action_util.c ****                 if (empty == -1) {
 206:../../tmk_core/common/action_util.c ****                     // pop head when has no empty space
 207:../../tmk_core/common/action_util.c ****                     cb_head = RO_INC(cb_head);
 208:../../tmk_core/common/action_util.c ****                     cb_count--;
 209:../../tmk_core/common/action_util.c ****                 }
 210:../../tmk_core/common/action_util.c ****                 else {
 211:../../tmk_core/common/action_util.c ****                     // left shift when has empty space
 212:../../tmk_core/common/action_util.c ****                     uint8_t offset = 1;
 213:../../tmk_core/common/action_util.c ****                     i = RO_INC(empty);
 214:../../tmk_core/common/action_util.c ****                     do {
 215:../../tmk_core/common/action_util.c ****                         if (keyboard_report->keys[i] != 0) {
 216:../../tmk_core/common/action_util.c ****                             keyboard_report->keys[empty] = keyboard_report->keys[i];
 217:../../tmk_core/common/action_util.c ****                             keyboard_report->keys[i] = 0;
 218:../../tmk_core/common/action_util.c ****                             empty = RO_INC(empty);
 219:../../tmk_core/common/action_util.c ****                         }
 220:../../tmk_core/common/action_util.c ****                         else {
 221:../../tmk_core/common/action_util.c ****                             offset++;
 222:../../tmk_core/common/action_util.c ****                         }
 223:../../tmk_core/common/action_util.c ****                         i = RO_INC(i);
 224:../../tmk_core/common/action_util.c ****                     } while (i != cb_tail);
 225:../../tmk_core/common/action_util.c ****                     cb_tail = RO_SUB(cb_tail, offset);
 226:../../tmk_core/common/action_util.c ****                 }
 227:../../tmk_core/common/action_util.c ****             }
 228:../../tmk_core/common/action_util.c ****         }
 229:../../tmk_core/common/action_util.c ****     }
 230:../../tmk_core/common/action_util.c ****     // add to tail
 231:../../tmk_core/common/action_util.c ****     keyboard_report->keys[cb_tail] = code;
 232:../../tmk_core/common/action_util.c ****     cb_tail = RO_INC(cb_tail);
 233:../../tmk_core/common/action_util.c ****     cb_count++;
 234:../../tmk_core/common/action_util.c **** #else
 235:../../tmk_core/common/action_util.c ****     int8_t i = 0;
 236:../../tmk_core/common/action_util.c ****     int8_t empty = -1;
 237:../../tmk_core/common/action_util.c ****     for (; i < KEYBOARD_REPORT_KEYS; i++) {
 238:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
  34               		.loc 1 238 0 is_stmt 1
  35 0010 2091 0000 		lds r18,keyboard_report
  36 0014 3091 0000 		lds r19,keyboard_report+1
  37 0018 F901      		movw r30,r18
  38 001a 3296      		adiw r30,2
  39 001c 9FEF      		ldi r25,lo8(-1)
  40 001e 40E0      		ldi r20,0
  41 0020 00C0      		rjmp .L4
  42               	.L3:
  43               	.LVL1:
  44               	.LBE8:
  45               	.LBE7:
  46               	.LBB10:
  47               	.LBB11:
 239:../../tmk_core/common/action_util.c ****             break;
 240:../../tmk_core/common/action_util.c ****         }
 241:../../tmk_core/common/action_util.c ****         if (empty == -1 && keyboard_report->keys[i] == 0) {
 242:../../tmk_core/common/action_util.c ****             empty = i;
 243:../../tmk_core/common/action_util.c ****         }
 244:../../tmk_core/common/action_util.c ****     }
 245:../../tmk_core/common/action_util.c ****     if (i == KEYBOARD_REPORT_KEYS) {
 246:../../tmk_core/common/action_util.c ****         if (empty != -1) {
 247:../../tmk_core/common/action_util.c ****             keyboard_report->keys[empty] = code;
 248:../../tmk_core/common/action_util.c ****         }
 249:../../tmk_core/common/action_util.c ****     }
 250:../../tmk_core/common/action_util.c **** #endif
 251:../../tmk_core/common/action_util.c **** }
 252:../../tmk_core/common/action_util.c **** 
 253:../../tmk_core/common/action_util.c **** static inline void del_key_byte(uint8_t code)
 254:../../tmk_core/common/action_util.c **** {
 255:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 256:../../tmk_core/common/action_util.c ****     uint8_t i = cb_head;
 257:../../tmk_core/common/action_util.c ****     if (cb_count) {
 258:../../tmk_core/common/action_util.c ****         do {
 259:../../tmk_core/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 260:../../tmk_core/common/action_util.c ****                 keyboard_report->keys[i] = 0;
 261:../../tmk_core/common/action_util.c ****                 cb_count--;
 262:../../tmk_core/common/action_util.c ****                 if (cb_count == 0) {
 263:../../tmk_core/common/action_util.c ****                     // reset head and tail
 264:../../tmk_core/common/action_util.c ****                     cb_tail = cb_head = 0;
 265:../../tmk_core/common/action_util.c ****                 }
 266:../../tmk_core/common/action_util.c ****                 if (i == RO_DEC(cb_tail)) {
 267:../../tmk_core/common/action_util.c ****                     // left shift when next to tail
 268:../../tmk_core/common/action_util.c ****                     do {
 269:../../tmk_core/common/action_util.c ****                         cb_tail = RO_DEC(cb_tail);
 270:../../tmk_core/common/action_util.c ****                         if (keyboard_report->keys[RO_DEC(cb_tail)] != 0) {
 271:../../tmk_core/common/action_util.c ****                             break;
 272:../../tmk_core/common/action_util.c ****                         }
 273:../../tmk_core/common/action_util.c ****                     } while (cb_tail != cb_head);
 274:../../tmk_core/common/action_util.c ****                 }
 275:../../tmk_core/common/action_util.c ****                 break;
 276:../../tmk_core/common/action_util.c ****             }
 277:../../tmk_core/common/action_util.c ****             i = RO_INC(i);
 278:../../tmk_core/common/action_util.c ****         } while (i != cb_tail);
 279:../../tmk_core/common/action_util.c ****     }
 280:../../tmk_core/common/action_util.c **** #else
 281:../../tmk_core/common/action_util.c ****     for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
 282:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 283:../../tmk_core/common/action_util.c ****             keyboard_report->keys[i] = 0;
 284:../../tmk_core/common/action_util.c ****         }
 285:../../tmk_core/common/action_util.c ****     }
 286:../../tmk_core/common/action_util.c **** #endif
 287:../../tmk_core/common/action_util.c **** }
 288:../../tmk_core/common/action_util.c **** 
 289:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 290:../../tmk_core/common/action_util.c **** static inline void add_key_bit(uint8_t code)
 291:../../tmk_core/common/action_util.c **** {
 292:../../tmk_core/common/action_util.c ****     if ((code>>3) < KEYBOARD_REPORT_BITS) {
  48               		.loc 1 292 0
  49 0022 982F      		mov r25,r24
  50 0024 9695      		lsr r25
  51 0026 9695      		lsr r25
  52 0028 9695      		lsr r25
  53 002a 9F30      		cpi r25,lo8(15)
  54 002c 00F4      		brsh .L5
 293:../../tmk_core/common/action_util.c ****         keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
  55               		.loc 1 293 0
  56 002e E091 0000 		lds r30,keyboard_report
  57 0032 F091 0000 		lds r31,keyboard_report+1
  58 0036 E90F      		add r30,r25
  59 0038 F11D      		adc r31,__zero_reg__
  60 003a 8770      		andi r24,lo8(7)
  61               	.LVL2:
  62 003c 21E0      		ldi r18,lo8(1)
  63 003e 30E0      		ldi r19,0
  64 0040 A901      		movw r20,r18
  65 0042 00C0      		rjmp 2f
  66               		1:
  67 0044 440F      		lsl r20
  68 0046 551F      		rol r21
  69               		2:
  70 0048 8A95      		dec r24
  71 004a 02F4      		brpl 1b
  72 004c CA01      		movw r24,r20
  73 004e 9181      		ldd r25,Z+1
  74 0050 892B      		or r24,r25
  75 0052 8183      		std Z+1,r24
  76 0054 0895      		ret
  77               	.LVL3:
  78               	.L5:
 294:../../tmk_core/common/action_util.c ****     } else {
 295:../../tmk_core/common/action_util.c ****         dprintf("add_key_bit: can't add: %02X\n", code);
  79               		.loc 1 295 0
  80 0056 9091 0000 		lds r25,debug_config
  81 005a 90FF      		sbrs r25,0
  82 005c 00C0      		rjmp .L1
  83 005e 1F92      		push __zero_reg__
  84               	.LCFI0:
  85               		.cfi_def_cfa_offset 3
  86 0060 8F93      		push r24
  87               	.LCFI1:
  88               		.cfi_def_cfa_offset 4
  89 0062 80E0      		ldi r24,lo8(__c.4585)
  90 0064 90E0      		ldi r25,hi8(__c.4585)
  91               	.LVL4:
  92 0066 9F93      		push r25
  93               	.LCFI2:
  94               		.cfi_def_cfa_offset 5
  95               	.LVL5:
  96 0068 8F93      		push r24
  97               	.LCFI3:
  98               		.cfi_def_cfa_offset 6
  99 006a 0E94 0000 		call __xprintf
 100               	.LVL6:
 101 006e 0F90      		pop __tmp_reg__
 102 0070 0F90      		pop __tmp_reg__
 103 0072 0F90      		pop __tmp_reg__
 104 0074 0F90      		pop __tmp_reg__
 105               	.LCFI4:
 106               		.cfi_def_cfa_offset 2
 107 0076 0895      		ret
 108               	.LVL7:
 109               	.L21:
 110               	.LBE11:
 111               	.LBE10:
 112               	.LBB12:
 113               	.LBB9:
 241:../../tmk_core/common/action_util.c ****             empty = i;
 114               		.loc 1 241 0
 115 0078 9F3F      		cpi r25,lo8(-1)
 116 007a 01F0      		breq .L19
 117               	.LVL8:
 118               	.L7:
 119 007c 4F5F      		subi r20,lo8(-(1))
 120               	.LVL9:
 237:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 121               		.loc 1 237 0
 122 007e 4E30      		cpi r20,lo8(14)
 123 0080 01F0      		breq .L20
 124               	.LVL10:
 125               	.L4:
 238:../../tmk_core/common/action_util.c ****             break;
 126               		.loc 1 238 0
 127 0082 5191      		ld r21,Z+
 128 0084 5813      		cpse r21,r24
 129 0086 00C0      		rjmp .L21
 130 0088 00C0      		rjmp .L1
 131               	.L19:
 241:../../tmk_core/common/action_util.c ****             empty = i;
 132               		.loc 1 241 0
 133 008a 5111      		cpse r21,__zero_reg__
 134 008c 00C0      		rjmp .L7
 135 008e 942F      		mov r25,r20
 136               	.LVL11:
 137 0090 00C0      		rjmp .L7
 138               	.LVL12:
 139               	.L20:
 246:../../tmk_core/common/action_util.c ****             keyboard_report->keys[empty] = code;
 140               		.loc 1 246 0
 141 0092 9F3F      		cpi r25,lo8(-1)
 142 0094 01F0      		breq .L1
 247:../../tmk_core/common/action_util.c ****         }
 143               		.loc 1 247 0
 144 0096 F901      		movw r30,r18
 145 0098 E90F      		add r30,r25
 146 009a F11D      		adc r31,__zero_reg__
 147 009c 97FD      		sbrc r25,7
 148 009e FA95      		dec r31
 149 00a0 8283      		std Z+2,r24
 150 00a2 0895      		ret
 151               	.LVL13:
 152               	.L1:
 153 00a4 0895      		ret
 154               	.LBE9:
 155               	.LBE12:
 156               		.cfi_endproc
 157               	.LFE101:
 159               		.section	.text.del_key,"ax",@progbits
 160               	.global	del_key
 162               	del_key:
 163               	.LFB102:
  88:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 164               		.loc 1 88 0
 165               		.cfi_startproc
 166               	.LVL14:
 167               	/* prologue: function */
 168               	/* frame size = 0 */
 169               	/* stack size = 0 */
 170               	.L__stack_usage = 0
  90:../../tmk_core/common/action_util.c ****         del_key_bit(key);
 171               		.loc 1 90 0
 172 0000 9091 0000 		lds r25,keyboard_protocol
 173 0004 9923      		tst r25
 174 0006 01F0      		breq .L23
  90:../../tmk_core/common/action_util.c ****         del_key_bit(key);
 175               		.loc 1 90 0 is_stmt 0 discriminator 1
 176 0008 9091 0000 		lds r25,keyboard_nkro
 177 000c 9111      		cpse r25,__zero_reg__
 178 000e 00C0      		rjmp .L24
 179               	.L23:
 180               	.LBB19:
 181               	.LBB20:
 282:../../tmk_core/common/action_util.c ****             keyboard_report->keys[i] = 0;
 182               		.loc 1 282 0 is_stmt 1
 183 0010 2091 0000 		lds r18,keyboard_report
 184 0014 3091 0000 		lds r19,keyboard_report+1
 185 0018 F901      		movw r30,r18
 186 001a 3296      		adiw r30,2
 187 001c 205F      		subi r18,-16
 188 001e 3F4F      		sbci r19,-1
 189 0020 00C0      		rjmp .L25
 190               	.L24:
 191               	.LVL15:
 192               	.LBE20:
 193               	.LBE19:
 194               	.LBB22:
 195               	.LBB23:
 296:../../tmk_core/common/action_util.c ****     }
 297:../../tmk_core/common/action_util.c **** }
 298:../../tmk_core/common/action_util.c **** 
 299:../../tmk_core/common/action_util.c **** static inline void del_key_bit(uint8_t code)
 300:../../tmk_core/common/action_util.c **** {
 301:../../tmk_core/common/action_util.c ****     if ((code>>3) < KEYBOARD_REPORT_BITS) {
 196               		.loc 1 301 0
 197 0022 982F      		mov r25,r24
 198 0024 9695      		lsr r25
 199 0026 9695      		lsr r25
 200 0028 9695      		lsr r25
 201 002a 9F30      		cpi r25,lo8(15)
 202 002c 00F4      		brsh .L26
 302:../../tmk_core/common/action_util.c ****         keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
 203               		.loc 1 302 0
 204 002e E091 0000 		lds r30,keyboard_report
 205 0032 F091 0000 		lds r31,keyboard_report+1
 206 0036 E90F      		add r30,r25
 207 0038 F11D      		adc r31,__zero_reg__
 208 003a 8770      		andi r24,lo8(7)
 209               	.LVL16:
 210 003c 21E0      		ldi r18,lo8(1)
 211 003e 30E0      		ldi r19,0
 212 0040 A901      		movw r20,r18
 213 0042 00C0      		rjmp 2f
 214               		1:
 215 0044 440F      		lsl r20
 216 0046 551F      		rol r21
 217               		2:
 218 0048 8A95      		dec r24
 219 004a 02F4      		brpl 1b
 220 004c CA01      		movw r24,r20
 221 004e 8095      		com r24
 222 0050 9181      		ldd r25,Z+1
 223 0052 8923      		and r24,r25
 224 0054 8183      		std Z+1,r24
 225 0056 0895      		ret
 226               	.LVL17:
 227               	.L26:
 303:../../tmk_core/common/action_util.c ****     } else {
 304:../../tmk_core/common/action_util.c ****         dprintf("del_key_bit: can't del: %02X\n", code);
 228               		.loc 1 304 0
 229 0058 9091 0000 		lds r25,debug_config
 230 005c 90FF      		sbrs r25,0
 231 005e 00C0      		rjmp .L22
 232 0060 1F92      		push __zero_reg__
 233               	.LCFI5:
 234               		.cfi_def_cfa_offset 3
 235 0062 8F93      		push r24
 236               	.LCFI6:
 237               		.cfi_def_cfa_offset 4
 238 0064 80E0      		ldi r24,lo8(__c.4590)
 239 0066 90E0      		ldi r25,hi8(__c.4590)
 240               	.LVL18:
 241 0068 9F93      		push r25
 242               	.LCFI7:
 243               		.cfi_def_cfa_offset 5
 244               	.LVL19:
 245 006a 8F93      		push r24
 246               	.LCFI8:
 247               		.cfi_def_cfa_offset 6
 248 006c 0E94 0000 		call __xprintf
 249               	.LVL20:
 250 0070 0F90      		pop __tmp_reg__
 251 0072 0F90      		pop __tmp_reg__
 252 0074 0F90      		pop __tmp_reg__
 253 0076 0F90      		pop __tmp_reg__
 254               	.LCFI9:
 255               		.cfi_def_cfa_offset 2
 256 0078 0895      		ret
 257               	.LVL21:
 258               	.L29:
 259 007a 3196      		adiw r30,1
 260               	.LVL22:
 261               	.LBE23:
 262               	.LBE22:
 263               	.LBB24:
 264               	.LBB21:
 281:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 265               		.loc 1 281 0
 266 007c E217      		cp r30,r18
 267 007e F307      		cpc r31,r19
 268 0080 01F0      		breq .L22
 269               	.LVL23:
 270               	.L25:
 282:../../tmk_core/common/action_util.c ****             keyboard_report->keys[i] = 0;
 271               		.loc 1 282 0
 272 0082 9081      		ld r25,Z
 273 0084 9813      		cpse r25,r24
 274 0086 00C0      		rjmp .L29
 283:../../tmk_core/common/action_util.c ****         }
 275               		.loc 1 283 0
 276 0088 1082      		st Z,__zero_reg__
 277 008a 00C0      		rjmp .L29
 278               	.LVL24:
 279               	.L22:
 280 008c 0895      		ret
 281               	.LBE21:
 282               	.LBE24:
 283               		.cfi_endproc
 284               	.LFE102:
 286               		.section	.text.clear_keys,"ax",@progbits
 287               	.global	clear_keys
 289               	clear_keys:
 290               	.LFB103:
  99:../../tmk_core/common/action_util.c ****     // not clear mods
 291               		.loc 1 99 0
 292               		.cfi_startproc
 293               	/* prologue: function */
 294               	/* frame size = 0 */
 295               	/* stack size = 0 */
 296               	.L__stack_usage = 0
 297               	.LVL25:
  99:../../tmk_core/common/action_util.c ****     // not clear mods
 298               		.loc 1 99 0
 299 0000 81E0      		ldi r24,lo8(1)
 300 0002 90E0      		ldi r25,0
 301               	.LVL26:
 302               	.L36:
 303               	.LBB25:
 102:../../tmk_core/common/action_util.c ****     }
 304               		.loc 1 102 0 discriminator 3
 305 0004 E091 0000 		lds r30,keyboard_report
 306 0008 F091 0000 		lds r31,keyboard_report+1
 307 000c E80F      		add r30,r24
 308 000e F91F      		adc r31,r25
 309 0010 1082      		st Z,__zero_reg__
 310               	.LVL27:
 311 0012 0196      		adiw r24,1
 312               	.LVL28:
 101:../../tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 313               		.loc 1 101 0 discriminator 3
 314 0014 8031      		cpi r24,16
 315 0016 9105      		cpc r25,__zero_reg__
 316 0018 01F4      		brne .L36
 317               	/* epilogue start */
 318               	.LBE25:
 104:../../tmk_core/common/action_util.c **** 
 319               		.loc 1 104 0
 320 001a 0895      		ret
 321               		.cfi_endproc
 322               	.LFE103:
 324               		.section	.text.get_mods,"ax",@progbits
 325               	.global	get_mods
 327               	get_mods:
 328               	.LFB104:
 108:../../tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 329               		.loc 1 108 0
 330               		.cfi_startproc
 331               	/* prologue: function */
 332               	/* frame size = 0 */
 333               	/* stack size = 0 */
 334               	.L__stack_usage = 0
 108:../../tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 335               		.loc 1 108 0
 336 0000 8091 0000 		lds r24,real_mods
 337 0004 0895      		ret
 338               		.cfi_endproc
 339               	.LFE104:
 341               		.section	.text.add_mods,"ax",@progbits
 342               	.global	add_mods
 344               	add_mods:
 345               	.LFB105:
 109:../../tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 346               		.loc 1 109 0
 347               		.cfi_startproc
 348               	.LVL29:
 349               	/* prologue: function */
 350               	/* frame size = 0 */
 351               	/* stack size = 0 */
 352               	.L__stack_usage = 0
 109:../../tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 353               		.loc 1 109 0
 354 0000 9091 0000 		lds r25,real_mods
 355 0004 892B      		or r24,r25
 356               	.LVL30:
 357 0006 8093 0000 		sts real_mods,r24
 358 000a 0895      		ret
 359               		.cfi_endproc
 360               	.LFE105:
 362               		.section	.text.del_mods,"ax",@progbits
 363               	.global	del_mods
 365               	del_mods:
 366               	.LFB106:
 110:../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 367               		.loc 1 110 0
 368               		.cfi_startproc
 369               	.LVL31:
 370               	/* prologue: function */
 371               	/* frame size = 0 */
 372               	/* stack size = 0 */
 373               	.L__stack_usage = 0
 110:../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 374               		.loc 1 110 0
 375 0000 8095      		com r24
 376               	.LVL32:
 377 0002 9091 0000 		lds r25,real_mods
 378 0006 8923      		and r24,r25
 379               	.LVL33:
 380 0008 8093 0000 		sts real_mods,r24
 381 000c 0895      		ret
 382               		.cfi_endproc
 383               	.LFE106:
 385               		.section	.text.set_mods,"ax",@progbits
 386               	.global	set_mods
 388               	set_mods:
 389               	.LFB107:
 111:../../tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 390               		.loc 1 111 0
 391               		.cfi_startproc
 392               	.LVL34:
 393               	/* prologue: function */
 394               	/* frame size = 0 */
 395               	/* stack size = 0 */
 396               	.L__stack_usage = 0
 111:../../tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 397               		.loc 1 111 0
 398 0000 8093 0000 		sts real_mods,r24
 399 0004 0895      		ret
 400               		.cfi_endproc
 401               	.LFE107:
 403               		.section	.text.clear_mods,"ax",@progbits
 404               	.global	clear_mods
 406               	clear_mods:
 407               	.LFB108:
 112:../../tmk_core/common/action_util.c **** 
 408               		.loc 1 112 0
 409               		.cfi_startproc
 410               	/* prologue: function */
 411               	/* frame size = 0 */
 412               	/* stack size = 0 */
 413               	.L__stack_usage = 0
 112:../../tmk_core/common/action_util.c **** 
 414               		.loc 1 112 0
 415 0000 1092 0000 		sts real_mods,__zero_reg__
 416 0004 0895      		ret
 417               		.cfi_endproc
 418               	.LFE108:
 420               		.section	.text.get_weak_mods,"ax",@progbits
 421               	.global	get_weak_mods
 423               	get_weak_mods:
 424               	.LFB109:
 115:../../tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 425               		.loc 1 115 0
 426               		.cfi_startproc
 427               	/* prologue: function */
 428               	/* frame size = 0 */
 429               	/* stack size = 0 */
 430               	.L__stack_usage = 0
 115:../../tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 431               		.loc 1 115 0
 432 0000 8091 0000 		lds r24,weak_mods
 433 0004 0895      		ret
 434               		.cfi_endproc
 435               	.LFE109:
 437               		.section	.text.add_weak_mods,"ax",@progbits
 438               	.global	add_weak_mods
 440               	add_weak_mods:
 441               	.LFB110:
 116:../../tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 442               		.loc 1 116 0
 443               		.cfi_startproc
 444               	.LVL35:
 445               	/* prologue: function */
 446               	/* frame size = 0 */
 447               	/* stack size = 0 */
 448               	.L__stack_usage = 0
 116:../../tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 449               		.loc 1 116 0
 450 0000 9091 0000 		lds r25,weak_mods
 451 0004 892B      		or r24,r25
 452               	.LVL36:
 453 0006 8093 0000 		sts weak_mods,r24
 454 000a 0895      		ret
 455               		.cfi_endproc
 456               	.LFE110:
 458               		.section	.text.del_weak_mods,"ax",@progbits
 459               	.global	del_weak_mods
 461               	del_weak_mods:
 462               	.LFB111:
 117:../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 463               		.loc 1 117 0
 464               		.cfi_startproc
 465               	.LVL37:
 466               	/* prologue: function */
 467               	/* frame size = 0 */
 468               	/* stack size = 0 */
 469               	.L__stack_usage = 0
 117:../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 470               		.loc 1 117 0
 471 0000 8095      		com r24
 472               	.LVL38:
 473 0002 9091 0000 		lds r25,weak_mods
 474 0006 8923      		and r24,r25
 475               	.LVL39:
 476 0008 8093 0000 		sts weak_mods,r24
 477 000c 0895      		ret
 478               		.cfi_endproc
 479               	.LFE111:
 481               		.section	.text.set_weak_mods,"ax",@progbits
 482               	.global	set_weak_mods
 484               	set_weak_mods:
 485               	.LFB112:
 118:../../tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 486               		.loc 1 118 0
 487               		.cfi_startproc
 488               	.LVL40:
 489               	/* prologue: function */
 490               	/* frame size = 0 */
 491               	/* stack size = 0 */
 492               	.L__stack_usage = 0
 118:../../tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 493               		.loc 1 118 0
 494 0000 8093 0000 		sts weak_mods,r24
 495 0004 0895      		ret
 496               		.cfi_endproc
 497               	.LFE112:
 499               		.section	.text.clear_weak_mods,"ax",@progbits
 500               	.global	clear_weak_mods
 502               	clear_weak_mods:
 503               	.LFB113:
 119:../../tmk_core/common/action_util.c **** 
 504               		.loc 1 119 0
 505               		.cfi_startproc
 506               	/* prologue: function */
 507               	/* frame size = 0 */
 508               	/* stack size = 0 */
 509               	.L__stack_usage = 0
 119:../../tmk_core/common/action_util.c **** 
 510               		.loc 1 119 0
 511 0000 1092 0000 		sts weak_mods,__zero_reg__
 512 0004 0895      		ret
 513               		.cfi_endproc
 514               	.LFE113:
 516               		.section	.text.set_oneshot_mods,"ax",@progbits
 517               	.global	set_oneshot_mods
 519               	set_oneshot_mods:
 520               	.LFB114:
 124:../../tmk_core/common/action_util.c ****     oneshot_mods = mods;
 521               		.loc 1 124 0
 522               		.cfi_startproc
 523               	.LVL41:
 524               	/* prologue: function */
 525               	/* frame size = 0 */
 526               	/* stack size = 0 */
 527               	.L__stack_usage = 0
 125:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 528               		.loc 1 125 0
 529 0000 8093 0000 		sts oneshot_mods,r24
 127:../../tmk_core/common/action_util.c **** #endif
 530               		.loc 1 127 0
 531 0004 0E94 0000 		call timer_read
 532               	.LVL42:
 533 0008 9093 0000 		sts oneshot_time+1,r25
 534 000c 8093 0000 		sts oneshot_time,r24
 535 0010 0895      		ret
 536               		.cfi_endproc
 537               	.LFE114:
 539               		.section	.text.clear_oneshot_mods,"ax",@progbits
 540               	.global	clear_oneshot_mods
 542               	clear_oneshot_mods:
 543               	.LFB115:
 131:../../tmk_core/common/action_util.c ****     oneshot_mods = 0;
 544               		.loc 1 131 0
 545               		.cfi_startproc
 546               	/* prologue: function */
 547               	/* frame size = 0 */
 548               	/* stack size = 0 */
 549               	.L__stack_usage = 0
 132:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 550               		.loc 1 132 0
 551 0000 1092 0000 		sts oneshot_mods,__zero_reg__
 134:../../tmk_core/common/action_util.c **** #endif
 552               		.loc 1 134 0
 553 0004 1092 0000 		sts oneshot_time+1,__zero_reg__
 554 0008 1092 0000 		sts oneshot_time,__zero_reg__
 555 000c 0895      		ret
 556               		.cfi_endproc
 557               	.LFE115:
 559               		.section	.text.has_anykey,"ax",@progbits
 560               	.global	has_anykey
 562               	has_anykey:
 563               	.LFB116:
 146:../../tmk_core/common/action_util.c ****     uint8_t cnt = 0;
 564               		.loc 1 146 0
 565               		.cfi_startproc
 566               	/* prologue: function */
 567               	/* frame size = 0 */
 568               	/* stack size = 0 */
 569               	.L__stack_usage = 0
 570               	.LVL43:
 571               	.LBB26:
 149:../../tmk_core/common/action_util.c ****             cnt++;
 572               		.loc 1 149 0
 573 0000 8091 0000 		lds r24,keyboard_report
 574 0004 9091 0000 		lds r25,keyboard_report+1
 575 0008 FC01      		movw r30,r24
 576 000a 3196      		adiw r30,1
 577 000c 9C01      		movw r18,r24
 578 000e 205F      		subi r18,-16
 579 0010 3F4F      		sbci r19,-1
 580               	.LBE26:
 147:../../tmk_core/common/action_util.c ****     for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 581               		.loc 1 147 0
 582 0012 80E0      		ldi r24,0
 583               	.LVL44:
 584               	.L52:
 585               	.LBB27:
 149:../../tmk_core/common/action_util.c ****             cnt++;
 586               		.loc 1 149 0
 587 0014 9191      		ld r25,Z+
 588               	.LVL45:
 589 0016 9111      		cpse r25,__zero_reg__
 150:../../tmk_core/common/action_util.c ****     }
 590               		.loc 1 150 0
 591 0018 8F5F      		subi r24,lo8(-(1))
 592               	.LVL46:
 593               	.L51:
 148:../../tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 594               		.loc 1 148 0 discriminator 2
 595 001a E217      		cp r30,r18
 596 001c F307      		cpc r31,r19
 597 001e 01F4      		brne .L52
 598               	/* epilogue start */
 599               	.LBE27:
 153:../../tmk_core/common/action_util.c **** 
 600               		.loc 1 153 0
 601 0020 0895      		ret
 602               		.cfi_endproc
 603               	.LFE116:
 605               		.section	.text.send_keyboard_report,"ax",@progbits
 606               	.global	send_keyboard_report
 608               	send_keyboard_report:
 609               	.LFB100:
  55:../../tmk_core/common/action_util.c ****     keyboard_report->mods  = real_mods;
 610               		.loc 1 55 0
 611               		.cfi_startproc
 612               	/* prologue: function */
 613               	/* frame size = 0 */
 614               	/* stack size = 0 */
 615               	.L__stack_usage = 0
  56:../../tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 616               		.loc 1 56 0
 617 0000 E091 0000 		lds r30,keyboard_report
 618 0004 F091 0000 		lds r31,keyboard_report+1
 619 0008 8091 0000 		lds r24,real_mods
 620 000c 8083      		st Z,r24
  57:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 621               		.loc 1 57 0
 622 000e E091 0000 		lds r30,keyboard_report
 623 0012 F091 0000 		lds r31,keyboard_report+1
 624 0016 9081      		ld r25,Z
 625 0018 8091 0000 		lds r24,weak_mods
 626 001c 892B      		or r24,r25
 627 001e 8083      		st Z,r24
  59:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 628               		.loc 1 59 0
 629 0020 8091 0000 		lds r24,oneshot_mods
 630 0024 8823      		tst r24
 631 0026 01F0      		breq .L59
  61:../../tmk_core/common/action_util.c ****             dprintf("Oneshot: timeout\n");
 632               		.loc 1 61 0
 633 0028 0E94 0000 		call timer_read
 634               	.LVL47:
 635 002c 2091 0000 		lds r18,oneshot_time
 636 0030 3091 0000 		lds r19,oneshot_time+1
 637 0034 8217      		cp r24,r18
 638 0036 9307      		cpc r25,r19
 639 0038 00F0      		brlo .L60
  61:../../tmk_core/common/action_util.c ****             dprintf("Oneshot: timeout\n");
 640               		.loc 1 61 0 is_stmt 0 discriminator 1
 641 003a 0E94 0000 		call timer_read
 642               	.LVL48:
 643 003e 2091 0000 		lds r18,oneshot_time
 644 0042 3091 0000 		lds r19,oneshot_time+1
 645 0046 821B      		sub r24,r18
 646 0048 930B      		sbc r25,r19
 647 004a 00C0      		rjmp .L75
 648               	.L60:
  61:../../tmk_core/common/action_util.c ****             dprintf("Oneshot: timeout\n");
 649               		.loc 1 61 0 discriminator 2
 650 004c 0E94 0000 		call timer_read
 651               	.LVL49:
 652 0050 2091 0000 		lds r18,oneshot_time
 653 0054 3091 0000 		lds r19,oneshot_time+1
 654 0058 2095      		com r18
 655 005a 3095      		com r19
 656 005c 820F      		add r24,r18
 657 005e 931F      		adc r25,r19
 658               	.L75:
 659 0060 8C32      		cpi r24,44
 660 0062 9140      		sbci r25,1
 661 0064 00F0      		brlo .L64
  62:../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
 662               		.loc 1 62 0 is_stmt 1
 663 0066 8091 0000 		lds r24,debug_config
 664 006a 80FF      		sbrs r24,0
 665 006c 00C0      		rjmp .L65
  62:../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
 666               		.loc 1 62 0 is_stmt 0 discriminator 1
 667 006e 80E0      		ldi r24,lo8(__c.4498)
 668 0070 90E0      		ldi r25,hi8(__c.4498)
 669 0072 9F93      		push r25
 670               	.LCFI10:
 671               		.cfi_def_cfa_offset 3
 672 0074 8F93      		push r24
 673               	.LCFI11:
 674               		.cfi_def_cfa_offset 4
 675 0076 0E94 0000 		call __xprintf
 676               	.LVL50:
 677 007a 0F90      		pop __tmp_reg__
 678 007c 0F90      		pop __tmp_reg__
 679               	.LCFI12:
 680               		.cfi_def_cfa_offset 2
 681               	.L65:
  63:../../tmk_core/common/action_util.c ****         }
 682               		.loc 1 63 0 is_stmt 1
 683 007e 0E94 0000 		call clear_oneshot_mods
 684               	.LVL51:
 685               	.L64:
  66:../../tmk_core/common/action_util.c ****         if (has_anykey()) {
 686               		.loc 1 66 0
 687 0082 E091 0000 		lds r30,keyboard_report
 688 0086 F091 0000 		lds r31,keyboard_report+1
 689 008a 9081      		ld r25,Z
 690 008c 8091 0000 		lds r24,oneshot_mods
 691 0090 892B      		or r24,r25
 692 0092 8083      		st Z,r24
  67:../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
 693               		.loc 1 67 0
 694 0094 0E94 0000 		call has_anykey
 695               	.LVL52:
 696 0098 8111      		cpse r24,__zero_reg__
  68:../../tmk_core/common/action_util.c ****         }
 697               		.loc 1 68 0
 698 009a 0E94 0000 		call clear_oneshot_mods
 699               	.LVL53:
 700               	.L59:
  72:../../tmk_core/common/action_util.c **** }
 701               		.loc 1 72 0
 702 009e 8091 0000 		lds r24,keyboard_report
 703 00a2 9091 0000 		lds r25,keyboard_report+1
 704 00a6 0C94 0000 		jmp host_keyboard_send
 705               	.LVL54:
 706               		.cfi_endproc
 707               	.LFE100:
 709               		.section	.text.has_anymod,"ax",@progbits
 710               	.global	has_anymod
 712               	has_anymod:
 713               	.LFB117:
 156:../../tmk_core/common/action_util.c ****     return bitpop(real_mods);
 714               		.loc 1 156 0
 715               		.cfi_startproc
 716               	/* prologue: function */
 717               	/* frame size = 0 */
 718               	/* stack size = 0 */
 719               	.L__stack_usage = 0
 157:../../tmk_core/common/action_util.c **** }
 720               		.loc 1 157 0
 721 0000 8091 0000 		lds r24,real_mods
 722 0004 0C94 0000 		jmp bitpop
 723               	.LVL55:
 724               		.cfi_endproc
 725               	.LFE117:
 727               		.section	.text.get_first_key,"ax",@progbits
 728               	.global	get_first_key
 730               	get_first_key:
 731               	.LFB118:
 161:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 732               		.loc 1 161 0
 733               		.cfi_startproc
 734 0000 CF93      		push r28
 735               	.LCFI13:
 736               		.cfi_def_cfa_offset 3
 737               		.cfi_offset 28, -2
 738 0002 DF93      		push r29
 739               	.LCFI14:
 740               		.cfi_def_cfa_offset 4
 741               		.cfi_offset 29, -3
 742               	/* prologue: function */
 743               	/* frame size = 0 */
 744               	/* stack size = 2 */
 745               	.L__stack_usage = 2
 163:../../tmk_core/common/action_util.c ****         uint8_t i = 0;
 746               		.loc 1 163 0
 747 0004 8091 0000 		lds r24,keyboard_protocol
 748 0008 E091 0000 		lds r30,keyboard_report
 749 000c F091 0000 		lds r31,keyboard_report+1
 750 0010 8823      		tst r24
 751 0012 01F0      		breq .L78
 163:../../tmk_core/common/action_util.c ****         uint8_t i = 0;
 752               		.loc 1 163 0 is_stmt 0 discriminator 1
 753 0014 8091 0000 		lds r24,keyboard_nkro
 754 0018 8823      		tst r24
 755 001a 01F0      		breq .L78
 756 001c DF01      		movw r26,r30
 757 001e 1196      		adiw r26,1
 758               	.LBB28:
 165:../../tmk_core/common/action_util.c ****             ;
 759               		.loc 1 165 0 is_stmt 1
 760 0020 C0E0      		ldi r28,0
 761               	.L79:
 762               	.LVL56:
 165:../../tmk_core/common/action_util.c ****             ;
 763               		.loc 1 165 0 is_stmt 0 discriminator 2
 764 0022 8D91      		ld r24,X+
 765 0024 8111      		cpse r24,__zero_reg__
 766 0026 00C0      		rjmp .L80
 165:../../tmk_core/common/action_util.c ****             ;
 767               		.loc 1 165 0 discriminator 3
 768 0028 CF5F      		subi r28,lo8(-(1))
 769               	.LVL57:
 770 002a CF30      		cpi r28,lo8(15)
 771 002c 01F4      		brne .L79
 772               	.L80:
 167:../../tmk_core/common/action_util.c ****     }
 773               		.loc 1 167 0 is_stmt 1
 774 002e D0E0      		ldi r29,0
 775 0030 EC0F      		add r30,r28
 776 0032 FD1F      		adc r31,r29
 777 0034 8181      		ldd r24,Z+1
 778 0036 0E94 0000 		call biton
 779               	.LVL58:
 780 003a 93E0      		ldi r25,3
 781               		1:
 782 003c CC0F      		lsl r28
 783 003e DD1F      		rol r29
 784 0040 9A95      		dec r25
 785 0042 01F4      		brne 1b
 786               	.LVL59:
 787 0044 8C2B      		or r24,r28
 788 0046 00C0      		rjmp .L82
 789               	.L78:
 790               	.LBE28:
 180:../../tmk_core/common/action_util.c **** #endif
 791               		.loc 1 180 0
 792 0048 8281      		ldd r24,Z+2
 793               	.L82:
 794               	/* epilogue start */
 182:../../tmk_core/common/action_util.c **** 
 795               		.loc 1 182 0
 796 004a DF91      		pop r29
 797 004c CF91      		pop r28
 798 004e 0895      		ret
 799               		.cfi_endproc
 800               	.LFE118:
 802               		.section	.progmem.data.__c.4590,"a",@progbits
 805               	__c.4590:
 806 0000 6465 6C5F 		.string	"del_key_bit: can't del: %02X\n"
 806      6B65 795F 
 806      6269 743A 
 806      2063 616E 
 806      2774 2064 
 807               		.section	.progmem.data.__c.4585,"a",@progbits
 810               	__c.4585:
 811 0000 6164 645F 		.string	"add_key_bit: can't add: %02X\n"
 811      6B65 795F 
 811      6269 743A 
 811      2063 616E 
 811      2774 2061 
 812               		.section	.progmem.data.__c.4498,"a",@progbits
 815               	__c.4498:
 816 0000 4F6E 6573 		.string	"Oneshot: timeout\n"
 816      686F 743A 
 816      2074 696D 
 816      656F 7574 
 816      0A00 
 817               		.section	.bss.oneshot_time,"aw",@nobits
 820               	oneshot_time:
 821 0000 0000      		.zero	2
 822               		.section	.bss.oneshot_mods,"aw",@nobits
 825               	oneshot_mods:
 826 0000 00        		.zero	1
 827               	.global	keyboard_report
 828               		.section	.data.keyboard_report,"aw",@progbits
 831               	keyboard_report:
 832 0000 0000      		.word	__compound_literal.0
 833               		.section	.bss.__compound_literal.0,"aw",@nobits
 836               	__compound_literal.0:
 837 0000 0000 0000 		.zero	16
 837      0000 0000 
 837      0000 0000 
 837      0000 0000 
 838               		.section	.bss.weak_mods,"aw",@nobits
 841               	weak_mods:
 842 0000 00        		.zero	1
 843               		.section	.bss.real_mods,"aw",@nobits
 846               	real_mods:
 847 0000 00        		.zero	1
 848               		.text
 849               	.Letext0:
 850               		.file 2 "/usr/lib/avr/include/stdint.h"
 851               		.file 3 "../../tmk_core/common/report.h"
 852               		.file 4 "../../tmk_core/common/debug.h"
 853               		.file 5 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 854               		.file 6 "../../tmk_core/common/host.h"
 855               		.file 7 "../../tmk_core/common/avr/xprintf.h"
 856               		.file 8 "../../tmk_core/common/util.h"
 857               		.file 9 "../../tmk_core/common/timer.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_util.c
     /tmp/ccZFyYAK.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccZFyYAK.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccZFyYAK.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccZFyYAK.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccZFyYAK.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccZFyYAK.s:13     .text.add_key:0000000000000000 add_key
     /tmp/ccZFyYAK.s:831    .data.keyboard_report:0000000000000000 keyboard_report
     /tmp/ccZFyYAK.s:810    .progmem.data.__c.4585:0000000000000000 __c.4585
     /tmp/ccZFyYAK.s:162    .text.del_key:0000000000000000 del_key
     /tmp/ccZFyYAK.s:805    .progmem.data.__c.4590:0000000000000000 __c.4590
     /tmp/ccZFyYAK.s:289    .text.clear_keys:0000000000000000 clear_keys
     /tmp/ccZFyYAK.s:327    .text.get_mods:0000000000000000 get_mods
     /tmp/ccZFyYAK.s:846    .bss.real_mods:0000000000000000 real_mods
     /tmp/ccZFyYAK.s:344    .text.add_mods:0000000000000000 add_mods
     /tmp/ccZFyYAK.s:365    .text.del_mods:0000000000000000 del_mods
     /tmp/ccZFyYAK.s:388    .text.set_mods:0000000000000000 set_mods
     /tmp/ccZFyYAK.s:406    .text.clear_mods:0000000000000000 clear_mods
     /tmp/ccZFyYAK.s:423    .text.get_weak_mods:0000000000000000 get_weak_mods
     /tmp/ccZFyYAK.s:841    .bss.weak_mods:0000000000000000 weak_mods
     /tmp/ccZFyYAK.s:440    .text.add_weak_mods:0000000000000000 add_weak_mods
     /tmp/ccZFyYAK.s:461    .text.del_weak_mods:0000000000000000 del_weak_mods
     /tmp/ccZFyYAK.s:484    .text.set_weak_mods:0000000000000000 set_weak_mods
     /tmp/ccZFyYAK.s:502    .text.clear_weak_mods:0000000000000000 clear_weak_mods
     /tmp/ccZFyYAK.s:519    .text.set_oneshot_mods:0000000000000000 set_oneshot_mods
     /tmp/ccZFyYAK.s:825    .bss.oneshot_mods:0000000000000000 oneshot_mods
     /tmp/ccZFyYAK.s:820    .bss.oneshot_time:0000000000000000 oneshot_time
     /tmp/ccZFyYAK.s:542    .text.clear_oneshot_mods:0000000000000000 clear_oneshot_mods
     /tmp/ccZFyYAK.s:562    .text.has_anykey:0000000000000000 has_anykey
     /tmp/ccZFyYAK.s:608    .text.send_keyboard_report:0000000000000000 send_keyboard_report
     /tmp/ccZFyYAK.s:815    .progmem.data.__c.4498:0000000000000000 __c.4498
     /tmp/ccZFyYAK.s:712    .text.has_anymod:0000000000000000 has_anymod
     /tmp/ccZFyYAK.s:730    .text.get_first_key:0000000000000000 get_first_key
     /tmp/ccZFyYAK.s:836    .bss.__compound_literal.0:0000000000000000 __compound_literal.0

UNDEFINED SYMBOLS
keyboard_protocol
keyboard_nkro
debug_config
__xprintf
timer_read
host_keyboard_send
bitpop
biton
__do_copy_data
__do_clear_bss
