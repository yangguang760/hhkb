   1               		.file	"keymap.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.keycode_to_action,"ax",@progbits
  12               	keycode_to_action:
  13               	.LFB106:
  14               		.file 1 "../../tmk_core/common/keymap.c"
   1:../../tmk_core/common/keymap.c **** /*
   2:../../tmk_core/common/keymap.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/keymap.c **** 
   4:../../tmk_core/common/keymap.c **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/keymap.c **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/keymap.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/keymap.c **** (at your option) any later version.
   8:../../tmk_core/common/keymap.c **** 
   9:../../tmk_core/common/keymap.c **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/keymap.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/keymap.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/keymap.c **** GNU General Public License for more details.
  13:../../tmk_core/common/keymap.c **** 
  14:../../tmk_core/common/keymap.c **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/keymap.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/keymap.c **** */
  17:../../tmk_core/common/keymap.c **** #include "keymap.h"
  18:../../tmk_core/common/keymap.c **** #include "report.h"
  19:../../tmk_core/common/keymap.c **** #include "keycode.h"
  20:../../tmk_core/common/keymap.c **** #include "action_layer.h"
  21:../../tmk_core/common/keymap.c **** #include "action.h"
  22:../../tmk_core/common/keymap.c **** #include "action_macro.h"
  23:../../tmk_core/common/keymap.c **** #include "wait.h"
  24:../../tmk_core/common/keymap.c **** #include "debug.h"
  25:../../tmk_core/common/keymap.c **** 
  26:../../tmk_core/common/keymap.c **** 
  27:../../tmk_core/common/keymap.c **** static action_t keycode_to_action(uint8_t keycode);
  28:../../tmk_core/common/keymap.c **** 
  29:../../tmk_core/common/keymap.c **** 
  30:../../tmk_core/common/keymap.c **** /* converts key to action */
  31:../../tmk_core/common/keymap.c **** action_t action_for_key(uint8_t layer, keypos_t key)
  32:../../tmk_core/common/keymap.c **** {
  33:../../tmk_core/common/keymap.c ****     uint8_t keycode = keymap_key_to_keycode(layer, key);
  34:../../tmk_core/common/keymap.c ****     switch (keycode) {
  35:../../tmk_core/common/keymap.c ****         case KC_FN0 ... KC_FN31:
  36:../../tmk_core/common/keymap.c ****             return keymap_fn_to_action(keycode);
  37:../../tmk_core/common/keymap.c **** #ifdef BOOTMAGIC_ENABLE
  38:../../tmk_core/common/keymap.c ****         case KC_CAPSLOCK:
  39:../../tmk_core/common/keymap.c ****         case KC_LOCKING_CAPS:
  40:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
  41:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_LCTL);
  42:../../tmk_core/common/keymap.c ****             }
  43:../../tmk_core/common/keymap.c ****             return keycode_to_action(keycode);
  44:../../tmk_core/common/keymap.c ****         case KC_LCTL:
  45:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_control_capslock) {
  46:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_CAPSLOCK);
  47:../../tmk_core/common/keymap.c ****             }
  48:../../tmk_core/common/keymap.c ****             return keycode_to_action(KC_LCTL);
  49:../../tmk_core/common/keymap.c ****         case KC_LALT:
  50:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_lalt_lgui) {
  51:../../tmk_core/common/keymap.c ****                 if (keymap_config.no_gui) {
  52:../../tmk_core/common/keymap.c ****                     return keycode_to_action(ACTION_NO);
  53:../../tmk_core/common/keymap.c ****                 }
  54:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_LGUI);
  55:../../tmk_core/common/keymap.c ****             }
  56:../../tmk_core/common/keymap.c ****             return keycode_to_action(KC_LALT);
  57:../../tmk_core/common/keymap.c ****         case KC_LGUI:
  58:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_lalt_lgui) {
  59:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_LALT);
  60:../../tmk_core/common/keymap.c ****             }
  61:../../tmk_core/common/keymap.c ****             if (keymap_config.no_gui) {
  62:../../tmk_core/common/keymap.c ****                 return keycode_to_action(ACTION_NO);
  63:../../tmk_core/common/keymap.c ****             }
  64:../../tmk_core/common/keymap.c ****             return keycode_to_action(KC_LGUI);
  65:../../tmk_core/common/keymap.c ****         case KC_RALT:
  66:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_ralt_rgui) {
  67:../../tmk_core/common/keymap.c ****                 if (keymap_config.no_gui) {
  68:../../tmk_core/common/keymap.c ****                     return keycode_to_action(ACTION_NO);
  69:../../tmk_core/common/keymap.c ****                 }
  70:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_RGUI);
  71:../../tmk_core/common/keymap.c ****             }
  72:../../tmk_core/common/keymap.c ****             return keycode_to_action(KC_RALT);
  73:../../tmk_core/common/keymap.c ****         case KC_RGUI:
  74:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_ralt_rgui) {
  75:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_RALT);
  76:../../tmk_core/common/keymap.c ****             }
  77:../../tmk_core/common/keymap.c ****             if (keymap_config.no_gui) {
  78:../../tmk_core/common/keymap.c ****                 return keycode_to_action(ACTION_NO);
  79:../../tmk_core/common/keymap.c ****             }
  80:../../tmk_core/common/keymap.c ****             return keycode_to_action(KC_RGUI);
  81:../../tmk_core/common/keymap.c ****         case KC_GRAVE:
  82:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_grave_esc) {
  83:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_ESC);
  84:../../tmk_core/common/keymap.c ****             }
  85:../../tmk_core/common/keymap.c ****             return keycode_to_action(KC_GRAVE);
  86:../../tmk_core/common/keymap.c ****         case KC_ESC:
  87:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_grave_esc) {
  88:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_GRAVE);
  89:../../tmk_core/common/keymap.c ****             }
  90:../../tmk_core/common/keymap.c ****             return keycode_to_action(KC_ESC);
  91:../../tmk_core/common/keymap.c ****         case KC_BSLASH:
  92:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_backslash_backspace) {
  93:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_BSPACE);
  94:../../tmk_core/common/keymap.c ****             }
  95:../../tmk_core/common/keymap.c ****             return keycode_to_action(KC_BSLASH);
  96:../../tmk_core/common/keymap.c ****         case KC_BSPACE:
  97:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_backslash_backspace) {
  98:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_BSLASH);
  99:../../tmk_core/common/keymap.c ****             }
 100:../../tmk_core/common/keymap.c ****             return keycode_to_action(KC_BSPACE);
 101:../../tmk_core/common/keymap.c **** #endif
 102:../../tmk_core/common/keymap.c ****         default:
 103:../../tmk_core/common/keymap.c ****             return keycode_to_action(keycode);
 104:../../tmk_core/common/keymap.c ****     }
 105:../../tmk_core/common/keymap.c **** }
 106:../../tmk_core/common/keymap.c **** 
 107:../../tmk_core/common/keymap.c **** 
 108:../../tmk_core/common/keymap.c **** /* Macro */
 109:../../tmk_core/common/keymap.c **** __attribute__ ((weak))
 110:../../tmk_core/common/keymap.c **** const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
 111:../../tmk_core/common/keymap.c **** {
 112:../../tmk_core/common/keymap.c ****     return MACRO_NONE;
 113:../../tmk_core/common/keymap.c **** }
 114:../../tmk_core/common/keymap.c **** 
 115:../../tmk_core/common/keymap.c **** /* Function */
 116:../../tmk_core/common/keymap.c **** __attribute__ ((weak))
 117:../../tmk_core/common/keymap.c **** void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
 118:../../tmk_core/common/keymap.c **** {
 119:../../tmk_core/common/keymap.c **** }
 120:../../tmk_core/common/keymap.c **** 
 121:../../tmk_core/common/keymap.c **** 
 122:../../tmk_core/common/keymap.c **** 
 123:../../tmk_core/common/keymap.c **** /* translates keycode to action */
 124:../../tmk_core/common/keymap.c **** static action_t keycode_to_action(uint8_t keycode)
 125:../../tmk_core/common/keymap.c **** {
  15               		.loc 1 125 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26               	/* prologue: function */
  27               	/* frame size = 0 */
  28               	/* stack size = 2 */
  29               	.L__stack_usage = 2
 126:../../tmk_core/common/keymap.c ****     action_t action;
 127:../../tmk_core/common/keymap.c ****     switch (keycode) {
  30               		.loc 1 127 0
  31 0004 8D3B      		cpi r24,lo8(-67)
  32 0006 00F4      		brsh .L3
  33 0008 883A      		cpi r24,lo8(-88)
  34 000a 00F4      		brsh .L4
  35 000c 853A      		cpi r24,lo8(-91)
  36 000e 00F4      		brsh .L5
  37 0010 8430      		cpi r24,lo8(4)
  38 0012 00F4      		brsh .L6
  39 0014 8130      		cpi r24,lo8(1)
  40 0016 01F0      		breq .+2
  41 0018 00C0      		rjmp .L11
  42               	.LBB5:
 128:../../tmk_core/common/keymap.c ****         case KC_A ... KC_EXSEL:
 129:../../tmk_core/common/keymap.c ****         case KC_LCTRL ... KC_RGUI:
 130:../../tmk_core/common/keymap.c ****             action.code = ACTION_KEY(keycode);
 131:../../tmk_core/common/keymap.c ****             break;
 132:../../tmk_core/common/keymap.c ****         case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
 133:../../tmk_core/common/keymap.c ****             action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
 134:../../tmk_core/common/keymap.c ****             break;
 135:../../tmk_core/common/keymap.c ****         case KC_AUDIO_MUTE ... KC_MEDIA_REWIND:
 136:../../tmk_core/common/keymap.c ****             action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
 137:../../tmk_core/common/keymap.c ****             break;
 138:../../tmk_core/common/keymap.c ****         case KC_MS_UP ... KC_MS_ACCEL2:
 139:../../tmk_core/common/keymap.c ****             action.code = ACTION_MOUSEKEY(keycode);
 140:../../tmk_core/common/keymap.c ****             break;
 141:../../tmk_core/common/keymap.c ****         case KC_TRNS:
 142:../../tmk_core/common/keymap.c ****             action.code = ACTION_TRANSPARENT;
  43               		.loc 1 142 0
  44 001a C1E0      		ldi r28,lo8(1)
  45 001c D0E0      		ldi r29,0
  46 001e 00C0      		rjmp .L2
  47               	.L3:
  48               	.LBE5:
 127:../../tmk_core/common/keymap.c ****         case KC_A ... KC_EXSEL:
  49               		.loc 1 127 0
  50 0020 883E      		cpi r24,lo8(-24)
  51 0022 00F4      		brsh .L8
  52 0024 803E      		cpi r24,lo8(-32)
  53 0026 00F4      		brsh .L6
  54 0028 8F3B      		cpi r24,lo8(-65)
  55 002a 01F0      		breq .+2
  56 002c 00C0      		rjmp .L11
  57               	.LBB8:
 143:../../tmk_core/common/keymap.c ****             break;
 144:../../tmk_core/common/keymap.c ****         case KC_BOOTLOADER:
 145:../../tmk_core/common/keymap.c ****             clear_keyboard();
  58               		.loc 1 145 0
  59 002e 0E94 0000 		call clear_keyboard
  60               	.LVL1:
  61               	.LBB6:
  62               	.LBB7:
  63               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/lib/avr/include/util/delay.h **** 
 155:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/lib/avr/include/util/delay.h **** 
 158:/usr/lib/avr/include/util/delay.h **** 	#else
 159:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 160:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/lib/avr/include/util/delay.h **** 	#endif
 162:/usr/lib/avr/include/util/delay.h **** 
 163:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  64               		.loc 2 163 0
  65 0032 2FEF      		ldi r18,lo8(159999)
  66 0034 80E7      		ldi r24,hi8(159999)
  67 0036 92E0      		ldi r25,hlo8(159999)
  68 0038 2150      		1: subi r18,1
  69 003a 8040      		sbci r24,0
  70 003c 9040      		sbci r25,0
  71 003e 01F4      		brne 1b
  72 0040 00C0      		rjmp .
  73 0042 0000      		nop
  74               	.LBE7:
  75               	.LBE6:
 146:../../tmk_core/common/keymap.c ****             wait_ms(50);
 147:../../tmk_core/common/keymap.c ****             bootloader_jump(); // not return
  76               		.loc 1 147 0
  77 0044 0E94 0000 		call bootloader_jump
  78               	.LVL2:
 148:../../tmk_core/common/keymap.c ****             break;
  79               		.loc 1 148 0
  80 0048 00C0      		rjmp .L2
  81               	.LVL3:
  82               	.L8:
  83               	.LBE8:
 127:../../tmk_core/common/keymap.c ****         case KC_A ... KC_EXSEL:
  84               		.loc 1 127 0
  85 004a 803F      		cpi r24,lo8(-16)
  86 004c 00F4      		brsh .+2
  87 004e 00C0      		rjmp .L11
  88               	.LBB9:
 139:../../tmk_core/common/keymap.c ****             break;
  89               		.loc 1 139 0
  90 0050 C82F      		mov r28,r24
  91 0052 D0E0      		ldi r29,0
  92 0054 D065      		ori r29,80
  93               	.LVL4:
 140:../../tmk_core/common/keymap.c ****         case KC_TRNS:
  94               		.loc 1 140 0
  95 0056 00C0      		rjmp .L2
  96               	.LVL5:
  97               	.L6:
 130:../../tmk_core/common/keymap.c ****             break;
  98               		.loc 1 130 0
  99 0058 C82F      		mov r28,r24
 100 005a D0E0      		ldi r29,0
 101               	.LVL6:
 131:../../tmk_core/common/keymap.c ****         case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
 102               		.loc 1 131 0
 103 005c 00C0      		rjmp .L2
 104               	.LVL7:
 105               	.L5:
 133:../../tmk_core/common/keymap.c ****             break;
 106               		.loc 1 133 0
 107 005e 853A      		cpi r24,lo8(-91)
 108 0060 01F4      		brne .+2
 109 0062 00C0      		rjmp .L12
 133:../../tmk_core/common/keymap.c ****             break;
 110               		.loc 1 133 0 is_stmt 0 discriminator 1
 111 0064 863A      		cpi r24,lo8(-90)
 112 0066 01F0      		breq .+2
 113 0068 00C0      		rjmp .L13
 133:../../tmk_core/common/keymap.c ****             break;
 114               		.loc 1 133 0
 115 006a C2E8      		ldi r28,lo8(-126)
 116 006c D0E4      		ldi r29,lo8(64)
 117 006e 00C0      		rjmp .L2
 118               	.L4:
 136:../../tmk_core/common/keymap.c ****             break;
 119               		.loc 1 136 0 is_stmt 1
 120 0070 883A      		cpi r24,lo8(-88)
 121 0072 01F4      		brne .+2
 122 0074 00C0      		rjmp .L14
 136:../../tmk_core/common/keymap.c ****             break;
 123               		.loc 1 136 0 is_stmt 0 discriminator 1
 124 0076 893A      		cpi r24,lo8(-87)
 125 0078 01F4      		brne .+2
 126 007a 00C0      		rjmp .L15
 136:../../tmk_core/common/keymap.c ****             break;
 127               		.loc 1 136 0 discriminator 3
 128 007c 8A3A      		cpi r24,lo8(-86)
 129 007e 01F4      		brne .+2
 130 0080 00C0      		rjmp .L16
 136:../../tmk_core/common/keymap.c ****             break;
 131               		.loc 1 136 0 discriminator 5
 132 0082 8B3A      		cpi r24,lo8(-85)
 133 0084 01F4      		brne .+2
 134 0086 00C0      		rjmp .L17
 136:../../tmk_core/common/keymap.c ****             break;
 135               		.loc 1 136 0 discriminator 7
 136 0088 8C3A      		cpi r24,lo8(-84)
 137 008a 01F4      		brne .+2
 138 008c 00C0      		rjmp .L18
 136:../../tmk_core/common/keymap.c ****             break;
 139               		.loc 1 136 0 discriminator 9
 140 008e 8B3B      		cpi r24,lo8(-69)
 141 0090 01F4      		brne .+2
 142 0092 00C0      		rjmp .L19
 136:../../tmk_core/common/keymap.c ****             break;
 143               		.loc 1 136 0 discriminator 11
 144 0094 8C3B      		cpi r24,lo8(-68)
 145 0096 01F4      		brne .+2
 146 0098 00C0      		rjmp .L20
 136:../../tmk_core/common/keymap.c ****             break;
 147               		.loc 1 136 0 discriminator 13
 148 009a 8D3A      		cpi r24,lo8(-83)
 149 009c 01F4      		brne .+2
 150 009e 00C0      		rjmp .L21
 136:../../tmk_core/common/keymap.c ****             break;
 151               		.loc 1 136 0 discriminator 15
 152 00a0 803B      		cpi r24,lo8(-80)
 153 00a2 01F4      		brne .+2
 154 00a4 00C0      		rjmp .L22
 136:../../tmk_core/common/keymap.c ****             break;
 155               		.loc 1 136 0 discriminator 17
 156 00a6 8E3A      		cpi r24,lo8(-82)
 157 00a8 01F4      		brne .+2
 158 00aa 00C0      		rjmp .L23
 136:../../tmk_core/common/keymap.c ****             break;
 159               		.loc 1 136 0 discriminator 19
 160 00ac 8F3A      		cpi r24,lo8(-81)
 161 00ae 01F4      		brne .+2
 162 00b0 00C0      		rjmp .L24
 136:../../tmk_core/common/keymap.c ****             break;
 163               		.loc 1 136 0 discriminator 21
 164 00b2 813B      		cpi r24,lo8(-79)
 165 00b4 01F4      		brne .+2
 166 00b6 00C0      		rjmp .L25
 136:../../tmk_core/common/keymap.c ****             break;
 167               		.loc 1 136 0 discriminator 23
 168 00b8 823B      		cpi r24,lo8(-78)
 169 00ba 01F4      		brne .+2
 170 00bc 00C0      		rjmp .L26
 136:../../tmk_core/common/keymap.c ****             break;
 171               		.loc 1 136 0 discriminator 25
 172 00be 833B      		cpi r24,lo8(-77)
 173 00c0 01F4      		brne .+2
 174 00c2 00C0      		rjmp .L27
 136:../../tmk_core/common/keymap.c ****             break;
 175               		.loc 1 136 0 discriminator 27
 176 00c4 843B      		cpi r24,lo8(-76)
 177 00c6 01F4      		brne .+2
 178 00c8 00C0      		rjmp .L28
 136:../../tmk_core/common/keymap.c ****             break;
 179               		.loc 1 136 0 discriminator 29
 180 00ca 853B      		cpi r24,lo8(-75)
 181 00cc 01F4      		brne .+2
 182 00ce 00C0      		rjmp .L29
 136:../../tmk_core/common/keymap.c ****             break;
 183               		.loc 1 136 0 discriminator 31
 184 00d0 863B      		cpi r24,lo8(-74)
 185 00d2 01F4      		brne .+2
 186 00d4 00C0      		rjmp .L30
 136:../../tmk_core/common/keymap.c ****             break;
 187               		.loc 1 136 0 discriminator 33
 188 00d6 873B      		cpi r24,lo8(-73)
 189 00d8 01F4      		brne .+2
 190 00da 00C0      		rjmp .L31
 136:../../tmk_core/common/keymap.c ****             break;
 191               		.loc 1 136 0 discriminator 35
 192 00dc 883B      		cpi r24,lo8(-72)
 193 00de 01F4      		brne .+2
 194 00e0 00C0      		rjmp .L32
 136:../../tmk_core/common/keymap.c ****             break;
 195               		.loc 1 136 0 discriminator 37
 196 00e2 893B      		cpi r24,lo8(-71)
 197 00e4 01F4      		brne .+2
 198 00e6 00C0      		rjmp .L33
 136:../../tmk_core/common/keymap.c ****             break;
 199               		.loc 1 136 0 discriminator 39
 200 00e8 8A3B      		cpi r24,lo8(-70)
 201 00ea 01F0      		breq .+2
 202 00ec 00C0      		rjmp .L34
 136:../../tmk_core/common/keymap.c ****             break;
 203               		.loc 1 136 0
 204 00ee CAE2      		ldi r28,lo8(42)
 205 00f0 D6E4      		ldi r29,lo8(70)
 206 00f2 00C0      		rjmp .L2
 207               	.L11:
 149:../../tmk_core/common/keymap.c ****         default:
 150:../../tmk_core/common/keymap.c ****             action.code = ACTION_NO;
 208               		.loc 1 150 0 is_stmt 1
 209 00f4 C0E0      		ldi r28,0
 210 00f6 D0E0      		ldi r29,0
 211 00f8 00C0      		rjmp .L2
 212               	.L12:
 133:../../tmk_core/common/keymap.c ****             break;
 213               		.loc 1 133 0
 214 00fa C1E8      		ldi r28,lo8(-127)
 215 00fc D0E4      		ldi r29,lo8(64)
 216 00fe 00C0      		rjmp .L2
 217               	.L13:
 218 0100 C3E8      		ldi r28,lo8(-125)
 219 0102 D0E4      		ldi r29,lo8(64)
 220 0104 00C0      		rjmp .L2
 221               	.L14:
 136:../../tmk_core/common/keymap.c ****             break;
 222               		.loc 1 136 0
 223 0106 C2EE      		ldi r28,lo8(-30)
 224 0108 D4E4      		ldi r29,lo8(68)
 225 010a 00C0      		rjmp .L2
 226               	.L15:
 227 010c C9EE      		ldi r28,lo8(-23)
 228 010e D4E4      		ldi r29,lo8(68)
 229 0110 00C0      		rjmp .L2
 230               	.L16:
 231 0112 CAEE      		ldi r28,lo8(-22)
 232 0114 D4E4      		ldi r29,lo8(68)
 233 0116 00C0      		rjmp .L2
 234               	.L17:
 235 0118 C5EB      		ldi r28,lo8(-75)
 236 011a D4E4      		ldi r29,lo8(68)
 237 011c 00C0      		rjmp .L2
 238               	.L18:
 239 011e C6EB      		ldi r28,lo8(-74)
 240 0120 D4E4      		ldi r29,lo8(68)
 241 0122 00C0      		rjmp .L2
 242               	.L19:
 243 0124 C3EB      		ldi r28,lo8(-77)
 244 0126 D4E4      		ldi r29,lo8(68)
 245 0128 00C0      		rjmp .L2
 246               	.L20:
 247 012a C4EB      		ldi r28,lo8(-76)
 248 012c D4E4      		ldi r29,lo8(68)
 249 012e 00C0      		rjmp .L2
 250               	.L21:
 251 0130 C7EB      		ldi r28,lo8(-73)
 252 0132 D4E4      		ldi r29,lo8(68)
 253 0134 00C0      		rjmp .L2
 254               	.L22:
 255 0136 CCEC      		ldi r28,lo8(-52)
 256 0138 D4E4      		ldi r29,lo8(68)
 257 013a 00C0      		rjmp .L2
 258               	.L23:
 259 013c CDEC      		ldi r28,lo8(-51)
 260 013e D4E4      		ldi r29,lo8(68)
 261 0140 00C0      		rjmp .L2
 262               	.L24:
 263 0142 C3E8      		ldi r28,lo8(-125)
 264 0144 D5E4      		ldi r29,lo8(69)
 265 0146 00C0      		rjmp .L2
 266               	.L25:
 267 0148 CAE8      		ldi r28,lo8(-118)
 268 014a D5E4      		ldi r29,lo8(69)
 269 014c 00C0      		rjmp .L2
 270               	.L26:
 271 014e C2E9      		ldi r28,lo8(-110)
 272 0150 D5E4      		ldi r29,lo8(69)
 273 0152 00C0      		rjmp .L2
 274               	.L27:
 275 0154 C4E9      		ldi r28,lo8(-108)
 276 0156 D5E4      		ldi r29,lo8(69)
 277 0158 00C0      		rjmp .L2
 278               	.L28:
 279 015a C1E2      		ldi r28,lo8(33)
 280 015c D6E4      		ldi r29,lo8(70)
 281 015e 00C0      		rjmp .L2
 282               	.L29:
 283 0160 C3E2      		ldi r28,lo8(35)
 284 0162 D6E4      		ldi r29,lo8(70)
 285 0164 00C0      		rjmp .L2
 286               	.L30:
 287 0166 C4E2      		ldi r28,lo8(36)
 288 0168 D6E4      		ldi r29,lo8(70)
 289 016a 00C0      		rjmp .L2
 290               	.L31:
 291 016c C5E2      		ldi r28,lo8(37)
 292 016e D6E4      		ldi r29,lo8(70)
 293 0170 00C0      		rjmp .L2
 294               	.L32:
 295 0172 C6E2      		ldi r28,lo8(38)
 296 0174 D6E4      		ldi r29,lo8(70)
 297 0176 00C0      		rjmp .L2
 298               	.L33:
 299 0178 C7E2      		ldi r28,lo8(39)
 300 017a D6E4      		ldi r29,lo8(70)
 301 017c 00C0      		rjmp .L2
 302               	.L34:
 303 017e C0E0      		ldi r28,0
 304 0180 D4E4      		ldi r29,lo8(68)
 305               	.LVL8:
 306               	.L2:
 307               	.LBE9:
 151:../../tmk_core/common/keymap.c ****             break;
 152:../../tmk_core/common/keymap.c ****     }
 153:../../tmk_core/common/keymap.c ****     return action;
 154:../../tmk_core/common/keymap.c **** }
 308               		.loc 1 154 0
 309 0182 CE01      		movw r24,r28
 310               	/* epilogue start */
 311 0184 DF91      		pop r29
 312 0186 CF91      		pop r28
 313               	.LVL9:
 314 0188 0895      		ret
 315               		.cfi_endproc
 316               	.LFE106:
 318               		.section	.text.action_for_key,"ax",@progbits
 319               	.global	action_for_key
 321               	action_for_key:
 322               	.LFB103:
  32:../../tmk_core/common/keymap.c ****     uint8_t keycode = keymap_key_to_keycode(layer, key);
 323               		.loc 1 32 0
 324               		.cfi_startproc
 325               	.LVL10:
 326               	/* prologue: function */
 327               	/* frame size = 0 */
 328               	/* stack size = 0 */
 329               	.L__stack_usage = 0
  33:../../tmk_core/common/keymap.c ****     switch (keycode) {
 330               		.loc 1 33 0
 331 0000 0E94 0000 		call keymap_key_to_keycode
 332               	.LVL11:
  34:../../tmk_core/common/keymap.c ****         case KC_FN0 ... KC_FN31:
 333               		.loc 1 34 0
 334 0004 803E      		cpi r24,lo8(-32)
 335 0006 00F4      		brsh .L39
 336 0008 803C      		cpi r24,lo8(-64)
 337 000a 00F4      		brsh .L40
 338 000c 8133      		cpi r24,lo8(49)
 339 000e 01F4      		brne .+2
 340 0010 00C0      		rjmp .L41
 341 0012 00F4      		brsh .L42
 342 0014 8932      		cpi r24,lo8(41)
 343 0016 01F4      		brne .+2
 344 0018 00C0      		rjmp .L43
 345 001a 8A32      		cpi r24,lo8(42)
 346 001c 01F4      		brne .+2
 347 001e 00C0      		rjmp .L44
 348 0020 00C0      		rjmp .L38
 349               	.L42:
 350 0022 8933      		cpi r24,lo8(57)
 351 0024 01F0      		breq .L45
 352 0026 8238      		cpi r24,lo8(-126)
 353 0028 01F0      		breq .L45
 354 002a 8533      		cpi r24,lo8(53)
 355 002c 01F4      		brne .+2
 356 002e 00C0      		rjmp .L46
 357 0030 00C0      		rjmp .L38
 358               	.L39:
 359 0032 833E      		cpi r24,lo8(-29)
 360 0034 01F0      		breq .L47
 361 0036 00F4      		brsh .L48
 362 0038 803E      		cpi r24,lo8(-32)
 363 003a 01F0      		breq .L49
 364 003c 823E      		cpi r24,lo8(-30)
 365 003e 01F0      		breq .L50
 366 0040 00C0      		rjmp .L38
 367               	.L48:
 368 0042 863E      		cpi r24,lo8(-26)
 369 0044 01F0      		breq .L51
 370 0046 873E      		cpi r24,lo8(-25)
 371 0048 01F0      		breq .L52
 372 004a 00C0      		rjmp .L38
 373               	.L40:
  36:../../tmk_core/common/keymap.c **** #ifdef BOOTMAGIC_ENABLE
 374               		.loc 1 36 0
 375 004c 0E94 0000 		call keymap_fn_to_action
 376               	.LVL12:
 377 0050 0895      		ret
 378               	.LVL13:
 379               	.L45:
  40:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_LCTL);
 380               		.loc 1 40 0
 381 0052 9091 0000 		lds r25,keymap_config
 382 0056 90FD      		sbrc r25,0
 383 0058 00C0      		rjmp .L54
  40:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_LCTL);
 384               		.loc 1 40 0 is_stmt 0 discriminator 1
 385 005a 91FF      		sbrs r25,1
 386 005c 00C0      		rjmp .L38
 387               	.LVL14:
 388               	.L54:
  41:../../tmk_core/common/keymap.c ****             }
 389               		.loc 1 41 0 is_stmt 1
 390 005e 80EE      		ldi r24,lo8(-32)
 391 0060 00C0      		rjmp .L38
 392               	.LVL15:
 393               	.L49:
  45:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_CAPSLOCK);
 394               		.loc 1 45 0
 395 0062 8091 0000 		lds r24,keymap_config
 396               	.LVL16:
 397 0066 80FF      		sbrs r24,0
 398 0068 00C0      		rjmp .L54
  46:../../tmk_core/common/keymap.c ****             }
 399               		.loc 1 46 0
 400 006a 89E3      		ldi r24,lo8(57)
 401 006c 00C0      		rjmp .L38
 402               	.LVL17:
 403               	.L50:
  50:../../tmk_core/common/keymap.c ****                 if (keymap_config.no_gui) {
 404               		.loc 1 50 0
 405 006e 8091 0000 		lds r24,keymap_config
 406               	.LVL18:
 407 0072 82FF      		sbrs r24,2
 408 0074 00C0      		rjmp .L56
 409               	.L58:
  51:../../tmk_core/common/keymap.c ****                     return keycode_to_action(ACTION_NO);
 410               		.loc 1 51 0
 411 0076 8091 0000 		lds r24,keymap_config
 412 007a 84FF      		sbrs r24,4
 413 007c 00C0      		rjmp .L57
 414               	.L60:
  52:../../tmk_core/common/keymap.c ****                 }
 415               		.loc 1 52 0
 416 007e 80E0      		ldi r24,0
 417 0080 00C0      		rjmp .L38
 418               	.L57:
  54:../../tmk_core/common/keymap.c ****             }
 419               		.loc 1 54 0
 420 0082 83EE      		ldi r24,lo8(-29)
 421 0084 00C0      		rjmp .L38
 422               	.LVL19:
 423               	.L47:
  58:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_LALT);
 424               		.loc 1 58 0
 425 0086 8091 0000 		lds r24,keymap_config
 426               	.LVL20:
 427 008a 82FF      		sbrs r24,2
 428 008c 00C0      		rjmp .L58
 429               	.L56:
  56:../../tmk_core/common/keymap.c ****         case KC_LGUI:
 430               		.loc 1 56 0
 431 008e 82EE      		ldi r24,lo8(-30)
 432 0090 00C0      		rjmp .L38
 433               	.LVL21:
 434               	.L51:
  66:../../tmk_core/common/keymap.c ****                 if (keymap_config.no_gui) {
 435               		.loc 1 66 0
 436 0092 8091 0000 		lds r24,keymap_config
 437               	.LVL22:
 438 0096 83FF      		sbrs r24,3
 439 0098 00C0      		rjmp .L59
 440               	.L61:
  67:../../tmk_core/common/keymap.c ****                     return keycode_to_action(ACTION_NO);
 441               		.loc 1 67 0
 442 009a 8091 0000 		lds r24,keymap_config
 443 009e 84FD      		sbrc r24,4
 444 00a0 00C0      		rjmp .L60
  70:../../tmk_core/common/keymap.c ****             }
 445               		.loc 1 70 0
 446 00a2 87EE      		ldi r24,lo8(-25)
 447 00a4 00C0      		rjmp .L38
 448               	.LVL23:
 449               	.L52:
  74:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_RALT);
 450               		.loc 1 74 0
 451 00a6 8091 0000 		lds r24,keymap_config
 452               	.LVL24:
 453 00aa 83FF      		sbrs r24,3
 454 00ac 00C0      		rjmp .L61
 455               	.L59:
  72:../../tmk_core/common/keymap.c ****         case KC_RGUI:
 456               		.loc 1 72 0
 457 00ae 86EE      		ldi r24,lo8(-26)
 458 00b0 00C0      		rjmp .L38
 459               	.LVL25:
 460               	.L46:
  82:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_ESC);
 461               		.loc 1 82 0
 462 00b2 8091 0000 		lds r24,keymap_config
 463               	.LVL26:
 464 00b6 85FF      		sbrs r24,5
 465 00b8 00C0      		rjmp .L62
 466               	.L63:
  83:../../tmk_core/common/keymap.c ****             }
 467               		.loc 1 83 0
 468 00ba 89E2      		ldi r24,lo8(41)
 469 00bc 00C0      		rjmp .L38
 470               	.LVL27:
 471               	.L43:
  87:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_GRAVE);
 472               		.loc 1 87 0
 473 00be 8091 0000 		lds r24,keymap_config
 474               	.LVL28:
 475 00c2 85FF      		sbrs r24,5
 476 00c4 00C0      		rjmp .L63
 477               	.L62:
  85:../../tmk_core/common/keymap.c ****         case KC_ESC:
 478               		.loc 1 85 0
 479 00c6 85E3      		ldi r24,lo8(53)
 480 00c8 00C0      		rjmp .L38
 481               	.LVL29:
 482               	.L41:
  92:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_BSPACE);
 483               		.loc 1 92 0
 484 00ca 8091 0000 		lds r24,keymap_config
 485               	.LVL30:
 486 00ce 86FF      		sbrs r24,6
 487 00d0 00C0      		rjmp .L64
 488               	.L65:
  93:../../tmk_core/common/keymap.c ****             }
 489               		.loc 1 93 0
 490 00d2 8AE2      		ldi r24,lo8(42)
 491 00d4 00C0      		rjmp .L38
 492               	.LVL31:
 493               	.L44:
  97:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_BSLASH);
 494               		.loc 1 97 0
 495 00d6 8091 0000 		lds r24,keymap_config
 496               	.LVL32:
 497 00da 86FF      		sbrs r24,6
 498 00dc 00C0      		rjmp .L65
 499               	.L64:
  95:../../tmk_core/common/keymap.c ****         case KC_BSPACE:
 500               		.loc 1 95 0
 501 00de 81E3      		ldi r24,lo8(49)
 502               	.L38:
 103:../../tmk_core/common/keymap.c ****     }
 503               		.loc 1 103 0
 504 00e0 0E94 0000 		call keycode_to_action
 505               	.LVL33:
 105:../../tmk_core/common/keymap.c **** 
 506               		.loc 1 105 0
 507 00e4 0895      		ret
 508               		.cfi_endproc
 509               	.LFE103:
 511               		.section	.text.action_get_macro,"ax",@progbits
 512               		.weak	action_get_macro
 514               	action_get_macro:
 515               	.LFB104:
 111:../../tmk_core/common/keymap.c ****     return MACRO_NONE;
 516               		.loc 1 111 0
 517               		.cfi_startproc
 518               	.LVL34:
 519               	/* prologue: function */
 520               	/* frame size = 0 */
 521               	/* stack size = 0 */
 522               	.L__stack_usage = 0
 113:../../tmk_core/common/keymap.c **** 
 523               		.loc 1 113 0
 524 0000 80E0      		ldi r24,0
 525 0002 90E0      		ldi r25,0
 526               	.LVL35:
 527 0004 0895      		ret
 528               		.cfi_endproc
 529               	.LFE104:
 531               		.section	.text.action_function,"ax",@progbits
 532               		.weak	action_function
 534               	action_function:
 535               	.LFB105:
 118:../../tmk_core/common/keymap.c **** }
 536               		.loc 1 118 0
 537               		.cfi_startproc
 538               	.LVL36:
 539               	/* prologue: function */
 540               	/* frame size = 0 */
 541               	/* stack size = 0 */
 542               	.L__stack_usage = 0
 543 0000 0895      		ret
 544               		.cfi_endproc
 545               	.LFE105:
 547               		.comm	keymap_config,1,1
 548               		.text
 549               	.Letext0:
 550               		.file 3 "/usr/lib/avr/include/stdint.h"
 551               		.file 4 "../../tmk_core/common/keyboard.h"
 552               		.file 5 "../../tmk_core/common/keycode.h"
 553               		.file 6 "../../tmk_core/common/action_code.h"
 554               		.file 7 "../../tmk_core/common/action_macro.h"
 555               		.file 8 "../../tmk_core/common/action.h"
 556               		.file 9 "../../tmk_core/common/keymap.h"
 557               		.file 10 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 keymap.c
     /tmp/ccL377md.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccL377md.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccL377md.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccL377md.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccL377md.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccL377md.s:12     .text.keycode_to_action:0000000000000000 keycode_to_action
     /tmp/ccL377md.s:321    .text.action_for_key:0000000000000000 action_for_key
                            *COM*:0000000000000001 keymap_config
     /tmp/ccL377md.s:514    .text.action_get_macro:0000000000000000 action_get_macro
     /tmp/ccL377md.s:534    .text.action_function:0000000000000000 action_function

UNDEFINED SYMBOLS
clear_keyboard
bootloader_jump
keymap_key_to_keycode
keymap_fn_to_action
__do_clear_bss
