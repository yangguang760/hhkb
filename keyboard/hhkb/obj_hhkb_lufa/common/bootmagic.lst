   1               		.file	"bootmagic.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.scan_keycode,"ax",@progbits
  12               	scan_keycode:
  13               	.LFB104:
  14               		.file 1 "../../tmk_core/common/bootmagic.c"
   1:../../tmk_core/common/bootmagic.c **** #include <stdint.h>
   2:../../tmk_core/common/bootmagic.c **** #include <stdbool.h>
   3:../../tmk_core/common/bootmagic.c **** #include <util/delay.h>
   4:../../tmk_core/common/bootmagic.c **** #include "matrix.h"
   5:../../tmk_core/common/bootmagic.c **** #include "bootloader.h"
   6:../../tmk_core/common/bootmagic.c **** #include "debug.h"
   7:../../tmk_core/common/bootmagic.c **** #include "keymap.h"
   8:../../tmk_core/common/bootmagic.c **** #include "host.h"
   9:../../tmk_core/common/bootmagic.c **** #include "action_layer.h"
  10:../../tmk_core/common/bootmagic.c **** #include "eeconfig.h"
  11:../../tmk_core/common/bootmagic.c **** #include "bootmagic.h"
  12:../../tmk_core/common/bootmagic.c **** 
  13:../../tmk_core/common/bootmagic.c **** 
  14:../../tmk_core/common/bootmagic.c **** void bootmagic(void)
  15:../../tmk_core/common/bootmagic.c **** {
  16:../../tmk_core/common/bootmagic.c ****     /* check signature */
  17:../../tmk_core/common/bootmagic.c ****     if (!eeconfig_is_enabled()) {
  18:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
  19:../../tmk_core/common/bootmagic.c ****     }
  20:../../tmk_core/common/bootmagic.c **** 
  21:../../tmk_core/common/bootmagic.c ****     /* do scans in case of bounce */
  22:../../tmk_core/common/bootmagic.c ****     print("boogmagic scan: ... ");
  23:../../tmk_core/common/bootmagic.c ****     uint8_t scan = 100;
  24:../../tmk_core/common/bootmagic.c ****     while (scan--) { matrix_scan(); _delay_ms(10); }
  25:../../tmk_core/common/bootmagic.c ****     print("done.\n");
  26:../../tmk_core/common/bootmagic.c **** 
  27:../../tmk_core/common/bootmagic.c ****     /* bootmagic skip */
  28:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SKIP)) {
  29:../../tmk_core/common/bootmagic.c ****         return;
  30:../../tmk_core/common/bootmagic.c ****     }
  31:../../tmk_core/common/bootmagic.c **** 
  32:../../tmk_core/common/bootmagic.c ****     /* eeconfig clear */
  33:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
  34:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
  35:../../tmk_core/common/bootmagic.c ****     }
  36:../../tmk_core/common/bootmagic.c **** 
  37:../../tmk_core/common/bootmagic.c ****     /* bootloader */
  38:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_BOOTLOADER)) {
  39:../../tmk_core/common/bootmagic.c ****         bootloader_jump();
  40:../../tmk_core/common/bootmagic.c ****     }
  41:../../tmk_core/common/bootmagic.c **** 
  42:../../tmk_core/common/bootmagic.c ****     /* debug enable */
  43:../../tmk_core/common/bootmagic.c ****     debug_config.raw = eeconfig_read_debug();
  44:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
  45:../../tmk_core/common/bootmagic.c ****         if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
  46:../../tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
  47:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
  48:../../tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
  49:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
  50:../../tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
  51:../../tmk_core/common/bootmagic.c ****         } else {
  52:../../tmk_core/common/bootmagic.c ****             debug_config.enable = !debug_config.enable;
  53:../../tmk_core/common/bootmagic.c ****         }
  54:../../tmk_core/common/bootmagic.c ****     }
  55:../../tmk_core/common/bootmagic.c ****     eeconfig_write_debug(debug_config.raw);
  56:../../tmk_core/common/bootmagic.c **** 
  57:../../tmk_core/common/bootmagic.c ****     /* keymap config */
  58:../../tmk_core/common/bootmagic.c ****     keymap_config.raw = eeconfig_read_keymap();
  59:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
  60:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
  61:../../tmk_core/common/bootmagic.c ****     }
  62:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
  63:../../tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
  64:../../tmk_core/common/bootmagic.c ****     }
  65:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
  66:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
  67:../../tmk_core/common/bootmagic.c ****     }
  68:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
  69:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
  70:../../tmk_core/common/bootmagic.c ****     }
  71:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_NO_GUI)) {
  72:../../tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
  73:../../tmk_core/common/bootmagic.c ****     }
  74:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
  75:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
  76:../../tmk_core/common/bootmagic.c ****     }
  77:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
  78:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
  79:../../tmk_core/common/bootmagic.c ****     }
  80:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_HOST_NKRO)) {
  81:../../tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
  82:../../tmk_core/common/bootmagic.c ****     }
  83:../../tmk_core/common/bootmagic.c ****     eeconfig_write_keymap(keymap_config.raw);
  84:../../tmk_core/common/bootmagic.c **** 
  85:../../tmk_core/common/bootmagic.c **** #ifdef NKRO_ENABLE
  86:../../tmk_core/common/bootmagic.c ****     keyboard_nkro = keymap_config.nkro;
  87:../../tmk_core/common/bootmagic.c **** #endif
  88:../../tmk_core/common/bootmagic.c **** 
  89:../../tmk_core/common/bootmagic.c ****     /* default layer */
  90:../../tmk_core/common/bootmagic.c ****     uint8_t default_layer = 0;
  91:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
  92:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
  93:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
  94:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
  95:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
  96:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
  97:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
  98:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
  99:../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 100:../../tmk_core/common/bootmagic.c ****         eeconfig_write_default_layer(default_layer);
 101:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 102:../../tmk_core/common/bootmagic.c ****     } else {
 103:../../tmk_core/common/bootmagic.c ****         default_layer = eeconfig_read_default_layer();
 104:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 105:../../tmk_core/common/bootmagic.c ****     }
 106:../../tmk_core/common/bootmagic.c **** }
 107:../../tmk_core/common/bootmagic.c **** 
 108:../../tmk_core/common/bootmagic.c **** static bool scan_keycode(uint8_t keycode)
 109:../../tmk_core/common/bootmagic.c **** {
  15               		.loc 1 109 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 EF92      		push r14
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 14, -2
  22 0002 FF92      		push r15
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 15, -3
  26 0004 0F93      		push r16
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 16, -4
  30 0006 1F93      		push r17
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 17, -5
  34 0008 CF93      		push r28
  35               	.LCFI4:
  36               		.cfi_def_cfa_offset 7
  37               		.cfi_offset 28, -6
  38 000a DF93      		push r29
  39               	.LCFI5:
  40               		.cfi_def_cfa_offset 8
  41               		.cfi_offset 29, -7
  42               	/* prologue: function */
  43               	/* frame size = 0 */
  44               	/* stack size = 6 */
  45               	.L__stack_usage = 6
  46 000c D82F      		mov r29,r24
  47               	.LVL1:
  48               	.LBB6:
 110:../../tmk_core/common/bootmagic.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
  49               		.loc 1 110 0
  50 000e C0E0      		ldi r28,0
  51               	.LVL2:
  52               	.L7:
  53               	.LBB7:
 111:../../tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
  54               		.loc 1 111 0
  55 0010 8C2F      		mov r24,r28
  56 0012 0E94 0000 		call matrix_get_row
  57               	.LVL3:
  58 0016 00E0      		ldi r16,0
  59 0018 10E0      		ldi r17,0
  60               	.LBB8:
 112:../../tmk_core/common/bootmagic.c ****         for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 113:../../tmk_core/common/bootmagic.c ****             if (matrix_row & ((matrix_row_t)1<<c)) {
  61               		.loc 1 113 0
  62 001a E82E      		mov r14,r24
  63 001c F12C      		mov r15,__zero_reg__
  64               	.LVL4:
  65               	.L3:
  66 001e C701      		movw r24,r14
  67 0020 002E      		mov r0,r16
  68 0022 00C0      		rjmp 2f
  69               		1:
  70 0024 9595      		asr r25
  71 0026 8795      		ror r24
  72               		2:
  73 0028 0A94      		dec r0
  74 002a 02F4      		brpl 1b
  75 002c 80FD      		sbrc r24,0
  76 002e 00C0      		rjmp .L2
  77               	.L6:
  78               	.LVL5:
  79 0030 0F5F      		subi r16,-1
  80 0032 1F4F      		sbci r17,-1
  81               	.LVL6:
 112:../../tmk_core/common/bootmagic.c ****         for (uint8_t c = 0; c < MATRIX_COLS; c++) {
  82               		.loc 1 112 0
  83 0034 0830      		cpi r16,8
  84 0036 1105      		cpc r17,__zero_reg__
  85 0038 01F4      		brne .L3
  86 003a 00C0      		rjmp .L13
  87               	.L2:
 114:../../tmk_core/common/bootmagic.c ****                 if (keycode == keymap_key_to_keycode(0, (keypos_t){ .row = r, .col = c })) {
  88               		.loc 1 114 0
  89 003c 602F      		mov r22,r16
  90 003e 7C2F      		mov r23,r28
  91 0040 80E0      		ldi r24,0
  92 0042 0E94 0000 		call keymap_key_to_keycode
  93               	.LVL7:
  94 0046 D813      		cpse r29,r24
  95 0048 00C0      		rjmp .L6
 115:../../tmk_core/common/bootmagic.c ****                     return true;
  96               		.loc 1 115 0
  97 004a 81E0      		ldi r24,lo8(1)
  98 004c 00C0      		rjmp .L5
  99               	.L13:
 100               	.LBE8:
 101               	.LBE7:
 110:../../tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
 102               		.loc 1 110 0 discriminator 2
 103 004e CF5F      		subi r28,lo8(-(1))
 104               	.LVL8:
 105 0050 C830      		cpi r28,lo8(8)
 106 0052 01F4      		brne .L7
 107               	.LBE6:
 116:../../tmk_core/common/bootmagic.c ****                 }
 117:../../tmk_core/common/bootmagic.c ****             }
 118:../../tmk_core/common/bootmagic.c ****         }
 119:../../tmk_core/common/bootmagic.c ****     }
 120:../../tmk_core/common/bootmagic.c ****     return false;
 108               		.loc 1 120 0
 109 0054 80E0      		ldi r24,0
 110               	.LVL9:
 111               	.L5:
 112               	/* epilogue start */
 121:../../tmk_core/common/bootmagic.c **** }
 113               		.loc 1 121 0
 114 0056 DF91      		pop r29
 115               	.LVL10:
 116 0058 CF91      		pop r28
 117               	.LVL11:
 118 005a 1F91      		pop r17
 119 005c 0F91      		pop r16
 120 005e FF90      		pop r15
 121 0060 EF90      		pop r14
 122               	.LVL12:
 123 0062 0895      		ret
 124               		.cfi_endproc
 125               	.LFE104:
 127               		.section	.text.bootmagic_scan_keycode,"ax",@progbits
 128               	.global	bootmagic_scan_keycode
 130               	bootmagic_scan_keycode:
 131               	.LFB105:
 122:../../tmk_core/common/bootmagic.c **** 
 123:../../tmk_core/common/bootmagic.c **** bool bootmagic_scan_keycode(uint8_t keycode)
 124:../../tmk_core/common/bootmagic.c **** {
 132               		.loc 1 124 0
 133               		.cfi_startproc
 134               	.LVL13:
 135 0000 CF93      		push r28
 136               	.LCFI6:
 137               		.cfi_def_cfa_offset 3
 138               		.cfi_offset 28, -2
 139               	/* prologue: function */
 140               	/* frame size = 0 */
 141               	/* stack size = 1 */
 142               	.L__stack_usage = 1
 143 0002 C82F      		mov r28,r24
 125:../../tmk_core/common/bootmagic.c ****     if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;
 144               		.loc 1 125 0
 145 0004 8CE2      		ldi r24,lo8(44)
 146               	.LVL14:
 147 0006 0E94 0000 		call scan_keycode
 148               	.LVL15:
 149 000a 8823      		tst r24
 150 000c 01F0      		breq .L15
 126:../../tmk_core/common/bootmagic.c **** 
 127:../../tmk_core/common/bootmagic.c ****     return scan_keycode(keycode);
 151               		.loc 1 127 0
 152 000e 8C2F      		mov r24,r28
 153               	/* epilogue start */
 128:../../tmk_core/common/bootmagic.c **** }
 154               		.loc 1 128 0
 155 0010 CF91      		pop r28
 156               	.LVL16:
 127:../../tmk_core/common/bootmagic.c **** }
 157               		.loc 1 127 0
 158 0012 0C94 0000 		jmp scan_keycode
 159               	.LVL17:
 160               	.L15:
 161               		.loc 1 128 0
 162 0016 80E0      		ldi r24,0
 163               	/* epilogue start */
 164 0018 CF91      		pop r28
 165               	.LVL18:
 166 001a 0895      		ret
 167               		.cfi_endproc
 168               	.LFE105:
 170               		.section	.text.bootmagic,"ax",@progbits
 171               	.global	bootmagic
 173               	bootmagic:
 174               	.LFB103:
  15:../../tmk_core/common/bootmagic.c ****     /* check signature */
 175               		.loc 1 15 0
 176               		.cfi_startproc
 177 0000 CF93      		push r28
 178               	.LCFI7:
 179               		.cfi_def_cfa_offset 3
 180               		.cfi_offset 28, -2
 181               	/* prologue: function */
 182               	/* frame size = 0 */
 183               	/* stack size = 1 */
 184               	.L__stack_usage = 1
  17:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
 185               		.loc 1 17 0
 186 0002 0E94 0000 		call eeconfig_is_enabled
 187               	.LVL19:
 188 0006 8111      		cpse r24,__zero_reg__
 189 0008 00C0      		rjmp .L17
  18:../../tmk_core/common/bootmagic.c ****     }
 190               		.loc 1 18 0
 191 000a 0E94 0000 		call eeconfig_init
 192               	.LVL20:
 193               	.L17:
  22:../../tmk_core/common/bootmagic.c ****     uint8_t scan = 100;
 194               		.loc 1 22 0
 195 000e 80E0      		ldi r24,lo8(__c.4718)
 196 0010 90E0      		ldi r25,hi8(__c.4718)
 197 0012 0E94 0000 		call xputs
 198               	.LVL21:
  24:../../tmk_core/common/bootmagic.c ****     print("done.\n");
 199               		.loc 1 24 0
 200 0016 C5E6      		ldi r28,lo8(101)
 201               	.LVL22:
 202               	.L18:
 203 0018 C150      		subi r28,lo8(-(-1))
 204               	.LVL23:
  24:../../tmk_core/common/bootmagic.c ****     print("done.\n");
 205               		.loc 1 24 0 is_stmt 0 discriminator 1
 206 001a 01F0      		breq .L98
 207               	.LVL24:
  24:../../tmk_core/common/bootmagic.c ****     print("done.\n");
 208               		.loc 1 24 0 discriminator 2
 209 001c 0E94 0000 		call matrix_scan
 210               	.LVL25:
 211               	.LBB9:
 212               	.LBB10:
 213               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/lib/avr/include/util/delay.h **** 
 155:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/lib/avr/include/util/delay.h **** 
 158:/usr/lib/avr/include/util/delay.h **** 	#else
 159:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 160:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/lib/avr/include/util/delay.h **** 	#endif
 162:/usr/lib/avr/include/util/delay.h **** 
 163:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 214               		.loc 2 163 0 is_stmt 1 discriminator 2
 215 0020 8FE3      		ldi r24,lo8(-25537)
 216 0022 9CE9      		ldi r25,hi8(-25537)
 217 0024 0197      	1:	sbiw r24,1
 218 0026 01F4      		brne 1b
 219 0028 00C0      		rjmp .
 220 002a 0000      		nop
 221 002c 00C0      		rjmp .L18
 222               	.LVL26:
 223               	.L98:
 224               	.LBE10:
 225               	.LBE9:
  25:../../tmk_core/common/bootmagic.c **** 
 226               		.loc 1 25 0
 227 002e 80E0      		ldi r24,lo8(__c.4724)
 228 0030 90E0      		ldi r25,hi8(__c.4724)
 229 0032 0E94 0000 		call xputs
 230               	.LVL27:
  28:../../tmk_core/common/bootmagic.c ****         return;
 231               		.loc 1 28 0
 232 0036 89E2      		ldi r24,lo8(41)
 233 0038 0E94 0000 		call bootmagic_scan_keycode
 234               	.LVL28:
 235 003c 8111      		cpse r24,__zero_reg__
 236 003e 00C0      		rjmp .L16
  33:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
 237               		.loc 1 33 0
 238 0040 8AE2      		ldi r24,lo8(42)
 239 0042 0E94 0000 		call bootmagic_scan_keycode
 240               	.LVL29:
 241 0046 8111      		cpse r24,__zero_reg__
  34:../../tmk_core/common/bootmagic.c ****     }
 242               		.loc 1 34 0
 243 0048 0E94 0000 		call eeconfig_init
 244               	.LVL30:
 245               	.L21:
  38:../../tmk_core/common/bootmagic.c ****         bootloader_jump();
 246               		.loc 1 38 0
 247 004c 85E0      		ldi r24,lo8(5)
 248 004e 0E94 0000 		call bootmagic_scan_keycode
 249               	.LVL31:
 250 0052 8111      		cpse r24,__zero_reg__
  39:../../tmk_core/common/bootmagic.c ****     }
 251               		.loc 1 39 0
 252 0054 0E94 0000 		call bootloader_jump
 253               	.LVL32:
 254               	.L22:
  43:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
 255               		.loc 1 43 0
 256 0058 0E94 0000 		call eeconfig_read_debug
 257               	.LVL33:
 258 005c 8093 0000 		sts debug_config,r24
  44:../../tmk_core/common/bootmagic.c ****         if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
 259               		.loc 1 44 0
 260 0060 87E0      		ldi r24,lo8(7)
 261 0062 0E94 0000 		call bootmagic_scan_keycode
 262               	.LVL34:
 263 0066 8823      		tst r24
 264 0068 01F0      		breq .L23
  45:../../tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
 265               		.loc 1 45 0
 266 006a 8BE1      		ldi r24,lo8(27)
 267 006c 0E94 0000 		call bootmagic_scan_keycode
 268               	.LVL35:
 269 0070 8823      		tst r24
 270 0072 01F0      		breq .L24
  46:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
 271               		.loc 1 46 0
 272 0074 8091 0000 		lds r24,debug_config
 273 0078 81FB      		bst r24,1
 274 007a 2227      		clr r18
 275 007c 20F9      		bld r18,0
 276 007e 91E0      		ldi r25,lo8(1)
 277 0080 9227      		eor r25,r18
 278 0082 90FB      		bst r25,0
 279 0084 81F9      		bld r24,1
 280 0086 00C0      		rjmp .L95
 281               	.L24:
  47:../../tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
 282               		.loc 1 47 0
 283 0088 8EE0      		ldi r24,lo8(14)
 284 008a 0E94 0000 		call bootmagic_scan_keycode
 285               	.LVL36:
 286 008e 8823      		tst r24
 287 0090 01F0      		breq .L25
  48:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
 288               		.loc 1 48 0
 289 0092 8091 0000 		lds r24,debug_config
 290 0096 82FB      		bst r24,2
 291 0098 2227      		clr r18
 292 009a 20F9      		bld r18,0
 293 009c 91E0      		ldi r25,lo8(1)
 294 009e 9227      		eor r25,r18
 295 00a0 90FB      		bst r25,0
 296 00a2 82F9      		bld r24,2
 297               	.L95:
 298 00a4 8093 0000 		sts debug_config,r24
 299 00a8 00C0      		rjmp .L23
 300               	.L25:
  49:../../tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
 301               		.loc 1 49 0
 302 00aa 80E1      		ldi r24,lo8(16)
 303 00ac 0E94 0000 		call bootmagic_scan_keycode
 304               	.LVL37:
 305 00b0 9091 0000 		lds r25,debug_config
 306 00b4 8823      		tst r24
 307 00b6 01F0      		breq .L26
  50:../../tmk_core/common/bootmagic.c ****         } else {
 308               		.loc 1 50 0
 309 00b8 93FB      		bst r25,3
 310 00ba 2227      		clr r18
 311 00bc 20F9      		bld r18,0
 312 00be 81E0      		ldi r24,lo8(1)
 313 00c0 8227      		eor r24,r18
 314 00c2 80FB      		bst r24,0
 315 00c4 93F9      		bld r25,3
 316 00c6 00C0      		rjmp .L96
 317               	.L26:
  52:../../tmk_core/common/bootmagic.c ****         }
 318               		.loc 1 52 0
 319 00c8 892F      		mov r24,r25
 320 00ca 8095      		com r24
 321 00cc 80FB      		bst r24,0
 322 00ce 90F9      		bld r25,0
 323               	.L96:
 324 00d0 9093 0000 		sts debug_config,r25
 325               	.L23:
  55:../../tmk_core/common/bootmagic.c **** 
 326               		.loc 1 55 0
 327 00d4 8091 0000 		lds r24,debug_config
 328 00d8 0E94 0000 		call eeconfig_write_debug
 329               	.LVL38:
  58:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
 330               		.loc 1 58 0
 331 00dc 0E94 0000 		call eeconfig_read_keymap
 332               	.LVL39:
 333 00e0 8093 0000 		sts keymap_config,r24
  59:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
 334               		.loc 1 59 0
 335 00e4 80EE      		ldi r24,lo8(-32)
 336 00e6 0E94 0000 		call bootmagic_scan_keycode
 337               	.LVL40:
 338 00ea 8823      		tst r24
 339 00ec 01F0      		breq .L27
  60:../../tmk_core/common/bootmagic.c ****     }
 340               		.loc 1 60 0
 341 00ee 8091 0000 		lds r24,keymap_config
 342 00f2 982F      		mov r25,r24
 343 00f4 9095      		com r25
 344 00f6 90FB      		bst r25,0
 345 00f8 80F9      		bld r24,0
 346 00fa 8093 0000 		sts keymap_config,r24
 347               	.L27:
  62:../../tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
 348               		.loc 1 62 0
 349 00fe 89E3      		ldi r24,lo8(57)
 350 0100 0E94 0000 		call bootmagic_scan_keycode
 351               	.LVL41:
 352 0104 8823      		tst r24
 353 0106 01F0      		breq .L28
  63:../../tmk_core/common/bootmagic.c ****     }
 354               		.loc 1 63 0
 355 0108 8091 0000 		lds r24,keymap_config
 356 010c 81FB      		bst r24,1
 357 010e 2227      		clr r18
 358 0110 20F9      		bld r18,0
 359 0112 91E0      		ldi r25,lo8(1)
 360 0114 9227      		eor r25,r18
 361 0116 90FB      		bst r25,0
 362 0118 81F9      		bld r24,1
 363 011a 8093 0000 		sts keymap_config,r24
 364               	.L28:
  65:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
 365               		.loc 1 65 0
 366 011e 82EE      		ldi r24,lo8(-30)
 367 0120 0E94 0000 		call bootmagic_scan_keycode
 368               	.LVL42:
 369 0124 8823      		tst r24
 370 0126 01F0      		breq .L29
  66:../../tmk_core/common/bootmagic.c ****     }
 371               		.loc 1 66 0
 372 0128 8091 0000 		lds r24,keymap_config
 373 012c 82FB      		bst r24,2
 374 012e 2227      		clr r18
 375 0130 20F9      		bld r18,0
 376 0132 91E0      		ldi r25,lo8(1)
 377 0134 9227      		eor r25,r18
 378 0136 90FB      		bst r25,0
 379 0138 82F9      		bld r24,2
 380 013a 8093 0000 		sts keymap_config,r24
 381               	.L29:
  68:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
 382               		.loc 1 68 0
 383 013e 86EE      		ldi r24,lo8(-26)
 384 0140 0E94 0000 		call bootmagic_scan_keycode
 385               	.LVL43:
 386 0144 8823      		tst r24
 387 0146 01F0      		breq .L30
  69:../../tmk_core/common/bootmagic.c ****     }
 388               		.loc 1 69 0
 389 0148 8091 0000 		lds r24,keymap_config
 390 014c 83FB      		bst r24,3
 391 014e 2227      		clr r18
 392 0150 20F9      		bld r18,0
 393 0152 91E0      		ldi r25,lo8(1)
 394 0154 9227      		eor r25,r18
 395 0156 90FB      		bst r25,0
 396 0158 83F9      		bld r24,3
 397 015a 8093 0000 		sts keymap_config,r24
 398               	.L30:
  71:../../tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
 399               		.loc 1 71 0
 400 015e 83EE      		ldi r24,lo8(-29)
 401 0160 0E94 0000 		call bootmagic_scan_keycode
 402               	.LVL44:
 403 0164 8823      		tst r24
 404 0166 01F0      		breq .L31
  72:../../tmk_core/common/bootmagic.c ****     }
 405               		.loc 1 72 0
 406 0168 8091 0000 		lds r24,keymap_config
 407 016c 84FB      		bst r24,4
 408 016e 2227      		clr r18
 409 0170 20F9      		bld r18,0
 410 0172 91E0      		ldi r25,lo8(1)
 411 0174 9227      		eor r25,r18
 412 0176 90FB      		bst r25,0
 413 0178 84F9      		bld r24,4
 414 017a 8093 0000 		sts keymap_config,r24
 415               	.L31:
  74:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
 416               		.loc 1 74 0
 417 017e 85E3      		ldi r24,lo8(53)
 418 0180 0E94 0000 		call bootmagic_scan_keycode
 419               	.LVL45:
 420 0184 8823      		tst r24
 421 0186 01F0      		breq .L32
  75:../../tmk_core/common/bootmagic.c ****     }
 422               		.loc 1 75 0
 423 0188 8091 0000 		lds r24,keymap_config
 424 018c 85FB      		bst r24,5
 425 018e 2227      		clr r18
 426 0190 20F9      		bld r18,0
 427 0192 91E0      		ldi r25,lo8(1)
 428 0194 9227      		eor r25,r18
 429 0196 90FB      		bst r25,0
 430 0198 85F9      		bld r24,5
 431 019a 8093 0000 		sts keymap_config,r24
 432               	.L32:
  77:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
 433               		.loc 1 77 0
 434 019e 81E3      		ldi r24,lo8(49)
 435 01a0 0E94 0000 		call bootmagic_scan_keycode
 436               	.LVL46:
 437 01a4 8823      		tst r24
 438 01a6 01F0      		breq .L33
  78:../../tmk_core/common/bootmagic.c ****     }
 439               		.loc 1 78 0
 440 01a8 8091 0000 		lds r24,keymap_config
 441 01ac 86FB      		bst r24,6
 442 01ae 2227      		clr r18
 443 01b0 20F9      		bld r18,0
 444 01b2 91E0      		ldi r25,lo8(1)
 445 01b4 9227      		eor r25,r18
 446 01b6 90FB      		bst r25,0
 447 01b8 86F9      		bld r24,6
 448 01ba 8093 0000 		sts keymap_config,r24
 449               	.L33:
  80:../../tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
 450               		.loc 1 80 0
 451 01be 81E1      		ldi r24,lo8(17)
 452 01c0 0E94 0000 		call bootmagic_scan_keycode
 453               	.LVL47:
 454 01c4 8823      		tst r24
 455 01c6 01F0      		breq .L34
  81:../../tmk_core/common/bootmagic.c ****     }
 456               		.loc 1 81 0
 457 01c8 8091 0000 		lds r24,keymap_config
 458 01cc 87FB      		bst r24,7
 459 01ce 2227      		clr r18
 460 01d0 20F9      		bld r18,0
 461 01d2 91E0      		ldi r25,lo8(1)
 462 01d4 9227      		eor r25,r18
 463 01d6 90FB      		bst r25,0
 464 01d8 87F9      		bld r24,7
 465 01da 8093 0000 		sts keymap_config,r24
 466               	.L34:
  83:../../tmk_core/common/bootmagic.c **** 
 467               		.loc 1 83 0
 468 01de 8091 0000 		lds r24,keymap_config
 469 01e2 0E94 0000 		call eeconfig_write_keymap
 470               	.LVL48:
  86:../../tmk_core/common/bootmagic.c **** #endif
 471               		.loc 1 86 0
 472 01e6 8091 0000 		lds r24,keymap_config
 473 01ea 87FB      		bst r24,7
 474 01ec 8827      		clr r24
 475 01ee 80F9      		bld r24,0
 476 01f0 8093 0000 		sts keyboard_nkro,r24
 477               	.LVL49:
  91:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
 478               		.loc 1 91 0
 479 01f4 87E2      		ldi r24,lo8(39)
 480 01f6 0E94 0000 		call bootmagic_scan_keycode
 481               	.LVL50:
 482 01fa C82F      		mov r28,r24
 483               	.LVL51:
  92:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 484               		.loc 1 92 0
 485 01fc 8EE1      		ldi r24,lo8(30)
 486               	.LVL52:
 487 01fe 0E94 0000 		call bootmagic_scan_keycode
 488               	.LVL53:
 489 0202 8111      		cpse r24,__zero_reg__
  92:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 490               		.loc 1 92 0 is_stmt 0 discriminator 1
 491 0204 C260      		ori r28,lo8(2)
 492               	.LVL54:
 493               	.L35:
  93:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 494               		.loc 1 93 0 is_stmt 1
 495 0206 8FE1      		ldi r24,lo8(31)
 496 0208 0E94 0000 		call bootmagic_scan_keycode
 497               	.LVL55:
 498 020c 8111      		cpse r24,__zero_reg__
  93:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 499               		.loc 1 93 0 is_stmt 0 discriminator 1
 500 020e C460      		ori r28,lo8(4)
 501               	.LVL56:
 502               	.L36:
  94:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 503               		.loc 1 94 0 is_stmt 1
 504 0210 80E2      		ldi r24,lo8(32)
 505 0212 0E94 0000 		call bootmagic_scan_keycode
 506               	.LVL57:
 507 0216 8111      		cpse r24,__zero_reg__
  94:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 508               		.loc 1 94 0 is_stmt 0 discriminator 1
 509 0218 C860      		ori r28,lo8(8)
 510               	.LVL58:
 511               	.L37:
  95:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 512               		.loc 1 95 0 is_stmt 1
 513 021a 81E2      		ldi r24,lo8(33)
 514 021c 0E94 0000 		call bootmagic_scan_keycode
 515               	.LVL59:
 516 0220 8111      		cpse r24,__zero_reg__
  95:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 517               		.loc 1 95 0 is_stmt 0 discriminator 1
 518 0222 C061      		ori r28,lo8(16)
 519               	.LVL60:
 520               	.L38:
  96:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 521               		.loc 1 96 0 is_stmt 1
 522 0224 82E2      		ldi r24,lo8(34)
 523 0226 0E94 0000 		call bootmagic_scan_keycode
 524               	.LVL61:
 525 022a 8111      		cpse r24,__zero_reg__
  96:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 526               		.loc 1 96 0 is_stmt 0 discriminator 1
 527 022c C062      		ori r28,lo8(32)
 528               	.LVL62:
 529               	.L39:
  97:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 530               		.loc 1 97 0 is_stmt 1
 531 022e 83E2      		ldi r24,lo8(35)
 532 0230 0E94 0000 		call bootmagic_scan_keycode
 533               	.LVL63:
 534 0234 8111      		cpse r24,__zero_reg__
  97:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 535               		.loc 1 97 0 is_stmt 0 discriminator 1
 536 0236 C064      		ori r28,lo8(64)
 537               	.LVL64:
 538               	.L40:
  98:../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 539               		.loc 1 98 0 is_stmt 1
 540 0238 84E2      		ldi r24,lo8(36)
 541 023a 0E94 0000 		call bootmagic_scan_keycode
 542               	.LVL65:
 543 023e 8823      		tst r24
 544 0240 01F0      		breq .L41
  98:../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 545               		.loc 1 98 0 is_stmt 0 discriminator 1
 546 0242 C068      		ori r28,lo8(-128)
 547               	.LVL66:
 548 0244 00C0      		rjmp .L42
 549               	.L41:
  99:../../tmk_core/common/bootmagic.c ****         eeconfig_write_default_layer(default_layer);
 550               		.loc 1 99 0 is_stmt 1
 551 0246 CC23      		tst r28
 552 0248 01F0      		breq .L43
 553               	.L42:
 100:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 554               		.loc 1 100 0
 555 024a 8C2F      		mov r24,r28
 556 024c 0E94 0000 		call eeconfig_write_default_layer
 557               	.LVL67:
 101:../../tmk_core/common/bootmagic.c ****     } else {
 558               		.loc 1 101 0
 559 0250 6C2F      		mov r22,r28
 560 0252 00C0      		rjmp .L97
 561               	.L43:
 103:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 562               		.loc 1 103 0
 563 0254 0E94 0000 		call eeconfig_read_default_layer
 564               	.LVL68:
 104:../../tmk_core/common/bootmagic.c ****     }
 565               		.loc 1 104 0
 566 0258 682F      		mov r22,r24
 567               	.LVL69:
 568               	.L97:
 569 025a 70E0      		ldi r23,0
 570 025c 80E0      		ldi r24,0
 571 025e 90E0      		ldi r25,0
 572               	/* epilogue start */
 106:../../tmk_core/common/bootmagic.c **** 
 573               		.loc 1 106 0
 574 0260 CF91      		pop r28
 104:../../tmk_core/common/bootmagic.c ****     }
 575               		.loc 1 104 0
 576 0262 0C94 0000 		jmp default_layer_set
 577               	.LVL70:
 578               	.L16:
 579               	/* epilogue start */
 106:../../tmk_core/common/bootmagic.c **** 
 580               		.loc 1 106 0
 581 0266 CF91      		pop r28
 582               	.LVL71:
 583 0268 0895      		ret
 584               		.cfi_endproc
 585               	.LFE103:
 587               		.section	.progmem.data.__c.4724,"a",@progbits
 590               	__c.4724:
 591 0000 646F 6E65 		.string	"done.\n"
 591      2E0A 00
 592               		.section	.progmem.data.__c.4718,"a",@progbits
 595               	__c.4718:
 596 0000 626F 6F67 		.string	"boogmagic scan: ... "
 596      6D61 6769 
 596      6320 7363 
 596      616E 3A20 
 596      2E2E 2E20 
 597               		.comm	keymap_config,1,1
 598               		.text
 599               	.Letext0:
 600               		.file 3 "/usr/lib/avr/include/stdint.h"
 601               		.file 4 "../../tmk_core/common/matrix.h"
 602               		.file 5 "../../tmk_core/common/debug.h"
 603               		.file 6 "../../tmk_core/common/keyboard.h"
 604               		.file 7 "../../tmk_core/common/keymap.h"
 605               		.file 8 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 606               		.file 9 "../../tmk_core/common/host.h"
 607               		.file 10 "../../tmk_core/common/eeconfig.h"
 608               		.file 11 "../../tmk_core/common/bootloader.h"
 609               		.file 12 "../../tmk_core/common/avr/xprintf.h"
 610               		.file 13 "../../tmk_core/common/keycode.h"
 611               		.file 14 "../../tmk_core/common/action_layer.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 bootmagic.c
     /tmp/ccJQVAfh.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccJQVAfh.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccJQVAfh.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccJQVAfh.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccJQVAfh.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccJQVAfh.s:12     .text.scan_keycode:0000000000000000 scan_keycode
     /tmp/ccJQVAfh.s:130    .text.bootmagic_scan_keycode:0000000000000000 bootmagic_scan_keycode
     /tmp/ccJQVAfh.s:173    .text.bootmagic:0000000000000000 bootmagic
     /tmp/ccJQVAfh.s:595    .progmem.data.__c.4718:0000000000000000 __c.4718
     /tmp/ccJQVAfh.s:590    .progmem.data.__c.4724:0000000000000000 __c.4724
                            *COM*:0000000000000001 keymap_config

UNDEFINED SYMBOLS
matrix_get_row
keymap_key_to_keycode
eeconfig_is_enabled
eeconfig_init
xputs
matrix_scan
bootloader_jump
eeconfig_read_debug
debug_config
eeconfig_write_debug
eeconfig_read_keymap
eeconfig_write_keymap
keyboard_nkro
eeconfig_write_default_layer
eeconfig_read_default_layer
default_layer_set
__do_clear_bss
