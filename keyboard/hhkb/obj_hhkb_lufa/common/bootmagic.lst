   1               		.file	"bootmagic.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.scan_keycode,"ax",@progbits
  12               	scan_keycode:
  13               	.LFB104:
  14               		.file 1 "../../tmk_core/common/bootmagic.c"
   1:../../tmk_core/common/bootmagic.c **** #include <stdint.h>
   2:../../tmk_core/common/bootmagic.c **** #include <stdbool.h>
   3:../../tmk_core/common/bootmagic.c **** #include <util/delay.h>
   4:../../tmk_core/common/bootmagic.c **** #include "matrix.h"
   5:../../tmk_core/common/bootmagic.c **** #include "bootloader.h"
   6:../../tmk_core/common/bootmagic.c **** #include "debug.h"
   7:../../tmk_core/common/bootmagic.c **** #include "keymap.h"
   8:../../tmk_core/common/bootmagic.c **** #include "host.h"
   9:../../tmk_core/common/bootmagic.c **** #include "action_layer.h"
  10:../../tmk_core/common/bootmagic.c **** #include "eeconfig.h"
  11:../../tmk_core/common/bootmagic.c **** #include "bootmagic.h"
  12:../../tmk_core/common/bootmagic.c **** 
  13:../../tmk_core/common/bootmagic.c **** 
  14:../../tmk_core/common/bootmagic.c **** void bootmagic(void)
  15:../../tmk_core/common/bootmagic.c **** {
  16:../../tmk_core/common/bootmagic.c ****     /* check signature */
  17:../../tmk_core/common/bootmagic.c ****     if (!eeconfig_is_enabled()) {
  18:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
  19:../../tmk_core/common/bootmagic.c ****     }
  20:../../tmk_core/common/bootmagic.c **** 
  21:../../tmk_core/common/bootmagic.c ****     /* do scans in case of bounce */
  22:../../tmk_core/common/bootmagic.c ****     print("boogmagic scan: ... ");
  23:../../tmk_core/common/bootmagic.c ****     uint8_t scan = 100;
  24:../../tmk_core/common/bootmagic.c ****     while (scan--) { matrix_scan(); _delay_ms(10); }
  25:../../tmk_core/common/bootmagic.c ****     print("done.\n");
  26:../../tmk_core/common/bootmagic.c **** 
  27:../../tmk_core/common/bootmagic.c ****     /* bootmagic skip */
  28:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SKIP)) {
  29:../../tmk_core/common/bootmagic.c ****         return;
  30:../../tmk_core/common/bootmagic.c ****     }
  31:../../tmk_core/common/bootmagic.c **** 
  32:../../tmk_core/common/bootmagic.c ****     /* eeconfig clear */
  33:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
  34:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
  35:../../tmk_core/common/bootmagic.c ****     }
  36:../../tmk_core/common/bootmagic.c **** 
  37:../../tmk_core/common/bootmagic.c ****     /* bootloader */
  38:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_BOOTLOADER)) {
  39:../../tmk_core/common/bootmagic.c ****         bootloader_jump();
  40:../../tmk_core/common/bootmagic.c ****     }
  41:../../tmk_core/common/bootmagic.c **** 
  42:../../tmk_core/common/bootmagic.c ****     /* debug enable */
  43:../../tmk_core/common/bootmagic.c ****     debug_config.raw = eeconfig_read_debug();
  44:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
  45:../../tmk_core/common/bootmagic.c ****         if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
  46:../../tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
  47:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
  48:../../tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
  49:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
  50:../../tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
  51:../../tmk_core/common/bootmagic.c ****         } else {
  52:../../tmk_core/common/bootmagic.c ****             debug_config.enable = !debug_config.enable;
  53:../../tmk_core/common/bootmagic.c ****         }
  54:../../tmk_core/common/bootmagic.c ****     }
  55:../../tmk_core/common/bootmagic.c ****     eeconfig_write_debug(debug_config.raw);
  56:../../tmk_core/common/bootmagic.c **** 
  57:../../tmk_core/common/bootmagic.c ****     /* keymap config */
  58:../../tmk_core/common/bootmagic.c ****     keymap_config.raw = eeconfig_read_keymap();
  59:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
  60:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
  61:../../tmk_core/common/bootmagic.c ****     }
  62:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
  63:../../tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
  64:../../tmk_core/common/bootmagic.c ****     }
  65:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
  66:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
  67:../../tmk_core/common/bootmagic.c ****     }
  68:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
  69:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
  70:../../tmk_core/common/bootmagic.c ****     }
  71:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_NO_GUI)) {
  72:../../tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
  73:../../tmk_core/common/bootmagic.c ****     }
  74:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
  75:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
  76:../../tmk_core/common/bootmagic.c ****     }
  77:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
  78:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
  79:../../tmk_core/common/bootmagic.c ****     }
  80:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_HOST_NKRO)) {
  81:../../tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
  82:../../tmk_core/common/bootmagic.c ****     }
  83:../../tmk_core/common/bootmagic.c ****     eeconfig_write_keymap(keymap_config.raw);
  84:../../tmk_core/common/bootmagic.c **** 
  85:../../tmk_core/common/bootmagic.c **** #ifdef NKRO_ENABLE
  86:../../tmk_core/common/bootmagic.c ****     keyboard_nkro = keymap_config.nkro;
  87:../../tmk_core/common/bootmagic.c **** #endif
  88:../../tmk_core/common/bootmagic.c **** 
  89:../../tmk_core/common/bootmagic.c ****     /* default layer */
  90:../../tmk_core/common/bootmagic.c ****     uint8_t default_layer = 0;
  91:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
  92:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
  93:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
  94:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
  95:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
  96:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
  97:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
  98:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
  99:../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 100:../../tmk_core/common/bootmagic.c ****         eeconfig_write_default_layer(default_layer);
 101:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 102:../../tmk_core/common/bootmagic.c ****     } else {
 103:../../tmk_core/common/bootmagic.c ****         default_layer = eeconfig_read_default_layer();
 104:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 105:../../tmk_core/common/bootmagic.c ****     }
 106:../../tmk_core/common/bootmagic.c **** }
 107:../../tmk_core/common/bootmagic.c **** 
 108:../../tmk_core/common/bootmagic.c **** static bool scan_keycode(uint8_t keycode)
 109:../../tmk_core/common/bootmagic.c **** {
  15               		.loc 1 109 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 EF92      		push r14
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 14, -2
  22 0002 FF92      		push r15
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 15, -3
  26 0004 0F93      		push r16
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 16, -4
  30 0006 1F93      		push r17
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 17, -5
  34 0008 CF93      		push r28
  35               	.LCFI4:
  36               		.cfi_def_cfa_offset 7
  37               		.cfi_offset 28, -6
  38 000a DF93      		push r29
  39               	.LCFI5:
  40               		.cfi_def_cfa_offset 8
  41               		.cfi_offset 29, -7
  42               	/* prologue: function */
  43               	/* frame size = 0 */
  44               	/* stack size = 6 */
  45               	.L__stack_usage = 6
  46 000c E82E      		mov r14,r24
  47               	.LVL1:
  48               	.LBB6:
 110:../../tmk_core/common/bootmagic.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
  49               		.loc 1 110 0
  50 000e F12C      		mov r15,__zero_reg__
  51               	.LVL2:
  52               	.L8:
  53               	.LBB7:
 111:../../tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
  54               		.loc 1 111 0
  55 0010 8F2D      		mov r24,r15
  56 0012 0E94 0000 		call matrix_get_row
  57               	.LVL3:
  58 0016 C0E0      		ldi r28,0
  59 0018 D0E0      		ldi r29,0
  60               	.LBB8:
 112:../../tmk_core/common/bootmagic.c ****         for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 113:../../tmk_core/common/bootmagic.c ****             if (matrix_row & ((matrix_row_t)1<<c)) {
  61               		.loc 1 113 0
  62 001a 082F      		mov r16,r24
  63 001c 10E0      		ldi r17,0
  64               	.LVL4:
  65               	.L7:
  66 001e 9801      		movw r18,r16
  67 0020 0C2E      		mov r0,r28
  68 0022 00C0      		rjmp 2f
  69               		1:
  70 0024 3595      		asr r19
  71 0026 2795      		ror r18
  72               		2:
  73 0028 0A94      		dec r0
  74 002a 02F4      		brpl 1b
  75 002c 20FD      		sbrc r18,0
  76 002e 00C0      		rjmp .L2
  77               	.L6:
  78               	.LVL5:
  79 0030 2196      		adiw r28,1
  80               	.LVL6:
 112:../../tmk_core/common/bootmagic.c ****         for (uint8_t c = 0; c < MATRIX_COLS; c++) {
  81               		.loc 1 112 0
  82 0032 C830      		cpi r28,8
  83 0034 D105      		cpc r29,__zero_reg__
  84 0036 01F4      		brne .L7
  85 0038 00C0      		rjmp .L13
  86               	.L2:
 114:../../tmk_core/common/bootmagic.c ****                 if (keycode == keymap_key_to_keycode(0, (keypos_t){ .row = r, .col = c })) {
  87               		.loc 1 114 0
  88 003a 6C2F      		mov r22,r28
  89 003c 7F2D      		mov r23,r15
  90 003e 80E0      		ldi r24,0
  91 0040 0E94 0000 		call keymap_key_to_keycode
  92               	.LVL7:
  93 0044 E812      		cpse r14,r24
  94 0046 00C0      		rjmp .L6
 115:../../tmk_core/common/bootmagic.c ****                     return true;
  95               		.loc 1 115 0
  96 0048 81E0      		ldi r24,lo8(1)
  97 004a 00C0      		rjmp .L5
  98               	.L13:
  99               	.LBE8:
 100               	.LBE7:
 110:../../tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
 101               		.loc 1 110 0
 102 004c F394      		inc r15
 103               	.LVL8:
 104 004e 88E0      		ldi r24,lo8(8)
 105 0050 F812      		cpse r15,r24
 106 0052 00C0      		rjmp .L8
 107               	.LBE6:
 116:../../tmk_core/common/bootmagic.c ****                 }
 117:../../tmk_core/common/bootmagic.c ****             }
 118:../../tmk_core/common/bootmagic.c ****         }
 119:../../tmk_core/common/bootmagic.c ****     }
 120:../../tmk_core/common/bootmagic.c ****     return false;
 108               		.loc 1 120 0
 109 0054 80E0      		ldi r24,0
 110               	.LVL9:
 111               	.L5:
 112               	/* epilogue start */
 121:../../tmk_core/common/bootmagic.c **** }
 113               		.loc 1 121 0
 114 0056 DF91      		pop r29
 115 0058 CF91      		pop r28
 116 005a 1F91      		pop r17
 117 005c 0F91      		pop r16
 118               	.LVL10:
 119 005e FF90      		pop r15
 120               	.LVL11:
 121 0060 EF90      		pop r14
 122               	.LVL12:
 123 0062 0895      		ret
 124               		.cfi_endproc
 125               	.LFE104:
 127               		.section	.text.bootmagic_scan_keycode,"ax",@progbits
 128               	.global	bootmagic_scan_keycode
 130               	bootmagic_scan_keycode:
 131               	.LFB105:
 122:../../tmk_core/common/bootmagic.c **** 
 123:../../tmk_core/common/bootmagic.c **** bool bootmagic_scan_keycode(uint8_t keycode)
 124:../../tmk_core/common/bootmagic.c **** {
 132               		.loc 1 124 0
 133               		.cfi_startproc
 134               	.LVL13:
 135 0000 CF93      		push r28
 136               	.LCFI6:
 137               		.cfi_def_cfa_offset 3
 138               		.cfi_offset 28, -2
 139               	/* prologue: function */
 140               	/* frame size = 0 */
 141               	/* stack size = 1 */
 142               	.L__stack_usage = 1
 143 0002 C82F      		mov r28,r24
 125:../../tmk_core/common/bootmagic.c ****     if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;
 144               		.loc 1 125 0
 145 0004 8CE2      		ldi r24,lo8(44)
 146               	.LVL14:
 147 0006 0E94 0000 		call scan_keycode
 148               	.LVL15:
 149 000a 8823      		tst r24
 150 000c 01F0      		breq .L15
 126:../../tmk_core/common/bootmagic.c **** 
 127:../../tmk_core/common/bootmagic.c ****     return scan_keycode(keycode);
 151               		.loc 1 127 0
 152 000e 8C2F      		mov r24,r28
 153               	/* epilogue start */
 128:../../tmk_core/common/bootmagic.c **** }
 154               		.loc 1 128 0
 155 0010 CF91      		pop r28
 156               	.LVL16:
 127:../../tmk_core/common/bootmagic.c **** }
 157               		.loc 1 127 0
 158 0012 0C94 0000 		jmp scan_keycode
 159               	.LVL17:
 160               	.L15:
 161               		.loc 1 128 0
 162 0016 80E0      		ldi r24,0
 163               	/* epilogue start */
 164 0018 CF91      		pop r28
 165               	.LVL18:
 166 001a 0895      		ret
 167               		.cfi_endproc
 168               	.LFE105:
 170               		.section	.text.bootmagic,"ax",@progbits
 171               	.global	bootmagic
 173               	bootmagic:
 174               	.LFB103:
  15:../../tmk_core/common/bootmagic.c ****     /* check signature */
 175               		.loc 1 15 0
 176               		.cfi_startproc
 177 0000 CF93      		push r28
 178               	.LCFI7:
 179               		.cfi_def_cfa_offset 3
 180               		.cfi_offset 28, -2
 181               	/* prologue: function */
 182               	/* frame size = 0 */
 183               	/* stack size = 1 */
 184               	.L__stack_usage = 1
  17:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
 185               		.loc 1 17 0
 186 0002 0E94 0000 		call eeconfig_is_enabled
 187               	.LVL19:
 188 0006 8111      		cpse r24,__zero_reg__
 189 0008 00C0      		rjmp .L17
  18:../../tmk_core/common/bootmagic.c ****     }
 190               		.loc 1 18 0
 191 000a 0E94 0000 		call eeconfig_init
 192               	.LVL20:
 193               	.L17:
  22:../../tmk_core/common/bootmagic.c ****     uint8_t scan = 100;
 194               		.loc 1 22 0
 195 000e 80E0      		ldi r24,lo8(__c.4698)
 196 0010 90E0      		ldi r25,hi8(__c.4698)
 197 0012 0E94 0000 		call xputs
 198               	.LVL21:
  24:../../tmk_core/common/bootmagic.c ****     print("done.\n");
 199               		.loc 1 24 0
 200 0016 C5E6      		ldi r28,lo8(101)
 201               	.LVL22:
 202               	.L18:
 203 0018 C150      		subi r28,lo8(-(-1))
 204               	.LVL23:
  24:../../tmk_core/common/bootmagic.c ****     print("done.\n");
 205               		.loc 1 24 0 is_stmt 0 discriminator 1
 206 001a 01F0      		breq .L97
 207               	.LVL24:
  24:../../tmk_core/common/bootmagic.c ****     print("done.\n");
 208               		.loc 1 24 0 discriminator 2
 209 001c 0E94 0000 		call matrix_scan
 210               	.LVL25:
 211               	.LBB9:
 212               	.LBB10:
 213               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/lib/avr/include/util/delay.h **** 
 155:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/lib/avr/include/util/delay.h **** 
 158:/usr/lib/avr/include/util/delay.h **** 	#else
 159:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 160:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/lib/avr/include/util/delay.h **** 	#endif
 162:/usr/lib/avr/include/util/delay.h **** 
 163:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 214               		.loc 2 163 0 is_stmt 1 discriminator 2
 215 0020 8FE3      		ldi r24,lo8(-25537)
 216 0022 9CE9      		ldi r25,hi8(-25537)
 217 0024 0197      		1: sbiw r24,1
 218 0026 01F4      		brne 1b
 219 0028 00C0      		rjmp .
 220 002a 0000      		nop
 221 002c 00C0      		rjmp .L18
 222               	.LVL26:
 223               	.L97:
 224               	.LBE10:
 225               	.LBE9:
  25:../../tmk_core/common/bootmagic.c **** 
 226               		.loc 1 25 0
 227 002e 80E0      		ldi r24,lo8(__c.4704)
 228 0030 90E0      		ldi r25,hi8(__c.4704)
 229 0032 0E94 0000 		call xputs
 230               	.LVL27:
  28:../../tmk_core/common/bootmagic.c ****         return;
 231               		.loc 1 28 0
 232 0036 89E2      		ldi r24,lo8(41)
 233 0038 0E94 0000 		call bootmagic_scan_keycode
 234               	.LVL28:
 235 003c 8111      		cpse r24,__zero_reg__
 236 003e 00C0      		rjmp .L16
  33:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
 237               		.loc 1 33 0
 238 0040 8AE2      		ldi r24,lo8(42)
 239 0042 0E94 0000 		call bootmagic_scan_keycode
 240               	.LVL29:
 241 0046 8111      		cpse r24,__zero_reg__
  34:../../tmk_core/common/bootmagic.c ****     }
 242               		.loc 1 34 0
 243 0048 0E94 0000 		call eeconfig_init
 244               	.LVL30:
 245               	.L21:
  38:../../tmk_core/common/bootmagic.c ****         bootloader_jump();
 246               		.loc 1 38 0
 247 004c 85E0      		ldi r24,lo8(5)
 248 004e 0E94 0000 		call bootmagic_scan_keycode
 249               	.LVL31:
 250 0052 8111      		cpse r24,__zero_reg__
  39:../../tmk_core/common/bootmagic.c ****     }
 251               		.loc 1 39 0
 252 0054 0E94 0000 		call bootloader_jump
 253               	.LVL32:
 254               	.L22:
  43:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
 255               		.loc 1 43 0
 256 0058 0E94 0000 		call eeconfig_read_debug
 257               	.LVL33:
 258 005c 8093 0000 		sts debug_config,r24
  44:../../tmk_core/common/bootmagic.c ****         if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
 259               		.loc 1 44 0
 260 0060 87E0      		ldi r24,lo8(7)
 261 0062 0E94 0000 		call bootmagic_scan_keycode
 262               	.LVL34:
 263 0066 8823      		tst r24
 264 0068 01F0      		breq .L23
  45:../../tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
 265               		.loc 1 45 0
 266 006a 8BE1      		ldi r24,lo8(27)
 267 006c 0E94 0000 		call bootmagic_scan_keycode
 268               	.LVL35:
 269 0070 8823      		tst r24
 270 0072 01F0      		breq .L24
  46:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
 271               		.loc 1 46 0
 272 0074 9091 0000 		lds r25,debug_config
 273 0078 91FB      		bst r25,1
 274 007a 8827      		clr r24
 275 007c 80F9      		bld r24,0
 276 007e 21E0      		ldi r18,lo8(1)
 277 0080 8227      		eor r24,r18
 278 0082 80FB      		bst r24,0
 279 0084 91F9      		bld r25,1
 280 0086 00C0      		rjmp .L95
 281               	.L24:
  47:../../tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
 282               		.loc 1 47 0
 283 0088 8EE0      		ldi r24,lo8(14)
 284 008a 0E94 0000 		call bootmagic_scan_keycode
 285               	.LVL36:
 286 008e 8823      		tst r24
 287 0090 01F0      		breq .L25
  48:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
 288               		.loc 1 48 0
 289 0092 9091 0000 		lds r25,debug_config
 290 0096 92FB      		bst r25,2
 291 0098 8827      		clr r24
 292 009a 80F9      		bld r24,0
 293 009c 21E0      		ldi r18,lo8(1)
 294 009e 8227      		eor r24,r18
 295 00a0 80FB      		bst r24,0
 296 00a2 92F9      		bld r25,2
 297 00a4 00C0      		rjmp .L95
 298               	.L25:
  49:../../tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
 299               		.loc 1 49 0
 300 00a6 80E1      		ldi r24,lo8(16)
 301 00a8 0E94 0000 		call bootmagic_scan_keycode
 302               	.LVL37:
 303 00ac 9091 0000 		lds r25,debug_config
 304 00b0 8823      		tst r24
 305 00b2 01F0      		breq .L26
  50:../../tmk_core/common/bootmagic.c ****         } else {
 306               		.loc 1 50 0
 307 00b4 93FB      		bst r25,3
 308 00b6 8827      		clr r24
 309 00b8 80F9      		bld r24,0
 310 00ba 21E0      		ldi r18,lo8(1)
 311 00bc 8227      		eor r24,r18
 312 00be 80FB      		bst r24,0
 313 00c0 93F9      		bld r25,3
 314 00c2 00C0      		rjmp .L95
 315               	.L26:
  52:../../tmk_core/common/bootmagic.c ****         }
 316               		.loc 1 52 0
 317 00c4 892F      		mov r24,r25
 318 00c6 8095      		com r24
 319 00c8 80FB      		bst r24,0
 320 00ca 90F9      		bld r25,0
 321               	.L95:
 322 00cc 9093 0000 		sts debug_config,r25
 323               	.L23:
  55:../../tmk_core/common/bootmagic.c **** 
 324               		.loc 1 55 0
 325 00d0 8091 0000 		lds r24,debug_config
 326 00d4 0E94 0000 		call eeconfig_write_debug
 327               	.LVL38:
  58:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
 328               		.loc 1 58 0
 329 00d8 0E94 0000 		call eeconfig_read_keymap
 330               	.LVL39:
 331 00dc 8093 0000 		sts keymap_config,r24
  59:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
 332               		.loc 1 59 0
 333 00e0 80EE      		ldi r24,lo8(-32)
 334 00e2 0E94 0000 		call bootmagic_scan_keycode
 335               	.LVL40:
 336 00e6 8823      		tst r24
 337 00e8 01F0      		breq .L27
  60:../../tmk_core/common/bootmagic.c ****     }
 338               		.loc 1 60 0
 339 00ea 8091 0000 		lds r24,keymap_config
 340 00ee 982F      		mov r25,r24
 341 00f0 9095      		com r25
 342 00f2 90FB      		bst r25,0
 343 00f4 80F9      		bld r24,0
 344 00f6 8093 0000 		sts keymap_config,r24
 345               	.L27:
  62:../../tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
 346               		.loc 1 62 0
 347 00fa 89E3      		ldi r24,lo8(57)
 348 00fc 0E94 0000 		call bootmagic_scan_keycode
 349               	.LVL41:
 350 0100 8823      		tst r24
 351 0102 01F0      		breq .L28
  63:../../tmk_core/common/bootmagic.c ****     }
 352               		.loc 1 63 0
 353 0104 9091 0000 		lds r25,keymap_config
 354 0108 91FB      		bst r25,1
 355 010a 8827      		clr r24
 356 010c 80F9      		bld r24,0
 357 010e 21E0      		ldi r18,lo8(1)
 358 0110 8227      		eor r24,r18
 359 0112 80FB      		bst r24,0
 360 0114 91F9      		bld r25,1
 361 0116 9093 0000 		sts keymap_config,r25
 362               	.L28:
  65:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
 363               		.loc 1 65 0
 364 011a 82EE      		ldi r24,lo8(-30)
 365 011c 0E94 0000 		call bootmagic_scan_keycode
 366               	.LVL42:
 367 0120 8823      		tst r24
 368 0122 01F0      		breq .L29
  66:../../tmk_core/common/bootmagic.c ****     }
 369               		.loc 1 66 0
 370 0124 9091 0000 		lds r25,keymap_config
 371 0128 92FB      		bst r25,2
 372 012a 8827      		clr r24
 373 012c 80F9      		bld r24,0
 374 012e 21E0      		ldi r18,lo8(1)
 375 0130 8227      		eor r24,r18
 376 0132 80FB      		bst r24,0
 377 0134 92F9      		bld r25,2
 378 0136 9093 0000 		sts keymap_config,r25
 379               	.L29:
  68:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
 380               		.loc 1 68 0
 381 013a 86EE      		ldi r24,lo8(-26)
 382 013c 0E94 0000 		call bootmagic_scan_keycode
 383               	.LVL43:
 384 0140 8823      		tst r24
 385 0142 01F0      		breq .L30
  69:../../tmk_core/common/bootmagic.c ****     }
 386               		.loc 1 69 0
 387 0144 9091 0000 		lds r25,keymap_config
 388 0148 93FB      		bst r25,3
 389 014a 8827      		clr r24
 390 014c 80F9      		bld r24,0
 391 014e 21E0      		ldi r18,lo8(1)
 392 0150 8227      		eor r24,r18
 393 0152 80FB      		bst r24,0
 394 0154 93F9      		bld r25,3
 395 0156 9093 0000 		sts keymap_config,r25
 396               	.L30:
  71:../../tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
 397               		.loc 1 71 0
 398 015a 83EE      		ldi r24,lo8(-29)
 399 015c 0E94 0000 		call bootmagic_scan_keycode
 400               	.LVL44:
 401 0160 8823      		tst r24
 402 0162 01F0      		breq .L31
  72:../../tmk_core/common/bootmagic.c ****     }
 403               		.loc 1 72 0
 404 0164 9091 0000 		lds r25,keymap_config
 405 0168 94FB      		bst r25,4
 406 016a 8827      		clr r24
 407 016c 80F9      		bld r24,0
 408 016e 21E0      		ldi r18,lo8(1)
 409 0170 8227      		eor r24,r18
 410 0172 80FB      		bst r24,0
 411 0174 94F9      		bld r25,4
 412 0176 9093 0000 		sts keymap_config,r25
 413               	.L31:
  74:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
 414               		.loc 1 74 0
 415 017a 85E3      		ldi r24,lo8(53)
 416 017c 0E94 0000 		call bootmagic_scan_keycode
 417               	.LVL45:
 418 0180 8823      		tst r24
 419 0182 01F0      		breq .L32
  75:../../tmk_core/common/bootmagic.c ****     }
 420               		.loc 1 75 0
 421 0184 9091 0000 		lds r25,keymap_config
 422 0188 95FB      		bst r25,5
 423 018a 8827      		clr r24
 424 018c 80F9      		bld r24,0
 425 018e 21E0      		ldi r18,lo8(1)
 426 0190 8227      		eor r24,r18
 427 0192 80FB      		bst r24,0
 428 0194 95F9      		bld r25,5
 429 0196 9093 0000 		sts keymap_config,r25
 430               	.L32:
  77:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
 431               		.loc 1 77 0
 432 019a 81E3      		ldi r24,lo8(49)
 433 019c 0E94 0000 		call bootmagic_scan_keycode
 434               	.LVL46:
 435 01a0 8823      		tst r24
 436 01a2 01F0      		breq .L33
  78:../../tmk_core/common/bootmagic.c ****     }
 437               		.loc 1 78 0
 438 01a4 9091 0000 		lds r25,keymap_config
 439 01a8 96FB      		bst r25,6
 440 01aa 8827      		clr r24
 441 01ac 80F9      		bld r24,0
 442 01ae 21E0      		ldi r18,lo8(1)
 443 01b0 8227      		eor r24,r18
 444 01b2 80FB      		bst r24,0
 445 01b4 96F9      		bld r25,6
 446 01b6 9093 0000 		sts keymap_config,r25
 447               	.L33:
  80:../../tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
 448               		.loc 1 80 0
 449 01ba 81E1      		ldi r24,lo8(17)
 450 01bc 0E94 0000 		call bootmagic_scan_keycode
 451               	.LVL47:
 452 01c0 8823      		tst r24
 453 01c2 01F0      		breq .L34
  81:../../tmk_core/common/bootmagic.c ****     }
 454               		.loc 1 81 0
 455 01c4 9091 0000 		lds r25,keymap_config
 456 01c8 97FB      		bst r25,7
 457 01ca 8827      		clr r24
 458 01cc 80F9      		bld r24,0
 459 01ce 21E0      		ldi r18,lo8(1)
 460 01d0 8227      		eor r24,r18
 461 01d2 80FB      		bst r24,0
 462 01d4 97F9      		bld r25,7
 463 01d6 9093 0000 		sts keymap_config,r25
 464               	.L34:
  83:../../tmk_core/common/bootmagic.c **** 
 465               		.loc 1 83 0
 466 01da 8091 0000 		lds r24,keymap_config
 467 01de 0E94 0000 		call eeconfig_write_keymap
 468               	.LVL48:
  86:../../tmk_core/common/bootmagic.c **** #endif
 469               		.loc 1 86 0
 470 01e2 8091 0000 		lds r24,keymap_config
 471 01e6 87FB      		bst r24,7
 472 01e8 8827      		clr r24
 473 01ea 80F9      		bld r24,0
 474 01ec 8093 0000 		sts keyboard_nkro,r24
 475               	.LVL49:
  91:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
 476               		.loc 1 91 0
 477 01f0 87E2      		ldi r24,lo8(39)
 478 01f2 0E94 0000 		call bootmagic_scan_keycode
 479               	.LVL50:
 480 01f6 C82F      		mov r28,r24
 481               	.LVL51:
  92:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 482               		.loc 1 92 0
 483 01f8 8EE1      		ldi r24,lo8(30)
 484               	.LVL52:
 485 01fa 0E94 0000 		call bootmagic_scan_keycode
 486               	.LVL53:
 487 01fe 8111      		cpse r24,__zero_reg__
  92:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 488               		.loc 1 92 0 is_stmt 0 discriminator 1
 489 0200 C260      		ori r28,lo8(2)
 490               	.LVL54:
 491               	.L35:
  93:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 492               		.loc 1 93 0 is_stmt 1
 493 0202 8FE1      		ldi r24,lo8(31)
 494 0204 0E94 0000 		call bootmagic_scan_keycode
 495               	.LVL55:
 496 0208 8111      		cpse r24,__zero_reg__
  93:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 497               		.loc 1 93 0 is_stmt 0 discriminator 1
 498 020a C460      		ori r28,lo8(4)
 499               	.LVL56:
 500               	.L36:
  94:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 501               		.loc 1 94 0 is_stmt 1
 502 020c 80E2      		ldi r24,lo8(32)
 503 020e 0E94 0000 		call bootmagic_scan_keycode
 504               	.LVL57:
 505 0212 8111      		cpse r24,__zero_reg__
  94:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 506               		.loc 1 94 0 is_stmt 0 discriminator 1
 507 0214 C860      		ori r28,lo8(8)
 508               	.LVL58:
 509               	.L37:
  95:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 510               		.loc 1 95 0 is_stmt 1
 511 0216 81E2      		ldi r24,lo8(33)
 512 0218 0E94 0000 		call bootmagic_scan_keycode
 513               	.LVL59:
 514 021c 8111      		cpse r24,__zero_reg__
  95:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 515               		.loc 1 95 0 is_stmt 0 discriminator 1
 516 021e C061      		ori r28,lo8(16)
 517               	.LVL60:
 518               	.L38:
  96:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 519               		.loc 1 96 0 is_stmt 1
 520 0220 82E2      		ldi r24,lo8(34)
 521 0222 0E94 0000 		call bootmagic_scan_keycode
 522               	.LVL61:
 523 0226 8111      		cpse r24,__zero_reg__
  96:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 524               		.loc 1 96 0 is_stmt 0 discriminator 1
 525 0228 C062      		ori r28,lo8(32)
 526               	.LVL62:
 527               	.L39:
  97:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 528               		.loc 1 97 0 is_stmt 1
 529 022a 83E2      		ldi r24,lo8(35)
 530 022c 0E94 0000 		call bootmagic_scan_keycode
 531               	.LVL63:
 532 0230 8111      		cpse r24,__zero_reg__
  97:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 533               		.loc 1 97 0 is_stmt 0 discriminator 1
 534 0232 C064      		ori r28,lo8(64)
 535               	.LVL64:
 536               	.L40:
  98:../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 537               		.loc 1 98 0 is_stmt 1
 538 0234 84E2      		ldi r24,lo8(36)
 539 0236 0E94 0000 		call bootmagic_scan_keycode
 540               	.LVL65:
 541 023a 8823      		tst r24
 542 023c 01F0      		breq .L41
  98:../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 543               		.loc 1 98 0 is_stmt 0 discriminator 1
 544 023e C068      		ori r28,lo8(-128)
 545               	.LVL66:
 546 0240 00C0      		rjmp .L42
 547               	.L41:
  99:../../tmk_core/common/bootmagic.c ****         eeconfig_write_default_layer(default_layer);
 548               		.loc 1 99 0 is_stmt 1
 549 0242 CC23      		tst r28
 550 0244 01F0      		breq .L43
 551               	.L42:
 100:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 552               		.loc 1 100 0
 553 0246 8C2F      		mov r24,r28
 554 0248 0E94 0000 		call eeconfig_write_default_layer
 555               	.LVL67:
 101:../../tmk_core/common/bootmagic.c ****     } else {
 556               		.loc 1 101 0
 557 024c 6C2F      		mov r22,r28
 558 024e 00C0      		rjmp .L96
 559               	.L43:
 103:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 560               		.loc 1 103 0
 561 0250 0E94 0000 		call eeconfig_read_default_layer
 562               	.LVL68:
 104:../../tmk_core/common/bootmagic.c ****     }
 563               		.loc 1 104 0
 564 0254 682F      		mov r22,r24
 565               	.LVL69:
 566               	.L96:
 567 0256 70E0      		ldi r23,0
 568 0258 80E0      		ldi r24,0
 569 025a 90E0      		ldi r25,0
 570               	/* epilogue start */
 106:../../tmk_core/common/bootmagic.c **** 
 571               		.loc 1 106 0
 572 025c CF91      		pop r28
 104:../../tmk_core/common/bootmagic.c ****     }
 573               		.loc 1 104 0
 574 025e 0C94 0000 		jmp default_layer_set
 575               	.LVL70:
 576               	.L16:
 577               	/* epilogue start */
 106:../../tmk_core/common/bootmagic.c **** 
 578               		.loc 1 106 0
 579 0262 CF91      		pop r28
 580               	.LVL71:
 581 0264 0895      		ret
 582               		.cfi_endproc
 583               	.LFE103:
 585               		.section	.progmem.data.__c.4704,"a",@progbits
 588               	__c.4704:
 589 0000 646F 6E65 		.string	"done.\n"
 589      2E0A 00
 590               		.section	.progmem.data.__c.4698,"a",@progbits
 593               	__c.4698:
 594 0000 626F 6F67 		.string	"boogmagic scan: ... "
 594      6D61 6769 
 594      6320 7363 
 594      616E 3A20 
 594      2E2E 2E20 
 595               		.comm	keymap_config,1,1
 596               		.text
 597               	.Letext0:
 598               		.file 3 "/usr/lib/avr/include/stdint.h"
 599               		.file 4 "../../tmk_core/common/matrix.h"
 600               		.file 5 "../../tmk_core/common/debug.h"
 601               		.file 6 "../../tmk_core/common/keyboard.h"
 602               		.file 7 "../../tmk_core/common/keymap.h"
 603               		.file 8 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 604               		.file 9 "../../tmk_core/common/host.h"
 605               		.file 10 "../../tmk_core/common/eeconfig.h"
 606               		.file 11 "../../tmk_core/common/bootloader.h"
 607               		.file 12 "../../tmk_core/common/avr/xprintf.h"
 608               		.file 13 "../../tmk_core/common/keycode.h"
 609               		.file 14 "../../tmk_core/common/action_layer.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 bootmagic.c
     /tmp/cc1GKMGA.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc1GKMGA.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc1GKMGA.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc1GKMGA.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc1GKMGA.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc1GKMGA.s:12     .text.scan_keycode:0000000000000000 scan_keycode
     /tmp/cc1GKMGA.s:130    .text.bootmagic_scan_keycode:0000000000000000 bootmagic_scan_keycode
     /tmp/cc1GKMGA.s:173    .text.bootmagic:0000000000000000 bootmagic
     /tmp/cc1GKMGA.s:593    .progmem.data.__c.4698:0000000000000000 __c.4698
     /tmp/cc1GKMGA.s:588    .progmem.data.__c.4704:0000000000000000 __c.4704
                            *COM*:0000000000000001 keymap_config

UNDEFINED SYMBOLS
matrix_get_row
keymap_key_to_keycode
eeconfig_is_enabled
eeconfig_init
xputs
matrix_scan
bootloader_jump
eeconfig_read_debug
debug_config
eeconfig_write_debug
eeconfig_read_keymap
eeconfig_write_keymap
keyboard_nkro
eeconfig_write_default_layer
eeconfig_read_default_layer
default_layer_set
__do_clear_bss
