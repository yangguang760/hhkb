   1               		.file	"action.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.action_exec,"ax",@progbits
  11               	.global	action_exec
  13               	action_exec:
  14               	.LFB103:
  15               		.file 1 "../../tmk_core/common/action.c"
   1:../../tmk_core/common/action.c **** /*
   2:../../tmk_core/common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/action.c **** 
   4:../../tmk_core/common/action.c **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/action.c **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/action.c **** (at your option) any later version.
   8:../../tmk_core/common/action.c **** 
   9:../../tmk_core/common/action.c **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/action.c **** GNU General Public License for more details.
  13:../../tmk_core/common/action.c **** 
  14:../../tmk_core/common/action.c **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/action.c **** */
  17:../../tmk_core/common/action.c **** #include "host.h"
  18:../../tmk_core/common/action.c **** #include "keycode.h"
  19:../../tmk_core/common/action.c **** #include "keyboard.h"
  20:../../tmk_core/common/action.c **** #include "mousekey.h"
  21:../../tmk_core/common/action.c **** #include "command.h"
  22:../../tmk_core/common/action.c **** #include "led.h"
  23:../../tmk_core/common/action.c **** #include "backlight.h"
  24:../../tmk_core/common/action.c **** #include "action_layer.h"
  25:../../tmk_core/common/action.c **** #include "action_tapping.h"
  26:../../tmk_core/common/action.c **** #include "action_macro.h"
  27:../../tmk_core/common/action.c **** #include "action_util.h"
  28:../../tmk_core/common/action.c **** #include "action.h"
  29:../../tmk_core/common/action.c **** 
  30:../../tmk_core/common/action.c **** #ifdef DEBUG_ACTION
  31:../../tmk_core/common/action.c **** #include "debug.h"
  32:../../tmk_core/common/action.c **** #else
  33:../../tmk_core/common/action.c **** #include "nodebug.h"
  34:../../tmk_core/common/action.c **** #endif
  35:../../tmk_core/common/action.c **** 
  36:../../tmk_core/common/action.c **** 
  37:../../tmk_core/common/action.c **** void action_exec(keyevent_t event)
  38:../../tmk_core/common/action.c **** {
  16               		.loc 1 38 0
  17               		.cfi_startproc
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26 0004 CDB7      		in r28,__SP_L__
  27 0006 DEB7      		in r29,__SP_H__
  28               	.LCFI2:
  29               		.cfi_def_cfa_register 28
  30 0008 2B97      		sbiw r28,11
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 15
  33 000a 0FB6      		in __tmp_reg__,__SREG__
  34 000c F894      		cli
  35 000e DEBF      		out __SP_H__,r29
  36 0010 0FBE      		out __SREG__,__tmp_reg__
  37 0012 CDBF      		out __SP_L__,r28
  38               	/* prologue: function */
  39               	/* frame size = 11 */
  40               	/* stack size = 13 */
  41               	.L__stack_usage = 13
  42 0014 4F83      		std Y+7,r20
  43 0016 5887      		std Y+8,r21
  44 0018 6987      		std Y+9,r22
  45 001a 7A87      		std Y+10,r23
  46 001c 8B87      		std Y+11,r24
  47               	.LVL0:
  39:../../tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  40:../../tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
  41:../../tmk_core/common/action.c ****         dprint("EVENT: "); debug_event(event); dprintln();
  42:../../tmk_core/common/action.c ****     }
  43:../../tmk_core/common/action.c **** 
  44:../../tmk_core/common/action.c ****     keyrecord_t record = { .event = event };
  48               		.loc 1 44 0
  49 001e DE01      		movw r26,r28
  50 0020 1196      		adiw r26,1
  51 0022 86E0      		ldi r24,lo8(6)
  52 0024 FD01      		movw r30,r26
  53               		0:
  54 0026 1192      		st Z+,__zero_reg__
  55 0028 8A95      		dec r24
  56 002a 01F4      		brne 0b
  57 002c 85E0      		ldi r24,lo8(5)
  58 002e FE01      		movw r30,r28
  59 0030 3796      		adiw r30,7
  60               		0:
  61 0032 0190      		ld r0,Z+
  62 0034 0D92      		st X+,r0
  63 0036 8A95      		dec r24
  64 0038 01F4      		brne 0b
  45:../../tmk_core/common/action.c **** 
  46:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  47:../../tmk_core/common/action.c ****     action_tapping_process(record);
  65               		.loc 1 47 0
  66 003a 4981      		ldd r20,Y+1
  67               	.LVL1:
  68 003c 5A81      		ldd r21,Y+2
  69               	.LVL2:
  70 003e 6B81      		ldd r22,Y+3
  71 0040 7C81      		ldd r23,Y+4
  72 0042 8D81      		ldd r24,Y+5
  73 0044 9E81      		ldd r25,Y+6
  74 0046 0E94 0000 		call action_tapping_process
  75               	.LVL3:
  76               	/* epilogue start */
  48:../../tmk_core/common/action.c **** #else
  49:../../tmk_core/common/action.c ****     process_action(&record);
  50:../../tmk_core/common/action.c ****     if (!IS_NOEVENT(record.event)) {
  51:../../tmk_core/common/action.c ****         dprint("processed: "); debug_record(record); dprintln();
  52:../../tmk_core/common/action.c ****     }
  53:../../tmk_core/common/action.c **** #endif
  54:../../tmk_core/common/action.c **** }
  77               		.loc 1 54 0
  78 004a 2B96      		adiw r28,11
  79 004c 0FB6      		in __tmp_reg__,__SREG__
  80 004e F894      		cli
  81 0050 DEBF      		out __SP_H__,r29
  82 0052 0FBE      		out __SREG__,__tmp_reg__
  83 0054 CDBF      		out __SP_L__,r28
  84 0056 DF91      		pop r29
  85 0058 CF91      		pop r28
  86 005a 0895      		ret
  87               		.cfi_endproc
  88               	.LFE103:
  90               		.section	.text.register_code,"ax",@progbits
  91               	.global	register_code
  93               	register_code:
  94               	.LFB105:
  55:../../tmk_core/common/action.c **** 
  56:../../tmk_core/common/action.c **** void process_action(keyrecord_t *record)
  57:../../tmk_core/common/action.c **** {
  58:../../tmk_core/common/action.c ****     keyevent_t event = record->event;
  59:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  60:../../tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
  61:../../tmk_core/common/action.c **** #endif
  62:../../tmk_core/common/action.c **** 
  63:../../tmk_core/common/action.c ****     if (IS_NOEVENT(event)) { return; }
  64:../../tmk_core/common/action.c **** 
  65:../../tmk_core/common/action.c ****     action_t action = layer_switch_get_action(event.key);
  66:../../tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
  67:../../tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
  68:../../tmk_core/common/action.c ****     dprint(" layer_state: "); layer_debug();
  69:../../tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
  70:../../tmk_core/common/action.c **** #endif
  71:../../tmk_core/common/action.c ****     dprintln();
  72:../../tmk_core/common/action.c **** 
  73:../../tmk_core/common/action.c ****     switch (action.kind.id) {
  74:../../tmk_core/common/action.c ****         /* Key and Mods */
  75:../../tmk_core/common/action.c ****         case ACT_LMODS:
  76:../../tmk_core/common/action.c ****         case ACT_RMODS:
  77:../../tmk_core/common/action.c ****             {
  78:../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
  79:../../tmk_core/common/action.c ****                                                                 action.key.mods<<4;
  80:../../tmk_core/common/action.c ****                 if (event.pressed) {
  81:../../tmk_core/common/action.c ****                     if (mods) {
  82:../../tmk_core/common/action.c ****                         add_weak_mods(mods);
  83:../../tmk_core/common/action.c ****                         send_keyboard_report();
  84:../../tmk_core/common/action.c ****                     }
  85:../../tmk_core/common/action.c ****                     register_code(action.key.code);
  86:../../tmk_core/common/action.c ****                 } else {
  87:../../tmk_core/common/action.c ****                     unregister_code(action.key.code);
  88:../../tmk_core/common/action.c ****                     if (mods) {
  89:../../tmk_core/common/action.c ****                         del_weak_mods(mods);
  90:../../tmk_core/common/action.c ****                         send_keyboard_report();
  91:../../tmk_core/common/action.c ****                     }
  92:../../tmk_core/common/action.c ****                 }
  93:../../tmk_core/common/action.c ****             }
  94:../../tmk_core/common/action.c ****             break;
  95:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  96:../../tmk_core/common/action.c ****         case ACT_LMODS_TAP:
  97:../../tmk_core/common/action.c ****         case ACT_RMODS_TAP:
  98:../../tmk_core/common/action.c ****             {
  99:../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 100:../../tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 101:../../tmk_core/common/action.c ****                 switch (action.layer_tap.code) {
 102:../../tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 103:../../tmk_core/common/action.c ****                     case MODS_ONESHOT:
 104:../../tmk_core/common/action.c ****                         // Oneshot modifier
 105:../../tmk_core/common/action.c ****                         if (event.pressed) {
 106:../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 107:../../tmk_core/common/action.c ****                                 register_mods(mods);
 108:../../tmk_core/common/action.c ****                             }
 109:../../tmk_core/common/action.c ****                             else if (tap_count == 1) {
 110:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 111:../../tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 112:../../tmk_core/common/action.c ****                             }
 113:../../tmk_core/common/action.c ****                             else {
 114:../../tmk_core/common/action.c ****                                 register_mods(mods);
 115:../../tmk_core/common/action.c ****                             }
 116:../../tmk_core/common/action.c ****                         } else {
 117:../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 118:../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 119:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 120:../../tmk_core/common/action.c ****                             }
 121:../../tmk_core/common/action.c ****                             else if (tap_count == 1) {
 122:../../tmk_core/common/action.c ****                                 // Retain Oneshot mods
 123:../../tmk_core/common/action.c ****                             }
 124:../../tmk_core/common/action.c ****                             else {
 125:../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 126:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 127:../../tmk_core/common/action.c ****                             }
 128:../../tmk_core/common/action.c ****                         }
 129:../../tmk_core/common/action.c ****                         break;
 130:../../tmk_core/common/action.c ****     #endif
 131:../../tmk_core/common/action.c ****                     case MODS_TAP_TOGGLE:
 132:../../tmk_core/common/action.c ****                         if (event.pressed) {
 133:../../tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 134:../../tmk_core/common/action.c ****                                 register_mods(mods);
 135:../../tmk_core/common/action.c ****                             }
 136:../../tmk_core/common/action.c ****                         } else {
 137:../../tmk_core/common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 138:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 139:../../tmk_core/common/action.c ****                             }
 140:../../tmk_core/common/action.c ****                         }
 141:../../tmk_core/common/action.c ****                         break;
 142:../../tmk_core/common/action.c ****                     default:
 143:../../tmk_core/common/action.c ****                         if (event.pressed) {
 144:../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 145:../../tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 146:../../tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: Cancel: add_mods\n");
 147:../../tmk_core/common/action.c ****                                     // ad hoc: set 0 to cancel tap
 148:../../tmk_core/common/action.c ****                                     record->tap.count = 0;
 149:../../tmk_core/common/action.c ****                                     register_mods(mods);
 150:../../tmk_core/common/action.c ****                                 } else {
 151:../../tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: register_code\n");
 152:../../tmk_core/common/action.c ****                                     register_code(action.key.code);
 153:../../tmk_core/common/action.c ****                                 }
 154:../../tmk_core/common/action.c ****                             } else {
 155:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 156:../../tmk_core/common/action.c ****                                 register_mods(mods);
 157:../../tmk_core/common/action.c ****                             }
 158:../../tmk_core/common/action.c ****                         } else {
 159:../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 160:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 161:../../tmk_core/common/action.c ****                                 unregister_code(action.key.code);
 162:../../tmk_core/common/action.c ****                             } else {
 163:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 164:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 165:../../tmk_core/common/action.c ****                             }
 166:../../tmk_core/common/action.c ****                         }
 167:../../tmk_core/common/action.c ****                         break;
 168:../../tmk_core/common/action.c ****                 }
 169:../../tmk_core/common/action.c ****             }
 170:../../tmk_core/common/action.c ****             break;
 171:../../tmk_core/common/action.c **** #endif
 172:../../tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 173:../../tmk_core/common/action.c ****         /* other HID usage */
 174:../../tmk_core/common/action.c ****         case ACT_USAGE:
 175:../../tmk_core/common/action.c ****             switch (action.usage.page) {
 176:../../tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 177:../../tmk_core/common/action.c ****                     if (event.pressed) {
 178:../../tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 179:../../tmk_core/common/action.c ****                     } else {
 180:../../tmk_core/common/action.c ****                         host_system_send(0);
 181:../../tmk_core/common/action.c ****                     }
 182:../../tmk_core/common/action.c ****                     break;
 183:../../tmk_core/common/action.c ****                 case PAGE_CONSUMER:
 184:../../tmk_core/common/action.c ****                     if (event.pressed) {
 185:../../tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 186:../../tmk_core/common/action.c ****                     } else {
 187:../../tmk_core/common/action.c ****                         host_consumer_send(0);
 188:../../tmk_core/common/action.c ****                     }
 189:../../tmk_core/common/action.c ****                     break;
 190:../../tmk_core/common/action.c ****             }
 191:../../tmk_core/common/action.c ****             break;
 192:../../tmk_core/common/action.c **** #endif
 193:../../tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 194:../../tmk_core/common/action.c ****         /* Mouse key */
 195:../../tmk_core/common/action.c ****         case ACT_MOUSEKEY:
 196:../../tmk_core/common/action.c ****             if (event.pressed) {
 197:../../tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 198:../../tmk_core/common/action.c ****                 mousekey_send();
 199:../../tmk_core/common/action.c ****             } else {
 200:../../tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 201:../../tmk_core/common/action.c ****                 mousekey_send();
 202:../../tmk_core/common/action.c ****             }
 203:../../tmk_core/common/action.c ****             break;
 204:../../tmk_core/common/action.c **** #endif
 205:../../tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 206:../../tmk_core/common/action.c ****         case ACT_LAYER:
 207:../../tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 208:../../tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 209:../../tmk_core/common/action.c ****                 if (!event.pressed) {
 210:../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 211:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 212:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 213:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 214:../../tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 215:../../tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 216:../../tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 217:../../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 218:../../tmk_core/common/action.c ****                     }
 219:../../tmk_core/common/action.c ****                 }
 220:../../tmk_core/common/action.c ****             } else {
 221:../../tmk_core/common/action.c ****                 /* Layer Bitwise Operation */
 222:../../tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 223:../../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 224:../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 225:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 226:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 227:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 228:../../tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 229:../../tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 230:../../tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 231:../../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 232:../../tmk_core/common/action.c ****                     }
 233:../../tmk_core/common/action.c ****                 }
 234:../../tmk_core/common/action.c ****             }
 235:../../tmk_core/common/action.c ****             break;
 236:../../tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 237:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 238:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 239:../../tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 240:../../tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 241:../../tmk_core/common/action.c ****                     /* layer On/Off with modifiers(left only) */
 242:../../tmk_core/common/action.c ****                     if (event.pressed) {
 243:../../tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 244:../../tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 245:../../tmk_core/common/action.c ****                     } else {
 246:../../tmk_core/common/action.c ****                         layer_off(action.layer_tap.val);
 247:../../tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 248:../../tmk_core/common/action.c ****                     }
 249:../../tmk_core/common/action.c ****                     break;
 250:../../tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 251:../../tmk_core/common/action.c ****                     /* tap toggle */
 252:../../tmk_core/common/action.c ****                     if (event.pressed) {
 253:../../tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 254:../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 255:../../tmk_core/common/action.c ****                         }
 256:../../tmk_core/common/action.c ****                     } else {
 257:../../tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 258:../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 259:../../tmk_core/common/action.c ****                         }
 260:../../tmk_core/common/action.c ****                     }
 261:../../tmk_core/common/action.c ****                     break;
 262:../../tmk_core/common/action.c ****                 case OP_ON_OFF:
 263:../../tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 264:../../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 265:../../tmk_core/common/action.c ****                     break;
 266:../../tmk_core/common/action.c ****                 case OP_OFF_ON:
 267:../../tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 268:../../tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 269:../../tmk_core/common/action.c ****                     break;
 270:../../tmk_core/common/action.c ****                 case OP_SET_CLEAR:
 271:../../tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 272:../../tmk_core/common/action.c ****                                     layer_clear();
 273:../../tmk_core/common/action.c ****                     break;
 274:../../tmk_core/common/action.c ****                 default:
 275:../../tmk_core/common/action.c ****                     /* tap key */
 276:../../tmk_core/common/action.c ****                     if (event.pressed) {
 277:../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 278:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 279:../../tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 280:../../tmk_core/common/action.c ****                         } else {
 281:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 282:../../tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 283:../../tmk_core/common/action.c ****                         }
 284:../../tmk_core/common/action.c ****                     } else {
 285:../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 286:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 287:../../tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 288:../../tmk_core/common/action.c ****                         } else {
 289:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 290:../../tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 291:../../tmk_core/common/action.c ****                         }
 292:../../tmk_core/common/action.c ****                     }
 293:../../tmk_core/common/action.c ****                     break;
 294:../../tmk_core/common/action.c ****             }
 295:../../tmk_core/common/action.c ****             break;
 296:../../tmk_core/common/action.c ****     #endif
 297:../../tmk_core/common/action.c **** #endif
 298:../../tmk_core/common/action.c ****         /* Extentions */
 299:../../tmk_core/common/action.c **** #ifndef NO_ACTION_MACRO
 300:../../tmk_core/common/action.c ****         case ACT_MACRO:
 301:../../tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 302:../../tmk_core/common/action.c ****             break;
 303:../../tmk_core/common/action.c **** #endif
 304:../../tmk_core/common/action.c **** #ifdef BACKLIGHT_ENABLE
 305:../../tmk_core/common/action.c ****         case ACT_BACKLIGHT:
 306:../../tmk_core/common/action.c ****             if (!event.pressed) {
 307:../../tmk_core/common/action.c ****                 switch (action.backlight.opt) {
 308:../../tmk_core/common/action.c ****                     case BACKLIGHT_INCREASE:
 309:../../tmk_core/common/action.c ****                         backlight_increase();
 310:../../tmk_core/common/action.c ****                         break;
 311:../../tmk_core/common/action.c ****                     case BACKLIGHT_DECREASE:
 312:../../tmk_core/common/action.c ****                         backlight_decrease();
 313:../../tmk_core/common/action.c ****                         break;
 314:../../tmk_core/common/action.c ****                     case BACKLIGHT_TOGGLE:
 315:../../tmk_core/common/action.c ****                         backlight_toggle();
 316:../../tmk_core/common/action.c ****                         break;
 317:../../tmk_core/common/action.c ****                     case BACKLIGHT_STEP:
 318:../../tmk_core/common/action.c ****                         backlight_step();
 319:../../tmk_core/common/action.c ****                         break;
 320:../../tmk_core/common/action.c ****                     case BACKLIGHT_LEVEL:
 321:../../tmk_core/common/action.c ****                         backlight_level(action.backlight.level);
 322:../../tmk_core/common/action.c ****                         break;
 323:../../tmk_core/common/action.c ****                 }
 324:../../tmk_core/common/action.c ****             }
 325:../../tmk_core/common/action.c ****             break;
 326:../../tmk_core/common/action.c **** #endif
 327:../../tmk_core/common/action.c ****         case ACT_COMMAND:
 328:../../tmk_core/common/action.c ****             break;
 329:../../tmk_core/common/action.c **** #ifndef NO_ACTION_FUNCTION
 330:../../tmk_core/common/action.c ****         case ACT_FUNCTION:
 331:../../tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 332:../../tmk_core/common/action.c ****             break;
 333:../../tmk_core/common/action.c **** #endif
 334:../../tmk_core/common/action.c ****         default:
 335:../../tmk_core/common/action.c ****             break;
 336:../../tmk_core/common/action.c ****     }
 337:../../tmk_core/common/action.c **** }
 338:../../tmk_core/common/action.c **** 
 339:../../tmk_core/common/action.c **** 
 340:../../tmk_core/common/action.c **** 
 341:../../tmk_core/common/action.c **** 
 342:../../tmk_core/common/action.c **** /*
 343:../../tmk_core/common/action.c ****  * Utilities for actions.
 344:../../tmk_core/common/action.c ****  */
 345:../../tmk_core/common/action.c **** void register_code(uint8_t code)
 346:../../tmk_core/common/action.c **** {
  95               		.loc 1 346 0
  96               		.cfi_startproc
  97               	.LVL4:
  98 0000 CF93      		push r28
  99               	.LCFI4:
 100               		.cfi_def_cfa_offset 3
 101               		.cfi_offset 28, -2
 102               	/* prologue: function */
 103               	/* frame size = 0 */
 104               	/* stack size = 1 */
 105               	.L__stack_usage = 1
 347:../../tmk_core/common/action.c ****     if (code == KC_NO) {
 106               		.loc 1 347 0
 107 0002 8823      		tst r24
 108 0004 01F4      		brne .+2
 109 0006 00C0      		rjmp .L2
 110 0008 C82F      		mov r28,r24
 348:../../tmk_core/common/action.c ****         return;
 349:../../tmk_core/common/action.c ****     }
 350:../../tmk_core/common/action.c **** 
 351:../../tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 352:../../tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 353:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 354:../../tmk_core/common/action.c ****         // Resync: ignore if caps lock already is on
 355:../../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
 356:../../tmk_core/common/action.c **** #endif
 357:../../tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 358:../../tmk_core/common/action.c ****         send_keyboard_report();
 359:../../tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 360:../../tmk_core/common/action.c ****         send_keyboard_report();
 361:../../tmk_core/common/action.c ****     }
 362:../../tmk_core/common/action.c **** 
 363:../../tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 364:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 365:../../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
 366:../../tmk_core/common/action.c **** #endif
 367:../../tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 368:../../tmk_core/common/action.c ****         send_keyboard_report();
 369:../../tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 370:../../tmk_core/common/action.c ****         send_keyboard_report();
 371:../../tmk_core/common/action.c ****     }
 372:../../tmk_core/common/action.c **** 
 373:../../tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 374:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 375:../../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
 376:../../tmk_core/common/action.c **** #endif
 377:../../tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 378:../../tmk_core/common/action.c ****         send_keyboard_report();
 379:../../tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 380:../../tmk_core/common/action.c ****         send_keyboard_report();
 381:../../tmk_core/common/action.c ****     }
 382:../../tmk_core/common/action.c **** #endif
 383:../../tmk_core/common/action.c **** 
 384:../../tmk_core/common/action.c ****     else if IS_KEY(code) {
 111               		.loc 1 384 0
 112 000a 8CEF      		ldi r24,lo8(-4)
 113               	.LVL5:
 114 000c 8C0F      		add r24,r28
 115 000e 813A      		cpi r24,lo8(-95)
 116 0010 00F4      		brsh .L5
 385:../../tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 386:../../tmk_core/common/action.c ****         if (command_proc(code)) return;
 117               		.loc 1 386 0
 118 0012 8C2F      		mov r24,r28
 119 0014 0E94 0000 		call command_proc
 120               	.LVL6:
 121 0018 8111      		cpse r24,__zero_reg__
 122 001a 00C0      		rjmp .L2
 387:../../tmk_core/common/action.c **** 
 388:../../tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 389:../../tmk_core/common/action.c **** /* TODO: remove
 390:../../tmk_core/common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 391:../../tmk_core/common/action.c ****             uint8_t tmp_mods = get_mods();
 392:../../tmk_core/common/action.c ****             add_mods(oneshot_state.mods);
 393:../../tmk_core/common/action.c **** 
 394:../../tmk_core/common/action.c ****             add_key(code);
 395:../../tmk_core/common/action.c ****             send_keyboard_report();
 396:../../tmk_core/common/action.c **** 
 397:../../tmk_core/common/action.c ****             set_mods(tmp_mods);
 398:../../tmk_core/common/action.c ****             send_keyboard_report();
 399:../../tmk_core/common/action.c ****             oneshot_cancel();
 400:../../tmk_core/common/action.c ****         } else 
 401:../../tmk_core/common/action.c **** */
 402:../../tmk_core/common/action.c **** #endif
 403:../../tmk_core/common/action.c ****         {
 404:../../tmk_core/common/action.c ****             add_key(code);
 123               		.loc 1 404 0
 124 001c 8C2F      		mov r24,r28
 125 001e 0E94 0000 		call add_key
 126               	.LVL7:
 127 0022 00C0      		rjmp .L32
 128               	.L5:
 405:../../tmk_core/common/action.c ****             send_keyboard_report();
 406:../../tmk_core/common/action.c ****         }
 407:../../tmk_core/common/action.c ****     }
 408:../../tmk_core/common/action.c ****     else if IS_MOD(code) {
 129               		.loc 1 408 0
 130 0024 80E2      		ldi r24,lo8(32)
 131 0026 8C0F      		add r24,r28
 132 0028 8830      		cpi r24,lo8(8)
 133 002a 00F4      		brsh .L7
 409:../../tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 134               		.loc 1 409 0
 135 002c C770      		andi r28,lo8(7)
 136               	.LVL8:
 137 002e 81E0      		ldi r24,lo8(1)
 138 0030 00C0      		rjmp 2f
 139               		1:
 140 0032 880F      		lsl r24
 141               		2:
 142 0034 CA95      		dec r28
 143 0036 02F4      		brpl 1b
 144 0038 0E94 0000 		call add_mods
 145               	.LVL9:
 146               	.L32:
 147               	/* epilogue start */
 410:../../tmk_core/common/action.c ****         send_keyboard_report();
 411:../../tmk_core/common/action.c ****     }
 412:../../tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 413:../../tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 414:../../tmk_core/common/action.c ****     }
 415:../../tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 416:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 417:../../tmk_core/common/action.c ****     }
 418:../../tmk_core/common/action.c **** }
 148               		.loc 1 418 0
 149 003c CF91      		pop r28
 410:../../tmk_core/common/action.c ****         send_keyboard_report();
 150               		.loc 1 410 0
 151 003e 0C94 0000 		jmp send_keyboard_report
 152               	.LVL10:
 153               	.L7:
 412:../../tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 154               		.loc 1 412 0
 155 0042 8BE5      		ldi r24,lo8(91)
 156 0044 8C0F      		add r24,r28
 157 0046 8330      		cpi r24,lo8(3)
 158 0048 00F4      		brsh .L8
 413:../../tmk_core/common/action.c ****     }
 159               		.loc 1 413 0
 160 004a C53A      		cpi r28,lo8(-91)
 161 004c 01F0      		breq .L11
 413:../../tmk_core/common/action.c ****     }
 162               		.loc 1 413 0 is_stmt 0 discriminator 1
 163 004e C63A      		cpi r28,lo8(-90)
 164 0050 01F0      		breq .L12
 413:../../tmk_core/common/action.c ****     }
 165               		.loc 1 413 0
 166 0052 83E8      		ldi r24,lo8(-125)
 167 0054 90E0      		ldi r25,0
 168 0056 00C0      		rjmp .L9
 169               	.L11:
 170 0058 81E8      		ldi r24,lo8(-127)
 171 005a 90E0      		ldi r25,0
 172 005c 00C0      		rjmp .L9
 173               	.L12:
 174 005e 82E8      		ldi r24,lo8(-126)
 175 0060 90E0      		ldi r25,0
 176               	.L9:
 177               	/* epilogue start */
 178               		.loc 1 418 0 is_stmt 1 discriminator 12
 179 0062 CF91      		pop r28
 180               	.LVL11:
 413:../../tmk_core/common/action.c ****     }
 181               		.loc 1 413 0 discriminator 12
 182 0064 0C94 0000 		jmp host_system_send
 183               	.LVL12:
 184               	.L8:
 415:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 185               		.loc 1 415 0
 186 0068 88E5      		ldi r24,lo8(88)
 187 006a 8C0F      		add r24,r28
 188 006c 8331      		cpi r24,lo8(19)
 189 006e 00F0      		brlo .+2
 190 0070 00C0      		rjmp .L2
 416:../../tmk_core/common/action.c ****     }
 191               		.loc 1 416 0
 192 0072 C83A      		cpi r28,lo8(-88)
 193 0074 01F0      		breq .L13
 416:../../tmk_core/common/action.c ****     }
 194               		.loc 1 416 0 is_stmt 0 discriminator 1
 195 0076 C93A      		cpi r28,lo8(-87)
 196 0078 01F0      		breq .L14
 416:../../tmk_core/common/action.c ****     }
 197               		.loc 1 416 0 discriminator 3
 198 007a CA3A      		cpi r28,lo8(-86)
 199 007c 01F0      		breq .L15
 416:../../tmk_core/common/action.c ****     }
 200               		.loc 1 416 0 discriminator 5
 201 007e CB3A      		cpi r28,lo8(-85)
 202 0080 01F0      		breq .L16
 416:../../tmk_core/common/action.c ****     }
 203               		.loc 1 416 0 discriminator 7
 204 0082 CC3A      		cpi r28,lo8(-84)
 205 0084 01F0      		breq .L17
 416:../../tmk_core/common/action.c ****     }
 206               		.loc 1 416 0 discriminator 13
 207 0086 CD3A      		cpi r28,lo8(-83)
 208 0088 01F0      		breq .L18
 416:../../tmk_core/common/action.c ****     }
 209               		.loc 1 416 0 discriminator 15
 210 008a C03B      		cpi r28,lo8(-80)
 211 008c 01F0      		breq .L19
 416:../../tmk_core/common/action.c ****     }
 212               		.loc 1 416 0 discriminator 17
 213 008e CE3A      		cpi r28,lo8(-82)
 214 0090 01F0      		breq .L20
 416:../../tmk_core/common/action.c ****     }
 215               		.loc 1 416 0 discriminator 19
 216 0092 CF3A      		cpi r28,lo8(-81)
 217 0094 01F0      		breq .L21
 416:../../tmk_core/common/action.c ****     }
 218               		.loc 1 416 0 discriminator 21
 219 0096 C13B      		cpi r28,lo8(-79)
 220 0098 01F0      		breq .L22
 416:../../tmk_core/common/action.c ****     }
 221               		.loc 1 416 0 discriminator 23
 222 009a C23B      		cpi r28,lo8(-78)
 223 009c 01F0      		breq .L23
 416:../../tmk_core/common/action.c ****     }
 224               		.loc 1 416 0 discriminator 25
 225 009e C33B      		cpi r28,lo8(-77)
 226 00a0 01F0      		breq .L24
 416:../../tmk_core/common/action.c ****     }
 227               		.loc 1 416 0 discriminator 27
 228 00a2 C43B      		cpi r28,lo8(-76)
 229 00a4 01F0      		breq .L25
 416:../../tmk_core/common/action.c ****     }
 230               		.loc 1 416 0 discriminator 29
 231 00a6 C53B      		cpi r28,lo8(-75)
 232 00a8 01F0      		breq .L26
 416:../../tmk_core/common/action.c ****     }
 233               		.loc 1 416 0 discriminator 31
 234 00aa C63B      		cpi r28,lo8(-74)
 235 00ac 01F0      		breq .L27
 416:../../tmk_core/common/action.c ****     }
 236               		.loc 1 416 0 discriminator 33
 237 00ae C73B      		cpi r28,lo8(-73)
 238 00b0 01F0      		breq .L28
 416:../../tmk_core/common/action.c ****     }
 239               		.loc 1 416 0 discriminator 35
 240 00b2 C83B      		cpi r28,lo8(-72)
 241 00b4 01F0      		breq .L29
 416:../../tmk_core/common/action.c ****     }
 242               		.loc 1 416 0 discriminator 37
 243 00b6 C93B      		cpi r28,lo8(-71)
 244 00b8 01F0      		breq .L30
 416:../../tmk_core/common/action.c ****     }
 245               		.loc 1 416 0 discriminator 39
 246 00ba CA3B      		cpi r28,lo8(-70)
 247 00bc 01F0      		breq .L31
 416:../../tmk_core/common/action.c ****     }
 248               		.loc 1 416 0
 249 00be 80E0      		ldi r24,0
 250 00c0 90E0      		ldi r25,0
 251 00c2 00C0      		rjmp .L10
 252               	.L13:
 253 00c4 82EE      		ldi r24,lo8(-30)
 254 00c6 90E0      		ldi r25,0
 255 00c8 00C0      		rjmp .L10
 256               	.L14:
 257 00ca 89EE      		ldi r24,lo8(-23)
 258 00cc 90E0      		ldi r25,0
 259 00ce 00C0      		rjmp .L10
 260               	.L15:
 261 00d0 8AEE      		ldi r24,lo8(-22)
 262 00d2 90E0      		ldi r25,0
 263 00d4 00C0      		rjmp .L10
 264               	.L16:
 265 00d6 85EB      		ldi r24,lo8(-75)
 266 00d8 90E0      		ldi r25,0
 267 00da 00C0      		rjmp .L10
 268               	.L17:
 269 00dc 86EB      		ldi r24,lo8(-74)
 270 00de 90E0      		ldi r25,0
 271 00e0 00C0      		rjmp .L10
 272               	.L18:
 273 00e2 87EB      		ldi r24,lo8(-73)
 274 00e4 90E0      		ldi r25,0
 275 00e6 00C0      		rjmp .L10
 276               	.L19:
 277 00e8 8CEC      		ldi r24,lo8(-52)
 278 00ea 90E0      		ldi r25,0
 279 00ec 00C0      		rjmp .L10
 280               	.L20:
 281 00ee 8DEC      		ldi r24,lo8(-51)
 282 00f0 90E0      		ldi r25,0
 283 00f2 00C0      		rjmp .L10
 284               	.L21:
 285 00f4 83E8      		ldi r24,lo8(-125)
 286 00f6 91E0      		ldi r25,lo8(1)
 287 00f8 00C0      		rjmp .L10
 288               	.L22:
 289 00fa 8AE8      		ldi r24,lo8(-118)
 290 00fc 91E0      		ldi r25,lo8(1)
 291 00fe 00C0      		rjmp .L10
 292               	.L23:
 293 0100 82E9      		ldi r24,lo8(-110)
 294 0102 91E0      		ldi r25,lo8(1)
 295 0104 00C0      		rjmp .L10
 296               	.L24:
 297 0106 84E9      		ldi r24,lo8(-108)
 298 0108 91E0      		ldi r25,lo8(1)
 299 010a 00C0      		rjmp .L10
 300               	.L25:
 301 010c 81E2      		ldi r24,lo8(33)
 302 010e 92E0      		ldi r25,lo8(2)
 303 0110 00C0      		rjmp .L10
 304               	.L26:
 305 0112 83E2      		ldi r24,lo8(35)
 306 0114 92E0      		ldi r25,lo8(2)
 307 0116 00C0      		rjmp .L10
 308               	.L27:
 309 0118 84E2      		ldi r24,lo8(36)
 310 011a 92E0      		ldi r25,lo8(2)
 311 011c 00C0      		rjmp .L10
 312               	.L28:
 313 011e 85E2      		ldi r24,lo8(37)
 314 0120 92E0      		ldi r25,lo8(2)
 315 0122 00C0      		rjmp .L10
 316               	.L29:
 317 0124 86E2      		ldi r24,lo8(38)
 318 0126 92E0      		ldi r25,lo8(2)
 319 0128 00C0      		rjmp .L10
 320               	.L30:
 321 012a 87E2      		ldi r24,lo8(39)
 322 012c 92E0      		ldi r25,lo8(2)
 323 012e 00C0      		rjmp .L10
 324               	.L31:
 325 0130 8AE2      		ldi r24,lo8(42)
 326 0132 92E0      		ldi r25,lo8(2)
 327               	.L10:
 328               	/* epilogue start */
 329               		.loc 1 418 0 is_stmt 1 discriminator 84
 330 0134 CF91      		pop r28
 331               	.LVL13:
 416:../../tmk_core/common/action.c ****     }
 332               		.loc 1 416 0 discriminator 84
 333 0136 0C94 0000 		jmp host_consumer_send
 334               	.LVL14:
 335               	.L2:
 336               	/* epilogue start */
 337               		.loc 1 418 0
 338 013a CF91      		pop r28
 339 013c 0895      		ret
 340               		.cfi_endproc
 341               	.LFE105:
 343               		.section	.text.unregister_code,"ax",@progbits
 344               	.global	unregister_code
 346               	unregister_code:
 347               	.LFB106:
 419:../../tmk_core/common/action.c **** 
 420:../../tmk_core/common/action.c **** void unregister_code(uint8_t code)
 421:../../tmk_core/common/action.c **** {
 348               		.loc 1 421 0
 349               		.cfi_startproc
 350               	.LVL15:
 351               	/* prologue: function */
 352               	/* frame size = 0 */
 353               	/* stack size = 0 */
 354               	.L__stack_usage = 0
 422:../../tmk_core/common/action.c ****     if (code == KC_NO) {
 355               		.loc 1 422 0
 356 0000 8823      		tst r24
 357 0002 01F0      		breq .L34
 423:../../tmk_core/common/action.c ****         return;
 424:../../tmk_core/common/action.c ****     }
 425:../../tmk_core/common/action.c **** 
 426:../../tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 427:../../tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 428:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 429:../../tmk_core/common/action.c ****         // Resync: ignore if caps lock already is off
 430:../../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
 431:../../tmk_core/common/action.c **** #endif
 432:../../tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 433:../../tmk_core/common/action.c ****         send_keyboard_report();
 434:../../tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 435:../../tmk_core/common/action.c ****         send_keyboard_report();
 436:../../tmk_core/common/action.c ****     }
 437:../../tmk_core/common/action.c **** 
 438:../../tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 439:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 440:../../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
 441:../../tmk_core/common/action.c **** #endif
 442:../../tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 443:../../tmk_core/common/action.c ****         send_keyboard_report();
 444:../../tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 445:../../tmk_core/common/action.c ****         send_keyboard_report();
 446:../../tmk_core/common/action.c ****     }
 447:../../tmk_core/common/action.c **** 
 448:../../tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 449:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 450:../../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
 451:../../tmk_core/common/action.c **** #endif
 452:../../tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 453:../../tmk_core/common/action.c ****         send_keyboard_report();
 454:../../tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 455:../../tmk_core/common/action.c ****         send_keyboard_report();
 456:../../tmk_core/common/action.c ****     }
 457:../../tmk_core/common/action.c **** #endif
 458:../../tmk_core/common/action.c **** 
 459:../../tmk_core/common/action.c ****     else if IS_KEY(code) {
 358               		.loc 1 459 0
 359 0004 9CEF      		ldi r25,lo8(-4)
 360 0006 980F      		add r25,r24
 361 0008 913A      		cpi r25,lo8(-95)
 362 000a 00F4      		brsh .L36
 460:../../tmk_core/common/action.c ****         del_key(code);
 363               		.loc 1 460 0
 364 000c 0E94 0000 		call del_key
 365               	.LVL16:
 366 0010 00C0      		rjmp .L42
 367               	.LVL17:
 368               	.L36:
 461:../../tmk_core/common/action.c ****         send_keyboard_report();
 462:../../tmk_core/common/action.c ****     }
 463:../../tmk_core/common/action.c ****     else if IS_MOD(code) {
 369               		.loc 1 463 0
 370 0012 90E2      		ldi r25,lo8(32)
 371 0014 980F      		add r25,r24
 372 0016 9830      		cpi r25,lo8(8)
 373 0018 00F4      		brsh .L37
 464:../../tmk_core/common/action.c ****         del_mods(MOD_BIT(code));
 374               		.loc 1 464 0
 375 001a 8770      		andi r24,lo8(7)
 376               	.LVL18:
 377 001c 91E0      		ldi r25,lo8(1)
 378 001e 00C0      		rjmp 2f
 379               		1:
 380 0020 990F      		lsl r25
 381               		2:
 382 0022 8A95      		dec r24
 383 0024 02F4      		brpl 1b
 384 0026 892F      		mov r24,r25
 385 0028 0E94 0000 		call del_mods
 386               	.LVL19:
 387               	.L42:
 465:../../tmk_core/common/action.c ****         send_keyboard_report();
 388               		.loc 1 465 0
 389 002c 0C94 0000 		jmp send_keyboard_report
 390               	.LVL20:
 391               	.L37:
 466:../../tmk_core/common/action.c ****     }
 467:../../tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 392               		.loc 1 467 0
 393 0030 9BE5      		ldi r25,lo8(91)
 394 0032 980F      		add r25,r24
 395 0034 9330      		cpi r25,lo8(3)
 396 0036 00F4      		brsh .L38
 468:../../tmk_core/common/action.c ****         host_system_send(0);
 397               		.loc 1 468 0
 398 0038 80E0      		ldi r24,0
 399 003a 90E0      		ldi r25,0
 400               	.LVL21:
 401 003c 0C94 0000 		jmp host_system_send
 402               	.LVL22:
 403               	.L38:
 469:../../tmk_core/common/action.c ****     }
 470:../../tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 404               		.loc 1 470 0
 405 0040 885A      		subi r24,lo8(-(88))
 406               	.LVL23:
 407 0042 8331      		cpi r24,lo8(19)
 408 0044 00F4      		brsh .L34
 471:../../tmk_core/common/action.c ****         host_consumer_send(0);
 409               		.loc 1 471 0
 410 0046 80E0      		ldi r24,0
 411 0048 90E0      		ldi r25,0
 412               	.LVL24:
 413 004a 0C94 0000 		jmp host_consumer_send
 414               	.LVL25:
 415               	.L34:
 416 004e 0895      		ret
 417               		.cfi_endproc
 418               	.LFE106:
 420               		.section	.text.register_mods,"ax",@progbits
 421               	.global	register_mods
 423               	register_mods:
 424               	.LFB107:
 472:../../tmk_core/common/action.c ****     }
 473:../../tmk_core/common/action.c **** }
 474:../../tmk_core/common/action.c **** 
 475:../../tmk_core/common/action.c **** void register_mods(uint8_t mods)
 476:../../tmk_core/common/action.c **** {
 425               		.loc 1 476 0
 426               		.cfi_startproc
 427               	.LVL26:
 428               	/* prologue: function */
 429               	/* frame size = 0 */
 430               	/* stack size = 0 */
 431               	.L__stack_usage = 0
 477:../../tmk_core/common/action.c ****     if (mods) {
 432               		.loc 1 477 0
 433 0000 8823      		tst r24
 434 0002 01F0      		breq .L43
 478:../../tmk_core/common/action.c ****         add_mods(mods);
 435               		.loc 1 478 0
 436 0004 0E94 0000 		call add_mods
 437               	.LVL27:
 479:../../tmk_core/common/action.c ****         send_keyboard_report();
 438               		.loc 1 479 0
 439 0008 0C94 0000 		jmp send_keyboard_report
 440               	.LVL28:
 441               	.L43:
 442 000c 0895      		ret
 443               		.cfi_endproc
 444               	.LFE107:
 446               		.section	.text.unregister_mods,"ax",@progbits
 447               	.global	unregister_mods
 449               	unregister_mods:
 450               	.LFB108:
 480:../../tmk_core/common/action.c ****     }
 481:../../tmk_core/common/action.c **** }
 482:../../tmk_core/common/action.c **** 
 483:../../tmk_core/common/action.c **** void unregister_mods(uint8_t mods)
 484:../../tmk_core/common/action.c **** {
 451               		.loc 1 484 0
 452               		.cfi_startproc
 453               	.LVL29:
 454               	/* prologue: function */
 455               	/* frame size = 0 */
 456               	/* stack size = 0 */
 457               	.L__stack_usage = 0
 485:../../tmk_core/common/action.c ****     if (mods) {
 458               		.loc 1 485 0
 459 0000 8823      		tst r24
 460 0002 01F0      		breq .L45
 486:../../tmk_core/common/action.c ****         del_mods(mods);
 461               		.loc 1 486 0
 462 0004 0E94 0000 		call del_mods
 463               	.LVL30:
 487:../../tmk_core/common/action.c ****         send_keyboard_report();
 464               		.loc 1 487 0
 465 0008 0C94 0000 		jmp send_keyboard_report
 466               	.LVL31:
 467               	.L45:
 468 000c 0895      		ret
 469               		.cfi_endproc
 470               	.LFE108:
 472               		.section	.text.process_action,"ax",@progbits
 473               	.global	process_action
 475               	process_action:
 476               	.LFB104:
  57:../../tmk_core/common/action.c ****     keyevent_t event = record->event;
 477               		.loc 1 57 0
 478               		.cfi_startproc
 479               	.LVL32:
 480 0000 BF92      		push r11
 481               	.LCFI5:
 482               		.cfi_def_cfa_offset 3
 483               		.cfi_offset 11, -2
 484 0002 CF92      		push r12
 485               	.LCFI6:
 486               		.cfi_def_cfa_offset 4
 487               		.cfi_offset 12, -3
 488 0004 DF92      		push r13
 489               	.LCFI7:
 490               		.cfi_def_cfa_offset 5
 491               		.cfi_offset 13, -4
 492 0006 EF92      		push r14
 493               	.LCFI8:
 494               		.cfi_def_cfa_offset 6
 495               		.cfi_offset 14, -5
 496 0008 FF92      		push r15
 497               	.LCFI9:
 498               		.cfi_def_cfa_offset 7
 499               		.cfi_offset 15, -6
 500 000a 0F93      		push r16
 501               	.LCFI10:
 502               		.cfi_def_cfa_offset 8
 503               		.cfi_offset 16, -7
 504 000c 1F93      		push r17
 505               	.LCFI11:
 506               		.cfi_def_cfa_offset 9
 507               		.cfi_offset 17, -8
 508 000e CF93      		push r28
 509               	.LCFI12:
 510               		.cfi_def_cfa_offset 10
 511               		.cfi_offset 28, -9
 512 0010 DF93      		push r29
 513               	.LCFI13:
 514               		.cfi_def_cfa_offset 11
 515               		.cfi_offset 29, -10
 516 0012 00D0      		rcall .
 517 0014 00D0      		rcall .
 518 0016 00D0      		rcall .
 519               	.LCFI14:
 520               		.cfi_def_cfa_offset 17
 521 0018 CDB7      		in r28,__SP_L__
 522 001a DEB7      		in r29,__SP_H__
 523               	.LCFI15:
 524               		.cfi_def_cfa_register 28
 525               	/* prologue: function */
 526               	/* frame size = 6 */
 527               	/* stack size = 15 */
 528               	.L__stack_usage = 15
  58:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 529               		.loc 1 58 0
 530 001c 25E0      		ldi r18,lo8(5)
 531 001e FC01      		movw r30,r24
 532 0020 DE01      		movw r26,r28
 533 0022 1196      		adiw r26,1
 534               		0:
 535 0024 0190      		ld r0,Z+
 536 0026 0D92      		st X+,r0
 537 0028 2A95      		dec r18
 538 002a 01F4      		brne 0b
 539 002c FC01      		movw r30,r24
 540 002e 4081      		ld r20,Z
 541               	.LVL33:
 542 0030 3181      		ldd r19,Z+1
 543               	.LVL34:
 544 0032 0281      		ldd r16,Z+2
 545               	.LVL35:
  60:../../tmk_core/common/action.c **** #endif
 546               		.loc 1 60 0
 547 0034 2581      		ldd r18,Z+5
 548 0036 2295      		swap r18
 549 0038 2F70      		andi r18,lo8(15)
 550               	.LVL36:
 551               	.LBB8:
 552               	.LBB9:
 553               		.file 2 "../../tmk_core/common/keyboard.h"
   1:../../tmk_core/common/keyboard.h **** /*
   2:../../tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/keyboard.h **** 
   4:../../tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/keyboard.h **** (at your option) any later version.
   8:../../tmk_core/common/keyboard.h **** 
   9:../../tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:../../tmk_core/common/keyboard.h **** 
  14:../../tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/keyboard.h **** */
  17:../../tmk_core/common/keyboard.h **** 
  18:../../tmk_core/common/keyboard.h **** #ifndef KEYBOARD_H
  19:../../tmk_core/common/keyboard.h **** #define KEYBOARD_H
  20:../../tmk_core/common/keyboard.h **** 
  21:../../tmk_core/common/keyboard.h **** #include <stdbool.h>
  22:../../tmk_core/common/keyboard.h **** #include <stdint.h>
  23:../../tmk_core/common/keyboard.h **** 
  24:../../tmk_core/common/keyboard.h **** 
  25:../../tmk_core/common/keyboard.h **** #ifdef __cplusplus
  26:../../tmk_core/common/keyboard.h **** extern "C" {
  27:../../tmk_core/common/keyboard.h **** #endif
  28:../../tmk_core/common/keyboard.h **** 
  29:../../tmk_core/common/keyboard.h **** /* key matrix position */
  30:../../tmk_core/common/keyboard.h **** typedef struct {
  31:../../tmk_core/common/keyboard.h ****     uint8_t col;
  32:../../tmk_core/common/keyboard.h ****     uint8_t row;
  33:../../tmk_core/common/keyboard.h **** } keypos_t;
  34:../../tmk_core/common/keyboard.h **** 
  35:../../tmk_core/common/keyboard.h **** /* key event */
  36:../../tmk_core/common/keyboard.h **** typedef struct {
  37:../../tmk_core/common/keyboard.h ****     keypos_t key;
  38:../../tmk_core/common/keyboard.h ****     bool     pressed;
  39:../../tmk_core/common/keyboard.h ****     uint16_t time;
  40:../../tmk_core/common/keyboard.h **** } keyevent_t;
  41:../../tmk_core/common/keyboard.h **** 
  42:../../tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  43:../../tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:../../tmk_core/common/keyboard.h **** 
  45:../../tmk_core/common/keyboard.h **** /* Rules for No Event:
  46:../../tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:../../tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:../../tmk_core/common/keyboard.h ****  */
  49:../../tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
 554               		.loc 2 49 0
 555 003a 6381      		ldd r22,Z+3
 556 003c 7481      		ldd r23,Z+4
 557 003e 672B      		or r22,r23
 558 0040 01F4      		brne .+2
 559 0042 00C0      		rjmp .L47
 560 0044 3F3F      		cpi r19,lo8(-1)
 561 0046 01F4      		brne .L49
 562               	.LBE9:
 563               	.LBE8:
  63:../../tmk_core/common/action.c **** 
 564               		.loc 1 63 0
 565 0048 4F3F      		cpi r20,lo8(-1)
 566 004a 01F4      		brne .+2
 567 004c 00C0      		rjmp .L47
 568               	.L49:
 569 004e 7C01      		movw r14,r24
  65:../../tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 570               		.loc 1 65 0
 571 0050 4983      		std Y+1,r20
 572 0052 3A83      		std Y+2,r19
 573 0054 8981      		ldd r24,Y+1
 574 0056 9A81      		ldd r25,Y+2
 575               	.LVL37:
 576 0058 2E83      		std Y+6,r18
 577 005a 0E94 0000 		call layer_switch_get_action
 578               	.LVL38:
 579 005e 182F      		mov r17,r24
 580               	.LVL39:
 581 0060 B92E      		mov r11,r25
  68:../../tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 582               		.loc 1 68 0
 583 0062 0E94 0000 		call layer_debug
 584               	.LVL40:
  69:../../tmk_core/common/action.c **** #endif
 585               		.loc 1 69 0
 586 0066 0E94 0000 		call default_layer_debug
 587               	.LVL41:
  73:../../tmk_core/common/action.c ****         /* Key and Mods */
 588               		.loc 1 73 0
 589 006a EB2D      		mov r30,r11
 590 006c E295      		swap r30
 591 006e EF70      		andi r30,lo8(15)
 592 0070 F0E0      		ldi r31,0
 593 0072 E050      		subi r30,lo8(-(gs(.L52)))
 594 0074 F040      		sbci r31,hi8(-(gs(.L52)))
 595 0076 2E81      		ldd r18,Y+6
 596 0078 0C94 0000 		jmp __tablejump2__
 597               		.section	.progmem.gcc_sw_table.process_action,"a",@progbits
 598               		.p2align	1
 599               	.L52:
 600 0000 0000      		.word gs(.L51)
 601 0002 0000      		.word gs(.L51)
 602 0004 0000      		.word gs(.L53)
 603 0006 0000      		.word gs(.L53)
 604 0008 0000      		.word gs(.L54)
 605 000a 0000      		.word gs(.L55)
 606 000c 0000      		.word gs(.L47)
 607 000e 0000      		.word gs(.L47)
 608 0010 0000      		.word gs(.L56)
 609 0012 0000      		.word gs(.L47)
 610 0014 0000      		.word gs(.L57)
 611 0016 0000      		.word gs(.L57)
 612 0018 0000      		.word gs(.L58)
 613 001a 0000      		.word gs(.L47)
 614 001c 0000      		.word gs(.L47)
 615 001e 0000      		.word gs(.L59)
 616               		.section	.text.process_action
 617               	.L51:
 618               	.LBB10:
  78:../../tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 619               		.loc 1 78 0
 620 007c 8B2D      		mov r24,r11
 621 007e 807F      		andi r24,lo8(-16)
 622 0080 9B2D      		mov r25,r11
 623 0082 9F70      		andi r25,lo8(15)
 624 0084 F92E      		mov r15,r25
 625 0086 8823      		tst r24
 626 0088 01F0      		breq .L61
  78:../../tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 627               		.loc 1 78 0 is_stmt 0 discriminator 2
 628 008a F294      		swap r15
 629 008c 80EF      		ldi r24,lo8(-16)
 630 008e F822      		and r15,r24
 631               	.L61:
 632               	.LVL42:
  80:../../tmk_core/common/action.c ****                     if (mods) {
 633               		.loc 1 80 0 is_stmt 1 discriminator 4
 634 0090 0023      		tst r16
 635 0092 01F0      		breq .L62
  81:../../tmk_core/common/action.c ****                         add_weak_mods(mods);
 636               		.loc 1 81 0
 637 0094 FF20      		tst r15
 638 0096 01F4      		brne .+2
 639 0098 00C0      		rjmp .L145
  82:../../tmk_core/common/action.c ****                         send_keyboard_report();
 640               		.loc 1 82 0
 641 009a 8F2D      		mov r24,r15
 642 009c 0E94 0000 		call add_weak_mods
 643               	.LVL43:
  83:../../tmk_core/common/action.c ****                     }
 644               		.loc 1 83 0
 645 00a0 0E94 0000 		call send_keyboard_report
 646               	.LVL44:
 647 00a4 00C0      		rjmp .L145
 648               	.L62:
 649               	.LVL45:
  87:../../tmk_core/common/action.c ****                     if (mods) {
 650               		.loc 1 87 0
 651 00a6 812F      		mov r24,r17
 652 00a8 0E94 0000 		call unregister_code
 653               	.LVL46:
  88:../../tmk_core/common/action.c ****                         del_weak_mods(mods);
 654               		.loc 1 88 0
 655 00ac FF20      		tst r15
 656 00ae 01F4      		brne .+2
 657 00b0 00C0      		rjmp .L47
  89:../../tmk_core/common/action.c ****                         send_keyboard_report();
 658               		.loc 1 89 0
 659 00b2 8F2D      		mov r24,r15
 660 00b4 0E94 0000 		call del_weak_mods
 661               	.LVL47:
 662               	/* epilogue start */
 663               	.LBE10:
 337:../../tmk_core/common/action.c **** 
 664               		.loc 1 337 0
 665 00b8 2696      		adiw r28,6
 666               	.LVL48:
 667 00ba 0FB6      		in __tmp_reg__,__SREG__
 668 00bc F894      		cli
 669 00be DEBF      		out __SP_H__,r29
 670 00c0 0FBE      		out __SREG__,__tmp_reg__
 671 00c2 CDBF      		out __SP_L__,r28
 672               	.LVL49:
 673 00c4 DF91      		pop r29
 674 00c6 CF91      		pop r28
 675 00c8 1F91      		pop r17
 676               	.LVL50:
 677 00ca 0F91      		pop r16
 678               	.LVL51:
 679 00cc FF90      		pop r15
 680               	.LVL52:
 681 00ce EF90      		pop r14
 682               	.LVL53:
 683 00d0 DF90      		pop r13
 684 00d2 CF90      		pop r12
 685 00d4 BF90      		pop r11
 686               	.LBB11:
  90:../../tmk_core/common/action.c ****                     }
 687               		.loc 1 90 0
 688 00d6 0C94 0000 		jmp send_keyboard_report
 689               	.LVL54:
 690               	.L53:
 691               	.LBE11:
 692               	.LBB12:
  99:../../tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 693               		.loc 1 99 0
 694 00da 8B2D      		mov r24,r11
 695 00dc 807F      		andi r24,lo8(-16)
 696 00de 9B2D      		mov r25,r11
 697 00e0 9F70      		andi r25,lo8(15)
 698 00e2 8032      		cpi r24,lo8(32)
 699 00e4 01F4      		brne .L65
  99:../../tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 700               		.loc 1 99 0 is_stmt 0 discriminator 1
 701 00e6 892F      		mov r24,r25
 702 00e8 00C0      		rjmp .L66
 703               	.L65:
  99:../../tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 704               		.loc 1 99 0 discriminator 2
 705 00ea 892F      		mov r24,r25
 706 00ec 8295      		swap r24
 707 00ee 807F      		andi r24,lo8(-16)
 708               	.L66:
 709               	.LVL55:
 101:../../tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 710               		.loc 1 101 0 is_stmt 1 discriminator 4
 711 00f0 1123      		tst r17
 712 00f2 01F0      		breq .L68
 713 00f4 1130      		cpi r17,lo8(1)
 714 00f6 01F0      		breq .L69
 715 00f8 00C0      		rjmp .L153
 716               	.L68:
 105:../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 717               		.loc 1 105 0
 718 00fa 0023      		tst r16
 719 00fc 01F0      		breq .L70
 106:../../tmk_core/common/action.c ****                                 register_mods(mods);
 720               		.loc 1 106 0
 721 00fe 2223      		tst r18
 722 0100 01F0      		breq .L144
 109:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 723               		.loc 1 109 0
 724 0102 2130      		cpi r18,lo8(1)
 725 0104 01F4      		brne .L144
 726               	/* epilogue start */
 727               	.LBE12:
 337:../../tmk_core/common/action.c **** 
 728               		.loc 1 337 0
 729 0106 2696      		adiw r28,6
 730 0108 0FB6      		in __tmp_reg__,__SREG__
 731 010a F894      		cli
 732 010c DEBF      		out __SP_H__,r29
 733 010e 0FBE      		out __SREG__,__tmp_reg__
 734 0110 CDBF      		out __SP_L__,r28
 735 0112 DF91      		pop r29
 736 0114 CF91      		pop r28
 737 0116 1F91      		pop r17
 738               	.LVL56:
 739 0118 0F91      		pop r16
 740               	.LVL57:
 741 011a FF90      		pop r15
 742 011c EF90      		pop r14
 743               	.LVL58:
 744 011e DF90      		pop r13
 745 0120 CF90      		pop r12
 746 0122 BF90      		pop r11
 747               	.LBB13:
 111:../../tmk_core/common/action.c ****                             }
 748               		.loc 1 111 0
 749 0124 0C94 0000 		jmp set_oneshot_mods
 750               	.LVL59:
 751               	.L70:
 117:../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 752               		.loc 1 117 0
 753 0128 2223      		tst r18
 754 012a 01F0      		breq .L142
 121:../../tmk_core/common/action.c ****                                 // Retain Oneshot mods
 755               		.loc 1 121 0
 756 012c 2130      		cpi r18,lo8(1)
 757 012e 01F4      		brne .+2
 758 0130 00C0      		rjmp .L47
 759               	.L142:
 125:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 760               		.loc 1 125 0
 761 0132 8E83      		std Y+6,r24
 762 0134 0E94 0000 		call clear_oneshot_mods
 763               	.LVL60:
 126:../../tmk_core/common/action.c ****                             }
 764               		.loc 1 126 0
 765 0138 8E81      		ldd r24,Y+6
 766 013a 00C0      		rjmp .L147
 767               	.LVL61:
 768               	.L69:
 132:../../tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 769               		.loc 1 132 0
 770 013c 0023      		tst r16
 771 013e 01F0      		breq .L75
 133:../../tmk_core/common/action.c ****                                 register_mods(mods);
 772               		.loc 1 133 0
 773 0140 2630      		cpi r18,lo8(6)
 774 0142 00F0      		brlo .+2
 775 0144 00C0      		rjmp .L47
 776 0146 00C0      		rjmp .L144
 777               	.L75:
 137:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 778               		.loc 1 137 0
 779 0148 2530      		cpi r18,lo8(5)
 780 014a 00F0      		brlo .+2
 781 014c 00C0      		rjmp .L47
 782 014e 00C0      		rjmp .L147
 783               	.L153:
 143:../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 784               		.loc 1 143 0
 785 0150 0023      		tst r16
 786 0152 01F0      		breq .L76
 144:../../tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 787               		.loc 1 144 0
 788 0154 2223      		tst r18
 789 0156 01F0      		breq .L144
 145:../../tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: Cancel: add_mods\n");
 790               		.loc 1 145 0
 791 0158 F701      		movw r30,r14
 792 015a 9581      		ldd r25,Z+5
 793 015c 90FF      		sbrs r25,0
 794 015e 00C0      		rjmp .L145
 148:../../tmk_core/common/action.c ****                                     register_mods(mods);
 795               		.loc 1 148 0
 796 0160 9F70      		andi r25,lo8(15)
 797 0162 9583      		std Z+5,r25
 798               	.LVL62:
 799               	.L144:
 800               	/* epilogue start */
 801               	.LBE13:
 337:../../tmk_core/common/action.c **** 
 802               		.loc 1 337 0
 803 0164 2696      		adiw r28,6
 804 0166 0FB6      		in __tmp_reg__,__SREG__
 805 0168 F894      		cli
 806 016a DEBF      		out __SP_H__,r29
 807 016c 0FBE      		out __SREG__,__tmp_reg__
 808 016e CDBF      		out __SP_L__,r28
 809 0170 DF91      		pop r29
 810 0172 CF91      		pop r28
 811 0174 1F91      		pop r17
 812               	.LVL63:
 813 0176 0F91      		pop r16
 814               	.LVL64:
 815 0178 FF90      		pop r15
 816 017a EF90      		pop r14
 817               	.LVL65:
 818 017c DF90      		pop r13
 819 017e CF90      		pop r12
 820 0180 BF90      		pop r11
 821               	.LBB14:
 149:../../tmk_core/common/action.c ****                                 } else {
 822               		.loc 1 149 0
 823 0182 0C94 0000 		jmp register_mods
 824               	.LVL66:
 825               	.L76:
 159:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 826               		.loc 1 159 0
 827 0186 2223      		tst r18
 828 0188 01F4      		brne .+2
 829 018a 00C0      		rjmp .L147
 830 018c 00C0      		rjmp .L146
 831               	.LVL67:
 832               	.L54:
 833               	.LBE14:
 175:../../tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 834               		.loc 1 175 0
 835 018e 2B2D      		mov r18,r11
 836 0190 2695      		lsr r18
 837 0192 2695      		lsr r18
 838 0194 2370      		andi r18,lo8(3)
 839 0196 30E0      		ldi r19,0
 840 0198 2115      		cp r18,__zero_reg__
 841 019a 3105      		cpc r19,__zero_reg__
 842 019c 01F0      		breq .L80
 843 019e 2130      		cpi r18,1
 844 01a0 3105      		cpc r19,__zero_reg__
 845 01a2 01F0      		breq .L81
 846 01a4 00C0      		rjmp .L47
 847               	.L80:
 177:../../tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 848               		.loc 1 177 0
 849 01a6 0023      		tst r16
 850 01a8 01F0      		breq .L82
 851               	.LVL68:
 178:../../tmk_core/common/action.c ****                     } else {
 852               		.loc 1 178 0
 853 01aa 812F      		mov r24,r17
 854 01ac 9B2D      		mov r25,r11
 855 01ae 9370      		andi r25,lo8(3)
 856 01b0 00C0      		rjmp .L148
 857               	.LVL69:
 858               	.L82:
 180:../../tmk_core/common/action.c ****                     }
 859               		.loc 1 180 0
 860 01b2 80E0      		ldi r24,0
 861 01b4 90E0      		ldi r25,0
 862               	.LVL70:
 863               	.L148:
 864               	/* epilogue start */
 337:../../tmk_core/common/action.c **** 
 865               		.loc 1 337 0
 866 01b6 2696      		adiw r28,6
 867 01b8 0FB6      		in __tmp_reg__,__SREG__
 868 01ba F894      		cli
 869 01bc DEBF      		out __SP_H__,r29
 870 01be 0FBE      		out __SREG__,__tmp_reg__
 871 01c0 CDBF      		out __SP_L__,r28
 872 01c2 DF91      		pop r29
 873 01c4 CF91      		pop r28
 874 01c6 1F91      		pop r17
 875               	.LVL71:
 876 01c8 0F91      		pop r16
 877               	.LVL72:
 878 01ca FF90      		pop r15
 879 01cc EF90      		pop r14
 880               	.LVL73:
 881 01ce DF90      		pop r13
 882 01d0 CF90      		pop r12
 883 01d2 BF90      		pop r11
 180:../../tmk_core/common/action.c ****                     }
 884               		.loc 1 180 0
 885 01d4 0C94 0000 		jmp host_system_send
 886               	.LVL74:
 887               	.L81:
 184:../../tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 888               		.loc 1 184 0
 889 01d8 0023      		tst r16
 890 01da 01F0      		breq .L83
 891               	.LVL75:
 185:../../tmk_core/common/action.c ****                     } else {
 892               		.loc 1 185 0
 893 01dc 812F      		mov r24,r17
 894 01de 9B2D      		mov r25,r11
 895 01e0 9370      		andi r25,lo8(3)
 896 01e2 00C0      		rjmp .L149
 897               	.LVL76:
 898               	.L83:
 187:../../tmk_core/common/action.c ****                     }
 899               		.loc 1 187 0
 900 01e4 80E0      		ldi r24,0
 901 01e6 90E0      		ldi r25,0
 902               	.LVL77:
 903               	.L149:
 904               	/* epilogue start */
 337:../../tmk_core/common/action.c **** 
 905               		.loc 1 337 0
 906 01e8 2696      		adiw r28,6
 907 01ea 0FB6      		in __tmp_reg__,__SREG__
 908 01ec F894      		cli
 909 01ee DEBF      		out __SP_H__,r29
 910 01f0 0FBE      		out __SREG__,__tmp_reg__
 911 01f2 CDBF      		out __SP_L__,r28
 912 01f4 DF91      		pop r29
 913 01f6 CF91      		pop r28
 914 01f8 1F91      		pop r17
 915               	.LVL78:
 916 01fa 0F91      		pop r16
 917               	.LVL79:
 918 01fc FF90      		pop r15
 919 01fe EF90      		pop r14
 920               	.LVL80:
 921 0200 DF90      		pop r13
 922 0202 CF90      		pop r12
 923 0204 BF90      		pop r11
 187:../../tmk_core/common/action.c ****                     }
 924               		.loc 1 187 0
 925 0206 0C94 0000 		jmp host_consumer_send
 926               	.LVL81:
 927               	.L55:
 197:../../tmk_core/common/action.c ****                 mousekey_send();
 928               		.loc 1 197 0
 929 020a 812F      		mov r24,r17
 196:../../tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 930               		.loc 1 196 0
 931 020c 0023      		tst r16
 932 020e 01F0      		breq .L84
 197:../../tmk_core/common/action.c ****                 mousekey_send();
 933               		.loc 1 197 0
 934 0210 0E94 0000 		call mousekey_on
 935               	.LVL82:
 936 0214 00C0      		rjmp .L151
 937               	.L84:
 200:../../tmk_core/common/action.c ****                 mousekey_send();
 938               		.loc 1 200 0
 939 0216 0E94 0000 		call mousekey_off
 940               	.LVL83:
 941               	.L151:
 942               	/* epilogue start */
 337:../../tmk_core/common/action.c **** 
 943               		.loc 1 337 0
 944 021a 2696      		adiw r28,6
 945 021c 0FB6      		in __tmp_reg__,__SREG__
 946 021e F894      		cli
 947 0220 DEBF      		out __SP_H__,r29
 948 0222 0FBE      		out __SREG__,__tmp_reg__
 949 0224 CDBF      		out __SP_L__,r28
 950 0226 DF91      		pop r29
 951 0228 CF91      		pop r28
 952 022a 1F91      		pop r17
 953               	.LVL84:
 954 022c 0F91      		pop r16
 955               	.LVL85:
 956 022e FF90      		pop r15
 957 0230 EF90      		pop r14
 958               	.LVL86:
 959 0232 DF90      		pop r13
 960 0234 CF90      		pop r12
 961 0236 BF90      		pop r11
 201:../../tmk_core/common/action.c ****             }
 962               		.loc 1 201 0
 963 0238 0C94 0000 		jmp mousekey_send
 964               	.LVL87:
 965               	.L56:
 207:../../tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 966               		.loc 1 207 0
 967 023c 8B2D      		mov r24,r11
 968 023e 8370      		andi r24,lo8(3)
 969 0240 01F0      		breq .+2
 970 0242 00C0      		rjmp .L85
 209:../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 971               		.loc 1 209 0
 972 0244 0111      		cpse r16,__zero_reg__
 973 0246 00C0      		rjmp .L47
 974               	.LVL88:
 975               	.LBB15:
 210:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 976               		.loc 1 210 0
 977 0248 812F      		mov r24,r17
 978 024a 8295      		swap r24
 979 024c 8695      		lsr r24
 980 024e 8770      		andi r24,lo8(7)
 981 0250 880F      		lsl r24
 982 0252 880F      		lsl r24
 211:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 983               		.loc 1 211 0
 984 0254 912F      		mov r25,r17
 985 0256 9F70      		andi r25,lo8(15)
 986 0258 C92E      		mov r12,r25
 987 025a D12C      		mov r13,__zero_reg__
 988 025c E12C      		mov r14,__zero_reg__
 989 025e F12C      		mov r15,__zero_reg__
 990               	.LVL89:
 991 0260 082E      		mov r0,r24
 992 0262 00C0      		rjmp 2f
 993               		1:
 994 0264 CC0C      		lsl r12
 995 0266 DD1C      		rol r13
 996 0268 EE1C      		rol r14
 997 026a FF1C      		rol r15
 998               		2:
 999 026c 0A94      		dec r0
 1000 026e 02F4      		brpl 1b
 1001               	.LVL90:
 212:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1002               		.loc 1 212 0
 1003 0270 14FF      		sbrs r17,4
 1004 0272 00C0      		rjmp .L113
 212:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1005               		.loc 1 212 0 is_stmt 0 discriminator 1
 1006 0274 4FE0      		ldi r20,lo8(15)
 1007 0276 50E0      		ldi r21,0
 1008 0278 60E0      		ldi r22,0
 1009 027a 70E0      		ldi r23,0
 1010 027c 00C0      		rjmp 2f
 1011               		1:
 1012 027e 440F      		lsl r20
 1013 0280 551F      		rol r21
 1014 0282 661F      		rol r22
 1015 0284 771F      		rol r23
 1016               		2:
 1017 0286 8A95      		dec r24
 1018 0288 02F4      		brpl 1b
 1019 028a CB01      		movw r24,r22
 1020 028c BA01      		movw r22,r20
 1021 028e 6095      		com r22
 1022 0290 7095      		com r23
 1023 0292 8095      		com r24
 1024 0294 9095      		com r25
 1025 0296 00C0      		rjmp .L86
 1026               	.L113:
 212:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1027               		.loc 1 212 0
 1028 0298 60E0      		ldi r22,0
 1029 029a 70E0      		ldi r23,0
 1030 029c CB01      		movw r24,r22
 1031               	.L86:
 1032               	.LVL91:
 213:../../tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1033               		.loc 1 213 0 is_stmt 1 discriminator 4
 1034 029e 2B2D      		mov r18,r11
 1035 02a0 2695      		lsr r18
 1036 02a2 2695      		lsr r18
 1037 02a4 2370      		andi r18,lo8(3)
 1038 02a6 422F      		mov r20,r18
 1039 02a8 50E0      		ldi r21,0
 1040 02aa 4230      		cpi r20,2
 1041 02ac 5105      		cpc r21,__zero_reg__
 1042 02ae 01F0      		breq .L88
 1043 02b0 4330      		cpi r20,3
 1044 02b2 5105      		cpc r21,__zero_reg__
 1045 02b4 01F0      		breq .L89
 1046 02b6 6C29      		or r22,r12
 1047 02b8 7D29      		or r23,r13
 1048 02ba 8E29      		or r24,r14
 1049 02bc 9F29      		or r25,r15
 1050               	.LVL92:
 1051 02be 4130      		cpi r20,1
 1052 02c0 5105      		cpc r21,__zero_reg__
 1053 02c2 01F0      		breq .L152
 1054               	/* epilogue start */
 1055               	.LBE15:
 337:../../tmk_core/common/action.c **** 
 1056               		.loc 1 337 0 discriminator 4
 1057 02c4 2696      		adiw r28,6
 1058 02c6 0FB6      		in __tmp_reg__,__SREG__
 1059 02c8 F894      		cli
 1060 02ca DEBF      		out __SP_H__,r29
 1061 02cc 0FBE      		out __SREG__,__tmp_reg__
 1062 02ce CDBF      		out __SP_L__,r28
 1063 02d0 DF91      		pop r29
 1064 02d2 CF91      		pop r28
 1065 02d4 1F91      		pop r17
 1066               	.LVL93:
 1067 02d6 0F91      		pop r16
 1068               	.LVL94:
 1069 02d8 FF90      		pop r15
 1070 02da EF90      		pop r14
 1071 02dc DF90      		pop r13
 1072 02de CF90      		pop r12
 1073               	.LVL95:
 1074 02e0 BF90      		pop r11
 1075               	.LBB16:
 214:../../tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1076               		.loc 1 214 0 discriminator 4
 1077 02e2 0C94 0000 		jmp default_layer_and
 1078               	.LVL96:
 1079               	.L88:
 216:../../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1080               		.loc 1 216 0
 1081 02e6 6C29      		or r22,r12
 1082 02e8 7D29      		or r23,r13
 1083 02ea 8E29      		or r24,r14
 1084 02ec 9F29      		or r25,r15
 1085               	.LVL97:
 1086               	/* epilogue start */
 1087               	.LBE16:
 337:../../tmk_core/common/action.c **** 
 1088               		.loc 1 337 0
 1089 02ee 2696      		adiw r28,6
 1090 02f0 0FB6      		in __tmp_reg__,__SREG__
 1091 02f2 F894      		cli
 1092 02f4 DEBF      		out __SP_H__,r29
 1093 02f6 0FBE      		out __SREG__,__tmp_reg__
 1094 02f8 CDBF      		out __SP_L__,r28
 1095 02fa DF91      		pop r29
 1096 02fc CF91      		pop r28
 1097 02fe 1F91      		pop r17
 1098               	.LVL98:
 1099 0300 0F91      		pop r16
 1100               	.LVL99:
 1101 0302 FF90      		pop r15
 1102 0304 EF90      		pop r14
 1103 0306 DF90      		pop r13
 1104 0308 CF90      		pop r12
 1105               	.LVL100:
 1106 030a BF90      		pop r11
 1107               	.LBB17:
 216:../../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1108               		.loc 1 216 0
 1109 030c 0C94 0000 		jmp default_layer_xor
 1110               	.LVL101:
 1111               	.L89:
 217:../../tmk_core/common/action.c ****                     }
 1112               		.loc 1 217 0
 1113 0310 0E94 0000 		call default_layer_and
 1114               	.LVL102:
 1115 0314 C701      		movw r24,r14
 1116 0316 B601      		movw r22,r12
 1117               	.L152:
 1118               	/* epilogue start */
 1119               	.LBE17:
 337:../../tmk_core/common/action.c **** 
 1120               		.loc 1 337 0
 1121 0318 2696      		adiw r28,6
 1122 031a 0FB6      		in __tmp_reg__,__SREG__
 1123 031c F894      		cli
 1124 031e DEBF      		out __SP_H__,r29
 1125 0320 0FBE      		out __SREG__,__tmp_reg__
 1126 0322 CDBF      		out __SP_L__,r28
 1127 0324 DF91      		pop r29
 1128 0326 CF91      		pop r28
 1129 0328 1F91      		pop r17
 1130               	.LVL103:
 1131 032a 0F91      		pop r16
 1132               	.LVL104:
 1133 032c FF90      		pop r15
 1134 032e EF90      		pop r14
 1135 0330 DF90      		pop r13
 1136 0332 CF90      		pop r12
 1137               	.LVL105:
 1138 0334 BF90      		pop r11
 1139               	.LBB18:
 217:../../tmk_core/common/action.c ****                     }
 1140               		.loc 1 217 0
 1141 0336 0C94 0000 		jmp default_layer_or
 1142               	.LVL106:
 1143               	.L85:
 1144               	.LBE18:
 222:../../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1145               		.loc 1 222 0
 1146 033a 0023      		tst r16
 1147 033c 01F0      		breq .L91
 222:../../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1148               		.loc 1 222 0 is_stmt 0 discriminator 1
 1149 033e 8B2D      		mov r24,r11
 1150 0340 8170      		andi r24,lo8(1)
 1151 0342 00C0      		rjmp .L92
 1152               	.L91:
 222:../../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1153               		.loc 1 222 0 discriminator 2
 1154 0344 8695      		lsr r24
 1155               	.L92:
 222:../../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1156               		.loc 1 222 0 discriminator 4
 1157 0346 8823      		tst r24
 1158 0348 01F4      		brne .+2
 1159 034a 00C0      		rjmp .L47
 1160               	.LVL107:
 1161               	.LBB19:
 224:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1162               		.loc 1 224 0 is_stmt 1
 1163 034c 812F      		mov r24,r17
 1164 034e 8295      		swap r24
 1165 0350 8695      		lsr r24
 1166 0352 8770      		andi r24,lo8(7)
 1167 0354 880F      		lsl r24
 1168 0356 880F      		lsl r24
 225:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1169               		.loc 1 225 0
 1170 0358 912F      		mov r25,r17
 1171 035a 9F70      		andi r25,lo8(15)
 1172 035c C92E      		mov r12,r25
 1173 035e D12C      		mov r13,__zero_reg__
 1174 0360 E12C      		mov r14,__zero_reg__
 1175 0362 F12C      		mov r15,__zero_reg__
 1176               	.LVL108:
 1177 0364 082E      		mov r0,r24
 1178 0366 00C0      		rjmp 2f
 1179               		1:
 1180 0368 CC0C      		lsl r12
 1181 036a DD1C      		rol r13
 1182 036c EE1C      		rol r14
 1183 036e FF1C      		rol r15
 1184               		2:
 1185 0370 0A94      		dec r0
 1186 0372 02F4      		brpl 1b
 1187               	.LVL109:
 226:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1188               		.loc 1 226 0
 1189 0374 14FF      		sbrs r17,4
 1190 0376 00C0      		rjmp .L114
 226:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1191               		.loc 1 226 0 is_stmt 0 discriminator 1
 1192 0378 4FE0      		ldi r20,lo8(15)
 1193 037a 50E0      		ldi r21,0
 1194 037c 60E0      		ldi r22,0
 1195 037e 70E0      		ldi r23,0
 1196 0380 00C0      		rjmp 2f
 1197               		1:
 1198 0382 440F      		lsl r20
 1199 0384 551F      		rol r21
 1200 0386 661F      		rol r22
 1201 0388 771F      		rol r23
 1202               		2:
 1203 038a 8A95      		dec r24
 1204 038c 02F4      		brpl 1b
 1205 038e CB01      		movw r24,r22
 1206 0390 BA01      		movw r22,r20
 1207 0392 6095      		com r22
 1208 0394 7095      		com r23
 1209 0396 8095      		com r24
 1210 0398 9095      		com r25
 1211 039a 00C0      		rjmp .L93
 1212               	.L114:
 226:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1213               		.loc 1 226 0
 1214 039c 60E0      		ldi r22,0
 1215 039e 70E0      		ldi r23,0
 1216 03a0 CB01      		movw r24,r22
 1217               	.L93:
 1218               	.LVL110:
 227:../../tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1219               		.loc 1 227 0 is_stmt 1 discriminator 4
 1220 03a2 2B2D      		mov r18,r11
 1221 03a4 2695      		lsr r18
 1222 03a6 2695      		lsr r18
 1223 03a8 2370      		andi r18,lo8(3)
 1224 03aa 422F      		mov r20,r18
 1225 03ac 50E0      		ldi r21,0
 1226 03ae 4230      		cpi r20,2
 1227 03b0 5105      		cpc r21,__zero_reg__
 1228 03b2 01F0      		breq .L95
 1229 03b4 4330      		cpi r20,3
 1230 03b6 5105      		cpc r21,__zero_reg__
 1231 03b8 01F0      		breq .L96
 1232 03ba 6C29      		or r22,r12
 1233 03bc 7D29      		or r23,r13
 1234 03be 8E29      		or r24,r14
 1235 03c0 9F29      		or r25,r15
 1236               	.LVL111:
 1237 03c2 4130      		cpi r20,1
 1238 03c4 5105      		cpc r21,__zero_reg__
 1239 03c6 01F0      		breq .L150
 1240               	/* epilogue start */
 1241               	.LBE19:
 337:../../tmk_core/common/action.c **** 
 1242               		.loc 1 337 0 discriminator 4
 1243 03c8 2696      		adiw r28,6
 1244 03ca 0FB6      		in __tmp_reg__,__SREG__
 1245 03cc F894      		cli
 1246 03ce DEBF      		out __SP_H__,r29
 1247 03d0 0FBE      		out __SREG__,__tmp_reg__
 1248 03d2 CDBF      		out __SP_L__,r28
 1249 03d4 DF91      		pop r29
 1250 03d6 CF91      		pop r28
 1251 03d8 1F91      		pop r17
 1252               	.LVL112:
 1253 03da 0F91      		pop r16
 1254               	.LVL113:
 1255 03dc FF90      		pop r15
 1256 03de EF90      		pop r14
 1257 03e0 DF90      		pop r13
 1258 03e2 CF90      		pop r12
 1259               	.LVL114:
 1260 03e4 BF90      		pop r11
 1261               	.LBB20:
 228:../../tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1262               		.loc 1 228 0 discriminator 4
 1263 03e6 0C94 0000 		jmp layer_and
 1264               	.LVL115:
 1265               	.L95:
 230:../../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1266               		.loc 1 230 0
 1267 03ea 6C29      		or r22,r12
 1268 03ec 7D29      		or r23,r13
 1269 03ee 8E29      		or r24,r14
 1270 03f0 9F29      		or r25,r15
 1271               	.LVL116:
 1272               	/* epilogue start */
 1273               	.LBE20:
 337:../../tmk_core/common/action.c **** 
 1274               		.loc 1 337 0
 1275 03f2 2696      		adiw r28,6
 1276 03f4 0FB6      		in __tmp_reg__,__SREG__
 1277 03f6 F894      		cli
 1278 03f8 DEBF      		out __SP_H__,r29
 1279 03fa 0FBE      		out __SREG__,__tmp_reg__
 1280 03fc CDBF      		out __SP_L__,r28
 1281 03fe DF91      		pop r29
 1282 0400 CF91      		pop r28
 1283 0402 1F91      		pop r17
 1284               	.LVL117:
 1285 0404 0F91      		pop r16
 1286               	.LVL118:
 1287 0406 FF90      		pop r15
 1288 0408 EF90      		pop r14
 1289 040a DF90      		pop r13
 1290 040c CF90      		pop r12
 1291               	.LVL119:
 1292 040e BF90      		pop r11
 1293               	.LBB21:
 230:../../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1294               		.loc 1 230 0
 1295 0410 0C94 0000 		jmp layer_xor
 1296               	.LVL120:
 1297               	.L96:
 231:../../tmk_core/common/action.c ****                     }
 1298               		.loc 1 231 0
 1299 0414 0E94 0000 		call layer_and
 1300               	.LVL121:
 1301 0418 C701      		movw r24,r14
 1302 041a B601      		movw r22,r12
 1303               	.L150:
 1304               	/* epilogue start */
 1305               	.LBE21:
 337:../../tmk_core/common/action.c **** 
 1306               		.loc 1 337 0
 1307 041c 2696      		adiw r28,6
 1308 041e 0FB6      		in __tmp_reg__,__SREG__
 1309 0420 F894      		cli
 1310 0422 DEBF      		out __SP_H__,r29
 1311 0424 0FBE      		out __SREG__,__tmp_reg__
 1312 0426 CDBF      		out __SP_L__,r28
 1313 0428 DF91      		pop r29
 1314 042a CF91      		pop r28
 1315 042c 1F91      		pop r17
 1316               	.LVL122:
 1317 042e 0F91      		pop r16
 1318               	.LVL123:
 1319 0430 FF90      		pop r15
 1320 0432 EF90      		pop r14
 1321 0434 DF90      		pop r13
 1322 0436 CF90      		pop r12
 1323               	.LVL124:
 1324 0438 BF90      		pop r11
 1325               	.LBB22:
 231:../../tmk_core/common/action.c ****                     }
 1326               		.loc 1 231 0
 1327 043a 0C94 0000 		jmp layer_or
 1328               	.LVL125:
 1329               	.L57:
 1330               	.LBE22:
 239:../../tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 1331               		.loc 1 239 0
 1332 043e 103F      		cpi r17,lo8(-16)
 1333 0440 01F0      		breq .L99
 1334 0442 00F4      		brsh .L100
 1335 0444 103E      		cpi r17,lo8(-32)
 1336 0446 00F4      		brsh .L140
 1337 0448 00C0      		rjmp .L98
 1338               	.L100:
 1339 044a 123F      		cpi r17,lo8(-14)
 1340 044c 01F4      		brne .+2
 1341 044e 00C0      		rjmp .L102
 1342 0450 00F0      		brlo .L103
 1343 0452 133F      		cpi r17,lo8(-13)
 1344 0454 01F4      		brne .+2
 1345 0456 00C0      		rjmp .L104
 1346 0458 00C0      		rjmp .L98
 1347               	.L140:
 1348 045a 1F70      		andi r17,lo8(15)
 1349               	.LVL126:
 1350 045c 8B2D      		mov r24,r11
 1351 045e 8F71      		andi r24,lo8(31)
 242:../../tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1352               		.loc 1 242 0
 1353 0460 0023      		tst r16
 1354 0462 01F0      		breq .L105
 243:../../tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1355               		.loc 1 243 0
 1356 0464 0E94 0000 		call layer_on
 1357               	.LVL127:
 244:../../tmk_core/common/action.c ****                     } else {
 1358               		.loc 1 244 0
 1359 0468 812F      		mov r24,r17
 1360 046a 00C0      		rjmp .L144
 1361               	.L105:
 246:../../tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 1362               		.loc 1 246 0
 1363 046c 0E94 0000 		call layer_off
 1364               	.LVL128:
 247:../../tmk_core/common/action.c ****                     }
 1365               		.loc 1 247 0
 1366 0470 812F      		mov r24,r17
 1367               	.LVL129:
 1368               	.L147:
 1369               	/* epilogue start */
 337:../../tmk_core/common/action.c **** 
 1370               		.loc 1 337 0
 1371 0472 2696      		adiw r28,6
 1372 0474 0FB6      		in __tmp_reg__,__SREG__
 1373 0476 F894      		cli
 1374 0478 DEBF      		out __SP_H__,r29
 1375 047a 0FBE      		out __SREG__,__tmp_reg__
 1376 047c CDBF      		out __SP_L__,r28
 1377 047e DF91      		pop r29
 1378 0480 CF91      		pop r28
 1379 0482 1F91      		pop r17
 1380               	.LVL130:
 1381 0484 0F91      		pop r16
 1382               	.LVL131:
 1383 0486 FF90      		pop r15
 1384 0488 EF90      		pop r14
 1385               	.LVL132:
 1386 048a DF90      		pop r13
 1387 048c CF90      		pop r12
 1388 048e BF90      		pop r11
 247:../../tmk_core/common/action.c ****                     }
 1389               		.loc 1 247 0
 1390 0490 0C94 0000 		jmp unregister_mods
 1391               	.LVL133:
 1392               	.L99:
 252:../../tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1393               		.loc 1 252 0
 1394 0494 0023      		tst r16
 1395 0496 01F0      		breq .L106
 253:../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1396               		.loc 1 253 0
 1397 0498 2530      		cpi r18,lo8(5)
 1398 049a 00F0      		brlo .+2
 1399 049c 00C0      		rjmp .L47
 1400               	.L107:
 254:../../tmk_core/common/action.c ****                         }
 1401               		.loc 1 254 0
 1402 049e 8B2D      		mov r24,r11
 1403 04a0 8F71      		andi r24,lo8(31)
 1404               	/* epilogue start */
 337:../../tmk_core/common/action.c **** 
 1405               		.loc 1 337 0
 1406 04a2 2696      		adiw r28,6
 1407 04a4 0FB6      		in __tmp_reg__,__SREG__
 1408 04a6 F894      		cli
 1409 04a8 DEBF      		out __SP_H__,r29
 1410 04aa 0FBE      		out __SREG__,__tmp_reg__
 1411 04ac CDBF      		out __SP_L__,r28
 1412 04ae DF91      		pop r29
 1413 04b0 CF91      		pop r28
 1414 04b2 1F91      		pop r17
 1415               	.LVL134:
 1416 04b4 0F91      		pop r16
 1417               	.LVL135:
 1418 04b6 FF90      		pop r15
 1419 04b8 EF90      		pop r14
 1420               	.LVL136:
 1421 04ba DF90      		pop r13
 1422 04bc CF90      		pop r12
 1423 04be BF90      		pop r11
 254:../../tmk_core/common/action.c ****                         }
 1424               		.loc 1 254 0
 1425 04c0 0C94 0000 		jmp layer_invert
 1426               	.LVL137:
 1427               	.L106:
 257:../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1428               		.loc 1 257 0
 1429 04c4 2630      		cpi r18,lo8(6)
 1430 04c6 00F0      		brlo .+2
 1431 04c8 00C0      		rjmp .L47
 1432 04ca 00C0      		rjmp .L107
 1433               	.L103:
 263:../../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1434               		.loc 1 263 0
 1435 04cc 0023      		tst r16
 1436 04ce 01F0      		breq .L108
 1437               	.L109:
 263:../../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1438               		.loc 1 263 0 is_stmt 0 discriminator 1
 1439 04d0 8B2D      		mov r24,r11
 1440 04d2 8F71      		andi r24,lo8(31)
 1441               	/* epilogue start */
 337:../../tmk_core/common/action.c **** 
 1442               		.loc 1 337 0 is_stmt 1 discriminator 1
 1443 04d4 2696      		adiw r28,6
 1444 04d6 0FB6      		in __tmp_reg__,__SREG__
 1445 04d8 F894      		cli
 1446 04da DEBF      		out __SP_H__,r29
 1447 04dc 0FBE      		out __SREG__,__tmp_reg__
 1448 04de CDBF      		out __SP_L__,r28
 1449 04e0 DF91      		pop r29
 1450 04e2 CF91      		pop r28
 1451 04e4 1F91      		pop r17
 1452               	.LVL138:
 1453 04e6 0F91      		pop r16
 1454               	.LVL139:
 1455 04e8 FF90      		pop r15
 1456 04ea EF90      		pop r14
 1457               	.LVL140:
 1458 04ec DF90      		pop r13
 1459 04ee CF90      		pop r12
 1460 04f0 BF90      		pop r11
 263:../../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1461               		.loc 1 263 0 discriminator 1
 1462 04f2 0C94 0000 		jmp layer_on
 1463               	.LVL141:
 1464               	.L102:
 267:../../tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 1465               		.loc 1 267 0
 1466 04f6 0023      		tst r16
 1467 04f8 01F0      		breq .L109
 1468               	.L108:
 264:../../tmk_core/common/action.c ****                     break;
 1469               		.loc 1 264 0
 1470 04fa 8B2D      		mov r24,r11
 1471 04fc 8F71      		andi r24,lo8(31)
 1472               	/* epilogue start */
 337:../../tmk_core/common/action.c **** 
 1473               		.loc 1 337 0
 1474 04fe 2696      		adiw r28,6
 1475 0500 0FB6      		in __tmp_reg__,__SREG__
 1476 0502 F894      		cli
 1477 0504 DEBF      		out __SP_H__,r29
 1478 0506 0FBE      		out __SREG__,__tmp_reg__
 1479 0508 CDBF      		out __SP_L__,r28
 1480 050a DF91      		pop r29
 1481 050c CF91      		pop r28
 1482 050e 1F91      		pop r17
 1483               	.LVL142:
 1484 0510 0F91      		pop r16
 1485               	.LVL143:
 1486 0512 FF90      		pop r15
 1487 0514 EF90      		pop r14
 1488               	.LVL144:
 1489 0516 DF90      		pop r13
 1490 0518 CF90      		pop r12
 1491 051a BF90      		pop r11
 264:../../tmk_core/common/action.c ****                     break;
 1492               		.loc 1 264 0
 1493 051c 0C94 0000 		jmp layer_off
 1494               	.LVL145:
 1495               	.L104:
 271:../../tmk_core/common/action.c ****                                     layer_clear();
 1496               		.loc 1 271 0
 1497 0520 0023      		tst r16
 1498 0522 01F0      		breq .L110
 271:../../tmk_core/common/action.c ****                                     layer_clear();
 1499               		.loc 1 271 0 is_stmt 0 discriminator 1
 1500 0524 8B2D      		mov r24,r11
 1501 0526 8F71      		andi r24,lo8(31)
 1502               	/* epilogue start */
 337:../../tmk_core/common/action.c **** 
 1503               		.loc 1 337 0 is_stmt 1 discriminator 1
 1504 0528 2696      		adiw r28,6
 1505 052a 0FB6      		in __tmp_reg__,__SREG__
 1506 052c F894      		cli
 1507 052e DEBF      		out __SP_H__,r29
 1508 0530 0FBE      		out __SREG__,__tmp_reg__
 1509 0532 CDBF      		out __SP_L__,r28
 1510 0534 DF91      		pop r29
 1511 0536 CF91      		pop r28
 1512 0538 1F91      		pop r17
 1513               	.LVL146:
 1514 053a 0F91      		pop r16
 1515               	.LVL147:
 1516 053c FF90      		pop r15
 1517 053e EF90      		pop r14
 1518               	.LVL148:
 1519 0540 DF90      		pop r13
 1520 0542 CF90      		pop r12
 1521 0544 BF90      		pop r11
 271:../../tmk_core/common/action.c ****                                     layer_clear();
 1522               		.loc 1 271 0 discriminator 1
 1523 0546 0C94 0000 		jmp layer_move
 1524               	.LVL149:
 1525               	.L110:
 1526               	/* epilogue start */
 337:../../tmk_core/common/action.c **** 
 1527               		.loc 1 337 0
 1528 054a 2696      		adiw r28,6
 1529 054c 0FB6      		in __tmp_reg__,__SREG__
 1530 054e F894      		cli
 1531 0550 DEBF      		out __SP_H__,r29
 1532 0552 0FBE      		out __SREG__,__tmp_reg__
 1533 0554 CDBF      		out __SP_L__,r28
 1534 0556 DF91      		pop r29
 1535 0558 CF91      		pop r28
 1536 055a 1F91      		pop r17
 1537               	.LVL150:
 1538 055c 0F91      		pop r16
 1539               	.LVL151:
 1540 055e FF90      		pop r15
 1541 0560 EF90      		pop r14
 1542               	.LVL152:
 1543 0562 DF90      		pop r13
 1544 0564 CF90      		pop r12
 1545 0566 BF90      		pop r11
 272:../../tmk_core/common/action.c ****                     break;
 1546               		.loc 1 272 0
 1547 0568 0C94 0000 		jmp layer_clear
 1548               	.LVL153:
 1549               	.L98:
 276:../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 1550               		.loc 1 276 0
 1551 056c 0023      		tst r16
 1552 056e 01F0      		breq .L111
 277:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1553               		.loc 1 277 0
 1554 0570 2223      		tst r18
 1555 0572 01F4      		brne .+2
 1556 0574 00C0      		rjmp .L109
 1557               	.L145:
 279:../../tmk_core/common/action.c ****                         } else {
 1558               		.loc 1 279 0
 1559 0576 812F      		mov r24,r17
 1560               	/* epilogue start */
 337:../../tmk_core/common/action.c **** 
 1561               		.loc 1 337 0
 1562 0578 2696      		adiw r28,6
 1563 057a 0FB6      		in __tmp_reg__,__SREG__
 1564 057c F894      		cli
 1565 057e DEBF      		out __SP_H__,r29
 1566 0580 0FBE      		out __SREG__,__tmp_reg__
 1567 0582 CDBF      		out __SP_L__,r28
 1568 0584 DF91      		pop r29
 1569 0586 CF91      		pop r28
 1570 0588 1F91      		pop r17
 1571               	.LVL154:
 1572 058a 0F91      		pop r16
 1573               	.LVL155:
 1574 058c FF90      		pop r15
 1575 058e EF90      		pop r14
 1576               	.LVL156:
 1577 0590 DF90      		pop r13
 1578 0592 CF90      		pop r12
 1579 0594 BF90      		pop r11
 279:../../tmk_core/common/action.c ****                         } else {
 1580               		.loc 1 279 0
 1581 0596 0C94 0000 		jmp register_code
 1582               	.LVL157:
 1583               	.L111:
 285:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1584               		.loc 1 285 0
 1585 059a 2223      		tst r18
 1586 059c 01F4      		brne .+2
 1587 059e 00C0      		rjmp .L108
 1588               	.L146:
 287:../../tmk_core/common/action.c ****                         } else {
 1589               		.loc 1 287 0
 1590 05a0 812F      		mov r24,r17
 1591               	/* epilogue start */
 337:../../tmk_core/common/action.c **** 
 1592               		.loc 1 337 0
 1593 05a2 2696      		adiw r28,6
 1594 05a4 0FB6      		in __tmp_reg__,__SREG__
 1595 05a6 F894      		cli
 1596 05a8 DEBF      		out __SP_H__,r29
 1597 05aa 0FBE      		out __SREG__,__tmp_reg__
 1598 05ac CDBF      		out __SP_L__,r28
 1599 05ae DF91      		pop r29
 1600 05b0 CF91      		pop r28
 1601 05b2 1F91      		pop r17
 1602               	.LVL158:
 1603 05b4 0F91      		pop r16
 1604               	.LVL159:
 1605 05b6 FF90      		pop r15
 1606 05b8 EF90      		pop r14
 1607               	.LVL160:
 1608 05ba DF90      		pop r13
 1609 05bc CF90      		pop r12
 1610 05be BF90      		pop r11
 287:../../tmk_core/common/action.c ****                         } else {
 1611               		.loc 1 287 0
 1612 05c0 0C94 0000 		jmp unregister_code
 1613               	.LVL161:
 1614               	.L58:
 301:../../tmk_core/common/action.c ****             break;
 1615               		.loc 1 301 0
 1616 05c4 4B2D      		mov r20,r11
 1617 05c6 4F70      		andi r20,lo8(15)
 1618               	.LVL162:
 1619 05c8 612F      		mov r22,r17
 1620 05ca C701      		movw r24,r14
 1621 05cc 0E94 0000 		call action_get_macro
 1622               	.LVL163:
 1623               	/* epilogue start */
 337:../../tmk_core/common/action.c **** 
 1624               		.loc 1 337 0
 1625 05d0 2696      		adiw r28,6
 1626 05d2 0FB6      		in __tmp_reg__,__SREG__
 1627 05d4 F894      		cli
 1628 05d6 DEBF      		out __SP_H__,r29
 1629 05d8 0FBE      		out __SREG__,__tmp_reg__
 1630 05da CDBF      		out __SP_L__,r28
 1631 05dc DF91      		pop r29
 1632 05de CF91      		pop r28
 1633 05e0 1F91      		pop r17
 1634               	.LVL164:
 1635 05e2 0F91      		pop r16
 1636               	.LVL165:
 1637 05e4 FF90      		pop r15
 1638 05e6 EF90      		pop r14
 1639               	.LVL166:
 1640 05e8 DF90      		pop r13
 1641 05ea CF90      		pop r12
 1642 05ec BF90      		pop r11
 301:../../tmk_core/common/action.c ****             break;
 1643               		.loc 1 301 0
 1644 05ee 0C94 0000 		jmp action_macro_play
 1645               	.LVL167:
 1646               	.L59:
 331:../../tmk_core/common/action.c ****             break;
 1647               		.loc 1 331 0
 1648 05f2 4B2D      		mov r20,r11
 1649 05f4 4F70      		andi r20,lo8(15)
 1650               	.LVL168:
 1651 05f6 612F      		mov r22,r17
 1652 05f8 C701      		movw r24,r14
 1653               	/* epilogue start */
 337:../../tmk_core/common/action.c **** 
 1654               		.loc 1 337 0
 1655 05fa 2696      		adiw r28,6
 1656 05fc 0FB6      		in __tmp_reg__,__SREG__
 1657 05fe F894      		cli
 1658 0600 DEBF      		out __SP_H__,r29
 1659 0602 0FBE      		out __SREG__,__tmp_reg__
 1660 0604 CDBF      		out __SP_L__,r28
 1661 0606 DF91      		pop r29
 1662 0608 CF91      		pop r28
 1663 060a 1F91      		pop r17
 1664               	.LVL169:
 1665 060c 0F91      		pop r16
 1666               	.LVL170:
 1667 060e FF90      		pop r15
 1668 0610 EF90      		pop r14
 1669               	.LVL171:
 1670 0612 DF90      		pop r13
 1671 0614 CF90      		pop r12
 1672 0616 BF90      		pop r11
 331:../../tmk_core/common/action.c ****             break;
 1673               		.loc 1 331 0
 1674 0618 0C94 0000 		jmp action_function
 1675               	.LVL172:
 1676               	.L47:
 1677               	/* epilogue start */
 337:../../tmk_core/common/action.c **** 
 1678               		.loc 1 337 0
 1679 061c 2696      		adiw r28,6
 1680 061e 0FB6      		in __tmp_reg__,__SREG__
 1681 0620 F894      		cli
 1682 0622 DEBF      		out __SP_H__,r29
 1683 0624 0FBE      		out __SREG__,__tmp_reg__
 1684 0626 CDBF      		out __SP_L__,r28
 1685 0628 DF91      		pop r29
 1686 062a CF91      		pop r28
 1687 062c 1F91      		pop r17
 1688               	.LVL173:
 1689 062e 0F91      		pop r16
 1690               	.LVL174:
 1691 0630 FF90      		pop r15
 1692 0632 EF90      		pop r14
 1693 0634 DF90      		pop r13
 1694 0636 CF90      		pop r12
 1695 0638 BF90      		pop r11
 1696 063a 0895      		ret
 1697               		.cfi_endproc
 1698               	.LFE104:
 1700               		.section	.text.clear_keyboard_but_mods,"ax",@progbits
 1701               	.global	clear_keyboard_but_mods
 1703               	clear_keyboard_but_mods:
 1704               	.LFB110:
 488:../../tmk_core/common/action.c ****     }
 489:../../tmk_core/common/action.c **** }
 490:../../tmk_core/common/action.c **** 
 491:../../tmk_core/common/action.c **** void clear_keyboard(void)
 492:../../tmk_core/common/action.c **** {
 493:../../tmk_core/common/action.c ****     clear_mods();
 494:../../tmk_core/common/action.c ****     clear_keyboard_but_mods();
 495:../../tmk_core/common/action.c **** }
 496:../../tmk_core/common/action.c **** 
 497:../../tmk_core/common/action.c **** void clear_keyboard_but_mods(void)
 498:../../tmk_core/common/action.c **** {
 1705               		.loc 1 498 0
 1706               		.cfi_startproc
 1707               	/* prologue: function */
 1708               	/* frame size = 0 */
 1709               	/* stack size = 0 */
 1710               	.L__stack_usage = 0
 499:../../tmk_core/common/action.c ****     clear_weak_mods();
 1711               		.loc 1 499 0
 1712 0000 0E94 0000 		call clear_weak_mods
 1713               	.LVL175:
 500:../../tmk_core/common/action.c ****     clear_keys();
 1714               		.loc 1 500 0
 1715 0004 0E94 0000 		call clear_keys
 1716               	.LVL176:
 501:../../tmk_core/common/action.c ****     send_keyboard_report();
 1717               		.loc 1 501 0
 1718 0008 0E94 0000 		call send_keyboard_report
 1719               	.LVL177:
 502:../../tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 503:../../tmk_core/common/action.c ****     mousekey_clear();
 1720               		.loc 1 503 0
 1721 000c 0E94 0000 		call mousekey_clear
 1722               	.LVL178:
 504:../../tmk_core/common/action.c ****     mousekey_send();
 1723               		.loc 1 504 0
 1724 0010 0E94 0000 		call mousekey_send
 1725               	.LVL179:
 505:../../tmk_core/common/action.c **** #endif
 506:../../tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 507:../../tmk_core/common/action.c ****     host_system_send(0);
 1726               		.loc 1 507 0
 1727 0014 80E0      		ldi r24,0
 1728 0016 90E0      		ldi r25,0
 1729 0018 0E94 0000 		call host_system_send
 1730               	.LVL180:
 508:../../tmk_core/common/action.c ****     host_consumer_send(0);
 1731               		.loc 1 508 0
 1732 001c 80E0      		ldi r24,0
 1733 001e 90E0      		ldi r25,0
 1734 0020 0C94 0000 		jmp host_consumer_send
 1735               	.LVL181:
 1736               		.cfi_endproc
 1737               	.LFE110:
 1739               		.section	.text.clear_keyboard,"ax",@progbits
 1740               	.global	clear_keyboard
 1742               	clear_keyboard:
 1743               	.LFB109:
 492:../../tmk_core/common/action.c ****     clear_mods();
 1744               		.loc 1 492 0
 1745               		.cfi_startproc
 1746               	/* prologue: function */
 1747               	/* frame size = 0 */
 1748               	/* stack size = 0 */
 1749               	.L__stack_usage = 0
 493:../../tmk_core/common/action.c ****     clear_keyboard_but_mods();
 1750               		.loc 1 493 0
 1751 0000 0E94 0000 		call clear_mods
 1752               	.LVL182:
 494:../../tmk_core/common/action.c **** }
 1753               		.loc 1 494 0
 1754 0004 0C94 0000 		jmp clear_keyboard_but_mods
 1755               	.LVL183:
 1756               		.cfi_endproc
 1757               	.LFE109:
 1759               		.section	.text.is_tap_key,"ax",@progbits
 1760               	.global	is_tap_key
 1762               	is_tap_key:
 1763               	.LFB111:
 509:../../tmk_core/common/action.c **** #endif
 510:../../tmk_core/common/action.c **** }
 511:../../tmk_core/common/action.c **** 
 512:../../tmk_core/common/action.c **** bool is_tap_key(keypos_t key)
 513:../../tmk_core/common/action.c **** {
 1764               		.loc 1 513 0
 1765               		.cfi_startproc
 1766               	.LVL184:
 1767               	/* prologue: function */
 1768               	/* frame size = 0 */
 1769               	/* stack size = 0 */
 1770               	.L__stack_usage = 0
 514:../../tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 1771               		.loc 1 514 0
 1772 0000 0E94 0000 		call layer_switch_get_action
 1773               	.LVL185:
 515:../../tmk_core/common/action.c **** 
 516:../../tmk_core/common/action.c ****     switch (action.kind.id) {
 1774               		.loc 1 516 0
 1775 0004 292F      		mov r18,r25
 1776 0006 2295      		swap r18
 1777 0008 2F70      		andi r18,lo8(15)
 1778 000a 30E0      		ldi r19,0
 1779 000c 2C30      		cpi r18,12
 1780 000e 3105      		cpc r19,__zero_reg__
 1781 0010 04F4      		brge .L158
 1782 0012 2A30      		cpi r18,10
 1783 0014 3105      		cpc r19,__zero_reg__
 1784 0016 04F4      		brge .L159
 1785 0018 2250      		subi r18,2
 1786 001a 3109      		sbc r19,__zero_reg__
 1787 001c 2230      		cpi r18,2
 1788 001e 3105      		cpc r19,__zero_reg__
 1789 0020 00F4      		brsh .L162
 1790 0022 00C0      		rjmp .L159
 1791               	.L158:
 1792 0024 2C30      		cpi r18,12
 1793 0026 3105      		cpc r19,__zero_reg__
 1794 0028 01F0      		breq .L160
 1795 002a 2F30      		cpi r18,15
 1796 002c 3105      		cpc r19,__zero_reg__
 1797 002e 01F0      		breq .L160
 1798 0030 00C0      		rjmp .L162
 1799               	.L159:
 1800               	.LVL186:
 517:../../tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 518:../../tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 519:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 520:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 521:../../tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1801               		.loc 1 521 0
 1802 0032 803E      		cpi r24,lo8(-32)
 1803 0034 00F0      		brlo .L163
 1804 0036 803F      		cpi r24,lo8(-16)
 1805 0038 01F4      		brne .L162
 1806 003a 00C0      		rjmp .L163
 1807               	.LVL187:
 1808               	.L160:
 522:../../tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 523:../../tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 524:../../tmk_core/common/action.c ****                     return true;
 525:../../tmk_core/common/action.c ****             }
 526:../../tmk_core/common/action.c ****             return false;
 527:../../tmk_core/common/action.c ****         case ACT_MACRO:
 528:../../tmk_core/common/action.c ****         case ACT_FUNCTION:
 529:../../tmk_core/common/action.c ****             if (action.func.opt & FUNC_TAP) { return true; }
 1809               		.loc 1 529 0
 1810 003c 93FB      		bst r25,3
 1811 003e 8827      		clr r24
 1812 0040 80F9      		bld r24,0
 1813 0042 0895      		ret
 1814               	.LVL188:
 1815               	.L162:
 530:../../tmk_core/common/action.c ****             return false;
 531:../../tmk_core/common/action.c ****     }
 532:../../tmk_core/common/action.c ****     return false;
 1816               		.loc 1 532 0
 1817 0044 80E0      		ldi r24,0
 1818               	.LVL189:
 1819 0046 0895      		ret
 1820               	.LVL190:
 1821               	.L163:
 524:../../tmk_core/common/action.c ****             }
 1822               		.loc 1 524 0
 1823 0048 81E0      		ldi r24,lo8(1)
 1824               	.LVL191:
 533:../../tmk_core/common/action.c **** }
 1825               		.loc 1 533 0
 1826 004a 0895      		ret
 1827               		.cfi_endproc
 1828               	.LFE111:
 1830               		.section	.text.debug_event,"ax",@progbits
 1831               	.global	debug_event
 1833               	debug_event:
 1834               	.LFB112:
 534:../../tmk_core/common/action.c **** 
 535:../../tmk_core/common/action.c **** 
 536:../../tmk_core/common/action.c **** /*
 537:../../tmk_core/common/action.c ****  * debug print
 538:../../tmk_core/common/action.c ****  */
 539:../../tmk_core/common/action.c **** void debug_event(keyevent_t event)
 540:../../tmk_core/common/action.c **** {
 1835               		.loc 1 540 0
 1836               		.cfi_startproc
 1837 0000 CF93      		push r28
 1838               	.LCFI16:
 1839               		.cfi_def_cfa_offset 3
 1840               		.cfi_offset 28, -2
 1841 0002 DF93      		push r29
 1842               	.LCFI17:
 1843               		.cfi_def_cfa_offset 4
 1844               		.cfi_offset 29, -3
 1845 0004 00D0      		rcall .
 1846 0006 00D0      		rcall .
 1847 0008 1F92      		push __zero_reg__
 1848               	.LCFI18:
 1849               		.cfi_def_cfa_offset 9
 1850 000a CDB7      		in r28,__SP_L__
 1851 000c DEB7      		in r29,__SP_H__
 1852               	.LCFI19:
 1853               		.cfi_def_cfa_register 28
 1854               	/* prologue: function */
 1855               	/* frame size = 5 */
 1856               	/* stack size = 7 */
 1857               	.L__stack_usage = 7
 1858               	/* epilogue start */
 541:../../tmk_core/common/action.c ****     dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.ti
 542:../../tmk_core/common/action.c **** }
 1859               		.loc 1 542 0
 1860 000e 0F90      		pop __tmp_reg__
 1861 0010 0F90      		pop __tmp_reg__
 1862 0012 0F90      		pop __tmp_reg__
 1863 0014 0F90      		pop __tmp_reg__
 1864 0016 0F90      		pop __tmp_reg__
 1865 0018 DF91      		pop r29
 1866 001a CF91      		pop r28
 1867 001c 0895      		ret
 1868               		.cfi_endproc
 1869               	.LFE112:
 1871               		.section	.text.debug_record,"ax",@progbits
 1872               	.global	debug_record
 1874               	debug_record:
 1875               	.LFB113:
 543:../../tmk_core/common/action.c **** 
 544:../../tmk_core/common/action.c **** void debug_record(keyrecord_t record)
 545:../../tmk_core/common/action.c **** {
 1876               		.loc 1 545 0
 1877               		.cfi_startproc
 1878 0000 CF93      		push r28
 1879               	.LCFI20:
 1880               		.cfi_def_cfa_offset 3
 1881               		.cfi_offset 28, -2
 1882 0002 DF93      		push r29
 1883               	.LCFI21:
 1884               		.cfi_def_cfa_offset 4
 1885               		.cfi_offset 29, -3
 1886 0004 00D0      		rcall .
 1887 0006 00D0      		rcall .
 1888 0008 00D0      		rcall .
 1889               	.LCFI22:
 1890               		.cfi_def_cfa_offset 10
 1891 000a CDB7      		in r28,__SP_L__
 1892 000c DEB7      		in r29,__SP_H__
 1893               	.LCFI23:
 1894               		.cfi_def_cfa_register 28
 1895               	/* prologue: function */
 1896               	/* frame size = 6 */
 1897               	/* stack size = 8 */
 1898               	.L__stack_usage = 8
 1899               	/* epilogue start */
 546:../../tmk_core/common/action.c ****     debug_event(record.event);
 547:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 548:../../tmk_core/common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
 549:../../tmk_core/common/action.c **** #endif
 550:../../tmk_core/common/action.c **** }
 1900               		.loc 1 550 0
 1901 000e 2696      		adiw r28,6
 1902 0010 0FB6      		in __tmp_reg__,__SREG__
 1903 0012 F894      		cli
 1904 0014 DEBF      		out __SP_H__,r29
 1905 0016 0FBE      		out __SREG__,__tmp_reg__
 1906 0018 CDBF      		out __SP_L__,r28
 1907 001a DF91      		pop r29
 1908 001c CF91      		pop r28
 1909 001e 0895      		ret
 1910               		.cfi_endproc
 1911               	.LFE113:
 1913               		.section	.text.debug_action,"ax",@progbits
 1914               	.global	debug_action
 1916               	debug_action:
 1917               	.LFB114:
 551:../../tmk_core/common/action.c **** 
 552:../../tmk_core/common/action.c **** void debug_action(action_t action)
 553:../../tmk_core/common/action.c **** {
 1918               		.loc 1 553 0
 1919               		.cfi_startproc
 1920               	.LVL192:
 1921               	/* prologue: function */
 1922               	/* frame size = 0 */
 1923               	/* stack size = 0 */
 1924               	.L__stack_usage = 0
 1925 0000 0895      		ret
 1926               		.cfi_endproc
 1927               	.LFE114:
 1929               		.text
 1930               	.Letext0:
 1931               		.file 3 "/usr/lib/avr/include/stdint.h"
 1932               		.file 4 "../../tmk_core/common/keycode.h"
 1933               		.file 5 "../../tmk_core/common/action_code.h"
 1934               		.file 6 "../../tmk_core/common/action_macro.h"
 1935               		.file 7 "../../tmk_core/common/action.h"
 1936               		.file 8 "../../tmk_core/common/action_tapping.h"
 1937               		.file 9 "../../tmk_core/common/action_util.h"
 1938               		.file 10 "../../tmk_core/common/host.h"
 1939               		.file 11 "../../tmk_core/common/action_layer.h"
 1940               		.file 12 "../../tmk_core/common/command.h"
 1941               		.file 13 "../../tmk_core/common/mousekey.h"
 1942               		.file 14 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action.c
     /tmp/cc8P0kgj.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc8P0kgj.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc8P0kgj.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc8P0kgj.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc8P0kgj.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc8P0kgj.s:13     .text.action_exec:0000000000000000 action_exec
     /tmp/cc8P0kgj.s:93     .text.register_code:0000000000000000 register_code
     /tmp/cc8P0kgj.s:346    .text.unregister_code:0000000000000000 unregister_code
     /tmp/cc8P0kgj.s:423    .text.register_mods:0000000000000000 register_mods
     /tmp/cc8P0kgj.s:449    .text.unregister_mods:0000000000000000 unregister_mods
     /tmp/cc8P0kgj.s:475    .text.process_action:0000000000000000 process_action
     /tmp/cc8P0kgj.s:1703   .text.clear_keyboard_but_mods:0000000000000000 clear_keyboard_but_mods
     /tmp/cc8P0kgj.s:1742   .text.clear_keyboard:0000000000000000 clear_keyboard
     /tmp/cc8P0kgj.s:1762   .text.is_tap_key:0000000000000000 is_tap_key
     /tmp/cc8P0kgj.s:1833   .text.debug_event:0000000000000000 debug_event
     /tmp/cc8P0kgj.s:1874   .text.debug_record:0000000000000000 debug_record
     /tmp/cc8P0kgj.s:1916   .text.debug_action:0000000000000000 debug_action

UNDEFINED SYMBOLS
action_tapping_process
command_proc
add_key
add_mods
send_keyboard_report
host_system_send
host_consumer_send
del_key
del_mods
layer_switch_get_action
layer_debug
default_layer_debug
__tablejump2__
add_weak_mods
del_weak_mods
set_oneshot_mods
clear_oneshot_mods
mousekey_on
mousekey_off
mousekey_send
default_layer_and
default_layer_xor
default_layer_or
layer_and
layer_xor
layer_or
layer_on
layer_off
layer_invert
layer_move
layer_clear
action_get_macro
action_macro_play
action_function
clear_weak_mods
clear_keys
mousekey_clear
clear_mods
