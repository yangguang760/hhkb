
hhkb_lufa.elf：     文件格式 elf32-avr

节：
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  0000532e  000053c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000532e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b2  00800138  00800138  000053fa  2**0
                  ALLOC
  3 .noinit       00000004  008001ea  008001ea  000053fa  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  000053fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000073  00000000  00000000  00005cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00005d27  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000008d8  00000000  00000000  00005d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000f8ea  00000000  00000000  00006610  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003ad3  00000000  00000000  00015efa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00004ee1  00000000  00000000  000199cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001808  00000000  00000000  0001e8b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003e12  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000078eb  00000000  00000000  00023eca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000b38  00000000  00000000  0002b7b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__ctors_end>
       4:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
       8:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
       c:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      10:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      14:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      18:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      1c:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      20:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      24:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      28:	0c 94 bb 0d 	jmp	0x1b76	; 0x1b76 <__vector_10>
      2c:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      30:	0c 94 a4 1d 	jmp	0x3b48	; 0x3b48 <__vector_12>
      34:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      38:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      3c:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      40:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      44:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      48:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      4c:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      50:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      54:	0c 94 43 1e 	jmp	0x3c86	; 0x3c86 <__vector_21>
      58:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      5c:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      60:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      64:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      68:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      6c:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      70:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      74:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      78:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      7c:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      80:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      84:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      88:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      8c:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      90:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      94:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      98:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      9c:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      a0:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      a4:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      a8:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__bad_interrupt>
      ac:	b1 0e       	add	r11, r17
      ae:	d3 0e       	add	r13, r19
      b0:	be 0f       	add	r27, r30
      b2:	d3 0e       	add	r13, r19
      b4:	be 0f       	add	r27, r30
      b6:	15 0f       	add	r17, r21
      b8:	38 0f       	add	r19, r24
      ba:	be 0f       	add	r27, r30
      bc:	8d 0f       	add	r24, r29
      be:	a0 0f       	add	r26, r16
      c0:	9e 12       	cpse	r9, r30
      c2:	9e 12       	cpse	r9, r30
      c4:	cc 12       	cpse	r12, r28
      c6:	cc 12       	cpse	r12, r28
      c8:	21 13       	cpse	r18, r17
      ca:	5d 13       	cpse	r21, r29
      cc:	4e 15       	cp	r20, r14
      ce:	4e 15       	cp	r20, r14
      d0:	75 13       	cpse	r23, r21
      d2:	4e 15       	cp	r20, r14
      d4:	6c 14       	cp	r6, r12
      d6:	6c 14       	cp	r6, r12
      d8:	28 15       	cp	r18, r8
      da:	4e 15       	cp	r20, r14
      dc:	4e 15       	cp	r20, r14
      de:	3c 15       	cp	r19, r12

000000e0 <__trampolines_end>:
      e0:	02 2b       	or	r16, r18
      e2:	00 01       	movw	r0, r0

000000e3 <__m.4709>:
      e3:	01 e2 01 2b 00                                      ...+.

000000e8 <__m.4706>:
      e8:	01 a9 02 a9 00                                      .....

000000ed <__m.4703>:
      ed:	01 2c 02 2c 01 2d 02 2d 01 e1 01 37 02 37 02 e1     .,.,.-.-...7.7..
      fd:	01 2c 02 2c 00                                      .,.,.

00000102 <fn_actions>:
     102:	f1 a1 04 a2 29 21 00 c0                             ....)!..

0000010a <keymaps>:
     10a:	1f 14 1a 16 c1 1d 1b 06 20 21 15 08 07 09 19 05     ........ !......
     11a:	22 23 1c 17 0a 0b 11 00 1e 29 2b c2 e1 e3 e2 2c     "#.......)+....,
     12a:	24 25 18 0c 0e 0d 10 00 31 35 2a 28 c0 e5 e7 e6     $%......15*(....
     13a:	26 27 12 13 33 0f 36 00 2d 2e 30 2f 34 38 37 00     &'..3.6.-.0/487.
     14a:	3b 01 01 a9 aa 01 01 01 3c 3d 01 01 a8 01 01 01     ;.......<=......
     15a:	3e 3f 01 01 01 55 57 00 3a 01 39 01 01 01 01 01     >?...UW.:.9.....
     16a:	40 41 01 46 4a 54 56 00 49 4c 2a 58 01 01 01 01     @A.FJTV.IL*X....
     17a:	42 43 47 48 50 4b 4d 00 44 45 01 52 4f 51 4e 00     BCGHPKM.DE.ROQN.
     18a:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     19a:	01 01 01 01 01 50 01 00 01 01 39 01 01 01 01 4c     .....P....9....L
     1aa:	01 01 01 01 52 51 01 00 01 01 01 2a 01 01 01 01     ....RQ.....*....
     1ba:	01 01 01 01 01 4f 01 00 01 01 01 01 01 01 c3 00     .....O..........

000001ca <__c.4559>:
     1ca:	25 30 32 58 3a 20 25 30 38 62 0a 00                 %02X: %08b..

000001d6 <__c.4556>:
     1d6:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 0a 00        .r/c 01234567..

000001e5 <__c.4776>:
     1e5:	5b 73 5d 00                                         [s].

000001e9 <__c.4774>:
     1e9:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
     1f9:	00                                                  .

000001fa <__c.4772>:
     1fa:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
     20a:	00                                                  .

0000020b <__c.4670>:
     20b:	5b 57 5d 00                                         [W].

0000020f <__c.4666>:
     20f:	5b 53 5d 00                                         [S].

00000213 <__c.4662>:
     213:	5b 52 5d 00                                         [R].

00000217 <__c.4657>:
     217:	5b 44 5d 00                                         [D].

0000021b <__c.4652>:
     21b:	5b 43 5d 00                                         [C].

0000021f <ProductString>:
     21f:	12 03 48 00 48 00 4b 00 42 00 20 00 6d 00 6f 00     ..H.H.K.B. .m.o.
     22f:	64 00 00 00                                         d...

00000233 <ManufacturerString>:
     233:	0e 03 74 00 2e 00 6d 00 2e 00 6b 00 2e 00 00 00     ..t...m...k.....

00000243 <LanguageString>:
     243:	04 03 09 04                                         ....

00000247 <ConfigurationDescriptor>:
     247:	09 02 8d 00 05 01 00 a0 32 09 04 00 00 01 03 01     ........2.......
     257:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
     267:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     277:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     287:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     297:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
     2a7:	01 00 01 22 20 00 07 05 84 03 20 00 01 07 05 04     ..." ..... .....
     2b7:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.
     2c7:	01 00 01 22 39 00 07 05 85 03 10 00 01              ..."9........

000002d4 <DeviceDescriptor>:
     2d4:	12 01 10 01 00 00 00 08 ed fe fe ca 04 01 01 02     ................
     2e4:	00 01                                               ..

000002e6 <NKROReport>:
     2e6:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     2f6:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
     306:	91 02 95 01 75 03 91 01 05 07 19 00 29 77 15 00     ....u.......)w..
     316:	25 01 95 78 75 01 81 02 c0                          %..xu....

0000031f <ConsoleReport>:
     31f:	06 31 ff 09 74 a1 01 09 75 15 00 25 ff 95 20 75     .1..t...u..%.. u
     32f:	08 81 02 09 76 15 00 25 ff 95 20 75 08 91 02 c0     ....v..%.. u....

0000033f <ExtrakeyReport>:
     33f:	05 01 09 80 a1 01 85 02 16 01 00 26 b7 00 1a 01     ...........&....
     34f:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     35f:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     36f:	10 95 01 81 00 c0                                   ......

00000375 <MouseReport>:
     375:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
     385:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     395:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     3a5:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
     3b5:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

000003c2 <KeyboardReport>:
     3c2:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     3d2:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     3e2:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     3f2:	19 00 29 ff 15 00 25 ff 95 06 75 08 81 00 c0        ..)...%...u....

00000401 <__c.4427>:
     401:	0a 00                                               ..

00000403 <__c.4422>:
     403:	25 30 32 58 20 00                                   %02X .

00000409 <__c.4419>:
     409:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:
     419:	20 00                                                .

0000041b <__c.4764>:
     41b:	0a 00                                               ..

0000041d <__c.4762>:
     41d:	25 30 32 58 00                                      %02X.

00000422 <__c.4760>:
     422:	6b 65 79 62 6f 61 72 64 5f 73 65 74 5f 6c 65 64     keyboard_set_led
     432:	3a 20 00                                            : .

00000435 <__c.4570>:
     435:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can
     445:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

00000453 <__c.4565>:
     453:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can
     463:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

00000471 <__c.4478>:
     471:	4f 6e 65 73 68 6f 74 3a 20 74 69 6d 65 6f 75 74     Oneshot: timeout
     481:	0a 00                                               ..

00000483 <__c.4704>:
     483:	64 6f 6e 65 2e 0a 00                                done...

0000048a <__c.4698>:
     48a:	62 6f 6f 67 6d 61 67 69 63 20 73 63 61 6e 3a 20     boogmagic scan: 
     49a:	2e 2e 2e 20 00                                      ... .

0000049f <__c.4499>:
     49f:	29 0a 00                                            )..

000004a2 <__c.4497>:
     4a2:	25 75 00                                            %u.

000004a5 <__c.4495>:
     4a5:	2f 00                                               /.

000004a7 <__c.4493>:
     4a7:	25 75 00                                            %u.

000004aa <__c.4491>:
     4aa:	5d 28 00                                            ](.

000004ad <__c.4489>:
     4ad:	25 64 00                                            %d.

000004b0 <__c.4487>:
     4b0:	20 00                                                .

000004b2 <__c.4485>:
     4b2:	25 64 00                                            %d.

000004b5 <__c.4483>:
     4b5:	20 00                                                .

000004b7 <__c.4481>:
     4b7:	25 64 00                                            %d.

000004ba <__c.4479>:
     4ba:	20 00                                                .

000004bc <__c.4477>:
     4bc:	25 64 00                                            %d.

000004bf <__c.4475>:
     4bf:	7c 00                                               |.

000004c1 <__c.4473>:
     4c1:	25 30 32 58 00                                      %02X.

000004c6 <__c.4471>:
     4c6:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     4d6:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     4e6:	20 5b 00                                             [.

000004e9 <__c.5095>:
     4e9:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     4f9:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000504 <__c.5092>:
     504:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     514:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

0000051d <__c.5089>:
     51d:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     52d:	20 25 64 0a 00                                       %d..

00000532 <__c.5086>:
     532:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     542:	64 0a 00                                            d..

00000545 <__c.5083>:
     545:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     555:	0a 00                                               ..

00000557 <__c.5079>:
     557:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000566 <__c.5072>:
     566:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     576:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000581 <__c.5069>:
     581:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     591:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

0000059a <__c.5066>:
     59a:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     5aa:	20 25 64 0a 00                                       %d..

000005af <__c.5063>:
     5af:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     5bf:	64 0a 00                                            d..

000005c2 <__c.5060>:
     5c2:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     5d2:	0a 00                                               ..

000005d4 <__c.5056>:
     5d4:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

000005e3 <__c.5049>:
     5e3:	0a 00                                               ..

000005e5 <__c.5047>:
     5e5:	25 75 00                                            %u.

000005e8 <__c.5045>:
     5e8:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     5f8:	5f 6d 61 78 3a 20 00                                _max: .

000005ff <__c.5043>:
     5ff:	0a 00                                               ..

00000601 <__c.5041>:
     601:	25 75 00                                            %u.

00000604 <__c.5039>:
     604:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     614:	65 64 3a 20 00                                      ed: .

00000619 <__c.5037>:
     619:	0a 00                                               ..

0000061b <__c.5035>:
     61b:	25 75 00                                            %u.

0000061e <__c.5033>:
     61e:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     62e:	00                                                  .

0000062f <__c.5031>:
     62f:	0a 00                                               ..

00000631 <__c.5029>:
     631:	25 75 00                                            %u.

00000634 <__c.5027>:
     634:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

00000643 <__c.5025>:
     643:	0a 00                                               ..

00000645 <__c.5023>:
     645:	25 75 00                                            %u.

00000648 <__c.5021>:
     648:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     658:	20 00                                                .

0000065a <__c.5019>:
     65a:	0a 00                                               ..

0000065c <__c.5017>:
     65c:	25 75 00                                            %u.

0000065f <__c.5015>:
     65f:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     66f:	20 00                                                .

00000671 <__c.5013>:
     671:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

0000067f <__c.5133>:
     67f:	4d 3e 00                                            M>.

00000682 <__c.5131>:
     682:	4d 25 64 3e 20 00                                   M%d> .

00000688 <__c.5129>:
     688:	3f 00                                               ?.

0000068a <__c.5126>:
     68a:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

00000697 <__c.5112>:
     697:	43 3e 20 00                                         C> .

0000069b <__c.5102>:
     69b:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     6ab:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     6bb:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     6cb:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     6db:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

000006e9 <__c.5100>:
     6e9:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     6f9:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     709:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     719:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     729:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     739:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     749:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     759:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     769:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     779:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     789:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     799:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     7a9:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     7b9:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     7c9:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     7d9:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

000007e4 <__c.5005>:
     7e4:	3f 00                                               ?.

000007e6 <__c.5002>:
     7e6:	4d 3e 20 00                                         M> .

000007ea <__c.5007>:
     7ea:	43 3e 20 00                                         C> .

000007ee <__c.5151>:
     7ee:	4c 25 64 0a 00                                      L%d..

000007f3 <__c.4991>:
     7f3:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     803:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     813:	73 65 6b 65 79 0a 00                                sekey..

0000081a <__c.4815>:
     81a:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     82a:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     83a:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     84a:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     85a:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     86a:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     87a:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     88a:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     89a:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     8aa:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 6e 3a 09 4e     r.e:.eeprom.n:.N
     8ba:	4b 52 4f 0a 00                                      KRO..

000008bf <__c.4910>:
     8bf:	0a 00                                               ..

000008c1 <__c.4908>:
     8c1:	25 75 00                                            %u.

000008c4 <__c.4906>:
     8c4:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

000008cc <__c.4904>:
     8cc:	0a 00                                               ..

000008ce <__c.4902>:
     8ce:	25 75 00                                            %u.

000008d1 <__c.4900>:
     8d1:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     8e1:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

000008ed <__c.4898>:
     8ed:	0a 00                                               ..

000008ef <__c.4896>:
     8ef:	25 75 00                                            %u.

000008f2 <__c.4894>:
     8f2:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     902:	20 00                                                .

00000904 <__c.4892>:
     904:	0a 00                                               ..

00000906 <__c.4890>:
     906:	25 75 00                                            %u.

00000909 <__c.4888>:
     909:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

00000913 <__c.4886>:
     913:	0a 00                                               ..

00000915 <__c.4884>:
     915:	25 75 00                                            %u.

00000918 <__c.4882>:
     918:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     928:	20 00                                                .

0000092a <__c.4880>:
     92a:	0a 00                                               ..

0000092c <__c.4878>:
     92c:	25 75 00                                            %u.

0000092f <__c.4876>:
     92f:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     93f:	20 00                                                .

00000941 <__c.4874>:
     941:	0a 00                                               ..

00000943 <__c.4872>:
     943:	25 75 00                                            %u.

00000946 <__c.4870>:
     946:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     956:	74 72 6f 6c 3a 20 00                                trol: .

0000095d <__c.4868>:
     95d:	0a 00                                               ..

0000095f <__c.4866>:
     95f:	25 75 00                                            %u.

00000962 <__c.4864>:
     962:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     972:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

0000097b <__c.4862>:
     97b:	0a 00                                               ..

0000097d <__c.4860>:
     97d:	25 30 32 58 00                                      %02X.

00000982 <__c.4858>:
     982:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     992:	77 3a 20 00                                         w: .

00000996 <__c.4855>:
     996:	0a 00                                               ..

00000998 <__c.4853>:
     998:	25 75 00                                            %u.

0000099b <__c.4851>:
     99b:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

000009a4 <__c.4849>:
     9a4:	0a 00                                               ..

000009a6 <__c.4847>:
     9a6:	25 75 00                                            %u.

000009a9 <__c.4845>:
     9a9:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

000009b5 <__c.4843>:
     9b5:	0a 00                                               ..

000009b7 <__c.4841>:
     9b7:	25 75 00                                            %u.

000009ba <__c.4839>:
     9ba:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

000009c4 <__c.4837>:
     9c4:	0a 00                                               ..

000009c6 <__c.4835>:
     9c6:	25 75 00                                            %u.

000009c9 <__c.4833>:
     9c9:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

000009d3 <__c.4831>:
     9d3:	0a 00                                               ..

000009d5 <__c.4829>:
     9d5:	25 30 32 58 00                                      %02X.

000009da <__c.4827>:
     9da:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     9ea:	3a 20 00                                            : .

000009ed <__c.4824>:
     9ed:	0a 00                                               ..

000009ef <__c.4822>:
     9ef:	25 75 00                                            %u.

000009f2 <__c.4820>:
     9f2:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

00000a02 <__c.4986>:
     a02:	3f 00                                               ?.

00000a04 <__c.4977>:
     a04:	4e 4b 52 4f 3a 20 6f 66 66 0a 00                    NKRO: off..

00000a0f <__c.4975>:
     a0f:	4e 4b 52 4f 3a 20 6f 6e 0a 00                       NKRO: on..

00000a19 <__c.4972>:
     a19:	74 69 6d 65 72 5f 63 6f 75 6e 74 3a 20 25 30 34     timer_count: %04
     a29:	6c 58 0a 00                                         lX..

00000a2d <__c.4970>:
     a2d:	6b 65 79 62 6f 61 72 64 5f 6e 6b 72 6f 3a 20 25     keyboard_nkro: %
     a3d:	58 0a 00                                            X..

00000a40 <__c.4968>:
     a40:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     a50:	58 0a 00                                            X..

00000a53 <__c.4966>:
     a53:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     a63:	6c 3a 20 25 58 0a 00                                l: %X..

00000a6a <__c.4964>:
     a6a:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     a7a:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000a84 <__c.4962>:
     a84:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

00000a92 <__c.4959>:
     a92:	47 43 43 3a 20 34 2e 38 2e 31 20 41 56 52 2d 4c     GCC: 4.8.1 AVR-L
     aa2:	49 42 43 3a 20 31 2e 38 2e 30 73 76 6e 20 41 56     IBC: 1.8.0svn AV
     ab2:	52 5f 41 52 43 48 3a 20 61 76 72 35 0a 00           R_ARCH: avr5..

00000ac0 <__c.4957>:
     ac0:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     ad0:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     ae0:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     af0:	45 20 43 4f 4d 4d 41 4e 44 20 4e 4b 52 4f 20 35     E COMMAND NKRO 5
     b00:	31 32 0a 00                                         12..

00000b04 <__c.4955>:
     b04:	42 55 49 4c 44 3a 20 35 66 35 63 34 61 39 2d 64     BUILD: 5f5c4a9-d
     b14:	69 72 74 79 20 28 31 35 3a 33 34 3a 34 30 20 4e     irty (15:34:40 N
     b24:	6f 76 20 32 30 20 32 30 31 35 29 0a 00              ov 20 2015)..

00000b31 <__c.4953>:
     b31:	56 49 44 3a 20 30 78 46 45 45 44 28 74 2e 6d 2e     VID: 0xFEED(t.m.
     b41:	6b 2e 29 20 50 49 44 3a 20 30 78 43 41 46 45 28     k.) PID: 0xCAFE(
     b51:	48 48 4b 42 20 6d 6f 64 29 20 56 45 52 3a 20 30     HHKB mod) VER: 0
     b61:	78 30 31 30 34 0a 00                                x0104..

00000b68 <__c.4951>:
     b68:	44 45 53 43 3a 20 74 2e 6d 2e 6b 2e 20 6b 65 79     DESC: t.m.k. key
     b78:	62 6f 61 72 64 20 66 69 72 6d 77 61 72 65 20 66     board firmware f
     b88:	6f 72 20 48 48 4b 42 20 6d 6f 64 0a 00              or HHKB mod..

00000b95 <__c.4949>:
     b95:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

00000ba4 <__c.4946>:
     ba4:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

00000bb1 <__c.4944>:
     bb1:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

00000bbd <__c.4941>:
     bbd:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

00000bcd <__c.4939>:
     bcd:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

00000bdc <__c.4936>:
     bdc:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000bea <__c.4934>:
     bea:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000bf7 <__c.4931>:
     bf7:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000c03 <__c.4929>:
     c03:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000c10 <__c.4926>:
     c10:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     c20:	00                                                  .

00000c21 <__c.4923>:
     c21:	43 3e 20 00                                         C> .

00000c25 <__c.4917>:
     c25:	65 65 63 6f 6e 66 69 67 3a 0a 00                    eeconfig:..

00000c30 <__ctors_end>:
     c30:	11 24       	eor	r1, r1
     c32:	1f be       	out	0x3f, r1	; 63
     c34:	cf ef       	ldi	r28, 0xFF	; 255
     c36:	da e0       	ldi	r29, 0x0A	; 10
     c38:	de bf       	out	0x3e, r29	; 62
     c3a:	cd bf       	out	0x3d, r28	; 61

00000c3c <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     c3c:	04 b6       	in	r0, 0x34	; 52
     c3e:	03 fe       	sbrs	r0, 3
     c40:	24 c0       	rjmp	.+72     	; 0xc8a <__do_copy_data>
     c42:	80 91 ea 01 	lds	r24, 0x01EA
     c46:	90 91 eb 01 	lds	r25, 0x01EB
     c4a:	a0 91 ec 01 	lds	r26, 0x01EC
     c4e:	b0 91 ed 01 	lds	r27, 0x01ED
     c52:	87 30       	cpi	r24, 0x07	; 7
     c54:	90 4b       	sbci	r25, 0xB0	; 176
     c56:	a7 40       	sbci	r26, 0x07	; 7
     c58:	b0 4b       	sbci	r27, 0xB0	; 176
     c5a:	b9 f4       	brne	.+46     	; 0xc8a <__do_copy_data>
        reset_key = 0;
     c5c:	10 92 ea 01 	sts	0x01EA, r1
     c60:	10 92 eb 01 	sts	0x01EB, r1
     c64:	10 92 ec 01 	sts	0x01EC, r1
     c68:	10 92 ed 01 	sts	0x01ED, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     c6c:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     c6e:	84 b7       	in	r24, 0x34	; 52
     c70:	87 7f       	andi	r24, 0xF7	; 247
     c72:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
     c74:	88 e1       	ldi	r24, 0x18	; 24
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	f8 94       	cli
     c7a:	80 93 60 00 	sts	0x0060, r24
     c7e:	10 92 60 00 	sts	0x0060, r1
     c82:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     c84:	e0 e0       	ldi	r30, 0x00	; 0
     c86:	ff e3       	ldi	r31, 0x3F	; 63
     c88:	09 95       	icall

00000c8a <__do_copy_data>:
     c8a:	11 e0       	ldi	r17, 0x01	; 1
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b1 e0       	ldi	r27, 0x01	; 1
     c90:	ee e2       	ldi	r30, 0x2E	; 46
     c92:	f3 e5       	ldi	r31, 0x53	; 83
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__do_copy_data+0x10>
     c96:	05 90       	lpm	r0, Z+
     c98:	0d 92       	st	X+, r0
     c9a:	a8 33       	cpi	r26, 0x38	; 56
     c9c:	b1 07       	cpc	r27, r17
     c9e:	d9 f7       	brne	.-10     	; 0xc96 <__do_copy_data+0xc>

00000ca0 <__do_clear_bss>:
     ca0:	21 e0       	ldi	r18, 0x01	; 1
     ca2:	a8 e3       	ldi	r26, 0x38	; 56
     ca4:	b1 e0       	ldi	r27, 0x01	; 1
     ca6:	01 c0       	rjmp	.+2      	; 0xcaa <.do_clear_bss_start>

00000ca8 <.do_clear_bss_loop>:
     ca8:	1d 92       	st	X+, r1

00000caa <.do_clear_bss_start>:
     caa:	aa 3e       	cpi	r26, 0xEA	; 234
     cac:	b2 07       	cpc	r27, r18
     cae:	e1 f7       	brne	.-8      	; 0xca8 <.do_clear_bss_loop>
     cb0:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <main>
     cb4:	0c 94 95 29 	jmp	0x532a	; 0x532a <_exit>

00000cb8 <__bad_interrupt>:
     cb8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000cbc <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     cbc:	ff 93       	push	r31
	push	ZL
     cbe:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     cc0:	e0 91 38 01 	lds	r30, 0x0138
	lds	ZH, xfunc_out+1	;/
     cc4:	f0 91 39 01 	lds	r31, 0x0139
	sbiw	ZL, 0		;Skip if null
     cc8:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     cca:	09 f0       	breq	.+2      	; 0xcce <xputc+0x12>
	icall
     ccc:	09 95       	icall
2:	pop	ZL
     cce:	ef 91       	pop	r30
	pop	ZH
     cd0:	ff 91       	pop	r31
	ret
     cd2:	08 95       	ret

00000cd4 <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     cd4:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     cd6:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     cd8:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     cda:	11 f0       	breq	.+4      	; 0xce0 <xputs+0xc>
	rcall	xputc
     cdc:	ef df       	rcall	.-34     	; 0xcbc <xputc>
	rjmp	1b
     cde:	fb cf       	rjmp	.-10     	; 0xcd6 <xputs+0x2>
2:	ret
     ce0:	08 95       	ret

00000ce2 <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     ce2:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     ce4:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     ce6:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     ce8:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     cea:	0c c0       	rjmp	.+24     	; 0xd04 <xitoa+0x22>
	neg	r20		;
     cec:	41 95       	neg	r20
	sbrs	r25, 7		;
     cee:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     cf0:	09 c0       	rjmp	.+18     	; 0xd04 <xitoa+0x22>
	ldi	r30, '-'	;
     cf2:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     cf4:	60 95       	com	r22
	com	r23		;
     cf6:	70 95       	com	r23
	com	r24		;
     cf8:	80 95       	com	r24
	com	r25		;
     cfa:	90 95       	com	r25
	adc	r22, r1		;
     cfc:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     cfe:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     d00:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     d02:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     d04:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <xitoa+0x2a>
	neg	r18		;
     d08:	21 95       	neg	r18
	ldi	r19, '0'	;/
     d0a:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     d0c:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     d0e:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     d10:	66 0f       	add	r22, r22
	rol	r23		;
     d12:	77 1f       	adc	r23, r23
	rol	r24		;
     d14:	88 1f       	adc	r24, r24
	rol	r25		;
     d16:	99 1f       	adc	r25, r25
	rol	r26		;
     d18:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     d1a:	a4 17       	cp	r26, r20
	brcs	3f		;
     d1c:	10 f0       	brcs	.+4      	; 0xd22 <xitoa+0x40>
	sub	r26, r20	;
     d1e:	a4 1b       	sub	r26, r20
	inc	r22		;
     d20:	63 95       	inc	r22
3:	dec	r21		;
     d22:	5a 95       	dec	r21
	brne	2b		;/
     d24:	a9 f7       	brne	.-22     	; 0xd10 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     d26:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     d28:	08 f0       	brcs	.+2      	; 0xd2c <xitoa+0x4a>
	subi	r26, -7		;
     d2a:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     d2c:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     d2e:	af 93       	push	r26
	inc	r31		;/
     d30:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     d32:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     d34:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     d36:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     d38:	91 05       	cpc	r25, r1
	brne	1b		;/
     d3a:	41 f7       	brne	.-48     	; 0xd0c <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     d3c:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     d3e:	11 f4       	brne	.+4      	; 0xd44 <xitoa+0x62>
	push	r30		;
     d40:	ef 93       	push	r30
	inc	r31		;/
     d42:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     d44:	f2 17       	cp	r31, r18
	brcc	6f		;
     d46:	18 f4       	brcc	.+6      	; 0xd4e <xitoa+0x6c>
	push	r19		;
     d48:	3f 93       	push	r19
	inc	r31		;
     d4a:	f3 95       	inc	r31
	rjmp	5b		;/
     d4c:	fb cf       	rjmp	.-10     	; 0xd44 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     d4e:	8f 91       	pop	r24
	rcall	xputc		;
     d50:	b5 df       	rcall	.-150    	; 0xcbc <xputc>
	dec	r31		;
     d52:	fa 95       	dec	r31
	brne	6b		;/
     d54:	e1 f7       	brne	.-8      	; 0xd4e <xitoa+0x6c>

	ret
     d56:	08 95       	ret

00000d58 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     d58:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     d5a:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     d5c:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     d5e:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     d60:	21 f0       	breq	.+8      	; 0xd6a <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     d62:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     d64:	19 f0       	breq	.+6      	; 0xd6c <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     d66:	aa df       	rcall	.-172    	; 0xcbc <xputc>
	rjmp	0b		;/
     d68:	f9 cf       	rjmp	.-14     	; 0xd5c <xvprintf+0x4>
90:	ret
     d6a:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     d6c:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     d6e:	e8 94       	clt
	_LPMI	r21		;Get flags
     d70:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     d72:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     d74:	c1 f3       	breq	.-16     	; 0xd66 <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     d76:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     d78:	11 f4       	brne	.+4      	; 0xd7e <xvprintf+0x26>
	set			;/
     d7a:	68 94       	set
22:	_LPMI	r21		;Get width
     d7c:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     d7e:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     d80:	48 f4       	brcc	.+18     	; 0xd94 <xvprintf+0x3c>
	subi	r21, '0'	;
     d82:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     d84:	90 f3       	brcs	.-28     	; 0xd6a <xvprintf+0x12>
	lsl	r18		;
     d86:	22 0f       	add	r18, r18
	mov	r0, r18		;
     d88:	02 2e       	mov	r0, r18
	lsl	r18		;
     d8a:	22 0f       	add	r18, r18
	lsl	r18		;
     d8c:	22 0f       	add	r18, r18
	add	r18, r0		;
     d8e:	20 0d       	add	r18, r0
	add	r18, r21	;
     d90:	25 0f       	add	r18, r21
	rjmp	22b		;/
     d92:	f4 cf       	rjmp	.-24     	; 0xd7c <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     d94:	0e f4       	brtc	.+2      	; 0xd98 <xvprintf+0x40>
	neg	r18		;
     d96:	21 95       	neg	r18
25:	ld	r24, Y+		;
     d98:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     d9a:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     d9c:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     d9e:	19 f3       	breq	.-58     	; 0xd66 <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     da0:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     da2:	29 f1       	breq	.+74     	; 0xdee <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     da4:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     da6:	59 f1       	breq	.+86     	; 0xdfe <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     da8:	bc 01       	movw	r22, r24
	clr	r24		;
     daa:	88 27       	eor	r24, r24
	clr	r25		;
     dac:	99 27       	eor	r25, r25
	clt			;/
     dae:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     db0:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     db2:	21 f4       	brne	.+8      	; 0xdbc <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     db4:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     db6:	99 91       	ld	r25, Y+
	set			;
     db8:	68 94       	set
	_LPMI	r21		;/
     dba:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     dbc:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     dbe:	39 f4       	brne	.+14     	; 0xdce <xvprintf+0x76>
	ldi	r20, -10	;
     dc0:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     dc2:	7e f0       	brts	.+30     	; 0xde2 <xvprintf+0x8a>
	sbrs	r23, 7		;
     dc4:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     dc6:	0d c0       	rjmp	.+26     	; 0xde2 <xvprintf+0x8a>
	ldi	r24, -1		;
     dc8:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     dca:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     dcc:	0a c0       	rjmp	.+20     	; 0xde2 <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     dce:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     dd0:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     dd2:	39 f0       	breq	.+14     	; 0xde2 <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     dd4:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     dd6:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     dd8:	21 f0       	breq	.+8      	; 0xde2 <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     dda:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     ddc:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     dde:	09 f0       	breq	.+2      	; 0xde2 <xvprintf+0x8a>
	ret			;abort
     de0:	08 95       	ret
40:	push	ZH		;Output the value
     de2:	ff 93       	push	r31
	push	ZL		;
     de4:	ef 93       	push	r30
	rcall	xitoa		;
     de6:	7d df       	rcall	.-262    	; 0xce2 <xitoa>
42:	pop	ZL		;
     de8:	ef 91       	pop	r30
	pop	ZH		;
     dea:	ff 91       	pop	r31
	rjmp	0b		;/
     dec:	b7 cf       	rjmp	.-146    	; 0xd5c <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     dee:	ff 93       	push	r31
	push	ZL
     df0:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     df2:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     df4:	81 91       	ld	r24, Z+
	cpi	r24, 0
     df6:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     df8:	b9 f3       	breq	.-18     	; 0xde8 <xvprintf+0x90>
	rcall	xputc
     dfa:	60 df       	rcall	.-320    	; 0xcbc <xputc>
	rjmp	51b
     dfc:	fb cf       	rjmp	.-10     	; 0xdf4 <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     dfe:	ff 93       	push	r31
	push	ZL
     e00:	ef 93       	push	r30
	rcall	xputs
     e02:	68 df       	rcall	.-304    	; 0xcd4 <xputs>
	rjmp	42b
     e04:	f1 cf       	rjmp	.-30     	; 0xde8 <xvprintf+0x90>

00000e06 <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     e06:	df 93       	push	r29
	push	YL
     e08:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     e0a:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     e0c:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     e0e:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     e10:	a3 df       	rcall	.-186    	; 0xd58 <xvprintf>
	pop	YL
     e12:	cf 91       	pop	r28
	pop	YH
     e14:	df 91       	pop	r29
	ret
     e16:	08 95       	ret

00000e18 <action_get_macro>:
    VOLUP,
    ALT_TAB,
};

const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
     e18:	fc 01       	movw	r30, r24
    switch (id) {
     e1a:	61 30       	cpi	r22, 0x01	; 1
     e1c:	51 f0       	breq	.+20     	; 0xe32 <action_get_macro+0x1a>
     e1e:	18 f0       	brcs	.+6      	; 0xe26 <action_get_macro+0xe>
     e20:	62 30       	cpi	r22, 0x02	; 2
     e22:	69 f0       	breq	.+26     	; 0xe3e <action_get_macro+0x26>
     e24:	12 c0       	rjmp	.+36     	; 0xe4a <action_get_macro+0x32>
        case HELLO:
            return (record->event.pressed ?
                    MACRO(T(SPC),T(MINS),D(LSHIFT),T(DOT),U(LSHIFT),T(SPC), END ) :
     e26:	82 81       	ldd	r24, Z+2	; 0x02
     e28:	88 23       	and	r24, r24
     e2a:	79 f0       	breq	.+30     	; 0xe4a <action_get_macro+0x32>
     e2c:	8d ee       	ldi	r24, 0xED	; 237
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	08 95       	ret
                    MACRO_NONE );
        case VOLUP:
            return (record->event.pressed ?
                    MACRO( D(VOLU), U(VOLU), END ) :
     e32:	82 81       	ldd	r24, Z+2	; 0x02
     e34:	88 23       	and	r24, r24
     e36:	49 f0       	breq	.+18     	; 0xe4a <action_get_macro+0x32>
     e38:	88 ee       	ldi	r24, 0xE8	; 232
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	08 95       	ret
                    MACRO_NONE );
        case ALT_TAB:
            return (record->event.pressed ?
                    MACRO( D(LALT), D(TAB), END ) :
     e3e:	82 81       	ldd	r24, Z+2	; 0x02
     e40:	88 23       	and	r24, r24
     e42:	31 f0       	breq	.+12     	; 0xe50 <action_get_macro+0x38>
     e44:	83 ee       	ldi	r24, 0xE3	; 227
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	08 95       	ret
const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    switch (id) {
        case HELLO:
            return (record->event.pressed ?
                    MACRO(T(SPC),T(MINS),D(LSHIFT),T(DOT),U(LSHIFT),T(SPC), END ) :
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	08 95       	ret
            return (record->event.pressed ?
                    MACRO( D(VOLU), U(VOLU), END ) :
                    MACRO_NONE );
        case ALT_TAB:
            return (record->event.pressed ?
                    MACRO( D(LALT), D(TAB), END ) :
     e50:	80 ee       	ldi	r24, 0xE0	; 224
     e52:	90 e0       	ldi	r25, 0x00	; 0
                    MACRO( U(TAB), END ));
    }
    return MACRO_NONE;
}
     e54:	08 95       	ret

00000e56 <keymap_key_to_keycode>:


/* translates key to keycode */
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
     e56:	e7 2f       	mov	r30, r23
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	98 e0       	ldi	r25, 0x08	; 8
     e5c:	89 9f       	mul	r24, r25
     e5e:	e0 0d       	add	r30, r0
     e60:	f1 1d       	adc	r31, r1
     e62:	11 24       	eor	r1, r1
     e64:	83 e0       	ldi	r24, 0x03	; 3
     e66:	ee 0f       	add	r30, r30
     e68:	ff 1f       	adc	r31, r31
     e6a:	8a 95       	dec	r24
     e6c:	e1 f7       	brne	.-8      	; 0xe66 <keymap_key_to_keycode+0x10>
     e6e:	e6 0f       	add	r30, r22
     e70:	f1 1d       	adc	r31, r1
     e72:	e6 5f       	subi	r30, 0xF6	; 246
     e74:	fe 4f       	sbci	r31, 0xFE	; 254
     e76:	84 91       	lpm	r24, Z
}
     e78:	08 95       	ret

00000e7a <keymap_fn_to_action>:

/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint8_t keycode)
{
    return (action_t){ .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]) };
     e7a:	e8 2f       	mov	r30, r24
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	ee 0f       	add	r30, r30
     e80:	ff 1f       	adc	r31, r31
     e82:	ee 57       	subi	r30, 0x7E	; 126
     e84:	f0 40       	sbci	r31, 0x00	; 0
}
     e86:	85 91       	lpm	r24, Z+
     e88:	94 91       	lpm	r25, Z
     e8a:	08 95       	ret

00000e8c <matrix_init>:
static inline bool KEY_POWER_STATE(void) { return true; }
#endif
static inline void KEY_INIT(void)
{
    /* row,col,prev: output */
    DDRB  = 0xFF;
     e8c:	8f ef       	ldi	r24, 0xFF	; 255
     e8e:	84 b9       	out	0x04, r24	; 4
    PORTB = 0x40;   // unable
     e90:	80 e4       	ldi	r24, 0x40	; 64
     e92:	85 b9       	out	0x05, r24	; 5
    DDRF |= (1<<1);
     e94:	81 9a       	sbi	0x10, 1	; 16
    DDRF &= ~(1<<0);
     e96:	80 98       	cbi	0x10, 0	; 16
    PORTF |= (1<<0);
     e98:	88 9a       	sbi	0x11, 0	; 17
 * prev:    PB7
 * power:   PD4(L:off/H:on)
 * row-ext: PC6,7 for HHKB JP(active low)
 */
static inline void KEY_ENABLE(void) { (PORTB &= ~(1<<6)); }
static inline void KEY_UNABLE(void) { (PORTB |=  (1<<6)); }
     e9a:	2e 9a       	sbi	0x05, 6	; 5
static inline bool KEY_STATE(void) { return (PINF & (1<<0)); }
static inline void KEY_PREV_ON(void) { (PORTF |=  (1<<1)); }
static inline void KEY_PREV_OFF(void) { (PORTF &= ~(1<<1)); }
     e9c:	89 98       	cbi	0x11, 1	; 17
     e9e:	e2 e4       	ldi	r30, 0x42	; 66
     ea0:	f1 e0       	ldi	r31, 0x01	; 1
#endif

    KEY_INIT();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) _matrix0[i] = 0x00;
     ea2:	11 92       	st	Z+, r1
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	ea 34       	cpi	r30, 0x4A	; 74
     ea8:	f8 07       	cpc	r31, r24
     eaa:	d9 f7       	brne	.-10     	; 0xea2 <matrix_init+0x16>
     eac:	ea e3       	ldi	r30, 0x3A	; 58
     eae:	f1 e0       	ldi	r31, 0x01	; 1
    for (uint8_t i=0; i < MATRIX_ROWS; i++) _matrix1[i] = 0x00;
     eb0:	11 92       	st	Z+, r1
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	e2 34       	cpi	r30, 0x42	; 66
     eb6:	f8 07       	cpc	r31, r24
     eb8:	d9 f7       	brne	.-10     	; 0xeb0 <matrix_init+0x24>
    matrix = _matrix0;
     eba:	82 e4       	ldi	r24, 0x42	; 66
     ebc:	91 e0       	ldi	r25, 0x01	; 1
     ebe:	90 93 4d 01 	sts	0x014D, r25
     ec2:	80 93 4c 01 	sts	0x014C, r24
    matrix_prev = _matrix1;
     ec6:	8a e3       	ldi	r24, 0x3A	; 58
     ec8:	91 e0       	ldi	r25, 0x01	; 1
     eca:	90 93 4b 01 	sts	0x014B, r25
     ece:	80 93 4a 01 	sts	0x014A, r24
     ed2:	08 95       	ret

00000ed4 <matrix_scan>:
}

uint8_t matrix_scan(void)
{
     ed4:	0f 93       	push	r16
     ed6:	1f 93       	push	r17
     ed8:	cf 93       	push	r28
     eda:	df 93       	push	r29
    uint8_t *tmp;

    tmp = matrix_prev;
     edc:	80 91 4a 01 	lds	r24, 0x014A
     ee0:	90 91 4b 01 	lds	r25, 0x014B
    matrix_prev = matrix;
     ee4:	20 91 4c 01 	lds	r18, 0x014C
     ee8:	30 91 4d 01 	lds	r19, 0x014D
     eec:	30 93 4b 01 	sts	0x014B, r19
     ef0:	20 93 4a 01 	sts	0x014A, r18
    matrix = tmp;
     ef4:	90 93 4d 01 	sts	0x014D, r25
     ef8:	80 93 4c 01 	sts	0x014C, r24
     efc:	c0 e0       	ldi	r28, 0x00	; 0
     efe:	d0 e0       	ldi	r29, 0x00	; 0
            _delay_us(5);

            if (KEY_STATE()) {
                matrix[row] &= ~(1<<col);
            } else {
                matrix[row] |= (1<<col);
     f00:	01 e0       	ldi	r16, 0x01	; 1
     f02:	10 e0       	ldi	r17, 0x00	; 0
    matrix = _matrix0;
    matrix_prev = _matrix1;
}

uint8_t matrix_scan(void)
{
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	90 e0       	ldi	r25, 0x00	; 0

    KEY_POWER_OFF();
}
static inline void KEY_SELECT(uint8_t ROW, uint8_t COL)
{
    PORTB = (PORTB & 0xC0) | (((COL) & 0x07)<<3) | ((ROW) & 0x07);
     f08:	45 b1       	in	r20, 0x05	; 5
     f0a:	40 7c       	andi	r20, 0xC0	; 192
     f0c:	4c 2b       	or	r20, r28
     f0e:	9c 01       	movw	r18, r24
     f10:	53 e0       	ldi	r21, 0x03	; 3
     f12:	22 0f       	add	r18, r18
     f14:	33 1f       	adc	r19, r19
     f16:	5a 95       	dec	r21
     f18:	e1 f7       	brne	.-8      	; 0xf12 <matrix_scan+0x3e>
     f1a:	42 2b       	or	r20, r18
     f1c:	45 b9       	out	0x05, r20	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f1e:	ea e1       	ldi	r30, 0x1A	; 26
     f20:	ea 95       	dec	r30
     f22:	f1 f7       	brne	.-4      	; 0xf20 <matrix_scan+0x4c>
     f24:	00 c0       	rjmp	.+0      	; 0xf26 <matrix_scan+0x52>
        for (uint8_t col = 0; col < MATRIX_COLS; col++) {
            KEY_SELECT(row, col);
            _delay_us(5);

            // Not sure this is needed. This just emulates HHKB controller's behaviour.
            if (matrix_prev[row] & (1<<col)) {
     f26:	e0 91 4a 01 	lds	r30, 0x014A
     f2a:	f0 91 4b 01 	lds	r31, 0x014B
     f2e:	ec 0f       	add	r30, r28
     f30:	fd 1f       	adc	r31, r29
     f32:	20 81       	ld	r18, Z
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	08 2e       	mov	r0, r24
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <matrix_scan+0x6a>
     f3a:	35 95       	asr	r19
     f3c:	27 95       	ror	r18
     f3e:	0a 94       	dec	r0
     f40:	e2 f7       	brpl	.-8      	; 0xf3a <matrix_scan+0x66>
     f42:	20 fd       	sbrc	r18, 0
 * row-ext: PC6,7 for HHKB JP(active low)
 */
static inline void KEY_ENABLE(void) { (PORTB &= ~(1<<6)); }
static inline void KEY_UNABLE(void) { (PORTB |=  (1<<6)); }
static inline bool KEY_STATE(void) { return (PINF & (1<<0)); }
static inline void KEY_PREV_ON(void) { (PORTF |=  (1<<1)); }
     f44:	89 9a       	sbi	0x11, 1	; 17
     f46:	f5 e3       	ldi	r31, 0x35	; 53
     f48:	fa 95       	dec	r31
     f4a:	f1 f7       	brne	.-4      	; 0xf48 <matrix_scan+0x74>
     f4c:	00 00       	nop
            _delay_us(10);

            // NOTE: KEY_STATE is valid only in 20us after KEY_ENABLE.
            // If V-USB interrupts in this section we could lose 40us or so
            // and would read invalid value from KEY_STATE.
            uint8_t last = TIMER_RAW;
     f4e:	a6 b5       	in	r26, 0x26	; 38
 * key:     PD7(pull-uped)
 * prev:    PB7
 * power:   PD4(L:off/H:on)
 * row-ext: PC6,7 for HHKB JP(active low)
 */
static inline void KEY_ENABLE(void) { (PORTB &= ~(1<<6)); }
     f50:	2e 98       	cbi	0x05, 6	; 5
     f52:	2a e1       	ldi	r18, 0x1A	; 26
     f54:	2a 95       	dec	r18
     f56:	f1 f7       	brne	.-4      	; 0xf54 <matrix_scan+0x80>
     f58:	00 c0       	rjmp	.+0      	; 0xf5a <matrix_scan+0x86>
     f5a:	20 91 4c 01 	lds	r18, 0x014C
     f5e:	30 91 4d 01 	lds	r19, 0x014D
            // 10us wait does    work on Teensy++ with pro
            // 10us wait does    work on 328p+iwrap with pro
            // 10us wait doesn't work on tmk PCB(8MHz) with pro2(very lagged scan)
            _delay_us(5);

            if (KEY_STATE()) {
     f62:	78 9b       	sbis	0x0f, 0	; 15
     f64:	0e c0       	rjmp	.+28     	; 0xf82 <matrix_scan+0xae>
                matrix[row] &= ~(1<<col);
     f66:	a8 01       	movw	r20, r16
     f68:	08 2e       	mov	r0, r24
     f6a:	01 c0       	rjmp	.+2      	; 0xf6e <matrix_scan+0x9a>
     f6c:	44 0f       	add	r20, r20
     f6e:	0a 94       	dec	r0
     f70:	ea f7       	brpl	.-6      	; 0xf6c <matrix_scan+0x98>
     f72:	40 95       	com	r20
     f74:	f9 01       	movw	r30, r18
     f76:	ec 0f       	add	r30, r28
     f78:	fd 1f       	adc	r31, r29
     f7a:	50 81       	ld	r21, Z
     f7c:	54 23       	and	r21, r20
     f7e:	50 83       	st	Z, r21
     f80:	0c c0       	rjmp	.+24     	; 0xf9a <matrix_scan+0xc6>
            } else {
                matrix[row] |= (1<<col);
     f82:	f9 01       	movw	r30, r18
     f84:	ec 0f       	add	r30, r28
     f86:	fd 1f       	adc	r31, r29
     f88:	60 81       	ld	r22, Z
     f8a:	a8 01       	movw	r20, r16
     f8c:	08 2e       	mov	r0, r24
     f8e:	01 c0       	rjmp	.+2      	; 0xf92 <matrix_scan+0xbe>
     f90:	44 0f       	add	r20, r20
     f92:	0a 94       	dec	r0
     f94:	ea f7       	brpl	.-6      	; 0xf90 <matrix_scan+0xbc>
     f96:	64 2b       	or	r22, r20
     f98:	60 83       	st	Z, r22
            }

            // Ignore if this code region execution time elapses more than 20us.
            // MEMO: 20[us] * (TIMER_RAW_FREQ / 1000000)[count per us]
            // MEMO: then change above using this rule: a/(b/c) = a*1/(b/c) = a*(c/b)
            if (TIMER_DIFF_RAW(TIMER_RAW, last) > 20/(1000000/TIMER_RAW_FREQ)) {
     f9a:	46 b5       	in	r20, 0x26	; 38
     f9c:	6a 2f       	mov	r22, r26
     f9e:	70 e0       	ldi	r23, 0x00	; 0
     fa0:	4a 17       	cp	r20, r26
     fa2:	18 f0       	brcs	.+6      	; 0xfaa <matrix_scan+0xd6>
     fa4:	46 b5       	in	r20, 0x26	; 38
     fa6:	50 e0       	ldi	r21, 0x00	; 0
     fa8:	04 c0       	rjmp	.+8      	; 0xfb2 <matrix_scan+0xde>
     faa:	46 b5       	in	r20, 0x26	; 38
     fac:	50 e0       	ldi	r21, 0x00	; 0
     fae:	41 50       	subi	r20, 0x01	; 1
     fb0:	5f 4f       	sbci	r21, 0xFF	; 255
     fb2:	46 1b       	sub	r20, r22
     fb4:	57 0b       	sbc	r21, r23
     fb6:	46 30       	cpi	r20, 0x06	; 6
     fb8:	51 05       	cpc	r21, r1
     fba:	58 f0       	brcs	.+22     	; 0xfd2 <matrix_scan+0xfe>
                matrix[row] = matrix_prev[row];
     fbc:	e0 91 4a 01 	lds	r30, 0x014A
     fc0:	f0 91 4b 01 	lds	r31, 0x014B
     fc4:	ec 0f       	add	r30, r28
     fc6:	fd 1f       	adc	r31, r29
     fc8:	40 81       	ld	r20, Z
     fca:	f9 01       	movw	r30, r18
     fcc:	ec 0f       	add	r30, r28
     fce:	fd 1f       	adc	r31, r29
     fd0:	40 83       	st	Z, r20
     fd2:	ea e1       	ldi	r30, 0x1A	; 26
     fd4:	ea 95       	dec	r30
     fd6:	f1 f7       	brne	.-4      	; 0xfd4 <matrix_scan+0x100>
     fd8:	00 c0       	rjmp	.+0      	; 0xfda <matrix_scan+0x106>
static inline void KEY_UNABLE(void) { (PORTB |=  (1<<6)); }
static inline bool KEY_STATE(void) { return (PINF & (1<<0)); }
static inline void KEY_PREV_ON(void) { (PORTF |=  (1<<1)); }
static inline void KEY_PREV_OFF(void) { (PORTF &= ~(1<<1)); }
     fda:	89 98       	cbi	0x11, 1	; 17
 * prev:    PB7
 * power:   PD4(L:off/H:on)
 * row-ext: PC6,7 for HHKB JP(active low)
 */
static inline void KEY_ENABLE(void) { (PORTB &= ~(1<<6)); }
static inline void KEY_UNABLE(void) { (PORTB |=  (1<<6)); }
     fdc:	2e 9a       	sbi	0x05, 6	; 5
     fde:	eb e2       	ldi	r30, 0x2B	; 43
     fe0:	f1 e0       	ldi	r31, 0x01	; 1
     fe2:	31 97       	sbiw	r30, 0x01	; 1
     fe4:	f1 f7       	brne	.-4      	; 0xfe2 <matrix_scan+0x10e>
     fe6:	00 c0       	rjmp	.+0      	; 0xfe8 <matrix_scan+0x114>
     fe8:	00 00       	nop
     fea:	01 96       	adiw	r24, 0x01	; 1
    matrix = tmp;

    // power on
    if (!KEY_POWER_STATE()) KEY_POWER_ON();
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        for (uint8_t col = 0; col < MATRIX_COLS; col++) {
     fec:	88 30       	cpi	r24, 0x08	; 8
     fee:	91 05       	cpc	r25, r1
     ff0:	09 f0       	breq	.+2      	; 0xff4 <matrix_scan+0x120>
     ff2:	8a cf       	rjmp	.-236    	; 0xf08 <matrix_scan+0x34>
            _delay_us(30);
#else
            _delay_us(75);
#endif
        }
        if (matrix[row] ^ matrix_prev[row]) matrix_last_modified = timer_read32();
     ff4:	a0 91 4c 01 	lds	r26, 0x014C
     ff8:	b0 91 4d 01 	lds	r27, 0x014D
     ffc:	ac 0f       	add	r26, r28
     ffe:	bd 1f       	adc	r27, r29
    1000:	e0 91 4a 01 	lds	r30, 0x014A
    1004:	f0 91 4b 01 	lds	r31, 0x014B
    1008:	ec 0f       	add	r30, r28
    100a:	fd 1f       	adc	r31, r29
    100c:	9c 91       	ld	r25, X
    100e:	80 81       	ld	r24, Z
    1010:	98 17       	cp	r25, r24
    1012:	51 f0       	breq	.+20     	; 0x1028 <matrix_scan+0x154>
    1014:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <timer_read32>
    1018:	60 93 4e 01 	sts	0x014E, r22
    101c:	70 93 4f 01 	sts	0x014F, r23
    1020:	80 93 50 01 	sts	0x0150, r24
    1024:	90 93 51 01 	sts	0x0151, r25
    1028:	21 96       	adiw	r28, 0x01	; 1
    matrix_prev = matrix;
    matrix = tmp;

    // power on
    if (!KEY_POWER_STATE()) KEY_POWER_ON();
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    102a:	c8 30       	cpi	r28, 0x08	; 8
    102c:	d1 05       	cpc	r29, r1
    102e:	09 f0       	breq	.+2      	; 0x1032 <matrix_scan+0x15e>
    1030:	69 cf       	rjmp	.-302    	; 0xf04 <matrix_scan+0x30>
        }
        if (matrix[row] ^ matrix_prev[row]) matrix_last_modified = timer_read32();
    }
    // power off
    if (KEY_POWER_STATE() &&
            (USB_DeviceState == DEVICE_STATE_Suspended ||
    1032:	80 91 e1 01 	lds	r24, 0x01E1
#endif
        }
        if (matrix[row] ^ matrix_prev[row]) matrix_last_modified = timer_read32();
    }
    // power off
    if (KEY_POWER_STATE() &&
    1036:	85 30       	cpi	r24, 0x05	; 5
    1038:	21 f0       	breq	.+8      	; 0x1042 <matrix_scan+0x16e>
            (USB_DeviceState == DEVICE_STATE_Suspended ||
             USB_DeviceState == DEVICE_STATE_Unattached ) &&
    103a:	80 91 e1 01 	lds	r24, 0x01E1
        }
        if (matrix[row] ^ matrix_prev[row]) matrix_last_modified = timer_read32();
    }
    // power off
    if (KEY_POWER_STATE() &&
            (USB_DeviceState == DEVICE_STATE_Suspended ||
    103e:	81 11       	cpse	r24, r1
    1040:	11 c0       	rjmp	.+34     	; 0x1064 <matrix_scan+0x190>
             USB_DeviceState == DEVICE_STATE_Unattached ) &&
            timer_elapsed32(matrix_last_modified) > MATRIX_POWER_SAVE) {
    1042:	60 91 4e 01 	lds	r22, 0x014E
    1046:	70 91 4f 01 	lds	r23, 0x014F
    104a:	80 91 50 01 	lds	r24, 0x0150
    104e:	90 91 51 01 	lds	r25, 0x0151
    1052:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <timer_elapsed32>
        if (matrix[row] ^ matrix_prev[row]) matrix_last_modified = timer_read32();
    }
    // power off
    if (KEY_POWER_STATE() &&
            (USB_DeviceState == DEVICE_STATE_Suspended ||
             USB_DeviceState == DEVICE_STATE_Unattached ) &&
    1056:	61 31       	cpi	r22, 0x11	; 17
    1058:	77 42       	sbci	r23, 0x27	; 39
    105a:	81 05       	cpc	r24, r1
    105c:	91 05       	cpc	r25, r1
    105e:	10 f0       	brcs	.+4      	; 0x1064 <matrix_scan+0x190>
            timer_elapsed32(matrix_last_modified) > MATRIX_POWER_SAVE) {
        KEY_POWER_OFF();
        suspend_power_down();
    1060:	0e 94 67 1d 	call	0x3ace	; 0x3ace <suspend_power_down>
    }
    return 1;
}
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	08 95       	ret

00001070 <matrix_get_row>:
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    1070:	e0 91 4c 01 	lds	r30, 0x014C
    1074:	f0 91 4d 01 	lds	r31, 0x014D
    1078:	e8 0f       	add	r30, r24
    107a:	f1 1d       	adc	r31, r1
}
    107c:	80 81       	ld	r24, Z
    107e:	08 95       	ret

00001080 <matrix_print>:

void matrix_print(void)
{
    1080:	0f 93       	push	r16
    1082:	1f 93       	push	r17
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    print("\nr/c 01234567\n");
    1088:	86 ed       	ldi	r24, 0xD6	; 214
    108a:	91 e0       	ldi	r25, 0x01	; 1
    108c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    1090:	c0 e0       	ldi	r28, 0x00	; 0
    1092:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < matrix_rows(); row++) {
        xprintf("%02X: %08b\n", row, bitrev(matrix_get_row(row)));
    1094:	0a ec       	ldi	r16, 0xCA	; 202
    1096:	11 e0       	ldi	r17, 0x01	; 1
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    1098:	e0 91 4c 01 	lds	r30, 0x014C
    109c:	f0 91 4d 01 	lds	r31, 0x014D
    10a0:	ec 0f       	add	r30, r28
    10a2:	fd 1f       	adc	r31, r29

void matrix_print(void)
{
    print("\nr/c 01234567\n");
    for (uint8_t row = 0; row < matrix_rows(); row++) {
        xprintf("%02X: %08b\n", row, bitrev(matrix_get_row(row)));
    10a4:	80 81       	ld	r24, Z
    10a6:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <bitrev>
    10aa:	1f 92       	push	r1
    10ac:	8f 93       	push	r24
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	1f 93       	push	r17
    10b4:	0f 93       	push	r16
    10b6:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    10ba:	21 96       	adiw	r28, 0x01	; 1
}

void matrix_print(void)
{
    print("\nr/c 01234567\n");
    for (uint8_t row = 0; row < matrix_rows(); row++) {
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	c8 30       	cpi	r28, 0x08	; 8
    10ca:	d1 05       	cpc	r29, r1
    10cc:	29 f7       	brne	.-54     	; 0x1098 <matrix_print+0x18>
        xprintf("%02X: %08b\n", row, bitrev(matrix_get_row(row)));
    }
}
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	1f 91       	pop	r17
    10d4:	0f 91       	pop	r16
    10d6:	08 95       	ret

000010d8 <matrix_power_up>:

void matrix_power_up(void) {
    10d8:	08 95       	ret

000010da <matrix_power_down>:
    KEY_POWER_ON();
}
void matrix_power_down(void) {
    10da:	08 95       	ret

000010dc <led_set>:

/* HHKB has no LEDs */
void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_CAPS_LOCK)) {
        DDRD |= (1<<6);
    10dc:	56 9a       	sbi	0x0a, 6	; 10


/* HHKB has no LEDs */
void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_CAPS_LOCK)) {
    10de:	81 ff       	sbrs	r24, 1
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <led_set+0xa>
        DDRD |= (1<<6);
        PORTD |= (1<<6);
    10e2:	5e 9a       	sbi	0x0b, 6	; 11
    10e4:	08 95       	ret
    } else {
        DDRD |= (1<<6);
        PORTD &= ~(1<<6);
    10e6:	5e 98       	cbi	0x0b, 6	; 11
    10e8:	08 95       	ret

000010ea <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    10ea:	80 91 65 01 	lds	r24, 0x0165
    10ee:	08 95       	ret

000010f0 <sendchar>:
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
    10f0:	9f b7       	in	r25, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	10 92 54 01 	sts	0x0154, r1
    10f8:	9f bf       	out	0x3f, r25	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
    10fa:	90 91 e1 01 	lds	r25, 0x01E1
    10fe:	94 30       	cpi	r25, 0x04	; 4
    1100:	09 f0       	breq	.+2      	; 0x1104 <sendchar+0x14>
    1102:	58 c0       	rjmp	.+176    	; 0x11b4 <sendchar+0xc4>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1104:	90 91 e9 00 	lds	r25, 0x00E9
    1108:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    110a:	20 91 ec 00 	lds	r18, 0x00EC
    110e:	20 ff       	sbrs	r18, 0
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <sendchar+0x26>
    1112:	20 e8       	ldi	r18, 0x80	; 128
    1114:	01 c0       	rjmp	.+2      	; 0x1118 <sendchar+0x28>
    1116:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1118:	29 2b       	or	r18, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    111a:	94 e0       	ldi	r25, 0x04	; 4
    111c:	90 93 e9 00 	sts	0x00E9, r25
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1120:	90 91 eb 00 	lds	r25, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1124:	90 ff       	sbrs	r25, 0
    1126:	43 c0       	rjmp	.+134    	; 0x11ae <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1128:	90 91 ee 00 	lds	r25, 0x00EE
    112c:	97 ff       	sbrs	r25, 7
    112e:	3f c0       	rjmp	.+126    	; 0x11ae <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    1130:	90 91 52 01 	lds	r25, 0x0152
    1134:	99 23       	and	r25, r25
    1136:	21 f0       	breq	.+8      	; 0x1140 <sendchar+0x50>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1138:	90 91 e8 00 	lds	r25, 0x00E8
    113c:	95 ff       	sbrs	r25, 5
    113e:	37 c0       	rjmp	.+110    	; 0x11ae <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    timeouted = false;
    1140:	10 92 52 01 	sts	0x0152, r1

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    1144:	96 e0       	ldi	r25, 0x06	; 6
    1146:	30 91 e8 00 	lds	r19, 0x00E8
    114a:	35 fd       	sbrc	r19, 5
    114c:	15 c0       	rjmp	.+42     	; 0x1178 <sendchar+0x88>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    114e:	30 91 e1 01 	lds	r19, 0x01E1
    1152:	34 30       	cpi	r19, 0x04	; 4
    1154:	61 f5       	brne	.+88     	; 0x11ae <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1156:	30 91 eb 00 	lds	r19, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
    115a:	35 fd       	sbrc	r19, 5
    115c:	28 c0       	rjmp	.+80     	; 0x11ae <sendchar+0xbe>
    115e:	91 50       	subi	r25, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    1160:	21 f4       	brne	.+8      	; 0x116a <sendchar+0x7a>
            timeouted = true;
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	80 93 52 01 	sts	0x0152, r24
            goto ERROR_EXIT;
    1168:	22 c0       	rjmp	.+68     	; 0x11ae <sendchar+0xbe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    116a:	ef e9       	ldi	r30, 0x9F	; 159
    116c:	ff e0       	ldi	r31, 0x0F	; 15
    116e:	31 97       	sbiw	r30, 0x01	; 1
    1170:	f1 f7       	brne	.-4      	; 0x116e <sendchar+0x7e>
    1172:	00 c0       	rjmp	.+0      	; 0x1174 <sendchar+0x84>
    1174:	00 00       	nop
    1176:	e7 cf       	rjmp	.-50     	; 0x1146 <sendchar+0x56>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1178:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    117c:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
    1180:	85 fd       	sbrc	r24, 5
    1182:	0a c0       	rjmp	.+20     	; 0x1198 <sendchar+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1184:	80 91 e8 00 	lds	r24, 0x00E8
        while (!(Endpoint_IsINReady()));
    1188:	80 ff       	sbrs	r24, 0
    118a:	fc cf       	rjmp	.-8      	; 0x1184 <sendchar+0x94>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    118c:	80 91 e8 00 	lds	r24, 0x00E8
    1190:	8e 77       	andi	r24, 0x7E	; 126
    1192:	80 93 e8 00 	sts	0x00E8, r24
    1196:	06 c0       	rjmp	.+12     	; 0x11a4 <sendchar+0xb4>
        Endpoint_ClearIN();
    } else {
        CONSOLE_FLUSH_SET(true);
    1198:	8f b7       	in	r24, 0x3f	; 63
    119a:	f8 94       	cli
    119c:	91 e0       	ldi	r25, 0x01	; 1
    119e:	90 93 54 01 	sts	0x0154, r25
    11a2:	8f bf       	out	0x3f, r24	; 63
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    11a4:	2f 70       	andi	r18, 0x0F	; 15
    11a6:	20 93 e9 00 	sts	0x00E9, r18
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	08 95       	ret
    11ae:	2f 70       	andi	r18, 0x0F	; 15
    11b0:	20 93 e9 00 	sts	0x00E9, r18
    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
    11b4:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    11b6:	08 95       	ret

000011b8 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    11b8:	cf 93       	push	r28
    11ba:	df 93       	push	r29
    11bc:	00 d0       	rcall	.+0      	; 0x11be <send_consumer+0x6>
    11be:	1f 92       	push	r1
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    11c4:	20 91 e1 01 	lds	r18, 0x01E1
    11c8:	24 30       	cpi	r18, 0x04	; 4
    11ca:	19 f5       	brne	.+70     	; 0x1212 <send_consumer+0x5a>
        return;

    report_extra_t r = {
    11cc:	23 e0       	ldi	r18, 0x03	; 3
    11ce:	29 83       	std	Y+1, r18	; 0x01
    11d0:	9b 83       	std	Y+3, r25	; 0x03
    11d2:	8a 83       	std	Y+2, r24	; 0x02
    11d4:	20 93 e9 00 	sts	0x00E9, r18
    11d8:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    11da:	90 91 e8 00 	lds	r25, 0x00E8
    11de:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    11e0:	95 fd       	sbrc	r25, 5
    11e2:	06 c0       	rjmp	.+12     	; 0x11f0 <send_consumer+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11e4:	95 ed       	ldi	r25, 0xD5	; 213
    11e6:	9a 95       	dec	r25
    11e8:	f1 f7       	brne	.-4      	; 0x11e6 <send_consumer+0x2e>
    11ea:	00 00       	nop
    11ec:	81 11       	cpse	r24, r1
    11ee:	f5 cf       	rjmp	.-22     	; 0x11da <send_consumer+0x22>
    11f0:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    11f4:	85 ff       	sbrs	r24, 5
    11f6:	0d c0       	rjmp	.+26     	; 0x1212 <send_consumer+0x5a>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    11f8:	40 e0       	ldi	r20, 0x00	; 0
    11fa:	50 e0       	ldi	r21, 0x00	; 0
    11fc:	63 e0       	ldi	r22, 0x03	; 3
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	ce 01       	movw	r24, r28
    1202:	01 96       	adiw	r24, 0x01	; 1
    1204:	0e 94 ac 0b 	call	0x1758	; 0x1758 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1208:	80 91 e8 00 	lds	r24, 0x00E8
    120c:	8e 77       	andi	r24, 0x7E	; 126
    120e:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	08 95       	ret

0000121e <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	00 d0       	rcall	.+0      	; 0x1224 <send_system+0x6>
    1224:	1f 92       	push	r1
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    122a:	20 91 e1 01 	lds	r18, 0x01E1
    122e:	24 30       	cpi	r18, 0x04	; 4
    1230:	21 f5       	brne	.+72     	; 0x127a <send_system+0x5c>
        return;

    report_extra_t r = {
    1232:	22 e0       	ldi	r18, 0x02	; 2
    1234:	29 83       	std	Y+1, r18	; 0x01
    1236:	9b 83       	std	Y+3, r25	; 0x03
    1238:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    123a:	83 e0       	ldi	r24, 0x03	; 3
    123c:	80 93 e9 00 	sts	0x00E9, r24
    1240:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1242:	90 91 e8 00 	lds	r25, 0x00E8
    1246:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1248:	95 fd       	sbrc	r25, 5
    124a:	06 c0       	rjmp	.+12     	; 0x1258 <send_system+0x3a>
    124c:	95 ed       	ldi	r25, 0xD5	; 213
    124e:	9a 95       	dec	r25
    1250:	f1 f7       	brne	.-4      	; 0x124e <send_system+0x30>
    1252:	00 00       	nop
    1254:	81 11       	cpse	r24, r1
    1256:	f5 cf       	rjmp	.-22     	; 0x1242 <send_system+0x24>
    1258:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    125c:	85 ff       	sbrs	r24, 5
    125e:	0d c0       	rjmp	.+26     	; 0x127a <send_system+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1260:	40 e0       	ldi	r20, 0x00	; 0
    1262:	50 e0       	ldi	r21, 0x00	; 0
    1264:	63 e0       	ldi	r22, 0x03	; 3
    1266:	70 e0       	ldi	r23, 0x00	; 0
    1268:	ce 01       	movw	r24, r28
    126a:	01 96       	adiw	r24, 0x01	; 1
    126c:	0e 94 ac 0b 	call	0x1758	; 0x1758 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1270:	80 91 e8 00 	lds	r24, 0x00E8
    1274:	8e 77       	andi	r24, 0x7E	; 126
    1276:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	08 95       	ret

00001286 <send_mouse>:
static void send_mouse(report_mouse_t *report)
{
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1286:	20 91 e1 01 	lds	r18, 0x01E1
    128a:	24 30       	cpi	r18, 0x04	; 4
    128c:	f1 f4       	brne	.+60     	; 0x12ca <send_mouse+0x44>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    128e:	22 e0       	ldi	r18, 0x02	; 2
    1290:	20 93 e9 00 	sts	0x00E9, r18
    1294:	2f ef       	ldi	r18, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1296:	30 91 e8 00 	lds	r19, 0x00E8
    129a:	21 50       	subi	r18, 0x01	; 1

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    129c:	35 fd       	sbrc	r19, 5
    129e:	06 c0       	rjmp	.+12     	; 0x12ac <send_mouse+0x26>
    12a0:	35 ed       	ldi	r19, 0xD5	; 213
    12a2:	3a 95       	dec	r19
    12a4:	f1 f7       	brne	.-4      	; 0x12a2 <send_mouse+0x1c>
    12a6:	00 00       	nop
    12a8:	21 11       	cpse	r18, r1
    12aa:	f5 cf       	rjmp	.-22     	; 0x1296 <send_mouse+0x10>
    12ac:	20 91 e8 00 	lds	r18, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    12b0:	25 ff       	sbrs	r18, 5
    12b2:	0b c0       	rjmp	.+22     	; 0x12ca <send_mouse+0x44>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    12b4:	40 e0       	ldi	r20, 0x00	; 0
    12b6:	50 e0       	ldi	r21, 0x00	; 0
    12b8:	65 e0       	ldi	r22, 0x05	; 5
    12ba:	70 e0       	ldi	r23, 0x00	; 0
    12bc:	0e 94 ac 0b 	call	0x1758	; 0x1758 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12c0:	80 91 e8 00 	lds	r24, 0x00E8
    12c4:	8e 77       	andi	r24, 0x7E	; 126
    12c6:	80 93 e8 00 	sts	0x00E8, r24
    12ca:	08 95       	ret

000012cc <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    12cc:	cf 93       	push	r28
    12ce:	df 93       	push	r29
    12d0:	ec 01       	movw	r28, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    12d2:	80 91 e1 01 	lds	r24, 0x01E1
    12d6:	84 30       	cpi	r24, 0x04	; 4
    12d8:	09 f0       	breq	.+2      	; 0x12dc <send_keyboard+0x10>
    12da:	47 c0       	rjmp	.+142    	; 0x136a <send_keyboard+0x9e>
        return;

    /* Select the Keyboard Report Endpoint */
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    12dc:	80 91 0a 01 	lds	r24, 0x010A
    12e0:	88 23       	and	r24, r24
    12e2:	e1 f0       	breq	.+56     	; 0x131c <send_keyboard+0x50>
    12e4:	80 91 0b 01 	lds	r24, 0x010B
    12e8:	88 23       	and	r24, r24
    12ea:	c1 f0       	breq	.+48     	; 0x131c <send_keyboard+0x50>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    12ec:	85 e0       	ldi	r24, 0x05	; 5
    12ee:	80 93 e9 00 	sts	0x00E9, r24
    12f2:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    12f4:	90 91 e8 00 	lds	r25, 0x00E8
    12f8:	81 50       	subi	r24, 0x01	; 1
        /* Report protocol - NKRO */
        Endpoint_SelectEndpoint(NKRO_IN_EPNUM);

        /* Check if write ready for a polling interval around 1ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
    12fa:	95 fd       	sbrc	r25, 5
    12fc:	06 c0       	rjmp	.+12     	; 0x130a <send_keyboard+0x3e>
    12fe:	95 e1       	ldi	r25, 0x15	; 21
    1300:	9a 95       	dec	r25
    1302:	f1 f7       	brne	.-4      	; 0x1300 <send_keyboard+0x34>
    1304:	00 00       	nop
    1306:	81 11       	cpse	r24, r1
    1308:	f5 cf       	rjmp	.-22     	; 0x12f4 <send_keyboard+0x28>
    130a:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    130e:	85 ff       	sbrs	r24, 5
    1310:	2c c0       	rjmp	.+88     	; 0x136a <send_keyboard+0x9e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    1312:	40 e0       	ldi	r20, 0x00	; 0
    1314:	50 e0       	ldi	r21, 0x00	; 0
    1316:	60 e1       	ldi	r22, 0x10	; 16
    1318:	70 e0       	ldi	r23, 0x00	; 0
    131a:	17 c0       	rjmp	.+46     	; 0x134a <send_keyboard+0x7e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	80 93 e9 00 	sts	0x00E9, r24
    1322:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1324:	90 91 e8 00 	lds	r25, 0x00E8
    1328:	81 50       	subi	r24, 0x01	; 1
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    132a:	95 fd       	sbrc	r25, 5
    132c:	06 c0       	rjmp	.+12     	; 0x133a <send_keyboard+0x6e>
    132e:	95 ed       	ldi	r25, 0xD5	; 213
    1330:	9a 95       	dec	r25
    1332:	f1 f7       	brne	.-4      	; 0x1330 <send_keyboard+0x64>
    1334:	00 00       	nop
    1336:	81 11       	cpse	r24, r1
    1338:	f5 cf       	rjmp	.-22     	; 0x1324 <send_keyboard+0x58>
    133a:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    133e:	85 ff       	sbrs	r24, 5
    1340:	14 c0       	rjmp	.+40     	; 0x136a <send_keyboard+0x9e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    1342:	40 e0       	ldi	r20, 0x00	; 0
    1344:	50 e0       	ldi	r21, 0x00	; 0
    1346:	68 e0       	ldi	r22, 0x08	; 8
    1348:	70 e0       	ldi	r23, 0x00	; 0
    134a:	ce 01       	movw	r24, r28
    134c:	0e 94 ac 0b 	call	0x1758	; 0x1758 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1350:	80 91 e8 00 	lds	r24, 0x00E8
    1354:	8e 77       	andi	r24, 0x7E	; 126
    1356:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    135a:	80 e1       	ldi	r24, 0x10	; 16
    135c:	fe 01       	movw	r30, r28
    135e:	a5 e5       	ldi	r26, 0x55	; 85
    1360:	b1 e0       	ldi	r27, 0x01	; 1
    1362:	01 90       	ld	r0, Z+
    1364:	0d 92       	st	X+, r0
    1366:	8a 95       	dec	r24
    1368:	e1 f7       	brne	.-8      	; 0x1362 <send_keyboard+0x96>
}
    136a:	df 91       	pop	r29
    136c:	cf 91       	pop	r28
    136e:	08 95       	ret

00001370 <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    1370:	8b e1       	ldi	r24, 0x1B	; 27
    1372:	92 e0       	ldi	r25, 0x02	; 2
    1374:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    1378:	80 91 e0 01 	lds	r24, 0x01E0
    137c:	81 11       	cpse	r24, r1
    137e:	09 c0       	rjmp	.+18     	; 0x1392 <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    1380:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <USB_Disable>
        USB_Init();
    1384:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    1388:	80 91 e2 00 	lds	r24, 0x00E2
    138c:	84 60       	ori	r24, 0x04	; 4
    138e:	80 93 e2 00 	sts	0x00E2, r24
    1392:	08 95       	ret

00001394 <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    1394:	87 e1       	ldi	r24, 0x17	; 23
    1396:	92 e0       	ldi	r25, 0x02	; 2
    1398:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    139c:	10 92 e0 01 	sts	0x01E0, r1
    13a0:	08 95       	ret

000013a2 <EVENT_USB_Device_Reset>:
*/
}

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
    13a2:	83 e1       	ldi	r24, 0x13	; 19
    13a4:	92 e0       	ldi	r25, 0x02	; 2
    13a6:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <xputs>

000013aa <EVENT_USB_Device_Suspend>:
}

void EVENT_USB_Device_Suspend()
{
    print("[S]");
    13aa:	8f e0       	ldi	r24, 0x0F	; 15
    13ac:	92 e0       	ldi	r25, 0x02	; 2
    13ae:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <xputs>

000013b2 <EVENT_USB_Device_WakeUp>:
#endif
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    13b2:	8b e0       	ldi	r24, 0x0B	; 11
    13b4:	92 e0       	ldi	r25, 0x02	; 2
    13b6:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    suspend_wakeup_init();
    13ba:	0c 94 a2 1d 	jmp	0x3b44	; 0x3b44 <suspend_wakeup_init>

000013be <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
    13be:	80 91 53 01 	lds	r24, 0x0153
    13c2:	8f 5f       	subi	r24, 0xFF	; 255
    13c4:	80 93 53 01 	sts	0x0153, r24
    13c8:	62 e3       	ldi	r22, 0x32	; 50
    13ca:	0e 94 2a 29 	call	0x5254	; 0x5254 <__udivmodqi4>
    13ce:	91 11       	cpse	r25, r1
    13d0:	35 c0       	rjmp	.+106    	; 0x143c <EVENT_USB_Device_StartOfFrame+0x7e>
    count = 0;
    13d2:	10 92 53 01 	sts	0x0153, r1

    if (!console_flush) return;
    13d6:	80 91 54 01 	lds	r24, 0x0154
    13da:	88 23       	and	r24, r24
    13dc:	79 f1       	breq	.+94     	; 0x143c <EVENT_USB_Device_StartOfFrame+0x7e>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    13de:	80 91 e1 01 	lds	r24, 0x01E1
    13e2:	84 30       	cpi	r24, 0x04	; 4
    13e4:	49 f5       	brne	.+82     	; 0x1438 <EVENT_USB_Device_StartOfFrame+0x7a>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    13e6:	80 91 e9 00 	lds	r24, 0x00E9
    13ea:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    13ec:	90 91 ec 00 	lds	r25, 0x00EC
    13f0:	90 ff       	sbrs	r25, 0
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <EVENT_USB_Device_StartOfFrame+0x3a>
    13f4:	90 e8       	ldi	r25, 0x80	; 128
    13f6:	01 c0       	rjmp	.+2      	; 0x13fa <EVENT_USB_Device_StartOfFrame+0x3c>
    13f8:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    13fa:	98 2b       	or	r25, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13fc:	84 e0       	ldi	r24, 0x04	; 4
    13fe:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1402:	80 91 eb 00 	lds	r24, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1406:	80 ff       	sbrs	r24, 0
    1408:	14 c0       	rjmp	.+40     	; 0x1432 <EVENT_USB_Device_StartOfFrame+0x74>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    140a:	80 91 ee 00 	lds	r24, 0x00EE
    140e:	87 ff       	sbrs	r24, 7
    1410:	10 c0       	rjmp	.+32     	; 0x1432 <EVENT_USB_Device_StartOfFrame+0x74>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1412:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    1416:	85 ff       	sbrs	r24, 5
    1418:	03 c0       	rjmp	.+6      	; 0x1420 <EVENT_USB_Device_StartOfFrame+0x62>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    141a:	10 92 f1 00 	sts	0x00F1, r1
    141e:	f9 cf       	rjmp	.-14     	; 0x1412 <EVENT_USB_Device_StartOfFrame+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1420:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    1424:	80 ff       	sbrs	r24, 0
    1426:	05 c0       	rjmp	.+10     	; 0x1432 <EVENT_USB_Device_StartOfFrame+0x74>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1428:	80 91 e8 00 	lds	r24, 0x00E8
    142c:	8e 77       	andi	r24, 0x7E	; 126
    142e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1432:	9f 70       	andi	r25, 0x0F	; 15
    1434:	90 93 e9 00 	sts	0x00E9, r25
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
    1438:	10 92 54 01 	sts	0x0154, r1
    143c:	08 95       	ret

0000143e <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    143e:	42 e0       	ldi	r20, 0x02	; 2
    1440:	61 ec       	ldi	r22, 0xC1	; 193
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	0e 94 ba 0c 	call	0x1974	; 0x1974 <Endpoint_ConfigureEndpoint_Prv>
    1448:	42 e0       	ldi	r20, 0x02	; 2
    144a:	61 ec       	ldi	r22, 0xC1	; 193
    144c:	82 e0       	ldi	r24, 0x02	; 2
    144e:	0e 94 ba 0c 	call	0x1974	; 0x1974 <Endpoint_ConfigureEndpoint_Prv>
    1452:	42 e0       	ldi	r20, 0x02	; 2
    1454:	61 ec       	ldi	r22, 0xC1	; 193
    1456:	83 e0       	ldi	r24, 0x03	; 3
    1458:	0e 94 ba 0c 	call	0x1974	; 0x1974 <Endpoint_ConfigureEndpoint_Prv>
    145c:	42 e2       	ldi	r20, 0x22	; 34
    145e:	61 ec       	ldi	r22, 0xC1	; 193
    1460:	84 e0       	ldi	r24, 0x04	; 4
    1462:	0e 94 ba 0c 	call	0x1974	; 0x1974 <Endpoint_ConfigureEndpoint_Prv>
    1466:	42 e1       	ldi	r20, 0x12	; 18
    1468:	61 ec       	ldi	r22, 0xC1	; 193
    146a:	85 e0       	ldi	r24, 0x05	; 5
    146c:	0c 94 ba 0c 	jmp	0x1974	; 0x1974 <Endpoint_ConfigureEndpoint_Prv>

00001470 <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    1470:	80 91 e3 01 	lds	r24, 0x01E3
    1474:	83 30       	cpi	r24, 0x03	; 3
    1476:	09 f4       	brne	.+2      	; 0x147a <EVENT_USB_Device_ControlRequest+0xa>
    1478:	55 c0       	rjmp	.+170    	; 0x1524 <EVENT_USB_Device_ControlRequest+0xb4>
    147a:	30 f4       	brcc	.+12     	; 0x1488 <EVENT_USB_Device_ControlRequest+0x18>
    147c:	81 30       	cpi	r24, 0x01	; 1
    147e:	71 f0       	breq	.+28     	; 0x149c <EVENT_USB_Device_ControlRequest+0x2c>
    1480:	82 30       	cpi	r24, 0x02	; 2
    1482:	09 f4       	brne	.+2      	; 0x1486 <EVENT_USB_Device_ControlRequest+0x16>
    1484:	8e c0       	rjmp	.+284    	; 0x15a2 <EVENT_USB_Device_ControlRequest+0x132>
    1486:	08 95       	ret
    1488:	8a 30       	cpi	r24, 0x0A	; 10
    148a:	09 f4       	brne	.+2      	; 0x148e <EVENT_USB_Device_ControlRequest+0x1e>
    148c:	7a c0       	rjmp	.+244    	; 0x1582 <EVENT_USB_Device_ControlRequest+0x112>
    148e:	8b 30       	cpi	r24, 0x0B	; 11
    1490:	09 f4       	brne	.+2      	; 0x1494 <EVENT_USB_Device_ControlRequest+0x24>
    1492:	60 c0       	rjmp	.+192    	; 0x1554 <EVENT_USB_Device_ControlRequest+0xe4>
    1494:	89 30       	cpi	r24, 0x09	; 9
    1496:	09 f0       	breq	.+2      	; 0x149a <EVENT_USB_Device_ControlRequest+0x2a>
    1498:	9c c0       	rjmp	.+312    	; 0x15d2 <EVENT_USB_Device_ControlRequest+0x162>
    149a:	20 c0       	rjmp	.+64     	; 0x14dc <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    149c:	80 91 e2 01 	lds	r24, 0x01E2
    14a0:	81 3a       	cpi	r24, 0xA1	; 161
    14a2:	09 f0       	breq	.+2      	; 0x14a6 <EVENT_USB_Device_ControlRequest+0x36>
    14a4:	96 c0       	rjmp	.+300    	; 0x15d2 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    14a6:	80 91 e8 00 	lds	r24, 0x00E8
    14aa:	87 7f       	andi	r24, 0xF7	; 247
    14ac:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    14b0:	80 91 e6 01 	lds	r24, 0x01E6
    14b4:	90 91 e7 01 	lds	r25, 0x01E7
    14b8:	89 2b       	or	r24, r25
    14ba:	21 f0       	breq	.+8      	; 0x14c4 <EVENT_USB_Device_ControlRequest+0x54>
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;
    14bc:	60 e0       	ldi	r22, 0x00	; 0
/** Event handler for the USB_ControlRequest event.
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	03 c0       	rjmp	.+6      	; 0x14ca <EVENT_USB_Device_ControlRequest+0x5a>
                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
                    ReportSize = sizeof(keyboard_report_sent);
    14c4:	60 e1       	ldi	r22, 0x10	; 16

                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
    14c6:	85 e5       	ldi	r24, 0x55	; 85
    14c8:	91 e0       	ldi	r25, 0x01	; 1
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    14ca:	70 e0       	ldi	r23, 0x00	; 0
    14cc:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    14d0:	80 91 e8 00 	lds	r24, 0x00E8
    14d4:	8b 77       	andi	r24, 0x7B	; 123
    14d6:	80 93 e8 00 	sts	0x00E8, r24
    14da:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    14dc:	80 91 e2 01 	lds	r24, 0x01E2
    14e0:	81 32       	cpi	r24, 0x21	; 33
    14e2:	09 f0       	breq	.+2      	; 0x14e6 <EVENT_USB_Device_ControlRequest+0x76>
    14e4:	76 c0       	rjmp	.+236    	; 0x15d2 <EVENT_USB_Device_ControlRequest+0x162>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    14e6:	80 91 e6 01 	lds	r24, 0x01E6
    14ea:	90 91 e7 01 	lds	r25, 0x01E7
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	19 f0       	breq	.+6      	; 0x14f8 <EVENT_USB_Device_ControlRequest+0x88>
    14f2:	04 97       	sbiw	r24, 0x04	; 4
    14f4:	09 f0       	breq	.+2      	; 0x14f8 <EVENT_USB_Device_ControlRequest+0x88>
    14f6:	6d c0       	rjmp	.+218    	; 0x15d2 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    14f8:	80 91 e8 00 	lds	r24, 0x00E8
    14fc:	87 7f       	andi	r24, 0xF7	; 247
    14fe:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1502:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    1506:	82 fd       	sbrc	r24, 2
    1508:	05 c0       	rjmp	.+10     	; 0x1514 <EVENT_USB_Device_ControlRequest+0xa4>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    150a:	80 91 e1 01 	lds	r24, 0x01E1
    150e:	81 11       	cpse	r24, r1
    1510:	f8 cf       	rjmp	.-16     	; 0x1502 <EVENT_USB_Device_ControlRequest+0x92>
    1512:	5f c0       	rjmp	.+190    	; 0x15d2 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1514:	80 91 f1 00 	lds	r24, 0x00F1
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    1518:	80 93 65 01 	sts	0x0165, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    151c:	80 91 e8 00 	lds	r24, 0x00E8
    1520:	8b 77       	andi	r24, 0x7B	; 123
    1522:	53 c0       	rjmp	.+166    	; 0x15ca <EVENT_USB_Device_ControlRequest+0x15a>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1524:	80 91 e2 01 	lds	r24, 0x01E2
    1528:	81 3a       	cpi	r24, 0xA1	; 161
    152a:	09 f0       	breq	.+2      	; 0x152e <EVENT_USB_Device_ControlRequest+0xbe>
    152c:	52 c0       	rjmp	.+164    	; 0x15d2 <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    152e:	80 91 e6 01 	lds	r24, 0x01E6
    1532:	90 91 e7 01 	lds	r25, 0x01E7
    1536:	89 2b       	or	r24, r25
    1538:	09 f0       	breq	.+2      	; 0x153c <EVENT_USB_Device_ControlRequest+0xcc>
    153a:	4b c0       	rjmp	.+150    	; 0x15d2 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    153c:	80 91 e8 00 	lds	r24, 0x00E8
    1540:	87 7f       	andi	r24, 0xF7	; 247
    1542:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1546:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    154a:	80 ff       	sbrs	r24, 0
    154c:	fc cf       	rjmp	.-8      	; 0x1546 <EVENT_USB_Device_ControlRequest+0xd6>
                    Endpoint_Write_8(keyboard_protocol);
    154e:	80 91 0a 01 	lds	r24, 0x010A
    1552:	36 c0       	rjmp	.+108    	; 0x15c0 <EVENT_USB_Device_ControlRequest+0x150>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1554:	80 91 e2 01 	lds	r24, 0x01E2
    1558:	81 32       	cpi	r24, 0x21	; 33
    155a:	d9 f5       	brne	.+118    	; 0x15d2 <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    155c:	80 91 e6 01 	lds	r24, 0x01E6
    1560:	90 91 e7 01 	lds	r25, 0x01E7
    1564:	89 2b       	or	r24, r25
    1566:	a9 f5       	brne	.+106    	; 0x15d2 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1568:	80 91 e8 00 	lds	r24, 0x00E8
    156c:	87 7f       	andi	r24, 0xF7	; 247
    156e:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    1572:	0e 94 ef 0c 	call	0x19de	; 0x19de <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    1576:	80 91 e4 01 	lds	r24, 0x01E4
    157a:	80 93 0a 01 	sts	0x010A, r24
                    clear_keyboard();
    157e:	0c 94 6f 15 	jmp	0x2ade	; 0x2ade <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1582:	80 91 e2 01 	lds	r24, 0x01E2
    1586:	81 32       	cpi	r24, 0x21	; 33
    1588:	21 f5       	brne	.+72     	; 0x15d2 <EVENT_USB_Device_ControlRequest+0x162>
    158a:	80 91 e8 00 	lds	r24, 0x00E8
    158e:	87 7f       	andi	r24, 0xF7	; 247
    1590:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    1594:	0e 94 ef 0c 	call	0x19de	; 0x19de <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    1598:	80 91 e5 01 	lds	r24, 0x01E5
    159c:	80 93 66 01 	sts	0x0166, r24
    15a0:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    15a2:	80 91 e2 01 	lds	r24, 0x01E2
    15a6:	81 3a       	cpi	r24, 0xA1	; 161
    15a8:	a1 f4       	brne	.+40     	; 0x15d2 <EVENT_USB_Device_ControlRequest+0x162>
    15aa:	80 91 e8 00 	lds	r24, 0x00E8
    15ae:	87 7f       	andi	r24, 0xF7	; 247
    15b0:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    15b4:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    15b8:	80 ff       	sbrs	r24, 0
    15ba:	fc cf       	rjmp	.-8      	; 0x15b4 <EVENT_USB_Device_ControlRequest+0x144>
                Endpoint_Write_8(keyboard_idle);
    15bc:	80 91 66 01 	lds	r24, 0x0166
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    15c0:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    15c4:	80 91 e8 00 	lds	r24, 0x00E8
    15c8:	8e 77       	andi	r24, 0x7E	; 126
    15ca:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    15ce:	0c 94 ef 0c 	jmp	0x19de	; 0x19de <Endpoint_ClearStatusStage>
    15d2:	08 95       	ret

000015d4 <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    15d4:	84 b7       	in	r24, 0x34	; 52
    15d6:	87 7f       	andi	r24, 0xF7	; 247
    15d8:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
    15da:	88 e1       	ldi	r24, 0x18	; 24
    15dc:	0f b6       	in	r0, 0x3f	; 63
    15de:	f8 94       	cli
    15e0:	80 93 60 00 	sts	0x0060, r24
    15e4:	10 92 60 00 	sts	0x0060, r1
    15e8:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	80 e8       	ldi	r24, 0x80	; 128
    15ee:	0f b6       	in	r0, 0x3f	; 63
    15f0:	f8 94       	cli
    15f2:	80 93 61 00 	sts	0x0061, r24
    15f6:	90 93 61 00 	sts	0x0061, r25
    15fa:	0f be       	out	0x3f, r0	; 63

int main(void)  __attribute__ ((weak));
int main(void)
{
    setup_mcu();
    keyboard_setup();
    15fc:	0e 94 81 10 	call	0x2102	; 0x2102 <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    1600:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <USB_Disable>

    USB_Init();
    1604:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <USB_Init>
    1608:	80 91 e2 00 	lds	r24, 0x00E2
    160c:	84 60       	ori	r24, 0x04	; 4
    160e:	80 93 e2 00 	sts	0x00E2, r24

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar);
    1612:	88 e7       	ldi	r24, 0x78	; 120
    1614:	98 e0       	ldi	r25, 0x08	; 8
    1616:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <print_set_sendchar>
int main(void)
{
    setup_mcu();
    keyboard_setup();
    setup_usb();
    sei();
    161a:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    161c:	80 91 e1 01 	lds	r24, 0x01E1
    1620:	84 30       	cpi	r24, 0x04	; 4
    1622:	19 f0       	breq	.+6      	; 0x162a <main+0x56>
#if defined(INTERRUPT_CONTROL_ENDPOINT)
        ;
#else
        USB_USBTask();
    1624:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <USB_USBTask>
    1628:	f9 cf       	rjmp	.-14     	; 0x161c <main+0x48>
#endif
    }
    print("USB configured.\n");
    162a:	8a ef       	ldi	r24, 0xFA	; 250
    162c:	91 e0       	ldi	r25, 0x01	; 1
    162e:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>

    /* init modules */
    keyboard_init();
    1632:	0e 94 83 10 	call	0x2106	; 0x2106 <keyboard_init>
    host_set_driver(&lufa_driver);
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	91 e0       	ldi	r25, 0x01	; 1
    163a:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    163e:	89 ee       	ldi	r24, 0xE9	; 233
    1640:	91 e0       	ldi	r25, 0x01	; 1
    1642:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    1646:	80 91 e1 01 	lds	r24, 0x01E1
    164a:	85 30       	cpi	r24, 0x05	; 5
    164c:	89 f4       	brne	.+34     	; 0x1670 <main+0x9c>
            print("[s]");
    164e:	85 ee       	ldi	r24, 0xE5	; 229
    1650:	91 e0       	ldi	r25, 0x01	; 1
    1652:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
            suspend_power_down();
    1656:	0e 94 67 1d 	call	0x3ace	; 0x3ace <suspend_power_down>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    165a:	80 91 df 01 	lds	r24, 0x01DF
    165e:	88 23       	and	r24, r24
    1660:	91 f3       	breq	.-28     	; 0x1646 <main+0x72>
    1662:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <suspend_wakeup_condition>
    1666:	88 23       	and	r24, r24
    1668:	71 f3       	breq	.-36     	; 0x1646 <main+0x72>
                    USB_Device_SendRemoteWakeup();
    166a:	0e 94 96 0b 	call	0x172c	; 0x172c <USB_Device_SendRemoteWakeup>
    166e:	eb cf       	rjmp	.-42     	; 0x1646 <main+0x72>
            }
        }

        keyboard_task();
    1670:	0e 94 b1 10 	call	0x2162	; 0x2162 <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
    1674:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <USB_USBTask>
#endif
    }
    1678:	e6 cf       	rjmp	.-52     	; 0x1646 <main+0x72>

0000167a <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    167a:	29 2f       	mov	r18, r25
    167c:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    167e:	23 30       	cpi	r18, 0x03	; 3
    1680:	31 05       	cpc	r19, r1
    1682:	a9 f0       	breq	.+42     	; 0x16ae <CALLBACK_USB_GetDescriptor+0x34>
    1684:	6c f4       	brge	.+26     	; 0x16a0 <CALLBACK_USB_GetDescriptor+0x26>
    1686:	21 30       	cpi	r18, 0x01	; 1
    1688:	31 05       	cpc	r19, r1
    168a:	09 f4       	brne	.+2      	; 0x168e <CALLBACK_USB_GetDescriptor+0x14>
    168c:	42 c0       	rjmp	.+132    	; 0x1712 <CALLBACK_USB_GetDescriptor+0x98>
    168e:	22 30       	cpi	r18, 0x02	; 2
    1690:	31 05       	cpc	r19, r1
    1692:	09 f0       	breq	.+2      	; 0x1696 <CALLBACK_USB_GetDescriptor+0x1c>
    1694:	43 c0       	rjmp	.+134    	; 0x171c <CALLBACK_USB_GetDescriptor+0xa2>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    1696:	8d e8       	ldi	r24, 0x8D	; 141
    1698:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    169a:	27 e4       	ldi	r18, 0x47	; 71
    169c:	32 e0       	ldi	r19, 0x02	; 2
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    169e:	42 c0       	rjmp	.+132    	; 0x1724 <CALLBACK_USB_GetDescriptor+0xaa>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    16a0:	21 32       	cpi	r18, 0x21	; 33
    16a2:	31 05       	cpc	r19, r1
    16a4:	c9 f0       	breq	.+50     	; 0x16d8 <CALLBACK_USB_GetDescriptor+0x5e>
    16a6:	22 32       	cpi	r18, 0x22	; 34
    16a8:	31 05       	cpc	r19, r1
    16aa:	19 f1       	breq	.+70     	; 0x16f2 <CALLBACK_USB_GetDescriptor+0x78>
    16ac:	37 c0       	rjmp	.+110    	; 0x171c <CALLBACK_USB_GetDescriptor+0xa2>
    16ae:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    16b0:	81 30       	cpi	r24, 0x01	; 1
    16b2:	91 05       	cpc	r25, r1
    16b4:	41 f0       	breq	.+16     	; 0x16c6 <CALLBACK_USB_GetDescriptor+0x4c>
    16b6:	82 30       	cpi	r24, 0x02	; 2
    16b8:	91 05       	cpc	r25, r1
    16ba:	41 f0       	breq	.+16     	; 0x16cc <CALLBACK_USB_GetDescriptor+0x52>
    16bc:	89 2b       	or	r24, r25
    16be:	71 f5       	brne	.+92     	; 0x171c <CALLBACK_USB_GetDescriptor+0xa2>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    16c0:	e3 e4       	ldi	r30, 0x43	; 67
    16c2:	f2 e0       	ldi	r31, 0x02	; 2
    16c4:	05 c0       	rjmp	.+10     	; 0x16d0 <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    16c6:	e3 e3       	ldi	r30, 0x33	; 51
    16c8:	f2 e0       	ldi	r31, 0x02	; 2
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    16cc:	ef e1       	ldi	r30, 0x1F	; 31
    16ce:	f2 e0       	ldi	r31, 0x02	; 2
    16d0:	84 91       	lpm	r24, Z
    16d2:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    16d4:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    16d6:	26 c0       	rjmp	.+76     	; 0x1724 <CALLBACK_USB_GetDescriptor+0xaa>
    16d8:	65 30       	cpi	r22, 0x05	; 5
    16da:	00 f5       	brcc	.+64     	; 0x171c <CALLBACK_USB_GetDescriptor+0xa2>
    16dc:	e6 2f       	mov	r30, r22
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	ee 0f       	add	r30, r30
    16e2:	ff 1f       	adc	r31, r31
    16e4:	ed 5d       	subi	r30, 0xDD	; 221
    16e6:	fe 4f       	sbci	r31, 0xFE	; 254
    16e8:	20 81       	ld	r18, Z
    16ea:	31 81       	ldd	r19, Z+1	; 0x01
    16ec:	89 e0       	ldi	r24, 0x09	; 9
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	19 c0       	rjmp	.+50     	; 0x1724 <CALLBACK_USB_GetDescriptor+0xaa>
    16f2:	65 30       	cpi	r22, 0x05	; 5
    16f4:	98 f4       	brcc	.+38     	; 0x171c <CALLBACK_USB_GetDescriptor+0xa2>
    16f6:	e6 2f       	mov	r30, r22
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	df 01       	movw	r26, r30
    16fc:	aa 0f       	add	r26, r26
    16fe:	bb 1f       	adc	r27, r27
    1700:	a7 5e       	subi	r26, 0xE7	; 231
    1702:	be 4f       	sbci	r27, 0xFE	; 254
    1704:	2d 91       	ld	r18, X+
    1706:	3c 91       	ld	r19, X
    1708:	ec 5e       	subi	r30, 0xEC	; 236
    170a:	fe 4f       	sbci	r31, 0xFE	; 254
    170c:	80 81       	ld	r24, Z
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	09 c0       	rjmp	.+18     	; 0x1724 <CALLBACK_USB_GetDescriptor+0xaa>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    1712:	82 e1       	ldi	r24, 0x12	; 18
    1714:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    1716:	24 ed       	ldi	r18, 0xD4	; 212
    1718:	32 e0       	ldi	r19, 0x02	; 2
    171a:	04 c0       	rjmp	.+8      	; 0x1724 <CALLBACK_USB_GetDescriptor+0xaa>
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    1724:	fa 01       	movw	r30, r20
    1726:	31 83       	std	Z+1, r19	; 0x01
    1728:	20 83       	st	Z, r18
    return Size;
}
    172a:	08 95       	ret

0000172c <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    172c:	80 e1       	ldi	r24, 0x10	; 16
    172e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1730:	82 e1       	ldi	r24, 0x12	; 18
    1732:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    1734:	09 b4       	in	r0, 0x29	; 41
    1736:	00 fe       	sbrs	r0, 0
    1738:	fd cf       	rjmp	.-6      	; 0x1734 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    173a:	80 91 d8 00 	lds	r24, 0x00D8
    173e:	8f 7d       	andi	r24, 0xDF	; 223
    1740:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    1744:	80 91 e0 00 	lds	r24, 0x00E0
    1748:	82 60       	ori	r24, 0x02	; 2
    174a:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    174e:	80 91 e0 00 	lds	r24, 0x00E0
    1752:	81 fd       	sbrc	r24, 1
    1754:	fc cf       	rjmp	.-8      	; 0x174e <USB_Device_SendRemoteWakeup+0x22>
}
    1756:	08 95       	ret

00001758 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1758:	cf 92       	push	r12
    175a:	df 92       	push	r13
    175c:	ef 92       	push	r14
    175e:	ff 92       	push	r15
    1760:	0f 93       	push	r16
    1762:	1f 93       	push	r17
    1764:	cf 93       	push	r28
    1766:	df 93       	push	r29
    1768:	7c 01       	movw	r14, r24
    176a:	8b 01       	movw	r16, r22
    176c:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    176e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <Endpoint_WaitUntilReady>
    1772:	81 11       	cpse	r24, r1
    1774:	33 c0       	rjmp	.+102    	; 0x17dc <Endpoint_Write_Stream_LE+0x84>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1776:	20 97       	sbiw	r28, 0x00	; 0
    1778:	31 f0       	breq	.+12     	; 0x1786 <Endpoint_Write_Stream_LE+0x2e>
	{
		Length -= *BytesProcessed;
    177a:	88 81       	ld	r24, Y
    177c:	99 81       	ldd	r25, Y+1	; 0x01
    177e:	08 1b       	sub	r16, r24
    1780:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1782:	e8 0e       	add	r14, r24
    1784:	f9 1e       	adc	r15, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1786:	c1 2c       	mov	r12, r1
    1788:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    178a:	01 15       	cp	r16, r1
    178c:	11 05       	cpc	r17, r1
    178e:	29 f1       	breq	.+74     	; 0x17da <Endpoint_Write_Stream_LE+0x82>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1790:	80 91 e8 00 	lds	r24, 0x00E8
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1794:	85 fd       	sbrc	r24, 5
    1796:	16 c0       	rjmp	.+44     	; 0x17c4 <Endpoint_Write_Stream_LE+0x6c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1798:	80 91 e8 00 	lds	r24, 0x00E8
    179c:	8e 77       	andi	r24, 0x7E	; 126
    179e:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    17a2:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
    17a6:	20 97       	sbiw	r28, 0x00	; 0
    17a8:	41 f0       	breq	.+16     	; 0x17ba <Endpoint_Write_Stream_LE+0x62>
			{
				*BytesProcessed += BytesInTransfer;
    17aa:	88 81       	ld	r24, Y
    17ac:	99 81       	ldd	r25, Y+1	; 0x01
    17ae:	8c 0d       	add	r24, r12
    17b0:	9d 1d       	adc	r25, r13
    17b2:	99 83       	std	Y+1, r25	; 0x01
    17b4:	88 83       	st	Y, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    17b6:	85 e0       	ldi	r24, 0x05	; 5
    17b8:	11 c0       	rjmp	.+34     	; 0x17dc <Endpoint_Write_Stream_LE+0x84>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    17ba:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <Endpoint_WaitUntilReady>
    17be:	88 23       	and	r24, r24
    17c0:	21 f3       	breq	.-56     	; 0x178a <Endpoint_Write_Stream_LE+0x32>
    17c2:	0c c0       	rjmp	.+24     	; 0x17dc <Endpoint_Write_Stream_LE+0x84>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    17c4:	f7 01       	movw	r30, r14
    17c6:	81 91       	ld	r24, Z+
    17c8:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    17ca:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    17ce:	01 50       	subi	r16, 0x01	; 1
    17d0:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    17d2:	ff ef       	ldi	r31, 0xFF	; 255
    17d4:	cf 1a       	sub	r12, r31
    17d6:	df 0a       	sbc	r13, r31
    17d8:	d8 cf       	rjmp	.-80     	; 0x178a <Endpoint_Write_Stream_LE+0x32>
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    17da:	80 e0       	ldi	r24, 0x00	; 0
}
    17dc:	df 91       	pop	r29
    17de:	cf 91       	pop	r28
    17e0:	1f 91       	pop	r17
    17e2:	0f 91       	pop	r16
    17e4:	ff 90       	pop	r15
    17e6:	ef 90       	pop	r14
    17e8:	df 90       	pop	r13
    17ea:	cf 90       	pop	r12
    17ec:	08 95       	ret

000017ee <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    17ee:	20 91 e8 01 	lds	r18, 0x01E8
    17f2:	30 91 e9 01 	lds	r19, 0x01E9
    17f6:	26 17       	cp	r18, r22
    17f8:	37 07       	cpc	r19, r23
    17fa:	48 f0       	brcs	.+18     	; 0x180e <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    17fc:	61 15       	cp	r22, r1
    17fe:	71 05       	cpc	r23, r1
    1800:	39 f4       	brne	.+14     	; 0x1810 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1802:	20 91 e8 00 	lds	r18, 0x00E8
    1806:	2e 77       	andi	r18, 0x7E	; 126
    1808:	20 93 e8 00 	sts	0x00E8, r18
    180c:	01 c0       	rjmp	.+2      	; 0x1810 <Endpoint_Write_Control_Stream_LE+0x22>
    180e:	b9 01       	movw	r22, r18
    1810:	fc 01       	movw	r30, r24
    1812:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1814:	61 15       	cp	r22, r1
    1816:	71 05       	cpc	r23, r1
    1818:	b9 f1       	breq	.+110    	; 0x1888 <Endpoint_Write_Control_Stream_LE+0x9a>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    181a:	80 91 e1 01 	lds	r24, 0x01E1

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    181e:	88 23       	and	r24, r24
    1820:	09 f4       	brne	.+2      	; 0x1824 <Endpoint_Write_Control_Stream_LE+0x36>
    1822:	40 c0       	rjmp	.+128    	; 0x18a4 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1824:	85 30       	cpi	r24, 0x05	; 5
    1826:	09 f4       	brne	.+2      	; 0x182a <Endpoint_Write_Control_Stream_LE+0x3c>
    1828:	3f c0       	rjmp	.+126    	; 0x18a8 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    182a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    182e:	83 fd       	sbrc	r24, 3
    1830:	3d c0       	rjmp	.+122    	; 0x18ac <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1832:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1836:	82 ff       	sbrs	r24, 2
    1838:	06 c0       	rjmp	.+12     	; 0x1846 <Endpoint_Write_Control_Stream_LE+0x58>
    183a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    183e:	82 ff       	sbrs	r24, 2
    1840:	26 c0       	rjmp	.+76     	; 0x188e <Endpoint_Write_Control_Stream_LE+0xa0>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1846:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    184a:	80 ff       	sbrs	r24, 0
    184c:	e3 cf       	rjmp	.-58     	; 0x1814 <Endpoint_Write_Control_Stream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    184e:	20 91 f3 00 	lds	r18, 0x00F3
    1852:	80 91 f2 00 	lds	r24, 0x00F2
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    185a:	61 15       	cp	r22, r1
    185c:	71 05       	cpc	r23, r1
    185e:	51 f0       	breq	.+20     	; 0x1874 <Endpoint_Write_Control_Stream_LE+0x86>
    1860:	88 30       	cpi	r24, 0x08	; 8
    1862:	91 05       	cpc	r25, r1
    1864:	38 f4       	brcc	.+14     	; 0x1874 <Endpoint_Write_Control_Stream_LE+0x86>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1866:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1868:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    186c:	61 50       	subi	r22, 0x01	; 1
    186e:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1870:	01 96       	adiw	r24, 0x01	; 1
    1872:	f3 cf       	rjmp	.-26     	; 0x185a <Endpoint_Write_Control_Stream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1874:	21 e0       	ldi	r18, 0x01	; 1
    1876:	08 97       	sbiw	r24, 0x08	; 8
    1878:	09 f0       	breq	.+2      	; 0x187c <Endpoint_Write_Control_Stream_LE+0x8e>
    187a:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    187c:	80 91 e8 00 	lds	r24, 0x00E8
    1880:	8e 77       	andi	r24, 0x7E	; 126
    1882:	80 93 e8 00 	sts	0x00E8, r24
    1886:	c6 cf       	rjmp	.-116    	; 0x1814 <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1888:	21 11       	cpse	r18, r1
    188a:	c7 cf       	rjmp	.-114    	; 0x181a <Endpoint_Write_Control_Stream_LE+0x2c>
    188c:	d6 cf       	rjmp	.-84     	; 0x183a <Endpoint_Write_Control_Stream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    188e:	80 91 e1 01 	lds	r24, 0x01E1

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1892:	88 23       	and	r24, r24
    1894:	39 f0       	breq	.+14     	; 0x18a4 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1896:	85 30       	cpi	r24, 0x05	; 5
    1898:	39 f0       	breq	.+14     	; 0x18a8 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    189a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    189e:	83 ff       	sbrs	r24, 3
    18a0:	cc cf       	rjmp	.-104    	; 0x183a <Endpoint_Write_Control_Stream_LE+0x4c>
    18a2:	04 c0       	rjmp	.+8      	; 0x18ac <Endpoint_Write_Control_Stream_LE+0xbe>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    18a4:	82 e0       	ldi	r24, 0x02	; 2
    18a6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    18a8:	83 e0       	ldi	r24, 0x03	; 3
    18aa:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    18ac:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    18ae:	08 95       	ret

000018b0 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    18b0:	20 91 e8 01 	lds	r18, 0x01E8
    18b4:	30 91 e9 01 	lds	r19, 0x01E9
    18b8:	26 17       	cp	r18, r22
    18ba:	37 07       	cpc	r19, r23
    18bc:	48 f0       	brcs	.+18     	; 0x18d0 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    18be:	61 15       	cp	r22, r1
    18c0:	71 05       	cpc	r23, r1
    18c2:	39 f4       	brne	.+14     	; 0x18d2 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18c4:	20 91 e8 00 	lds	r18, 0x00E8
    18c8:	2e 77       	andi	r18, 0x7E	; 126
    18ca:	20 93 e8 00 	sts	0x00E8, r18
    18ce:	01 c0       	rjmp	.+2      	; 0x18d2 <Endpoint_Write_Control_PStream_LE+0x22>
    18d0:	b9 01       	movw	r22, r18
    18d2:	fc 01       	movw	r30, r24
    18d4:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    18d6:	61 15       	cp	r22, r1
    18d8:	71 05       	cpc	r23, r1
    18da:	c1 f1       	breq	.+112    	; 0x194c <Endpoint_Write_Control_PStream_LE+0x9c>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    18dc:	80 91 e1 01 	lds	r24, 0x01E1

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    18e0:	88 23       	and	r24, r24
    18e2:	09 f4       	brne	.+2      	; 0x18e6 <Endpoint_Write_Control_PStream_LE+0x36>
    18e4:	41 c0       	rjmp	.+130    	; 0x1968 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    18e6:	85 30       	cpi	r24, 0x05	; 5
    18e8:	09 f4       	brne	.+2      	; 0x18ec <Endpoint_Write_Control_PStream_LE+0x3c>
    18ea:	40 c0       	rjmp	.+128    	; 0x196c <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    18ec:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    18f0:	83 fd       	sbrc	r24, 3
    18f2:	3e c0       	rjmp	.+124    	; 0x1970 <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    18f4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    18f8:	82 ff       	sbrs	r24, 2
    18fa:	06 c0       	rjmp	.+12     	; 0x1908 <Endpoint_Write_Control_PStream_LE+0x58>
    18fc:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1900:	82 ff       	sbrs	r24, 2
    1902:	27 c0       	rjmp	.+78     	; 0x1952 <Endpoint_Write_Control_PStream_LE+0xa2>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1908:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    190c:	80 ff       	sbrs	r24, 0
    190e:	e3 cf       	rjmp	.-58     	; 0x18d6 <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1910:	20 91 f3 00 	lds	r18, 0x00F3
    1914:	80 91 f2 00 	lds	r24, 0x00F2
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    191c:	61 15       	cp	r22, r1
    191e:	71 05       	cpc	r23, r1
    1920:	59 f0       	breq	.+22     	; 0x1938 <Endpoint_Write_Control_PStream_LE+0x88>
    1922:	88 30       	cpi	r24, 0x08	; 8
    1924:	91 05       	cpc	r25, r1
    1926:	40 f4       	brcc	.+16     	; 0x1938 <Endpoint_Write_Control_PStream_LE+0x88>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1928:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    192a:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    192e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1930:	61 50       	subi	r22, 0x01	; 1
    1932:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1934:	01 96       	adiw	r24, 0x01	; 1
    1936:	f2 cf       	rjmp	.-28     	; 0x191c <Endpoint_Write_Control_PStream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1938:	21 e0       	ldi	r18, 0x01	; 1
    193a:	08 97       	sbiw	r24, 0x08	; 8
    193c:	09 f0       	breq	.+2      	; 0x1940 <Endpoint_Write_Control_PStream_LE+0x90>
    193e:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1940:	80 91 e8 00 	lds	r24, 0x00E8
    1944:	8e 77       	andi	r24, 0x7E	; 126
    1946:	80 93 e8 00 	sts	0x00E8, r24
    194a:	c5 cf       	rjmp	.-118    	; 0x18d6 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    194c:	21 11       	cpse	r18, r1
    194e:	c6 cf       	rjmp	.-116    	; 0x18dc <Endpoint_Write_Control_PStream_LE+0x2c>
    1950:	d5 cf       	rjmp	.-86     	; 0x18fc <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1952:	80 91 e1 01 	lds	r24, 0x01E1

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1956:	88 23       	and	r24, r24
    1958:	39 f0       	breq	.+14     	; 0x1968 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    195a:	85 30       	cpi	r24, 0x05	; 5
    195c:	39 f0       	breq	.+14     	; 0x196c <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    195e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1962:	83 ff       	sbrs	r24, 3
    1964:	cb cf       	rjmp	.-106    	; 0x18fc <Endpoint_Write_Control_PStream_LE+0x4c>
    1966:	04 c0       	rjmp	.+8      	; 0x1970 <Endpoint_Write_Control_PStream_LE+0xc0>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1968:	82 e0       	ldi	r24, 0x02	; 2
    196a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    196c:	83 e0       	ldi	r24, 0x03	; 3
    196e:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1970:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1972:	08 95       	ret

00001974 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1974:	98 2f       	mov	r25, r24
    1976:	97 30       	cpi	r25, 0x07	; 7
    1978:	58 f5       	brcc	.+86     	; 0x19d0 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    197a:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    197e:	98 17       	cp	r25, r24
    1980:	39 f0       	breq	.+14     	; 0x1990 <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    1982:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1986:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    198a:	50 91 f0 00 	lds	r21, 0x00F0
    198e:	03 c0       	rjmp	.+6      	; 0x1996 <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    1990:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    1992:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    1994:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1996:	21 ff       	sbrs	r18, 1
    1998:	19 c0       	rjmp	.+50     	; 0x19cc <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    199a:	30 91 eb 00 	lds	r19, 0x00EB
    199e:	3e 7f       	andi	r19, 0xFE	; 254
    19a0:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    19a4:	30 91 ed 00 	lds	r19, 0x00ED
    19a8:	3d 7f       	andi	r19, 0xFD	; 253
    19aa:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    19ae:	30 91 eb 00 	lds	r19, 0x00EB
    19b2:	31 60       	ori	r19, 0x01	; 1
    19b4:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    19b8:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    19bc:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    19c0:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    19c4:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    19c8:	27 ff       	sbrs	r18, 7
    19ca:	07 c0       	rjmp	.+14     	; 0x19da <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    19cc:	9f 5f       	subi	r25, 0xFF	; 255
    19ce:	d3 cf       	rjmp	.-90     	; 0x1976 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    19d0:	8f 70       	andi	r24, 0x0F	; 15
    19d2:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    19da:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    19dc:	08 95       	ret

000019de <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    19de:	80 91 e2 01 	lds	r24, 0x01E2
    19e2:	87 fd       	sbrc	r24, 7
    19e4:	05 c0       	rjmp	.+10     	; 0x19f0 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    19e6:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    19ea:	80 ff       	sbrs	r24, 0
    19ec:	0e c0       	rjmp	.+28     	; 0x1a0a <Endpoint_ClearStatusStage+0x2c>
    19ee:	12 c0       	rjmp	.+36     	; 0x1a14 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19f0:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    19f4:	82 fd       	sbrc	r24, 2
    19f6:	05 c0       	rjmp	.+10     	; 0x1a02 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    19f8:	80 91 e1 01 	lds	r24, 0x01E1
    19fc:	81 11       	cpse	r24, r1
    19fe:	f8 cf       	rjmp	.-16     	; 0x19f0 <Endpoint_ClearStatusStage+0x12>
    1a00:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1a02:	80 91 e8 00 	lds	r24, 0x00E8
    1a06:	8b 77       	andi	r24, 0x7B	; 123
    1a08:	08 c0       	rjmp	.+16     	; 0x1a1a <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1a0a:	80 91 e1 01 	lds	r24, 0x01E1
    1a0e:	81 11       	cpse	r24, r1
    1a10:	ea cf       	rjmp	.-44     	; 0x19e6 <Endpoint_ClearStatusStage+0x8>
    1a12:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a14:	80 91 e8 00 	lds	r24, 0x00E8
    1a18:	8e 77       	andi	r24, 0x7E	; 126
    1a1a:	80 93 e8 00 	sts	0x00E8, r24
    1a1e:	08 95       	ret

00001a20 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1a20:	80 91 e4 00 	lds	r24, 0x00E4
    1a24:	90 91 e5 00 	lds	r25, 0x00E5
    1a28:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1a2a:	20 91 ec 00 	lds	r18, 0x00EC
    1a2e:	20 ff       	sbrs	r18, 0
    1a30:	21 c0       	rjmp	.+66     	; 0x1a74 <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a32:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1a36:	20 fd       	sbrc	r18, 0
    1a38:	21 c0       	rjmp	.+66     	; 0x1a7c <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a3a:	20 91 e1 01 	lds	r18, 0x01E1

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a3e:	22 23       	and	r18, r18
    1a40:	89 f0       	breq	.+34     	; 0x1a64 <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a42:	25 30       	cpi	r18, 0x05	; 5
    1a44:	89 f0       	breq	.+34     	; 0x1a68 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1a46:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1a4a:	25 fd       	sbrc	r18, 5
    1a4c:	0f c0       	rjmp	.+30     	; 0x1a6c <Endpoint_WaitUntilReady+0x4c>
    1a4e:	20 91 e4 00 	lds	r18, 0x00E4
    1a52:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1a56:	28 17       	cp	r18, r24
    1a58:	39 07       	cpc	r19, r25
    1a5a:	39 f3       	breq	.-50     	; 0x1a2a <Endpoint_WaitUntilReady+0xa>
    1a5c:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1a5e:	41 f0       	breq	.+16     	; 0x1a70 <Endpoint_WaitUntilReady+0x50>
    1a60:	c9 01       	movw	r24, r18
    1a62:	e3 cf       	rjmp	.-58     	; 0x1a2a <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1a64:	82 e0       	ldi	r24, 0x02	; 2
    1a66:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1a68:	83 e0       	ldi	r24, 0x03	; 3
    1a6a:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    1a70:	84 e0       	ldi	r24, 0x04	; 4
    1a72:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a74:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1a78:	22 ff       	sbrs	r18, 2
    1a7a:	df cf       	rjmp	.-66     	; 0x1a3a <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	08 95       	ret

00001a80 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1a80:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1a84:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1a88:	e0 ee       	ldi	r30, 0xE0	; 224
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	81 60       	ori	r24, 0x01	; 1
    1a90:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1a92:	e8 ed       	ldi	r30, 0xD8	; 216
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	8f 77       	andi	r24, 0x7F	; 127
    1a9a:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1a9c:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1a9e:	a7 ed       	ldi	r26, 0xD7	; 215
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	8c 91       	ld	r24, X
    1aa4:	8e 7f       	andi	r24, 0xFE	; 254
    1aa6:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1aa8:	80 81       	ld	r24, Z
    1aaa:	8f 7e       	andi	r24, 0xEF	; 239
    1aac:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1aae:	10 92 e0 01 	sts	0x01E0, r1
    1ab2:	08 95       	ret

00001ab4 <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    1ab4:	0f 93       	push	r16
    1ab6:	1f 93       	push	r17
    1ab8:	cf 93       	push	r28
    1aba:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1abc:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1ac0:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1ac4:	c8 ed       	ldi	r28, 0xD8	; 216
    1ac6:	d0 e0       	ldi	r29, 0x00	; 0
    1ac8:	88 81       	ld	r24, Y
    1aca:	8f 77       	andi	r24, 0x7F	; 127
    1acc:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1ace:	88 81       	ld	r24, Y
    1ad0:	80 68       	ori	r24, 0x80	; 128
    1ad2:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1ad4:	88 81       	ld	r24, Y
    1ad6:	8f 7d       	andi	r24, 0xDF	; 223
    1ad8:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1ada:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1adc:	10 92 e1 01 	sts	0x01E1, r1
	USB_Device_ConfigurationNumber  = 0;
    1ae0:	10 92 dd 01 	sts	0x01DD, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1ae4:	10 92 df 01 	sts	0x01DF, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1ae8:	10 92 de 01 	sts	0x01DE, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1aec:	00 ee       	ldi	r16, 0xE0	; 224
    1aee:	10 e0       	ldi	r17, 0x00	; 0
    1af0:	f8 01       	movw	r30, r16
    1af2:	80 81       	ld	r24, Z
    1af4:	8b 7f       	andi	r24, 0xFB	; 251
    1af6:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1af8:	88 81       	ld	r24, Y
    1afa:	81 60       	ori	r24, 0x01	; 1
    1afc:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1afe:	42 e0       	ldi	r20, 0x02	; 2
    1b00:	60 e0       	ldi	r22, 0x00	; 0
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	0e 94 ba 0c 	call	0x1974	; 0x1974 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1b08:	e1 ee       	ldi	r30, 0xE1	; 225
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	8e 7f       	andi	r24, 0xFE	; 254
    1b10:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1b12:	e2 ee       	ldi	r30, 0xE2	; 226
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	81 60       	ori	r24, 0x01	; 1
    1b1a:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1b1c:	80 81       	ld	r24, Z
    1b1e:	88 60       	ori	r24, 0x08	; 8
    1b20:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1b22:	f8 01       	movw	r30, r16
    1b24:	80 81       	ld	r24, Z
    1b26:	8e 7f       	andi	r24, 0xFE	; 254
    1b28:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1b2a:	88 81       	ld	r24, Y
    1b2c:	80 61       	ori	r24, 0x10	; 16
    1b2e:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1b30:	df 91       	pop	r29
    1b32:	cf 91       	pop	r28
    1b34:	1f 91       	pop	r17
    1b36:	0f 91       	pop	r16
    1b38:	08 95       	ret

00001b3a <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1b3a:	e8 ed       	ldi	r30, 0xD8	; 216
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	8f 7e       	andi	r24, 0xEF	; 239
    1b42:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1b44:	e7 ed       	ldi	r30, 0xD7	; 215
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	81 60       	ori	r24, 0x01	; 1
    1b4c:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1b4e:	84 e0       	ldi	r24, 0x04	; 4
    1b50:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	80 93 e0 01 	sts	0x01E0, r24

	USB_ResetInterface();
    1b58:	0c 94 5a 0d 	jmp	0x1ab4	; 0x1ab4 <USB_ResetInterface>

00001b5c <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1b5c:	e8 ed       	ldi	r30, 0xD8	; 216
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	8e 7f       	andi	r24, 0xFE	; 254
    1b64:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1b66:	10 92 e2 00 	sts	0x00E2, r1
    1b6a:	08 95       	ret

00001b6c <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1b6c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1b70:	10 92 e1 00 	sts	0x00E1, r1
    1b74:	08 95       	ret

00001b76 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1b76:	1f 92       	push	r1
    1b78:	0f 92       	push	r0
    1b7a:	0f b6       	in	r0, 0x3f	; 63
    1b7c:	0f 92       	push	r0
    1b7e:	11 24       	eor	r1, r1
    1b80:	2f 93       	push	r18
    1b82:	3f 93       	push	r19
    1b84:	4f 93       	push	r20
    1b86:	5f 93       	push	r21
    1b88:	6f 93       	push	r22
    1b8a:	7f 93       	push	r23
    1b8c:	8f 93       	push	r24
    1b8e:	9f 93       	push	r25
    1b90:	af 93       	push	r26
    1b92:	bf 93       	push	r27
    1b94:	ef 93       	push	r30
    1b96:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1b98:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1b9c:	82 ff       	sbrs	r24, 2
    1b9e:	0b c0       	rjmp	.+22     	; 0x1bb6 <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1ba0:	80 91 e2 00 	lds	r24, 0x00E2
    1ba4:	82 ff       	sbrs	r24, 2
    1ba6:	07 c0       	rjmp	.+14     	; 0x1bb6 <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1ba8:	80 91 e1 00 	lds	r24, 0x00E1
    1bac:	8b 7f       	andi	r24, 0xFB	; 251
    1bae:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1bb2:	0e 94 df 09 	call	0x13be	; 0x13be <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1bb6:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1bba:	80 ff       	sbrs	r24, 0
    1bbc:	1f c0       	rjmp	.+62     	; 0x1bfc <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1bbe:	80 91 d8 00 	lds	r24, 0x00D8
    1bc2:	80 ff       	sbrs	r24, 0
    1bc4:	1b c0       	rjmp	.+54     	; 0x1bfc <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1bc6:	80 91 da 00 	lds	r24, 0x00DA
    1bca:	8e 7f       	andi	r24, 0xFE	; 254
    1bcc:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1bd0:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1bd4:	80 ff       	sbrs	r24, 0
    1bd6:	0d c0       	rjmp	.+26     	; 0x1bf2 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1bd8:	80 e1       	ldi	r24, 0x10	; 16
    1bda:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1bdc:	82 e1       	ldi	r24, 0x12	; 18
    1bde:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1be0:	09 b4       	in	r0, 0x29	; 41
    1be2:	00 fe       	sbrs	r0, 0
    1be4:	fd cf       	rjmp	.-6      	; 0x1be0 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	80 93 e1 01 	sts	0x01E1, r24
			EVENT_USB_Device_Connect();
    1bec:	0e 94 b8 09 	call	0x1370	; 0x1370 <EVENT_USB_Device_Connect>
    1bf0:	05 c0       	rjmp	.+10     	; 0x1bfc <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1bf2:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1bf4:	10 92 e1 01 	sts	0x01E1, r1
			EVENT_USB_Device_Disconnect();
    1bf8:	0e 94 ca 09 	call	0x1394	; 0x1394 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1bfc:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1c00:	80 ff       	sbrs	r24, 0
    1c02:	19 c0       	rjmp	.+50     	; 0x1c36 <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1c04:	80 91 e2 00 	lds	r24, 0x00E2
    1c08:	80 ff       	sbrs	r24, 0
    1c0a:	15 c0       	rjmp	.+42     	; 0x1c36 <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1c0c:	80 91 e2 00 	lds	r24, 0x00E2
    1c10:	8e 7f       	andi	r24, 0xFE	; 254
    1c12:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1c16:	80 91 e2 00 	lds	r24, 0x00E2
    1c1a:	80 61       	ori	r24, 0x10	; 16
    1c1c:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1c20:	80 91 d8 00 	lds	r24, 0x00D8
    1c24:	80 62       	ori	r24, 0x20	; 32
    1c26:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1c2a:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1c2c:	85 e0       	ldi	r24, 0x05	; 5
    1c2e:	80 93 e1 01 	sts	0x01E1, r24
		EVENT_USB_Device_Suspend();
    1c32:	0e 94 d5 09 	call	0x13aa	; 0x13aa <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1c36:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1c3a:	84 ff       	sbrs	r24, 4
    1c3c:	30 c0       	rjmp	.+96     	; 0x1c9e <__vector_10+0x128>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1c3e:	80 91 e2 00 	lds	r24, 0x00E2
    1c42:	84 ff       	sbrs	r24, 4
    1c44:	2c c0       	rjmp	.+88     	; 0x1c9e <__vector_10+0x128>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1c46:	80 e1       	ldi	r24, 0x10	; 16
    1c48:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1c4a:	82 e1       	ldi	r24, 0x12	; 18
    1c4c:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1c4e:	09 b4       	in	r0, 0x29	; 41
    1c50:	00 fe       	sbrs	r0, 0
    1c52:	fd cf       	rjmp	.-6      	; 0x1c4e <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1c54:	80 91 d8 00 	lds	r24, 0x00D8
    1c58:	8f 7d       	andi	r24, 0xDF	; 223
    1c5a:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1c5e:	80 91 e1 00 	lds	r24, 0x00E1
    1c62:	8f 7e       	andi	r24, 0xEF	; 239
    1c64:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1c68:	80 91 e2 00 	lds	r24, 0x00E2
    1c6c:	8f 7e       	andi	r24, 0xEF	; 239
    1c6e:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1c72:	80 91 e2 00 	lds	r24, 0x00E2
    1c76:	81 60       	ori	r24, 0x01	; 1
    1c78:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1c7c:	80 91 dd 01 	lds	r24, 0x01DD
    1c80:	88 23       	and	r24, r24
    1c82:	11 f0       	breq	.+4      	; 0x1c88 <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1c84:	84 e0       	ldi	r24, 0x04	; 4
    1c86:	07 c0       	rjmp	.+14     	; 0x1c96 <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1c88:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1c8c:	87 ff       	sbrs	r24, 7
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <__vector_10+0x11e>
    1c90:	83 e0       	ldi	r24, 0x03	; 3
    1c92:	01 c0       	rjmp	.+2      	; 0x1c96 <__vector_10+0x120>
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	80 93 e1 01 	sts	0x01E1, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1c9a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1c9e:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1ca2:	83 ff       	sbrs	r24, 3
    1ca4:	24 c0       	rjmp	.+72     	; 0x1cee <__vector_10+0x178>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1ca6:	80 91 e2 00 	lds	r24, 0x00E2
    1caa:	83 ff       	sbrs	r24, 3
    1cac:	20 c0       	rjmp	.+64     	; 0x1cee <__vector_10+0x178>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1cae:	80 91 e1 00 	lds	r24, 0x00E1
    1cb2:	87 7f       	andi	r24, 0xF7	; 247
    1cb4:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1cb8:	82 e0       	ldi	r24, 0x02	; 2
    1cba:	80 93 e1 01 	sts	0x01E1, r24
		USB_Device_ConfigurationNumber = 0;
    1cbe:	10 92 dd 01 	sts	0x01DD, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1cc2:	80 91 e1 00 	lds	r24, 0x00E1
    1cc6:	8e 7f       	andi	r24, 0xFE	; 254
    1cc8:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1ccc:	80 91 e2 00 	lds	r24, 0x00E2
    1cd0:	8e 7f       	andi	r24, 0xFE	; 254
    1cd2:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1cd6:	80 91 e2 00 	lds	r24, 0x00E2
    1cda:	80 61       	ori	r24, 0x10	; 16
    1cdc:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1ce0:	42 e0       	ldi	r20, 0x02	; 2
    1ce2:	60 e0       	ldi	r22, 0x00	; 0
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
    1ce6:	0e 94 ba 0c 	call	0x1974	; 0x1974 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1cea:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1cee:	ff 91       	pop	r31
    1cf0:	ef 91       	pop	r30
    1cf2:	bf 91       	pop	r27
    1cf4:	af 91       	pop	r26
    1cf6:	9f 91       	pop	r25
    1cf8:	8f 91       	pop	r24
    1cfa:	7f 91       	pop	r23
    1cfc:	6f 91       	pop	r22
    1cfe:	5f 91       	pop	r21
    1d00:	4f 91       	pop	r20
    1d02:	3f 91       	pop	r19
    1d04:	2f 91       	pop	r18
    1d06:	0f 90       	pop	r0
    1d08:	0f be       	out	0x3f, r0	; 63
    1d0a:	0f 90       	pop	r0
    1d0c:	1f 90       	pop	r1
    1d0e:	18 95       	reti

00001d10 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1d10:	1f 93       	push	r17
    1d12:	cf 93       	push	r28
    1d14:	df 93       	push	r29
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
    1d1a:	aa 97       	sbiw	r28, 0x2a	; 42
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	f8 94       	cli
    1d20:	de bf       	out	0x3e, r29	; 62
    1d22:	0f be       	out	0x3f, r0	; 63
    1d24:	cd bf       	out	0x3d, r28	; 61
    1d26:	e2 ee       	ldi	r30, 0xE2	; 226
    1d28:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1d2a:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1d2e:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1d30:	21 e0       	ldi	r18, 0x01	; 1
    1d32:	ea 3e       	cpi	r30, 0xEA	; 234
    1d34:	f2 07       	cpc	r31, r18
    1d36:	c9 f7       	brne	.-14     	; 0x1d2a <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1d38:	0e 94 38 0a 	call	0x1470	; 0x1470 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1d3c:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1d40:	83 ff       	sbrs	r24, 3
    1d42:	1c c1       	rjmp	.+568    	; 0x1f7c <USB_Device_ProcessControlRequest+0x26c>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1d44:	20 91 e2 01 	lds	r18, 0x01E2

		switch (USB_ControlRequest.bRequest)
    1d48:	30 91 e3 01 	lds	r19, 0x01E3
    1d4c:	83 2f       	mov	r24, r19
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	8a 30       	cpi	r24, 0x0A	; 10
    1d52:	91 05       	cpc	r25, r1
    1d54:	08 f0       	brcs	.+2      	; 0x1d58 <USB_Device_ProcessControlRequest+0x48>
    1d56:	12 c1       	rjmp	.+548    	; 0x1f7c <USB_Device_ProcessControlRequest+0x26c>
    1d58:	fc 01       	movw	r30, r24
    1d5a:	ea 5a       	subi	r30, 0xAA	; 170
    1d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5e:	0c 94 4a 29 	jmp	0x5294	; 0x5294 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1d62:	20 38       	cpi	r18, 0x80	; 128
    1d64:	81 f0       	breq	.+32     	; 0x1d86 <USB_Device_ProcessControlRequest+0x76>
    1d66:	22 38       	cpi	r18, 0x82	; 130
    1d68:	09 f0       	breq	.+2      	; 0x1d6c <USB_Device_ProcessControlRequest+0x5c>
    1d6a:	08 c1       	rjmp	.+528    	; 0x1f7c <USB_Device_ProcessControlRequest+0x26c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d6c:	80 91 e6 01 	lds	r24, 0x01E6
    1d70:	8f 70       	andi	r24, 0x0F	; 15
    1d72:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1d76:	80 91 eb 00 	lds	r24, 0x00EB
    1d7a:	85 fb       	bst	r24, 5
    1d7c:	88 27       	eor	r24, r24
    1d7e:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d80:	10 92 e9 00 	sts	0x00E9, r1
    1d84:	06 c0       	rjmp	.+12     	; 0x1d92 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1d86:	80 91 de 01 	lds	r24, 0x01DE
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1d8a:	90 91 df 01 	lds	r25, 0x01DF
    1d8e:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1d90:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1d92:	90 91 e8 00 	lds	r25, 0x00E8
    1d96:	97 7f       	andi	r25, 0xF7	; 247
    1d98:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1d9c:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1da0:	10 92 f1 00 	sts	0x00F1, r1
    1da4:	c5 c0       	rjmp	.+394    	; 0x1f30 <USB_Device_ProcessControlRequest+0x220>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1da6:	82 2f       	mov	r24, r18
    1da8:	8d 7f       	andi	r24, 0xFD	; 253
    1daa:	09 f0       	breq	.+2      	; 0x1dae <USB_Device_ProcessControlRequest+0x9e>
    1dac:	e7 c0       	rjmp	.+462    	; 0x1f7c <USB_Device_ProcessControlRequest+0x26c>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1dae:	22 23       	and	r18, r18
    1db0:	19 f0       	breq	.+6      	; 0x1db8 <USB_Device_ProcessControlRequest+0xa8>
    1db2:	22 30       	cpi	r18, 0x02	; 2
    1db4:	61 f0       	breq	.+24     	; 0x1dce <USB_Device_ProcessControlRequest+0xbe>
    1db6:	e2 c0       	rjmp	.+452    	; 0x1f7c <USB_Device_ProcessControlRequest+0x26c>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1db8:	80 91 e4 01 	lds	r24, 0x01E4
    1dbc:	81 30       	cpi	r24, 0x01	; 1
    1dbe:	09 f0       	breq	.+2      	; 0x1dc2 <USB_Device_ProcessControlRequest+0xb2>
    1dc0:	dd c0       	rjmp	.+442    	; 0x1f7c <USB_Device_ProcessControlRequest+0x26c>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1dc2:	33 30       	cpi	r19, 0x03	; 3
    1dc4:	09 f0       	breq	.+2      	; 0x1dc8 <USB_Device_ProcessControlRequest+0xb8>
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	80 93 df 01 	sts	0x01DF, r24
    1dcc:	28 c0       	rjmp	.+80     	; 0x1e1e <USB_Device_ProcessControlRequest+0x10e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1dce:	80 91 e4 01 	lds	r24, 0x01E4
    1dd2:	81 11       	cpse	r24, r1
    1dd4:	24 c0       	rjmp	.+72     	; 0x1e1e <USB_Device_ProcessControlRequest+0x10e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1dd6:	20 91 e6 01 	lds	r18, 0x01E6
    1dda:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1ddc:	09 f4       	brne	.+2      	; 0x1de0 <USB_Device_ProcessControlRequest+0xd0>
    1dde:	ce c0       	rjmp	.+412    	; 0x1f7c <USB_Device_ProcessControlRequest+0x26c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1de0:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1de4:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1de8:	80 ff       	sbrs	r24, 0
    1dea:	19 c0       	rjmp	.+50     	; 0x1e1e <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1dec:	80 91 eb 00 	lds	r24, 0x00EB
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1df0:	33 30       	cpi	r19, 0x03	; 3
    1df2:	11 f4       	brne	.+4      	; 0x1df8 <USB_Device_ProcessControlRequest+0xe8>
    1df4:	80 62       	ori	r24, 0x20	; 32
    1df6:	11 c0       	rjmp	.+34     	; 0x1e1a <USB_Device_ProcessControlRequest+0x10a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1df8:	80 61       	ori	r24, 0x10	; 16
    1dfa:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	02 2e       	mov	r0, r18
    1e04:	01 c0       	rjmp	.+2      	; 0x1e08 <USB_Device_ProcessControlRequest+0xf8>
    1e06:	88 0f       	add	r24, r24
    1e08:	0a 94       	dec	r0
    1e0a:	ea f7       	brpl	.-6      	; 0x1e06 <USB_Device_ProcessControlRequest+0xf6>
    1e0c:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1e10:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1e14:	80 91 eb 00 	lds	r24, 0x00EB
    1e18:	88 60       	ori	r24, 0x08	; 8
    1e1a:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e1e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e22:	80 91 e8 00 	lds	r24, 0x00E8
    1e26:	87 7f       	andi	r24, 0xF7	; 247
    1e28:	86 c0       	rjmp	.+268    	; 0x1f36 <USB_Device_ProcessControlRequest+0x226>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1e2a:	21 11       	cpse	r18, r1
    1e2c:	a7 c0       	rjmp	.+334    	; 0x1f7c <USB_Device_ProcessControlRequest+0x26c>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1e2e:	10 91 e4 01 	lds	r17, 0x01E4
    1e32:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1e34:	80 91 e3 00 	lds	r24, 0x00E3
    1e38:	80 78       	andi	r24, 0x80	; 128
    1e3a:	81 2b       	or	r24, r17
    1e3c:	80 93 e3 00 	sts	0x00E3, r24
    1e40:	80 91 e8 00 	lds	r24, 0x00E8
    1e44:	87 7f       	andi	r24, 0xF7	; 247
    1e46:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1e4a:	0e 94 ef 0c 	call	0x19de	; 0x19de <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1e4e:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    1e52:	80 ff       	sbrs	r24, 0
    1e54:	fc cf       	rjmp	.-8      	; 0x1e4e <USB_Device_ProcessControlRequest+0x13e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1e56:	80 91 e3 00 	lds	r24, 0x00E3
    1e5a:	80 68       	ori	r24, 0x80	; 128
    1e5c:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1e60:	11 23       	and	r17, r17
    1e62:	11 f0       	breq	.+4      	; 0x1e68 <USB_Device_ProcessControlRequest+0x158>
    1e64:	83 e0       	ldi	r24, 0x03	; 3
    1e66:	01 c0       	rjmp	.+2      	; 0x1e6a <USB_Device_ProcessControlRequest+0x15a>
    1e68:	82 e0       	ldi	r24, 0x02	; 2
    1e6a:	80 93 e1 01 	sts	0x01E1, r24
    1e6e:	86 c0       	rjmp	.+268    	; 0x1f7c <USB_Device_ProcessControlRequest+0x26c>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1e70:	20 58       	subi	r18, 0x80	; 128
    1e72:	22 30       	cpi	r18, 0x02	; 2
    1e74:	08 f0       	brcs	.+2      	; 0x1e78 <USB_Device_ProcessControlRequest+0x168>
    1e76:	82 c0       	rjmp	.+260    	; 0x1f7c <USB_Device_ProcessControlRequest+0x26c>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1e78:	80 91 e4 01 	lds	r24, 0x01E4
    1e7c:	90 91 e5 01 	lds	r25, 0x01E5
    1e80:	8c 3d       	cpi	r24, 0xDC	; 220
    1e82:	23 e0       	ldi	r18, 0x03	; 3
    1e84:	92 07       	cpc	r25, r18
    1e86:	79 f5       	brne	.+94     	; 0x1ee6 <USB_Device_ProcessControlRequest+0x1d6>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1e88:	83 e0       	ldi	r24, 0x03	; 3
    1e8a:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1e8c:	8a e2       	ldi	r24, 0x2A	; 42
    1e8e:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1e90:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1e92:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1e94:	de 01       	movw	r26, r28
    1e96:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1e98:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1e9a:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1e9c:	51 e2       	ldi	r21, 0x21	; 33
    1e9e:	e3 2f       	mov	r30, r19
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	50 93 57 00 	sts	0x0057, r21
    1ea6:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1ea8:	20 ff       	sbrs	r18, 0
    1eaa:	03 c0       	rjmp	.+6      	; 0x1eb2 <USB_Device_ProcessControlRequest+0x1a2>
					{
						SerialByte >>= 4;
    1eac:	e2 95       	swap	r30
    1eae:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1eb0:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1eb2:	ef 70       	andi	r30, 0x0F	; 15
    1eb4:	8e 2f       	mov	r24, r30
    1eb6:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1eb8:	ea 30       	cpi	r30, 0x0A	; 10
    1eba:	10 f0       	brcs	.+4      	; 0x1ec0 <USB_Device_ProcessControlRequest+0x1b0>
    1ebc:	c7 96       	adiw	r24, 0x37	; 55
    1ebe:	01 c0       	rjmp	.+2      	; 0x1ec2 <USB_Device_ProcessControlRequest+0x1b2>
    1ec0:	c0 96       	adiw	r24, 0x30	; 48
    1ec2:	8d 93       	st	X+, r24
    1ec4:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1ec6:	2f 5f       	subi	r18, 0xFF	; 255
    1ec8:	24 31       	cpi	r18, 0x14	; 20
    1eca:	49 f7       	brne	.-46     	; 0x1e9e <USB_Device_ProcessControlRequest+0x18e>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1ecc:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ece:	80 91 e8 00 	lds	r24, 0x00E8
    1ed2:	87 7f       	andi	r24, 0xF7	; 247
    1ed4:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1ed8:	6a e2       	ldi	r22, 0x2A	; 42
    1eda:	70 e0       	ldi	r23, 0x00	; 0
    1edc:	ce 01       	movw	r24, r28
    1ede:	01 96       	adiw	r24, 0x01	; 1
    1ee0:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <Endpoint_Write_Control_Stream_LE>
    1ee4:	14 c0       	rjmp	.+40     	; 0x1f0e <USB_Device_ProcessControlRequest+0x1fe>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1ee6:	ae 01       	movw	r20, r28
    1ee8:	4f 5f       	subi	r20, 0xFF	; 255
    1eea:	5f 4f       	sbci	r21, 0xFF	; 255
    1eec:	60 91 e6 01 	lds	r22, 0x01E6
    1ef0:	0e 94 3d 0b 	call	0x167a	; 0x167a <CALLBACK_USB_GetDescriptor>
    1ef4:	00 97       	sbiw	r24, 0x00	; 0
    1ef6:	09 f4       	brne	.+2      	; 0x1efa <USB_Device_ProcessControlRequest+0x1ea>
    1ef8:	41 c0       	rjmp	.+130    	; 0x1f7c <USB_Device_ProcessControlRequest+0x26c>
    1efa:	20 91 e8 00 	lds	r18, 0x00E8
    1efe:	27 7f       	andi	r18, 0xF7	; 247
    1f00:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1f04:	bc 01       	movw	r22, r24
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0a:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1f0e:	80 91 e8 00 	lds	r24, 0x00E8
    1f12:	8b 77       	andi	r24, 0x7B	; 123
    1f14:	80 93 e8 00 	sts	0x00E8, r24
    1f18:	31 c0       	rjmp	.+98     	; 0x1f7c <USB_Device_ProcessControlRequest+0x26c>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1f1a:	20 38       	cpi	r18, 0x80	; 128
    1f1c:	79 f5       	brne	.+94     	; 0x1f7c <USB_Device_ProcessControlRequest+0x26c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f1e:	80 91 e8 00 	lds	r24, 0x00E8
    1f22:	87 7f       	andi	r24, 0xF7	; 247
    1f24:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1f28:	80 91 dd 01 	lds	r24, 0x01DD
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1f2c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f30:	80 91 e8 00 	lds	r24, 0x00E8
    1f34:	8e 77       	andi	r24, 0x7E	; 126
    1f36:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1f3a:	0e 94 ef 0c 	call	0x19de	; 0x19de <Endpoint_ClearStatusStage>
    1f3e:	1e c0       	rjmp	.+60     	; 0x1f7c <USB_Device_ProcessControlRequest+0x26c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1f40:	21 11       	cpse	r18, r1
    1f42:	1c c0       	rjmp	.+56     	; 0x1f7c <USB_Device_ProcessControlRequest+0x26c>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1f44:	90 91 e4 01 	lds	r25, 0x01E4
    1f48:	92 30       	cpi	r25, 0x02	; 2
    1f4a:	c0 f4       	brcc	.+48     	; 0x1f7c <USB_Device_ProcessControlRequest+0x26c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f4c:	80 91 e8 00 	lds	r24, 0x00E8
    1f50:	87 7f       	andi	r24, 0xF7	; 247
    1f52:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1f56:	90 93 dd 01 	sts	0x01DD, r25

	Endpoint_ClearStatusStage();
    1f5a:	0e 94 ef 0c 	call	0x19de	; 0x19de <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1f5e:	80 91 dd 01 	lds	r24, 0x01DD
    1f62:	81 11       	cpse	r24, r1
    1f64:	04 c0       	rjmp	.+8      	; 0x1f6e <USB_Device_ProcessControlRequest+0x25e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1f66:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1f6a:	87 ff       	sbrs	r24, 7
    1f6c:	02 c0       	rjmp	.+4      	; 0x1f72 <USB_Device_ProcessControlRequest+0x262>
    1f6e:	84 e0       	ldi	r24, 0x04	; 4
    1f70:	01 c0       	rjmp	.+2      	; 0x1f74 <USB_Device_ProcessControlRequest+0x264>
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	80 93 e1 01 	sts	0x01E1, r24

	EVENT_USB_Device_ConfigurationChanged();
    1f78:	0e 94 1f 0a 	call	0x143e	; 0x143e <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1f7c:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1f80:	83 ff       	sbrs	r24, 3
    1f82:	0a c0       	rjmp	.+20     	; 0x1f98 <USB_Device_ProcessControlRequest+0x288>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f84:	80 91 e8 00 	lds	r24, 0x00E8
    1f88:	87 7f       	andi	r24, 0xF7	; 247
    1f8a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1f8e:	80 91 eb 00 	lds	r24, 0x00EB
    1f92:	80 62       	ori	r24, 0x20	; 32
    1f94:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1f98:	aa 96       	adiw	r28, 0x2a	; 42
    1f9a:	0f b6       	in	r0, 0x3f	; 63
    1f9c:	f8 94       	cli
    1f9e:	de bf       	out	0x3e, r29	; 62
    1fa0:	0f be       	out	0x3f, r0	; 63
    1fa2:	cd bf       	out	0x3d, r28	; 61
    1fa4:	df 91       	pop	r29
    1fa6:	cf 91       	pop	r28
    1fa8:	1f 91       	pop	r17
    1faa:	08 95       	ret

00001fac <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1fac:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1fae:	80 91 e1 01 	lds	r24, 0x01E1
    1fb2:	88 23       	and	r24, r24
    1fb4:	b1 f0       	breq	.+44     	; 0x1fe2 <USB_USBTask+0x36>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1fb6:	80 91 e9 00 	lds	r24, 0x00E9
    1fba:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1fbc:	90 91 ec 00 	lds	r25, 0x00EC
    1fc0:	90 ff       	sbrs	r25, 0
    1fc2:	02 c0       	rjmp	.+4      	; 0x1fc8 <USB_USBTask+0x1c>
    1fc4:	90 e8       	ldi	r25, 0x80	; 128
    1fc6:	01 c0       	rjmp	.+2      	; 0x1fca <USB_USBTask+0x1e>
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1fca:	c9 2f       	mov	r28, r25
    1fcc:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fce:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1fd2:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1fd6:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    1fd8:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fdc:	cf 70       	andi	r28, 0x0F	; 15
    1fde:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1fe2:	cf 91       	pop	r28
    1fe4:	08 95       	ret

00001fe6 <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    1fe6:	90 93 6c 01 	sts	0x016C, r25
    1fea:	80 93 6b 01 	sts	0x016B, r24
    1fee:	08 95       	ret

00001ff0 <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    1ff0:	e0 91 6b 01 	lds	r30, 0x016B
    1ff4:	f0 91 6c 01 	lds	r31, 0x016C
    1ff8:	30 97       	sbiw	r30, 0x00	; 0
    1ffa:	21 f0       	breq	.+8      	; 0x2004 <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    1ffc:	01 90       	ld	r0, Z+
    1ffe:	f0 81       	ld	r31, Z
    2000:	e0 2d       	mov	r30, r0
    2002:	09 94       	ijmp
}
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	08 95       	ret

00002008 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    2008:	ff 92       	push	r15
    200a:	0f 93       	push	r16
    200c:	1f 93       	push	r17
    200e:	cf 93       	push	r28
    2010:	df 93       	push	r29
    2012:	8c 01       	movw	r16, r24
    if (!driver) return;
    2014:	e0 91 6b 01 	lds	r30, 0x016B
    2018:	f0 91 6c 01 	lds	r31, 0x016C
    201c:	30 97       	sbiw	r30, 0x00	; 0
    201e:	99 f1       	breq	.+102    	; 0x2086 <host_keyboard_send+0x7e>
    (*driver->send_keyboard)(report);
    2020:	02 80       	ldd	r0, Z+2	; 0x02
    2022:	f3 81       	ldd	r31, Z+3	; 0x03
    2024:	e0 2d       	mov	r30, r0
    2026:	09 95       	icall

    if (debug_keyboard) {
    2028:	80 91 cb 01 	lds	r24, 0x01CB
    202c:	82 ff       	sbrs	r24, 2
    202e:	2b c0       	rjmp	.+86     	; 0x2086 <host_keyboard_send+0x7e>
        dprint("keyboard_report: ");
    2030:	80 ff       	sbrs	r24, 0
    2032:	04 c0       	rjmp	.+8      	; 0x203c <host_keyboard_send+0x34>
    2034:	89 e0       	ldi	r24, 0x09	; 9
    2036:	94 e0       	ldi	r25, 0x04	; 4
    2038:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    203c:	e8 01       	movw	r28, r16
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    203e:	80 e1       	ldi	r24, 0x10	; 16
    2040:	f8 2e       	mov	r15, r24
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    2042:	03 e0       	ldi	r16, 0x03	; 3
    2044:	14 e0       	ldi	r17, 0x04	; 4
    2046:	80 91 cb 01 	lds	r24, 0x01CB
    204a:	80 ff       	sbrs	r24, 0
    204c:	0b c0       	rjmp	.+22     	; 0x2064 <host_keyboard_send+0x5c>
    204e:	88 81       	ld	r24, Y
    2050:	1f 92       	push	r1
    2052:	8f 93       	push	r24
    2054:	1f 93       	push	r17
    2056:	0f 93       	push	r16
    2058:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    205c:	0f 90       	pop	r0
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	fa 94       	dec	r15
    2066:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    2068:	f1 10       	cpse	r15, r1
    206a:	ed cf       	rjmp	.-38     	; 0x2046 <host_keyboard_send+0x3e>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    206c:	80 91 cb 01 	lds	r24, 0x01CB
    2070:	80 ff       	sbrs	r24, 0
    2072:	09 c0       	rjmp	.+18     	; 0x2086 <host_keyboard_send+0x7e>
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	94 e0       	ldi	r25, 0x04	; 4
    }
}
    2078:	df 91       	pop	r29
    207a:	cf 91       	pop	r28
    207c:	1f 91       	pop	r17
    207e:	0f 91       	pop	r16
    2080:	ff 90       	pop	r15
    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    2082:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <xputs>
    }
}
    2086:	df 91       	pop	r29
    2088:	cf 91       	pop	r28
    208a:	1f 91       	pop	r17
    208c:	0f 91       	pop	r16
    208e:	ff 90       	pop	r15
    2090:	08 95       	ret

00002092 <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    2092:	e0 91 6b 01 	lds	r30, 0x016B
    2096:	f0 91 6c 01 	lds	r31, 0x016C
    209a:	30 97       	sbiw	r30, 0x00	; 0
    209c:	21 f0       	breq	.+8      	; 0x20a6 <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    209e:	04 80       	ldd	r0, Z+4	; 0x04
    20a0:	f5 81       	ldd	r31, Z+5	; 0x05
    20a2:	e0 2d       	mov	r30, r0
    20a4:	09 94       	ijmp
    20a6:	08 95       	ret

000020a8 <host_system_send>:
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    20a8:	20 91 69 01 	lds	r18, 0x0169
    20ac:	30 91 6a 01 	lds	r19, 0x016A
    20b0:	82 17       	cp	r24, r18
    20b2:	93 07       	cpc	r25, r19
    20b4:	71 f0       	breq	.+28     	; 0x20d2 <host_system_send+0x2a>
    last_system_report = report;
    20b6:	90 93 6a 01 	sts	0x016A, r25
    20ba:	80 93 69 01 	sts	0x0169, r24

    if (!driver) return;
    20be:	e0 91 6b 01 	lds	r30, 0x016B
    20c2:	f0 91 6c 01 	lds	r31, 0x016C
    20c6:	30 97       	sbiw	r30, 0x00	; 0
    20c8:	21 f0       	breq	.+8      	; 0x20d2 <host_system_send+0x2a>
    (*driver->send_system)(report);
    20ca:	06 80       	ldd	r0, Z+6	; 0x06
    20cc:	f7 81       	ldd	r31, Z+7	; 0x07
    20ce:	e0 2d       	mov	r30, r0
    20d0:	09 94       	ijmp
    20d2:	08 95       	ret

000020d4 <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    20d4:	20 91 67 01 	lds	r18, 0x0167
    20d8:	30 91 68 01 	lds	r19, 0x0168
    20dc:	82 17       	cp	r24, r18
    20de:	93 07       	cpc	r25, r19
    20e0:	71 f0       	breq	.+28     	; 0x20fe <host_consumer_send+0x2a>
    last_consumer_report = report;
    20e2:	90 93 68 01 	sts	0x0168, r25
    20e6:	80 93 67 01 	sts	0x0167, r24

    if (!driver) return;
    20ea:	e0 91 6b 01 	lds	r30, 0x016B
    20ee:	f0 91 6c 01 	lds	r31, 0x016C
    20f2:	30 97       	sbiw	r30, 0x00	; 0
    20f4:	21 f0       	breq	.+8      	; 0x20fe <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    20f6:	00 84       	ldd	r0, Z+8	; 0x08
    20f8:	f1 85       	ldd	r31, Z+9	; 0x09
    20fa:	e0 2d       	mov	r30, r0
    20fc:	09 94       	ijmp
    20fe:	08 95       	ret

00002100 <matrix_setup>:
    return false;
}
#endif


__attribute__ ((weak)) void matrix_setup(void) {}
    2100:	08 95       	ret

00002102 <keyboard_setup>:
void keyboard_setup(void)
{
    matrix_setup();
    2102:	0c 94 80 10 	jmp	0x2100	; 0x2100 <matrix_setup>

00002106 <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    2106:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <timer_init>
    matrix_init();
    210a:	0e 94 46 07 	call	0xe8c	; 0xe8c <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    210e:	0c 94 cb 1e 	jmp	0x3d96	; 0x3d96 <bootmagic>

00002112 <keyboard_set_leds>:
        keyboard_set_leds(led_status);
    }
}

void keyboard_set_leds(uint8_t leds)
{
    2112:	cf 93       	push	r28
    2114:	c8 2f       	mov	r28, r24
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    2116:	80 91 cb 01 	lds	r24, 0x01CB
    211a:	82 ff       	sbrs	r24, 2
    211c:	1e c0       	rjmp	.+60     	; 0x215a <keyboard_set_leds+0x48>
    211e:	80 ff       	sbrs	r24, 0
    2120:	04 c0       	rjmp	.+8      	; 0x212a <keyboard_set_leds+0x18>
    2122:	82 e2       	ldi	r24, 0x22	; 34
    2124:	94 e0       	ldi	r25, 0x04	; 4
    2126:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    212a:	80 91 cb 01 	lds	r24, 0x01CB
    212e:	80 ff       	sbrs	r24, 0
    2130:	0c c0       	rjmp	.+24     	; 0x214a <keyboard_set_leds+0x38>
    2132:	1f 92       	push	r1
    2134:	cf 93       	push	r28
    2136:	2d e1       	ldi	r18, 0x1D	; 29
    2138:	34 e0       	ldi	r19, 0x04	; 4
    213a:	3f 93       	push	r19
    213c:	2f 93       	push	r18
    213e:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	0f 90       	pop	r0
    2148:	0f 90       	pop	r0
    214a:	80 91 cb 01 	lds	r24, 0x01CB
    214e:	80 ff       	sbrs	r24, 0
    2150:	04 c0       	rjmp	.+8      	; 0x215a <keyboard_set_leds+0x48>
    2152:	8b e1       	ldi	r24, 0x1B	; 27
    2154:	94 e0       	ldi	r25, 0x04	; 4
    2156:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    led_set(leds);
    215a:	8c 2f       	mov	r24, r28
}
    215c:	cf 91       	pop	r28
}

void keyboard_set_leds(uint8_t leds)
{
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    led_set(leds);
    215e:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <led_set>

00002162 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    2162:	cf 92       	push	r12
    2164:	df 92       	push	r13
    2166:	ef 92       	push	r14
    2168:	ff 92       	push	r15
    216a:	0f 93       	push	r16
    216c:	1f 93       	push	r17
    216e:	cf 93       	push	r28
    2170:	df 93       	push	r29
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
    2176:	2b 97       	sbiw	r28, 0x0b	; 11
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	f8 94       	cli
    217c:	de bf       	out	0x3e, r29	; 62
    217e:	0f be       	out	0x3f, r0	; 63
    2180:	cd bf       	out	0x3d, r28	; 61
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    2182:	0e 94 6a 07 	call	0xed4	; 0xed4 <matrix_scan>
    2186:	3e e6       	ldi	r19, 0x6E	; 110
    2188:	e3 2e       	mov	r14, r19
    218a:	31 e0       	ldi	r19, 0x01	; 1
    218c:	f3 2e       	mov	r15, r19
    218e:	00 e0       	ldi	r16, 0x00	; 0
    2190:	10 e0       	ldi	r17, 0x00	; 0
    2192:	c0 2e       	mov	r12, r16
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    2194:	80 2f       	mov	r24, r16
    2196:	0e 94 38 08 	call	0x1070	; 0x1070 <matrix_get_row>
        matrix_change = matrix_row ^ matrix_prev[r];
    219a:	f7 01       	movw	r30, r14
    219c:	d1 90       	ld	r13, Z+
    219e:	7f 01       	movw	r14, r30
    21a0:	d8 26       	eor	r13, r24
        if (matrix_change) {
    21a2:	b1 f4       	brne	.+44     	; 0x21d0 <keyboard_task+0x6e>
    21a4:	0f 5f       	subi	r16, 0xFF	; 255
    21a6:	1f 4f       	sbci	r17, 0xFF	; 255
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    21a8:	08 30       	cpi	r16, 0x08	; 8
    21aa:	11 05       	cpc	r17, r1
    21ac:	91 f7       	brne	.-28     	; 0x2192 <keyboard_task+0x30>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    21ae:	8f ef       	ldi	r24, 0xFF	; 255
    21b0:	89 83       	std	Y+1, r24	; 0x01
    21b2:	8a 83       	std	Y+2, r24	; 0x02
    21b4:	1b 82       	std	Y+3, r1	; 0x03
    21b6:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <timer_read>
    21ba:	81 60       	ori	r24, 0x01	; 1
    21bc:	78 2f       	mov	r23, r24
    21be:	9d 83       	std	Y+5, r25	; 0x05
    21c0:	8c 83       	std	Y+4, r24	; 0x04
    21c2:	49 81       	ldd	r20, Y+1	; 0x01
    21c4:	5a 81       	ldd	r21, Y+2	; 0x02
    21c6:	6b 81       	ldd	r22, Y+3	; 0x03
    21c8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ca:	0e 94 54 11 	call	0x22a8	; 0x22a8 <action_exec>
    21ce:	41 c0       	rjmp	.+130    	; 0x2252 <keyboard_task+0xf0>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    21d0:	90 91 cb 01 	lds	r25, 0x01CB
    21d4:	91 ff       	sbrs	r25, 1
    21d6:	04 c0       	rjmp	.+8      	; 0x21e0 <keyboard_task+0x7e>
    21d8:	8b 87       	std	Y+11, r24	; 0x0b
    21da:	0e 94 40 08 	call	0x1080	; 0x1080 <matrix_print>
    21de:	8b 85       	ldd	r24, Y+11	; 0x0b
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	30 e0       	ldi	r19, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    21e4:	4d 2d       	mov	r20, r13
    21e6:	50 e0       	ldi	r21, 0x00	; 0
    21e8:	92 2f       	mov	r25, r18
    21ea:	ba 01       	movw	r22, r20
    21ec:	02 2e       	mov	r0, r18
    21ee:	02 c0       	rjmp	.+4      	; 0x21f4 <keyboard_task+0x92>
    21f0:	75 95       	asr	r23
    21f2:	67 95       	ror	r22
    21f4:	0a 94       	dec	r0
    21f6:	e2 f7       	brpl	.-8      	; 0x21f0 <keyboard_task+0x8e>
    21f8:	60 ff       	sbrs	r22, 0
    21fa:	25 c0       	rjmp	.+74     	; 0x2246 <keyboard_task+0xe4>
                    action_exec((keyevent_t){
    21fc:	2e 83       	std	Y+6, r18	; 0x06
    21fe:	cf 82       	std	Y+7, r12	; 0x07
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    2200:	ee 24       	eor	r14, r14
    2202:	e3 94       	inc	r14
    2204:	f1 2c       	mov	r15, r1
    2206:	02 c0       	rjmp	.+4      	; 0x220c <keyboard_task+0xaa>
    2208:	ee 0c       	add	r14, r14
    220a:	ff 1c       	adc	r15, r15
    220c:	9a 95       	dec	r25
    220e:	e2 f7       	brpl	.-8      	; 0x2208 <keyboard_task+0xa6>
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	8e 21       	and	r24, r14
    2214:	9f 21       	and	r25, r15
    2216:	21 e0       	ldi	r18, 0x01	; 1
    2218:	89 2b       	or	r24, r25
    221a:	09 f4       	brne	.+2      	; 0x221e <keyboard_task+0xbc>
    221c:	20 e0       	ldi	r18, 0x00	; 0
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    221e:	28 87       	std	Y+8, r18	; 0x08
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    2220:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <timer_read>
    2224:	81 60       	ori	r24, 0x01	; 1
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    2226:	78 2f       	mov	r23, r24
    2228:	9a 87       	std	Y+10, r25	; 0x0a
    222a:	89 87       	std	Y+9, r24	; 0x09
    222c:	4e 81       	ldd	r20, Y+6	; 0x06
    222e:	5f 81       	ldd	r21, Y+7	; 0x07
    2230:	68 85       	ldd	r22, Y+8	; 0x08
    2232:	8a 85       	ldd	r24, Y+10	; 0x0a
    2234:	0e 94 54 11 	call	0x22a8	; 0x22a8 <action_exec>
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    2238:	f8 01       	movw	r30, r16
    223a:	e2 59       	subi	r30, 0x92	; 146
    223c:	fe 4f       	sbci	r31, 0xFE	; 254
    223e:	80 81       	ld	r24, Z
    2240:	8e 25       	eor	r24, r14
    2242:	80 83       	st	Z, r24
                    // process a key per task call
                    goto MATRIX_LOOP_END;
    2244:	06 c0       	rjmp	.+12     	; 0x2252 <keyboard_task+0xf0>
    2246:	2f 5f       	subi	r18, 0xFF	; 255
    2248:	3f 4f       	sbci	r19, 0xFF	; 255
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    224a:	28 30       	cpi	r18, 0x08	; 8
    224c:	31 05       	cpc	r19, r1
    224e:	61 f6       	brne	.-104    	; 0x21e8 <keyboard_task+0x86>
    2250:	a9 cf       	rjmp	.-174    	; 0x21a4 <keyboard_task+0x42>

MATRIX_LOOP_END:

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    2252:	0e 94 39 22 	call	0x4472	; 0x4472 <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    2256:	10 91 6d 01 	lds	r17, 0x016D
    225a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <host_keyboard_leds>
    225e:	18 17       	cp	r17, r24
    2260:	a1 f0       	breq	.+40     	; 0x228a <keyboard_task+0x128>
        led_status = host_keyboard_leds();
    2262:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <host_keyboard_leds>
    2266:	80 93 6d 01 	sts	0x016D, r24
        keyboard_set_leds(led_status);
    }
}
    226a:	2b 96       	adiw	r28, 0x0b	; 11
    226c:	0f b6       	in	r0, 0x3f	; 63
    226e:	f8 94       	cli
    2270:	de bf       	out	0x3e, r29	; 62
    2272:	0f be       	out	0x3f, r0	; 63
    2274:	cd bf       	out	0x3d, r28	; 61
    2276:	df 91       	pop	r29
    2278:	cf 91       	pop	r28
    227a:	1f 91       	pop	r17
    227c:	0f 91       	pop	r16
    227e:	ff 90       	pop	r15
    2280:	ef 90       	pop	r14
    2282:	df 90       	pop	r13
    2284:	cf 90       	pop	r12
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        keyboard_set_leds(led_status);
    2286:	0c 94 89 10 	jmp	0x2112	; 0x2112 <keyboard_set_leds>
    }
}
    228a:	2b 96       	adiw	r28, 0x0b	; 11
    228c:	0f b6       	in	r0, 0x3f	; 63
    228e:	f8 94       	cli
    2290:	de bf       	out	0x3e, r29	; 62
    2292:	0f be       	out	0x3f, r0	; 63
    2294:	cd bf       	out	0x3d, r28	; 61
    2296:	df 91       	pop	r29
    2298:	cf 91       	pop	r28
    229a:	1f 91       	pop	r17
    229c:	0f 91       	pop	r16
    229e:	ff 90       	pop	r15
    22a0:	ef 90       	pop	r14
    22a2:	df 90       	pop	r13
    22a4:	cf 90       	pop	r12
    22a6:	08 95       	ret

000022a8 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    22a8:	cf 93       	push	r28
    22aa:	df 93       	push	r29
    22ac:	cd b7       	in	r28, 0x3d	; 61
    22ae:	de b7       	in	r29, 0x3e	; 62
    22b0:	2b 97       	sbiw	r28, 0x0b	; 11
    22b2:	0f b6       	in	r0, 0x3f	; 63
    22b4:	f8 94       	cli
    22b6:	de bf       	out	0x3e, r29	; 62
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	cd bf       	out	0x3d, r28	; 61
    22bc:	4f 83       	std	Y+7, r20	; 0x07
    22be:	58 87       	std	Y+8, r21	; 0x08
    22c0:	69 87       	std	Y+9, r22	; 0x09
    22c2:	7a 87       	std	Y+10, r23	; 0x0a
    22c4:	8b 87       	std	Y+11, r24	; 0x0b
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
    }

    keyrecord_t record = { .event = event };
    22c6:	de 01       	movw	r26, r28
    22c8:	11 96       	adiw	r26, 0x01	; 1
    22ca:	86 e0       	ldi	r24, 0x06	; 6
    22cc:	fd 01       	movw	r30, r26
    22ce:	11 92       	st	Z+, r1
    22d0:	8a 95       	dec	r24
    22d2:	e9 f7       	brne	.-6      	; 0x22ce <action_exec+0x26>
    22d4:	85 e0       	ldi	r24, 0x05	; 5
    22d6:	fe 01       	movw	r30, r28
    22d8:	37 96       	adiw	r30, 0x07	; 7
    22da:	01 90       	ld	r0, Z+
    22dc:	0d 92       	st	X+, r0
    22de:	8a 95       	dec	r24
    22e0:	e1 f7       	brne	.-8      	; 0x22da <action_exec+0x32>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    22e2:	49 81       	ldd	r20, Y+1	; 0x01
    22e4:	5a 81       	ldd	r21, Y+2	; 0x02
    22e6:	6b 81       	ldd	r22, Y+3	; 0x03
    22e8:	7c 81       	ldd	r23, Y+4	; 0x04
    22ea:	8d 81       	ldd	r24, Y+5	; 0x05
    22ec:	9e 81       	ldd	r25, Y+6	; 0x06
    22ee:	0e 94 3b 18 	call	0x3076	; 0x3076 <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    22f2:	2b 96       	adiw	r28, 0x0b	; 11
    22f4:	0f b6       	in	r0, 0x3f	; 63
    22f6:	f8 94       	cli
    22f8:	de bf       	out	0x3e, r29	; 62
    22fa:	0f be       	out	0x3f, r0	; 63
    22fc:	cd bf       	out	0x3d, r28	; 61
    22fe:	df 91       	pop	r29
    2300:	cf 91       	pop	r28
    2302:	08 95       	ret

00002304 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    2304:	cf 93       	push	r28
    2306:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    2308:	88 23       	and	r24, r24
    230a:	09 f4       	brne	.+2      	; 0x230e <register_code+0xa>
    230c:	98 c0       	rjmp	.+304    	; 0x243e <register_code+0x13a>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    230e:	8c ef       	ldi	r24, 0xFC	; 252
    2310:	8c 0f       	add	r24, r28
    2312:	81 3a       	cpi	r24, 0xA1	; 161
    2314:	48 f4       	brcc	.+18     	; 0x2328 <register_code+0x24>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    2316:	8c 2f       	mov	r24, r28
    2318:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <command_proc>
    231c:	81 11       	cpse	r24, r1
    231e:	8f c0       	rjmp	.+286    	; 0x243e <register_code+0x13a>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    2320:	8c 2f       	mov	r24, r28
    2322:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <add_key>
    2326:	0c c0       	rjmp	.+24     	; 0x2340 <register_code+0x3c>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    2328:	80 e2       	ldi	r24, 0x20	; 32
    232a:	8c 0f       	add	r24, r28
    232c:	88 30       	cpi	r24, 0x08	; 8
    232e:	58 f4       	brcc	.+22     	; 0x2346 <register_code+0x42>
        add_mods(MOD_BIT(code));
    2330:	c7 70       	andi	r28, 0x07	; 7
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	01 c0       	rjmp	.+2      	; 0x2338 <register_code+0x34>
    2336:	88 0f       	add	r24, r24
    2338:	ca 95       	dec	r28
    233a:	ea f7       	brpl	.-6      	; 0x2336 <register_code+0x32>
    233c:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <add_mods>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2340:	cf 91       	pop	r28
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    2342:	0c 94 be 1b 	jmp	0x377c	; 0x377c <send_keyboard_report>
    }
    else if IS_SYSTEM(code) {
    2346:	8b e5       	ldi	r24, 0x5B	; 91
    2348:	8c 0f       	add	r24, r28
    234a:	83 30       	cpi	r24, 0x03	; 3
    234c:	78 f4       	brcc	.+30     	; 0x236c <register_code+0x68>
        host_system_send(KEYCODE2SYSTEM(code));
    234e:	c5 3a       	cpi	r28, 0xA5	; 165
    2350:	29 f0       	breq	.+10     	; 0x235c <register_code+0x58>
    2352:	c6 3a       	cpi	r28, 0xA6	; 166
    2354:	31 f4       	brne	.+12     	; 0x2362 <register_code+0x5e>
    2356:	82 e8       	ldi	r24, 0x82	; 130
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	05 c0       	rjmp	.+10     	; 0x2366 <register_code+0x62>
    235c:	81 e8       	ldi	r24, 0x81	; 129
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	02 c0       	rjmp	.+4      	; 0x2366 <register_code+0x62>
    2362:	83 e8       	ldi	r24, 0x83	; 131
    2364:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2366:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    2368:	0c 94 54 10 	jmp	0x20a8	; 0x20a8 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    236c:	88 e5       	ldi	r24, 0x58	; 88
    236e:	8c 0f       	add	r24, r28
    2370:	83 31       	cpi	r24, 0x13	; 19
    2372:	08 f0       	brcs	.+2      	; 0x2376 <register_code+0x72>
    2374:	64 c0       	rjmp	.+200    	; 0x243e <register_code+0x13a>
        host_consumer_send(KEYCODE2CONSUMER(code));
    2376:	c8 3a       	cpi	r28, 0xA8	; 168
    2378:	39 f1       	breq	.+78     	; 0x23c8 <register_code+0xc4>
    237a:	c9 3a       	cpi	r28, 0xA9	; 169
    237c:	41 f1       	breq	.+80     	; 0x23ce <register_code+0xca>
    237e:	ca 3a       	cpi	r28, 0xAA	; 170
    2380:	49 f1       	breq	.+82     	; 0x23d4 <register_code+0xd0>
    2382:	cb 3a       	cpi	r28, 0xAB	; 171
    2384:	51 f1       	breq	.+84     	; 0x23da <register_code+0xd6>
    2386:	cc 3a       	cpi	r28, 0xAC	; 172
    2388:	59 f1       	breq	.+86     	; 0x23e0 <register_code+0xdc>
    238a:	cd 3a       	cpi	r28, 0xAD	; 173
    238c:	61 f1       	breq	.+88     	; 0x23e6 <register_code+0xe2>
    238e:	c0 3b       	cpi	r28, 0xB0	; 176
    2390:	69 f1       	breq	.+90     	; 0x23ec <register_code+0xe8>
    2392:	ce 3a       	cpi	r28, 0xAE	; 174
    2394:	71 f1       	breq	.+92     	; 0x23f2 <register_code+0xee>
    2396:	cf 3a       	cpi	r28, 0xAF	; 175
    2398:	79 f1       	breq	.+94     	; 0x23f8 <register_code+0xf4>
    239a:	c1 3b       	cpi	r28, 0xB1	; 177
    239c:	81 f1       	breq	.+96     	; 0x23fe <register_code+0xfa>
    239e:	c2 3b       	cpi	r28, 0xB2	; 178
    23a0:	89 f1       	breq	.+98     	; 0x2404 <register_code+0x100>
    23a2:	c3 3b       	cpi	r28, 0xB3	; 179
    23a4:	91 f1       	breq	.+100    	; 0x240a <register_code+0x106>
    23a6:	c4 3b       	cpi	r28, 0xB4	; 180
    23a8:	99 f1       	breq	.+102    	; 0x2410 <register_code+0x10c>
    23aa:	c5 3b       	cpi	r28, 0xB5	; 181
    23ac:	a1 f1       	breq	.+104    	; 0x2416 <register_code+0x112>
    23ae:	c6 3b       	cpi	r28, 0xB6	; 182
    23b0:	a9 f1       	breq	.+106    	; 0x241c <register_code+0x118>
    23b2:	c7 3b       	cpi	r28, 0xB7	; 183
    23b4:	b1 f1       	breq	.+108    	; 0x2422 <register_code+0x11e>
    23b6:	c8 3b       	cpi	r28, 0xB8	; 184
    23b8:	b9 f1       	breq	.+110    	; 0x2428 <register_code+0x124>
    23ba:	c9 3b       	cpi	r28, 0xB9	; 185
    23bc:	c1 f1       	breq	.+112    	; 0x242e <register_code+0x12a>
    23be:	ca 3b       	cpi	r28, 0xBA	; 186
    23c0:	c9 f5       	brne	.+114    	; 0x2434 <register_code+0x130>
    23c2:	8a e2       	ldi	r24, 0x2A	; 42
    23c4:	92 e0       	ldi	r25, 0x02	; 2
    23c6:	38 c0       	rjmp	.+112    	; 0x2438 <register_code+0x134>
    23c8:	82 ee       	ldi	r24, 0xE2	; 226
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	35 c0       	rjmp	.+106    	; 0x2438 <register_code+0x134>
    23ce:	89 ee       	ldi	r24, 0xE9	; 233
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	32 c0       	rjmp	.+100    	; 0x2438 <register_code+0x134>
    23d4:	8a ee       	ldi	r24, 0xEA	; 234
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	2f c0       	rjmp	.+94     	; 0x2438 <register_code+0x134>
    23da:	85 eb       	ldi	r24, 0xB5	; 181
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	2c c0       	rjmp	.+88     	; 0x2438 <register_code+0x134>
    23e0:	86 eb       	ldi	r24, 0xB6	; 182
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	29 c0       	rjmp	.+82     	; 0x2438 <register_code+0x134>
    23e6:	87 eb       	ldi	r24, 0xB7	; 183
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	26 c0       	rjmp	.+76     	; 0x2438 <register_code+0x134>
    23ec:	8c ec       	ldi	r24, 0xCC	; 204
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	23 c0       	rjmp	.+70     	; 0x2438 <register_code+0x134>
    23f2:	8d ec       	ldi	r24, 0xCD	; 205
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	20 c0       	rjmp	.+64     	; 0x2438 <register_code+0x134>
    23f8:	83 e8       	ldi	r24, 0x83	; 131
    23fa:	91 e0       	ldi	r25, 0x01	; 1
    23fc:	1d c0       	rjmp	.+58     	; 0x2438 <register_code+0x134>
    23fe:	8a e8       	ldi	r24, 0x8A	; 138
    2400:	91 e0       	ldi	r25, 0x01	; 1
    2402:	1a c0       	rjmp	.+52     	; 0x2438 <register_code+0x134>
    2404:	82 e9       	ldi	r24, 0x92	; 146
    2406:	91 e0       	ldi	r25, 0x01	; 1
    2408:	17 c0       	rjmp	.+46     	; 0x2438 <register_code+0x134>
    240a:	84 e9       	ldi	r24, 0x94	; 148
    240c:	91 e0       	ldi	r25, 0x01	; 1
    240e:	14 c0       	rjmp	.+40     	; 0x2438 <register_code+0x134>
    2410:	81 e2       	ldi	r24, 0x21	; 33
    2412:	92 e0       	ldi	r25, 0x02	; 2
    2414:	11 c0       	rjmp	.+34     	; 0x2438 <register_code+0x134>
    2416:	83 e2       	ldi	r24, 0x23	; 35
    2418:	92 e0       	ldi	r25, 0x02	; 2
    241a:	0e c0       	rjmp	.+28     	; 0x2438 <register_code+0x134>
    241c:	84 e2       	ldi	r24, 0x24	; 36
    241e:	92 e0       	ldi	r25, 0x02	; 2
    2420:	0b c0       	rjmp	.+22     	; 0x2438 <register_code+0x134>
    2422:	85 e2       	ldi	r24, 0x25	; 37
    2424:	92 e0       	ldi	r25, 0x02	; 2
    2426:	08 c0       	rjmp	.+16     	; 0x2438 <register_code+0x134>
    2428:	86 e2       	ldi	r24, 0x26	; 38
    242a:	92 e0       	ldi	r25, 0x02	; 2
    242c:	05 c0       	rjmp	.+10     	; 0x2438 <register_code+0x134>
    242e:	87 e2       	ldi	r24, 0x27	; 39
    2430:	92 e0       	ldi	r25, 0x02	; 2
    2432:	02 c0       	rjmp	.+4      	; 0x2438 <register_code+0x134>
    2434:	80 e0       	ldi	r24, 0x00	; 0
    2436:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    2438:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    243a:	0c 94 6a 10 	jmp	0x20d4	; 0x20d4 <host_consumer_send>
    }
}
    243e:	cf 91       	pop	r28
    2440:	08 95       	ret

00002442 <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    2442:	88 23       	and	r24, r24
    2444:	29 f1       	breq	.+74     	; 0x2490 <unregister_code+0x4e>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2446:	9c ef       	ldi	r25, 0xFC	; 252
    2448:	98 0f       	add	r25, r24
    244a:	91 3a       	cpi	r25, 0xA1	; 161
    244c:	18 f4       	brcc	.+6      	; 0x2454 <unregister_code+0x12>
        del_key(code);
    244e:	0e 94 29 1b 	call	0x3652	; 0x3652 <del_key>
    2452:	0d c0       	rjmp	.+26     	; 0x246e <unregister_code+0x2c>
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    2454:	90 e2       	ldi	r25, 0x20	; 32
    2456:	98 0f       	add	r25, r24
    2458:	98 30       	cpi	r25, 0x08	; 8
    245a:	58 f4       	brcc	.+22     	; 0x2472 <unregister_code+0x30>
        del_mods(MOD_BIT(code));
    245c:	87 70       	andi	r24, 0x07	; 7
    245e:	91 e0       	ldi	r25, 0x01	; 1
    2460:	01 c0       	rjmp	.+2      	; 0x2464 <unregister_code+0x22>
    2462:	99 0f       	add	r25, r25
    2464:	8a 95       	dec	r24
    2466:	ea f7       	brpl	.-6      	; 0x2462 <unregister_code+0x20>
    2468:	89 2f       	mov	r24, r25
    246a:	0e 94 81 1b 	call	0x3702	; 0x3702 <del_mods>
        send_keyboard_report();
    246e:	0c 94 be 1b 	jmp	0x377c	; 0x377c <send_keyboard_report>
    }
    else if IS_SYSTEM(code) {
    2472:	9b e5       	ldi	r25, 0x5B	; 91
    2474:	98 0f       	add	r25, r24
    2476:	93 30       	cpi	r25, 0x03	; 3
    2478:	20 f4       	brcc	.+8      	; 0x2482 <unregister_code+0x40>
        host_system_send(0);
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	0c 94 54 10 	jmp	0x20a8	; 0x20a8 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    2482:	88 5a       	subi	r24, 0xA8	; 168
    2484:	83 31       	cpi	r24, 0x13	; 19
    2486:	20 f4       	brcc	.+8      	; 0x2490 <unregister_code+0x4e>
        host_consumer_send(0);
    2488:	80 e0       	ldi	r24, 0x00	; 0
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	0c 94 6a 10 	jmp	0x20d4	; 0x20d4 <host_consumer_send>
    2490:	08 95       	ret

00002492 <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    2492:	88 23       	and	r24, r24
    2494:	21 f0       	breq	.+8      	; 0x249e <register_mods+0xc>
        add_mods(mods);
    2496:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <add_mods>
        send_keyboard_report();
    249a:	0c 94 be 1b 	jmp	0x377c	; 0x377c <send_keyboard_report>
    249e:	08 95       	ret

000024a0 <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    24a0:	88 23       	and	r24, r24
    24a2:	21 f0       	breq	.+8      	; 0x24ac <unregister_mods+0xc>
        del_mods(mods);
    24a4:	0e 94 81 1b 	call	0x3702	; 0x3702 <del_mods>
        send_keyboard_report();
    24a8:	0c 94 be 1b 	jmp	0x377c	; 0x377c <send_keyboard_report>
    24ac:	08 95       	ret

000024ae <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    24ae:	cf 92       	push	r12
    24b0:	df 92       	push	r13
    24b2:	ef 92       	push	r14
    24b4:	ff 92       	push	r15
    24b6:	0f 93       	push	r16
    24b8:	1f 93       	push	r17
    24ba:	cf 93       	push	r28
    24bc:	df 93       	push	r29
    24be:	cd b7       	in	r28, 0x3d	; 61
    24c0:	de b7       	in	r29, 0x3e	; 62
    24c2:	28 97       	sbiw	r28, 0x08	; 8
    24c4:	0f b6       	in	r0, 0x3f	; 63
    24c6:	f8 94       	cli
    24c8:	de bf       	out	0x3e, r29	; 62
    24ca:	0f be       	out	0x3f, r0	; 63
    24cc:	cd bf       	out	0x3d, r28	; 61
    24ce:	8c 01       	movw	r16, r24
    keyevent_t event = record->event;
    24d0:	85 e0       	ldi	r24, 0x05	; 5
    24d2:	f8 01       	movw	r30, r16
    24d4:	de 01       	movw	r26, r28
    24d6:	11 96       	adiw	r26, 0x01	; 1
    24d8:	01 90       	ld	r0, Z+
    24da:	0d 92       	st	X+, r0
    24dc:	8a 95       	dec	r24
    24de:	e1 f7       	brne	.-8      	; 0x24d8 <process_action+0x2a>
    24e0:	f8 01       	movw	r30, r16
    24e2:	40 81       	ld	r20, Z
    24e4:	31 81       	ldd	r19, Z+1	; 0x01
    24e6:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    24e8:	25 81       	ldd	r18, Z+5	; 0x05
    24ea:	22 95       	swap	r18
    24ec:	2f 70       	andi	r18, 0x0F	; 15

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    24ee:	83 81       	ldd	r24, Z+3	; 0x03
    24f0:	94 81       	ldd	r25, Z+4	; 0x04
    24f2:	89 2b       	or	r24, r25
    24f4:	31 f0       	breq	.+12     	; 0x2502 <process_action+0x54>
    24f6:	3f 3f       	cpi	r19, 0xFF	; 255
    24f8:	31 f4       	brne	.+12     	; 0x2506 <process_action+0x58>
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	4f 3f       	cpi	r20, 0xFF	; 255
    24fe:	19 f4       	brne	.+6      	; 0x2506 <process_action+0x58>
    2500:	03 c0       	rjmp	.+6      	; 0x2508 <process_action+0x5a>
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	01 c0       	rjmp	.+2      	; 0x2508 <process_action+0x5a>
    2506:	80 e0       	ldi	r24, 0x00	; 0
#endif

    if (IS_NOEVENT(event)) { return; }
    2508:	80 fd       	sbrc	r24, 0
    250a:	c8 c2       	rjmp	.+1424   	; 0x2a9c <process_action+0x5ee>

    action_t action = layer_switch_get_action(event.key);
    250c:	49 83       	std	Y+1, r20	; 0x01
    250e:	3a 83       	std	Y+2, r19	; 0x02
    2510:	89 81       	ldd	r24, Y+1	; 0x01
    2512:	9a 81       	ldd	r25, Y+2	; 0x02
    2514:	2f 83       	std	Y+7, r18	; 0x07
    2516:	0e 94 96 1a 	call	0x352c	; 0x352c <layer_switch_get_action>
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    251a:	9e 83       	std	Y+6, r25	; 0x06
    251c:	88 87       	std	Y+8, r24	; 0x08
    251e:	0e 94 95 1a 	call	0x352a	; 0x352a <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    2522:	0e 94 68 19 	call	0x32d0	; 0x32d0 <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    2526:	4e 81       	ldd	r20, Y+6	; 0x06
    2528:	e4 2f       	mov	r30, r20
    252a:	e2 95       	swap	r30
    252c:	ef 70       	andi	r30, 0x0F	; 15
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	e0 5a       	subi	r30, 0xA0	; 160
    2532:	ff 4f       	sbci	r31, 0xFF	; 255
    2534:	2f 81       	ldd	r18, Y+7	; 0x07
    2536:	68 85       	ldd	r22, Y+8	; 0x08
    2538:	0c 94 4a 29 	jmp	0x5294	; 0x5294 <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    253c:	84 2f       	mov	r24, r20
    253e:	80 7f       	andi	r24, 0xF0	; 240
    2540:	14 2f       	mov	r17, r20
    2542:	1f 70       	andi	r17, 0x0F	; 15
    2544:	88 23       	and	r24, r24
    2546:	11 f0       	breq	.+4      	; 0x254c <process_action+0x9e>
    2548:	12 95       	swap	r17
    254a:	10 7f       	andi	r17, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    254c:	ff 20       	and	r15, r15
    254e:	59 f0       	breq	.+22     	; 0x2566 <process_action+0xb8>
                    if (mods) {
    2550:	11 23       	and	r17, r17
    2552:	09 f4       	brne	.+2      	; 0x2556 <process_action+0xa8>
    2554:	58 c2       	rjmp	.+1200   	; 0x2a06 <process_action+0x558>
                        add_weak_mods(mods);
    2556:	81 2f       	mov	r24, r17
    2558:	68 87       	std	Y+8, r22	; 0x08
    255a:	0e 94 8b 1b 	call	0x3716	; 0x3716 <add_weak_mods>
                        send_keyboard_report();
    255e:	0e 94 be 1b 	call	0x377c	; 0x377c <send_keyboard_report>
    2562:	68 85       	ldd	r22, Y+8	; 0x08
    2564:	50 c2       	rjmp	.+1184   	; 0x2a06 <process_action+0x558>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    2566:	86 2f       	mov	r24, r22
    2568:	0e 94 21 12 	call	0x2442	; 0x2442 <unregister_code>
                    if (mods) {
    256c:	11 23       	and	r17, r17
    256e:	09 f4       	brne	.+2      	; 0x2572 <process_action+0xc4>
    2570:	95 c2       	rjmp	.+1322   	; 0x2a9c <process_action+0x5ee>
                        del_weak_mods(mods);
    2572:	81 2f       	mov	r24, r17
    2574:	0e 94 91 1b 	call	0x3722	; 0x3722 <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    2578:	28 96       	adiw	r28, 0x08	; 8
    257a:	0f b6       	in	r0, 0x3f	; 63
    257c:	f8 94       	cli
    257e:	de bf       	out	0x3e, r29	; 62
    2580:	0f be       	out	0x3f, r0	; 63
    2582:	cd bf       	out	0x3d, r28	; 61
    2584:	df 91       	pop	r29
    2586:	cf 91       	pop	r28
    2588:	1f 91       	pop	r17
    258a:	0f 91       	pop	r16
    258c:	ff 90       	pop	r15
    258e:	ef 90       	pop	r14
    2590:	df 90       	pop	r13
    2592:	cf 90       	pop	r12
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    2594:	0c 94 be 1b 	jmp	0x377c	; 0x377c <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    2598:	34 2f       	mov	r19, r20
    259a:	30 7f       	andi	r19, 0xF0	; 240
    259c:	84 2f       	mov	r24, r20
    259e:	8f 70       	andi	r24, 0x0F	; 15
    25a0:	30 32       	cpi	r19, 0x20	; 32
    25a2:	11 f0       	breq	.+4      	; 0x25a8 <process_action+0xfa>
    25a4:	82 95       	swap	r24
    25a6:	80 7f       	andi	r24, 0xF0	; 240
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    25a8:	66 23       	and	r22, r22
    25aa:	19 f0       	breq	.+6      	; 0x25b2 <process_action+0x104>
    25ac:	61 30       	cpi	r22, 0x01	; 1
    25ae:	09 f1       	breq	.+66     	; 0x25f2 <process_action+0x144>
    25b0:	2a c0       	rjmp	.+84     	; 0x2606 <process_action+0x158>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    25b2:	ff 20       	and	r15, r15
    25b4:	a1 f0       	breq	.+40     	; 0x25de <process_action+0x130>
                            if (tap_count == 0) {
    25b6:	22 23       	and	r18, r18
    25b8:	81 f1       	breq	.+96     	; 0x261a <process_action+0x16c>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    25ba:	21 30       	cpi	r18, 0x01	; 1
    25bc:	71 f5       	brne	.+92     	; 0x261a <process_action+0x16c>
            break;
#endif
        default:
            break;
    }
}
    25be:	28 96       	adiw	r28, 0x08	; 8
    25c0:	0f b6       	in	r0, 0x3f	; 63
    25c2:	f8 94       	cli
    25c4:	de bf       	out	0x3e, r29	; 62
    25c6:	0f be       	out	0x3f, r0	; 63
    25c8:	cd bf       	out	0x3d, r28	; 61
    25ca:	df 91       	pop	r29
    25cc:	cf 91       	pop	r28
    25ce:	1f 91       	pop	r17
    25d0:	0f 91       	pop	r16
    25d2:	ff 90       	pop	r15
    25d4:	ef 90       	pop	r14
    25d6:	df 90       	pop	r13
    25d8:	cf 90       	pop	r12
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    25da:	0c 94 9b 1b 	jmp	0x3736	; 0x3736 <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    25de:	22 23       	and	r18, r18
    25e0:	19 f0       	breq	.+6      	; 0x25e8 <process_action+0x13a>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    25e2:	21 30       	cpi	r18, 0x01	; 1
    25e4:	09 f4       	brne	.+2      	; 0x25e8 <process_action+0x13a>
    25e6:	5a c2       	rjmp	.+1204   	; 0x2a9c <process_action+0x5ee>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    25e8:	8e 83       	std	Y+6, r24	; 0x06
    25ea:	0e 94 a4 1b 	call	0x3748	; 0x3748 <clear_oneshot_mods>
                                unregister_mods(mods);
    25ee:	8e 81       	ldd	r24, Y+6	; 0x06
    25f0:	8e c1       	rjmp	.+796    	; 0x290e <process_action+0x460>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    25f2:	ff 20       	and	r15, r15
    25f4:	21 f0       	breq	.+8      	; 0x25fe <process_action+0x150>
                            if (tap_count <= TAPPING_TOGGLE) {
    25f6:	26 30       	cpi	r18, 0x06	; 6
    25f8:	08 f0       	brcs	.+2      	; 0x25fc <process_action+0x14e>
    25fa:	50 c2       	rjmp	.+1184   	; 0x2a9c <process_action+0x5ee>
    25fc:	0e c0       	rjmp	.+28     	; 0x261a <process_action+0x16c>
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    25fe:	25 30       	cpi	r18, 0x05	; 5
    2600:	08 f0       	brcs	.+2      	; 0x2604 <process_action+0x156>
    2602:	4c c2       	rjmp	.+1176   	; 0x2a9c <process_action+0x5ee>
    2604:	84 c1       	rjmp	.+776    	; 0x290e <process_action+0x460>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    2606:	ff 20       	and	r15, r15
    2608:	c1 f0       	breq	.+48     	; 0x263a <process_action+0x18c>
                            if (tap_count > 0) {
    260a:	22 23       	and	r18, r18
    260c:	31 f0       	breq	.+12     	; 0x261a <process_action+0x16c>
                                if (record->tap.interrupted) {
    260e:	f8 01       	movw	r30, r16
    2610:	95 81       	ldd	r25, Z+5	; 0x05
    2612:	90 ff       	sbrs	r25, 0
    2614:	f8 c1       	rjmp	.+1008   	; 0x2a06 <process_action+0x558>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    2616:	9f 70       	andi	r25, 0x0F	; 15
    2618:	95 83       	std	Z+5, r25	; 0x05
            break;
#endif
        default:
            break;
    }
}
    261a:	28 96       	adiw	r28, 0x08	; 8
    261c:	0f b6       	in	r0, 0x3f	; 63
    261e:	f8 94       	cli
    2620:	de bf       	out	0x3e, r29	; 62
    2622:	0f be       	out	0x3f, r0	; 63
    2624:	cd bf       	out	0x3d, r28	; 61
    2626:	df 91       	pop	r29
    2628:	cf 91       	pop	r28
    262a:	1f 91       	pop	r17
    262c:	0f 91       	pop	r16
    262e:	ff 90       	pop	r15
    2630:	ef 90       	pop	r14
    2632:	df 90       	pop	r13
    2634:	cf 90       	pop	r12
                            if (tap_count > 0) {
                                if (record->tap.interrupted) {
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
                                    register_mods(mods);
    2636:	0c 94 49 12 	jmp	0x2492	; 0x2492 <register_mods>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    263a:	22 23       	and	r18, r18
    263c:	09 f4       	brne	.+2      	; 0x2640 <process_action+0x192>
    263e:	67 c1       	rjmp	.+718    	; 0x290e <process_action+0x460>
    2640:	f6 c1       	rjmp	.+1004   	; 0x2a2e <process_action+0x580>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    2642:	24 2f       	mov	r18, r20
    2644:	26 95       	lsr	r18
    2646:	26 95       	lsr	r18
    2648:	23 70       	andi	r18, 0x03	; 3
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	21 15       	cp	r18, r1
    264e:	31 05       	cpc	r19, r1
    2650:	21 f0       	breq	.+8      	; 0x265a <process_action+0x1ac>
    2652:	21 30       	cpi	r18, 0x01	; 1
    2654:	31 05       	cpc	r19, r1
    2656:	c9 f0       	breq	.+50     	; 0x268a <process_action+0x1dc>
    2658:	21 c2       	rjmp	.+1090   	; 0x2a9c <process_action+0x5ee>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    265a:	ff 20       	and	r15, r15
    265c:	21 f0       	breq	.+8      	; 0x2666 <process_action+0x1b8>
                        host_system_send(action.usage.code);
    265e:	86 2f       	mov	r24, r22
    2660:	94 2f       	mov	r25, r20
    2662:	93 70       	andi	r25, 0x03	; 3
    2664:	02 c0       	rjmp	.+4      	; 0x266a <process_action+0x1bc>
                    } else {
                        host_system_send(0);
    2666:	80 e0       	ldi	r24, 0x00	; 0
    2668:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    266a:	28 96       	adiw	r28, 0x08	; 8
    266c:	0f b6       	in	r0, 0x3f	; 63
    266e:	f8 94       	cli
    2670:	de bf       	out	0x3e, r29	; 62
    2672:	0f be       	out	0x3f, r0	; 63
    2674:	cd bf       	out	0x3d, r28	; 61
    2676:	df 91       	pop	r29
    2678:	cf 91       	pop	r28
    267a:	1f 91       	pop	r17
    267c:	0f 91       	pop	r16
    267e:	ff 90       	pop	r15
    2680:	ef 90       	pop	r14
    2682:	df 90       	pop	r13
    2684:	cf 90       	pop	r12
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    2686:	0c 94 54 10 	jmp	0x20a8	; 0x20a8 <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    268a:	ff 20       	and	r15, r15
    268c:	21 f0       	breq	.+8      	; 0x2696 <process_action+0x1e8>
                        host_consumer_send(action.usage.code);
    268e:	86 2f       	mov	r24, r22
    2690:	94 2f       	mov	r25, r20
    2692:	93 70       	andi	r25, 0x03	; 3
    2694:	02 c0       	rjmp	.+4      	; 0x269a <process_action+0x1ec>
                    } else {
                        host_consumer_send(0);
    2696:	80 e0       	ldi	r24, 0x00	; 0
    2698:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    269a:	28 96       	adiw	r28, 0x08	; 8
    269c:	0f b6       	in	r0, 0x3f	; 63
    269e:	f8 94       	cli
    26a0:	de bf       	out	0x3e, r29	; 62
    26a2:	0f be       	out	0x3f, r0	; 63
    26a4:	cd bf       	out	0x3d, r28	; 61
    26a6:	df 91       	pop	r29
    26a8:	cf 91       	pop	r28
    26aa:	1f 91       	pop	r17
    26ac:	0f 91       	pop	r16
    26ae:	ff 90       	pop	r15
    26b0:	ef 90       	pop	r14
    26b2:	df 90       	pop	r13
    26b4:	cf 90       	pop	r12
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    26b6:	0c 94 6a 10 	jmp	0x20d4	; 0x20d4 <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    26ba:	86 2f       	mov	r24, r22
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    26bc:	ff 20       	and	r15, r15
    26be:	19 f0       	breq	.+6      	; 0x26c6 <process_action+0x218>
                mousekey_on(action.key.code);
    26c0:	0e 94 bf 20 	call	0x417e	; 0x417e <mousekey_on>
    26c4:	02 c0       	rjmp	.+4      	; 0x26ca <process_action+0x21c>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    26c6:	0e 94 27 21 	call	0x424e	; 0x424e <mousekey_off>
            break;
#endif
        default:
            break;
    }
}
    26ca:	28 96       	adiw	r28, 0x08	; 8
    26cc:	0f b6       	in	r0, 0x3f	; 63
    26ce:	f8 94       	cli
    26d0:	de bf       	out	0x3e, r29	; 62
    26d2:	0f be       	out	0x3f, r0	; 63
    26d4:	cd bf       	out	0x3d, r28	; 61
    26d6:	df 91       	pop	r29
    26d8:	cf 91       	pop	r28
    26da:	1f 91       	pop	r17
    26dc:	0f 91       	pop	r16
    26de:	ff 90       	pop	r15
    26e0:	ef 90       	pop	r14
    26e2:	df 90       	pop	r13
    26e4:	cf 90       	pop	r12
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
                mousekey_send();
    26e6:	0c 94 ac 21 	jmp	0x4358	; 0x4358 <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    26ea:	84 2f       	mov	r24, r20
    26ec:	83 70       	andi	r24, 0x03	; 3
    26ee:	09 f0       	breq	.+2      	; 0x26f2 <process_action+0x244>
    26f0:	76 c0       	rjmp	.+236    	; 0x27de <process_action+0x330>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    26f2:	f1 10       	cpse	r15, r1
    26f4:	d3 c1       	rjmp	.+934    	; 0x2a9c <process_action+0x5ee>
                    uint8_t shift = action.layer_bitop.part*4;
    26f6:	26 2f       	mov	r18, r22
    26f8:	22 95       	swap	r18
    26fa:	26 95       	lsr	r18
    26fc:	27 70       	andi	r18, 0x07	; 7
    26fe:	22 0f       	add	r18, r18
    2700:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2702:	86 2f       	mov	r24, r22
    2704:	8f 70       	andi	r24, 0x0F	; 15
    2706:	c8 2e       	mov	r12, r24
    2708:	d1 2c       	mov	r13, r1
    270a:	e1 2c       	mov	r14, r1
    270c:	f1 2c       	mov	r15, r1
    270e:	02 2e       	mov	r0, r18
    2710:	04 c0       	rjmp	.+8      	; 0x271a <process_action+0x26c>
    2712:	cc 0c       	add	r12, r12
    2714:	dd 1c       	adc	r13, r13
    2716:	ee 1c       	adc	r14, r14
    2718:	ff 1c       	adc	r15, r15
    271a:	0a 94       	dec	r0
    271c:	d2 f7       	brpl	.-12     	; 0x2712 <process_action+0x264>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    271e:	64 ff       	sbrs	r22, 4
    2720:	10 c0       	rjmp	.+32     	; 0x2742 <process_action+0x294>
    2722:	6f e0       	ldi	r22, 0x0F	; 15
    2724:	70 e0       	ldi	r23, 0x00	; 0
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	04 c0       	rjmp	.+8      	; 0x2734 <process_action+0x286>
    272c:	66 0f       	add	r22, r22
    272e:	77 1f       	adc	r23, r23
    2730:	88 1f       	adc	r24, r24
    2732:	99 1f       	adc	r25, r25
    2734:	2a 95       	dec	r18
    2736:	d2 f7       	brpl	.-12     	; 0x272c <process_action+0x27e>
    2738:	60 95       	com	r22
    273a:	70 95       	com	r23
    273c:	80 95       	com	r24
    273e:	90 95       	com	r25
    2740:	03 c0       	rjmp	.+6      	; 0x2748 <process_action+0x29a>
    2742:	60 e0       	ldi	r22, 0x00	; 0
    2744:	70 e0       	ldi	r23, 0x00	; 0
    2746:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2748:	24 2f       	mov	r18, r20
    274a:	26 95       	lsr	r18
    274c:	26 95       	lsr	r18
    274e:	23 70       	andi	r18, 0x03	; 3
    2750:	42 2f       	mov	r20, r18
    2752:	50 e0       	ldi	r21, 0x00	; 0
    2754:	42 30       	cpi	r20, 0x02	; 2
    2756:	51 05       	cpc	r21, r1
    2758:	d1 f0       	breq	.+52     	; 0x278e <process_action+0x2e0>
    275a:	43 30       	cpi	r20, 0x03	; 3
    275c:	51 05       	cpc	r21, r1
    275e:	59 f1       	breq	.+86     	; 0x27b6 <process_action+0x308>
    2760:	6c 29       	or	r22, r12
    2762:	7d 29       	or	r23, r13
    2764:	8e 29       	or	r24, r14
    2766:	9f 29       	or	r25, r15
    2768:	41 30       	cpi	r20, 0x01	; 1
    276a:	51 05       	cpc	r21, r1
    276c:	41 f1       	breq	.+80     	; 0x27be <process_action+0x310>
            break;
#endif
        default:
            break;
    }
}
    276e:	28 96       	adiw	r28, 0x08	; 8
    2770:	0f b6       	in	r0, 0x3f	; 63
    2772:	f8 94       	cli
    2774:	de bf       	out	0x3e, r29	; 62
    2776:	0f be       	out	0x3f, r0	; 63
    2778:	cd bf       	out	0x3d, r28	; 61
    277a:	df 91       	pop	r29
    277c:	cf 91       	pop	r28
    277e:	1f 91       	pop	r17
    2780:	0f 91       	pop	r16
    2782:	ff 90       	pop	r15
    2784:	ef 90       	pop	r14
    2786:	df 90       	pop	r13
    2788:	cf 90       	pop	r12
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    278a:	0c 94 8d 19 	jmp	0x331a	; 0x331a <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    278e:	6c 29       	or	r22, r12
    2790:	7d 29       	or	r23, r13
    2792:	8e 29       	or	r24, r14
    2794:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2796:	28 96       	adiw	r28, 0x08	; 8
    2798:	0f b6       	in	r0, 0x3f	; 63
    279a:	f8 94       	cli
    279c:	de bf       	out	0x3e, r29	; 62
    279e:	0f be       	out	0x3f, r0	; 63
    27a0:	cd bf       	out	0x3d, r28	; 61
    27a2:	df 91       	pop	r29
    27a4:	cf 91       	pop	r28
    27a6:	1f 91       	pop	r17
    27a8:	0f 91       	pop	r16
    27aa:	ff 90       	pop	r15
    27ac:	ef 90       	pop	r14
    27ae:	df 90       	pop	r13
    27b0:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    27b2:	0c 94 a7 19 	jmp	0x334e	; 0x334e <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    27b6:	0e 94 8d 19 	call	0x331a	; 0x331a <default_layer_and>
    27ba:	c7 01       	movw	r24, r14
    27bc:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    27be:	28 96       	adiw	r28, 0x08	; 8
    27c0:	0f b6       	in	r0, 0x3f	; 63
    27c2:	f8 94       	cli
    27c4:	de bf       	out	0x3e, r29	; 62
    27c6:	0f be       	out	0x3f, r0	; 63
    27c8:	cd bf       	out	0x3d, r28	; 61
    27ca:	df 91       	pop	r29
    27cc:	cf 91       	pop	r28
    27ce:	1f 91       	pop	r17
    27d0:	0f 91       	pop	r16
    27d2:	ff 90       	pop	r15
    27d4:	ef 90       	pop	r14
    27d6:	df 90       	pop	r13
    27d8:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    27da:	0c 94 73 19 	jmp	0x32e6	; 0x32e6 <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    27de:	ff 20       	and	r15, r15
    27e0:	19 f0       	breq	.+6      	; 0x27e8 <process_action+0x33a>
    27e2:	84 2f       	mov	r24, r20
    27e4:	81 70       	andi	r24, 0x01	; 1
    27e6:	01 c0       	rjmp	.+2      	; 0x27ea <process_action+0x33c>
    27e8:	86 95       	lsr	r24
    27ea:	88 23       	and	r24, r24
    27ec:	09 f4       	brne	.+2      	; 0x27f0 <process_action+0x342>
    27ee:	56 c1       	rjmp	.+684    	; 0x2a9c <process_action+0x5ee>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    27f0:	26 2f       	mov	r18, r22
    27f2:	22 95       	swap	r18
    27f4:	26 95       	lsr	r18
    27f6:	27 70       	andi	r18, 0x07	; 7
    27f8:	22 0f       	add	r18, r18
    27fa:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    27fc:	86 2f       	mov	r24, r22
    27fe:	8f 70       	andi	r24, 0x0F	; 15
    2800:	c8 2e       	mov	r12, r24
    2802:	d1 2c       	mov	r13, r1
    2804:	e1 2c       	mov	r14, r1
    2806:	f1 2c       	mov	r15, r1
    2808:	02 2e       	mov	r0, r18
    280a:	04 c0       	rjmp	.+8      	; 0x2814 <process_action+0x366>
    280c:	cc 0c       	add	r12, r12
    280e:	dd 1c       	adc	r13, r13
    2810:	ee 1c       	adc	r14, r14
    2812:	ff 1c       	adc	r15, r15
    2814:	0a 94       	dec	r0
    2816:	d2 f7       	brpl	.-12     	; 0x280c <process_action+0x35e>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2818:	64 ff       	sbrs	r22, 4
    281a:	10 c0       	rjmp	.+32     	; 0x283c <process_action+0x38e>
    281c:	6f e0       	ldi	r22, 0x0F	; 15
    281e:	70 e0       	ldi	r23, 0x00	; 0
    2820:	80 e0       	ldi	r24, 0x00	; 0
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	04 c0       	rjmp	.+8      	; 0x282e <process_action+0x380>
    2826:	66 0f       	add	r22, r22
    2828:	77 1f       	adc	r23, r23
    282a:	88 1f       	adc	r24, r24
    282c:	99 1f       	adc	r25, r25
    282e:	2a 95       	dec	r18
    2830:	d2 f7       	brpl	.-12     	; 0x2826 <process_action+0x378>
    2832:	60 95       	com	r22
    2834:	70 95       	com	r23
    2836:	80 95       	com	r24
    2838:	90 95       	com	r25
    283a:	03 c0       	rjmp	.+6      	; 0x2842 <process_action+0x394>
    283c:	60 e0       	ldi	r22, 0x00	; 0
    283e:	70 e0       	ldi	r23, 0x00	; 0
    2840:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2842:	24 2f       	mov	r18, r20
    2844:	26 95       	lsr	r18
    2846:	26 95       	lsr	r18
    2848:	23 70       	andi	r18, 0x03	; 3
    284a:	42 2f       	mov	r20, r18
    284c:	50 e0       	ldi	r21, 0x00	; 0
    284e:	42 30       	cpi	r20, 0x02	; 2
    2850:	51 05       	cpc	r21, r1
    2852:	d1 f0       	breq	.+52     	; 0x2888 <process_action+0x3da>
    2854:	43 30       	cpi	r20, 0x03	; 3
    2856:	51 05       	cpc	r21, r1
    2858:	59 f1       	breq	.+86     	; 0x28b0 <process_action+0x402>
    285a:	6c 29       	or	r22, r12
    285c:	7d 29       	or	r23, r13
    285e:	8e 29       	or	r24, r14
    2860:	9f 29       	or	r25, r15
    2862:	41 30       	cpi	r20, 0x01	; 1
    2864:	51 05       	cpc	r21, r1
    2866:	41 f1       	breq	.+80     	; 0x28b8 <process_action+0x40a>
            break;
#endif
        default:
            break;
    }
}
    2868:	28 96       	adiw	r28, 0x08	; 8
    286a:	0f b6       	in	r0, 0x3f	; 63
    286c:	f8 94       	cli
    286e:	de bf       	out	0x3e, r29	; 62
    2870:	0f be       	out	0x3f, r0	; 63
    2872:	cd bf       	out	0x3d, r28	; 61
    2874:	df 91       	pop	r29
    2876:	cf 91       	pop	r28
    2878:	1f 91       	pop	r17
    287a:	0f 91       	pop	r16
    287c:	ff 90       	pop	r15
    287e:	ef 90       	pop	r14
    2880:	df 90       	pop	r13
    2882:	cf 90       	pop	r12
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2884:	0c 94 61 1a 	jmp	0x34c2	; 0x34c2 <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2888:	6c 29       	or	r22, r12
    288a:	7d 29       	or	r23, r13
    288c:	8e 29       	or	r24, r14
    288e:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2890:	28 96       	adiw	r28, 0x08	; 8
    2892:	0f b6       	in	r0, 0x3f	; 63
    2894:	f8 94       	cli
    2896:	de bf       	out	0x3e, r29	; 62
    2898:	0f be       	out	0x3f, r0	; 63
    289a:	cd bf       	out	0x3d, r28	; 61
    289c:	df 91       	pop	r29
    289e:	cf 91       	pop	r28
    28a0:	1f 91       	pop	r17
    28a2:	0f 91       	pop	r16
    28a4:	ff 90       	pop	r15
    28a6:	ef 90       	pop	r14
    28a8:	df 90       	pop	r13
    28aa:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    28ac:	0c 94 7b 1a 	jmp	0x34f6	; 0x34f6 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    28b0:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <layer_and>
    28b4:	c7 01       	movw	r24, r14
    28b6:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    28b8:	28 96       	adiw	r28, 0x08	; 8
    28ba:	0f b6       	in	r0, 0x3f	; 63
    28bc:	f8 94       	cli
    28be:	de bf       	out	0x3e, r29	; 62
    28c0:	0f be       	out	0x3f, r0	; 63
    28c2:	cd bf       	out	0x3d, r28	; 61
    28c4:	df 91       	pop	r29
    28c6:	cf 91       	pop	r28
    28c8:	1f 91       	pop	r17
    28ca:	0f 91       	pop	r16
    28cc:	ff 90       	pop	r15
    28ce:	ef 90       	pop	r14
    28d0:	df 90       	pop	r13
    28d2:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    28d4:	0c 94 47 1a 	jmp	0x348e	; 0x348e <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    28d8:	60 3f       	cpi	r22, 0xF0	; 240
    28da:	49 f1       	breq	.+82     	; 0x292e <process_action+0x480>
    28dc:	18 f4       	brcc	.+6      	; 0x28e4 <process_action+0x436>
    28de:	60 3e       	cpi	r22, 0xE0	; 224
    28e0:	48 f4       	brcc	.+18     	; 0x28f4 <process_action+0x446>
    28e2:	8c c0       	rjmp	.+280    	; 0x29fc <process_action+0x54e>
    28e4:	62 3f       	cpi	r22, 0xF2	; 242
    28e6:	09 f4       	brne	.+2      	; 0x28ea <process_action+0x43c>
    28e8:	51 c0       	rjmp	.+162    	; 0x298c <process_action+0x4de>
    28ea:	e0 f1       	brcs	.+120    	; 0x2964 <process_action+0x4b6>
    28ec:	63 3f       	cpi	r22, 0xF3	; 243
    28ee:	09 f4       	brne	.+2      	; 0x28f2 <process_action+0x444>
    28f0:	61 c0       	rjmp	.+194    	; 0x29b4 <process_action+0x506>
    28f2:	84 c0       	rjmp	.+264    	; 0x29fc <process_action+0x54e>
    28f4:	16 2f       	mov	r17, r22
    28f6:	1f 70       	andi	r17, 0x0F	; 15
    28f8:	84 2f       	mov	r24, r20
    28fa:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    28fc:	ff 20       	and	r15, r15
    28fe:	21 f0       	breq	.+8      	; 0x2908 <process_action+0x45a>
                        layer_on(action.layer_tap.val);
    2900:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <layer_on>
                        register_mods(action.layer_tap.code & 0x0f);
    2904:	81 2f       	mov	r24, r17
    2906:	89 ce       	rjmp	.-750    	; 0x261a <process_action+0x16c>
                    } else {
                        layer_off(action.layer_tap.val);
    2908:	0e 94 01 1a 	call	0x3402	; 0x3402 <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    290c:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    290e:	28 96       	adiw	r28, 0x08	; 8
    2910:	0f b6       	in	r0, 0x3f	; 63
    2912:	f8 94       	cli
    2914:	de bf       	out	0x3e, r29	; 62
    2916:	0f be       	out	0x3f, r0	; 63
    2918:	cd bf       	out	0x3d, r28	; 61
    291a:	df 91       	pop	r29
    291c:	cf 91       	pop	r28
    291e:	1f 91       	pop	r17
    2920:	0f 91       	pop	r16
    2922:	ff 90       	pop	r15
    2924:	ef 90       	pop	r14
    2926:	df 90       	pop	r13
    2928:	cf 90       	pop	r12
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods(action.layer_tap.code & 0x0f);
    292a:	0c 94 50 12 	jmp	0x24a0	; 0x24a0 <unregister_mods>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    292e:	ff 20       	and	r15, r15
    2930:	a9 f0       	breq	.+42     	; 0x295c <process_action+0x4ae>
                        if (tap_count < TAPPING_TOGGLE) {
    2932:	25 30       	cpi	r18, 0x05	; 5
    2934:	08 f0       	brcs	.+2      	; 0x2938 <process_action+0x48a>
    2936:	b2 c0       	rjmp	.+356    	; 0x2a9c <process_action+0x5ee>
                            layer_invert(action.layer_tap.val);
    2938:	84 2f       	mov	r24, r20
    293a:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    293c:	28 96       	adiw	r28, 0x08	; 8
    293e:	0f b6       	in	r0, 0x3f	; 63
    2940:	f8 94       	cli
    2942:	de bf       	out	0x3e, r29	; 62
    2944:	0f be       	out	0x3f, r0	; 63
    2946:	cd bf       	out	0x3d, r28	; 61
    2948:	df 91       	pop	r29
    294a:	cf 91       	pop	r28
    294c:	1f 91       	pop	r17
    294e:	0f 91       	pop	r16
    2950:	ff 90       	pop	r15
    2952:	ef 90       	pop	r14
    2954:	df 90       	pop	r13
    2956:	cf 90       	pop	r12
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    2958:	0c 94 26 1a 	jmp	0x344c	; 0x344c <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    295c:	26 30       	cpi	r18, 0x06	; 6
    295e:	08 f0       	brcs	.+2      	; 0x2962 <process_action+0x4b4>
    2960:	9d c0       	rjmp	.+314    	; 0x2a9c <process_action+0x5ee>
    2962:	ea cf       	rjmp	.-44     	; 0x2938 <process_action+0x48a>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2964:	ff 20       	and	r15, r15
    2966:	a1 f0       	breq	.+40     	; 0x2990 <process_action+0x4e2>
    2968:	84 2f       	mov	r24, r20
    296a:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    296c:	28 96       	adiw	r28, 0x08	; 8
    296e:	0f b6       	in	r0, 0x3f	; 63
    2970:	f8 94       	cli
    2972:	de bf       	out	0x3e, r29	; 62
    2974:	0f be       	out	0x3f, r0	; 63
    2976:	cd bf       	out	0x3d, r28	; 61
    2978:	df 91       	pop	r29
    297a:	cf 91       	pop	r28
    297c:	1f 91       	pop	r17
    297e:	0f 91       	pop	r16
    2980:	ff 90       	pop	r15
    2982:	ef 90       	pop	r14
    2984:	df 90       	pop	r13
    2986:	cf 90       	pop	r12
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2988:	0c 94 e0 19 	jmp	0x33c0	; 0x33c0 <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    298c:	ff 20       	and	r15, r15
    298e:	61 f3       	breq	.-40     	; 0x2968 <process_action+0x4ba>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2990:	84 2f       	mov	r24, r20
    2992:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2994:	28 96       	adiw	r28, 0x08	; 8
    2996:	0f b6       	in	r0, 0x3f	; 63
    2998:	f8 94       	cli
    299a:	de bf       	out	0x3e, r29	; 62
    299c:	0f be       	out	0x3f, r0	; 63
    299e:	cd bf       	out	0x3d, r28	; 61
    29a0:	df 91       	pop	r29
    29a2:	cf 91       	pop	r28
    29a4:	1f 91       	pop	r17
    29a6:	0f 91       	pop	r16
    29a8:	ff 90       	pop	r15
    29aa:	ef 90       	pop	r14
    29ac:	df 90       	pop	r13
    29ae:	cf 90       	pop	r12
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    29b0:	0c 94 01 1a 	jmp	0x3402	; 0x3402 <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    29b4:	ff 20       	and	r15, r15
    29b6:	91 f0       	breq	.+36     	; 0x29dc <process_action+0x52e>
    29b8:	84 2f       	mov	r24, r20
    29ba:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    29bc:	28 96       	adiw	r28, 0x08	; 8
    29be:	0f b6       	in	r0, 0x3f	; 63
    29c0:	f8 94       	cli
    29c2:	de bf       	out	0x3e, r29	; 62
    29c4:	0f be       	out	0x3f, r0	; 63
    29c6:	cd bf       	out	0x3d, r28	; 61
    29c8:	df 91       	pop	r29
    29ca:	cf 91       	pop	r28
    29cc:	1f 91       	pop	r17
    29ce:	0f 91       	pop	r16
    29d0:	ff 90       	pop	r15
    29d2:	ef 90       	pop	r14
    29d4:	df 90       	pop	r13
    29d6:	cf 90       	pop	r12
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    29d8:	0c 94 cb 19 	jmp	0x3396	; 0x3396 <layer_move>
            break;
#endif
        default:
            break;
    }
}
    29dc:	28 96       	adiw	r28, 0x08	; 8
    29de:	0f b6       	in	r0, 0x3f	; 63
    29e0:	f8 94       	cli
    29e2:	de bf       	out	0x3e, r29	; 62
    29e4:	0f be       	out	0x3f, r0	; 63
    29e6:	cd bf       	out	0x3d, r28	; 61
    29e8:	df 91       	pop	r29
    29ea:	cf 91       	pop	r28
    29ec:	1f 91       	pop	r17
    29ee:	0f 91       	pop	r16
    29f0:	ff 90       	pop	r15
    29f2:	ef 90       	pop	r14
    29f4:	df 90       	pop	r13
    29f6:	cf 90       	pop	r12
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    29f8:	0c 94 c1 19 	jmp	0x3382	; 0x3382 <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    29fc:	ff 20       	and	r15, r15
    29fe:	a1 f0       	breq	.+40     	; 0x2a28 <process_action+0x57a>
                        if (tap_count > 0) {
    2a00:	22 23       	and	r18, r18
    2a02:	09 f4       	brne	.+2      	; 0x2a06 <process_action+0x558>
    2a04:	b1 cf       	rjmp	.-158    	; 0x2968 <process_action+0x4ba>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2a06:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    2a08:	28 96       	adiw	r28, 0x08	; 8
    2a0a:	0f b6       	in	r0, 0x3f	; 63
    2a0c:	f8 94       	cli
    2a0e:	de bf       	out	0x3e, r29	; 62
    2a10:	0f be       	out	0x3f, r0	; 63
    2a12:	cd bf       	out	0x3d, r28	; 61
    2a14:	df 91       	pop	r29
    2a16:	cf 91       	pop	r28
    2a18:	1f 91       	pop	r17
    2a1a:	0f 91       	pop	r16
    2a1c:	ff 90       	pop	r15
    2a1e:	ef 90       	pop	r14
    2a20:	df 90       	pop	r13
    2a22:	cf 90       	pop	r12
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2a24:	0c 94 82 11 	jmp	0x2304	; 0x2304 <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    2a28:	22 23       	and	r18, r18
    2a2a:	09 f4       	brne	.+2      	; 0x2a2e <process_action+0x580>
    2a2c:	b1 cf       	rjmp	.-158    	; 0x2990 <process_action+0x4e2>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2a2e:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    2a30:	28 96       	adiw	r28, 0x08	; 8
    2a32:	0f b6       	in	r0, 0x3f	; 63
    2a34:	f8 94       	cli
    2a36:	de bf       	out	0x3e, r29	; 62
    2a38:	0f be       	out	0x3f, r0	; 63
    2a3a:	cd bf       	out	0x3d, r28	; 61
    2a3c:	df 91       	pop	r29
    2a3e:	cf 91       	pop	r28
    2a40:	1f 91       	pop	r17
    2a42:	0f 91       	pop	r16
    2a44:	ff 90       	pop	r15
    2a46:	ef 90       	pop	r14
    2a48:	df 90       	pop	r13
    2a4a:	cf 90       	pop	r12
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2a4c:	0c 94 21 12 	jmp	0x2442	; 0x2442 <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2a50:	4f 70       	andi	r20, 0x0F	; 15
    2a52:	c8 01       	movw	r24, r16
    2a54:	0e 94 0c 07 	call	0xe18	; 0xe18 <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    2a58:	28 96       	adiw	r28, 0x08	; 8
    2a5a:	0f b6       	in	r0, 0x3f	; 63
    2a5c:	f8 94       	cli
    2a5e:	de bf       	out	0x3e, r29	; 62
    2a60:	0f be       	out	0x3f, r0	; 63
    2a62:	cd bf       	out	0x3d, r28	; 61
    2a64:	df 91       	pop	r29
    2a66:	cf 91       	pop	r28
    2a68:	1f 91       	pop	r17
    2a6a:	0f 91       	pop	r16
    2a6c:	ff 90       	pop	r15
    2a6e:	ef 90       	pop	r14
    2a70:	df 90       	pop	r13
    2a72:	cf 90       	pop	r12
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2a74:	0c 94 e8 18 	jmp	0x31d0	; 0x31d0 <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2a78:	4f 70       	andi	r20, 0x0F	; 15
    2a7a:	c8 01       	movw	r24, r16
            break;
#endif
        default:
            break;
    }
}
    2a7c:	28 96       	adiw	r28, 0x08	; 8
    2a7e:	0f b6       	in	r0, 0x3f	; 63
    2a80:	f8 94       	cli
    2a82:	de bf       	out	0x3e, r29	; 62
    2a84:	0f be       	out	0x3f, r0	; 63
    2a86:	cd bf       	out	0x3d, r28	; 61
    2a88:	df 91       	pop	r29
    2a8a:	cf 91       	pop	r28
    2a8c:	1f 91       	pop	r17
    2a8e:	0f 91       	pop	r16
    2a90:	ff 90       	pop	r15
    2a92:	ef 90       	pop	r14
    2a94:	df 90       	pop	r13
    2a96:	cf 90       	pop	r12
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2a98:	0c 94 4f 1d 	jmp	0x3a9e	; 0x3a9e <action_function>
            break;
#endif
        default:
            break;
    }
}
    2a9c:	28 96       	adiw	r28, 0x08	; 8
    2a9e:	0f b6       	in	r0, 0x3f	; 63
    2aa0:	f8 94       	cli
    2aa2:	de bf       	out	0x3e, r29	; 62
    2aa4:	0f be       	out	0x3f, r0	; 63
    2aa6:	cd bf       	out	0x3d, r28	; 61
    2aa8:	df 91       	pop	r29
    2aaa:	cf 91       	pop	r28
    2aac:	1f 91       	pop	r17
    2aae:	0f 91       	pop	r16
    2ab0:	ff 90       	pop	r15
    2ab2:	ef 90       	pop	r14
    2ab4:	df 90       	pop	r13
    2ab6:	cf 90       	pop	r12
    2ab8:	08 95       	ret

00002aba <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2aba:	0e 94 98 1b 	call	0x3730	; 0x3730 <clear_weak_mods>
    clear_keys();
    2abe:	0e 94 6d 1b 	call	0x36da	; 0x36da <clear_keys>
    send_keyboard_report();
    2ac2:	0e 94 be 1b 	call	0x377c	; 0x377c <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    2ac6:	0e 94 da 22 	call	0x45b4	; 0x45b4 <mousekey_clear>
    mousekey_send();
    2aca:	0e 94 ac 21 	call	0x4358	; 0x4358 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    2ace:	80 e0       	ldi	r24, 0x00	; 0
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	0e 94 54 10 	call	0x20a8	; 0x20a8 <host_system_send>
    host_consumer_send(0);
    2ad6:	80 e0       	ldi	r24, 0x00	; 0
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	0c 94 6a 10 	jmp	0x20d4	; 0x20d4 <host_consumer_send>

00002ade <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    2ade:	0e 94 88 1b 	call	0x3710	; 0x3710 <clear_mods>
    clear_keyboard_but_mods();
    2ae2:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <clear_keyboard_but_mods>

00002ae6 <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    2ae6:	0e 94 96 1a 	call	0x352c	; 0x352c <layer_switch_get_action>

    switch (action.kind.id) {
    2aea:	29 2f       	mov	r18, r25
    2aec:	22 95       	swap	r18
    2aee:	2f 70       	andi	r18, 0x0F	; 15
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	2c 30       	cpi	r18, 0x0C	; 12
    2af4:	31 05       	cpc	r19, r1
    2af6:	4c f4       	brge	.+18     	; 0x2b0a <is_tap_key+0x24>
    2af8:	2a 30       	cpi	r18, 0x0A	; 10
    2afa:	31 05       	cpc	r19, r1
    2afc:	6c f4       	brge	.+26     	; 0x2b18 <is_tap_key+0x32>
    2afe:	22 50       	subi	r18, 0x02	; 2
    2b00:	31 09       	sbc	r19, r1
    2b02:	22 30       	cpi	r18, 0x02	; 2
    2b04:	31 05       	cpc	r19, r1
    2b06:	90 f4       	brcc	.+36     	; 0x2b2c <is_tap_key+0x46>
    2b08:	07 c0       	rjmp	.+14     	; 0x2b18 <is_tap_key+0x32>
    2b0a:	2c 30       	cpi	r18, 0x0C	; 12
    2b0c:	31 05       	cpc	r19, r1
    2b0e:	51 f0       	breq	.+20     	; 0x2b24 <is_tap_key+0x3e>
    2b10:	2f 30       	cpi	r18, 0x0F	; 15
    2b12:	31 05       	cpc	r19, r1
    2b14:	39 f0       	breq	.+14     	; 0x2b24 <is_tap_key+0x3e>
    2b16:	0a c0       	rjmp	.+20     	; 0x2b2c <is_tap_key+0x46>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2b18:	80 3e       	cpi	r24, 0xE0	; 224
    2b1a:	10 f0       	brcs	.+4      	; 0x2b20 <is_tap_key+0x3a>
    2b1c:	80 3f       	cpi	r24, 0xF0	; 240
    2b1e:	31 f4       	brne	.+12     	; 0x2b2c <is_tap_key+0x46>
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
    2b20:	81 e0       	ldi	r24, 0x01	; 1
    2b22:	08 95       	ret
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    2b24:	93 fb       	bst	r25, 3
    2b26:	88 27       	eor	r24, r24
    2b28:	80 f9       	bld	r24, 0
    2b2a:	08 95       	ret
            switch (action.layer_tap.code) {
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
            }
            return false;
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    2b2e:	08 95       	ret

00002b30 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2b30:	cf 93       	push	r28
    2b32:	df 93       	push	r29
    2b34:	00 d0       	rcall	.+0      	; 0x2b36 <debug_event+0x6>
    2b36:	00 d0       	rcall	.+0      	; 0x2b38 <debug_event+0x8>
    2b38:	1f 92       	push	r1
    2b3a:	cd b7       	in	r28, 0x3d	; 61
    2b3c:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2b3e:	0f 90       	pop	r0
    2b40:	0f 90       	pop	r0
    2b42:	0f 90       	pop	r0
    2b44:	0f 90       	pop	r0
    2b46:	0f 90       	pop	r0
    2b48:	df 91       	pop	r29
    2b4a:	cf 91       	pop	r28
    2b4c:	08 95       	ret

00002b4e <debug_record>:

void debug_record(keyrecord_t record)
{
    2b4e:	cf 93       	push	r28
    2b50:	df 93       	push	r29
    2b52:	00 d0       	rcall	.+0      	; 0x2b54 <debug_record+0x6>
    2b54:	00 d0       	rcall	.+0      	; 0x2b56 <debug_record+0x8>
    2b56:	00 d0       	rcall	.+0      	; 0x2b58 <debug_record+0xa>
    2b58:	cd b7       	in	r28, 0x3d	; 61
    2b5a:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    2b5c:	26 96       	adiw	r28, 0x06	; 6
    2b5e:	0f b6       	in	r0, 0x3f	; 63
    2b60:	f8 94       	cli
    2b62:	de bf       	out	0x3e, r29	; 62
    2b64:	0f be       	out	0x3f, r0	; 63
    2b66:	cd bf       	out	0x3d, r28	; 61
    2b68:	df 91       	pop	r29
    2b6a:	cf 91       	pop	r28
    2b6c:	08 95       	ret

00002b6e <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2b6e:	1f 93       	push	r17
    2b70:	cf 93       	push	r28
    2b72:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2b74:	c0 91 76 01 	lds	r28, 0x0176
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2b78:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2b7a:	80 91 77 01 	lds	r24, 0x0177
    2b7e:	c8 17       	cp	r28, r24
    2b80:	99 f0       	breq	.+38     	; 0x2ba8 <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2b82:	d0 e0       	ldi	r29, 0x00	; 0
    2b84:	1c 9f       	mul	r17, r28
    2b86:	f0 01       	movw	r30, r0
    2b88:	1d 9f       	mul	r17, r29
    2b8a:	f0 0d       	add	r31, r0
    2b8c:	11 24       	eor	r1, r1
    2b8e:	e8 58       	subi	r30, 0x88	; 136
    2b90:	fe 4f       	sbci	r31, 0xFE	; 254
    2b92:	40 81       	ld	r20, Z
    2b94:	51 81       	ldd	r21, Z+1	; 0x01
    2b96:	62 81       	ldd	r22, Z+2	; 0x02
    2b98:	73 81       	ldd	r23, Z+3	; 0x03
    2b9a:	84 81       	ldd	r24, Z+4	; 0x04
    2b9c:	95 81       	ldd	r25, Z+5	; 0x05
    2b9e:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2ba2:	21 96       	adiw	r28, 0x01	; 1
    2ba4:	c7 70       	andi	r28, 0x07	; 7
    2ba6:	e9 cf       	rjmp	.-46     	; 0x2b7a <debug_waiting_buffer+0xc>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    2ba8:	df 91       	pop	r29
    2baa:	cf 91       	pop	r28
    2bac:	1f 91       	pop	r17
    2bae:	08 95       	ret

00002bb0 <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2bb0:	40 91 a8 01 	lds	r20, 0x01A8
    2bb4:	50 91 a9 01 	lds	r21, 0x01A9
    2bb8:	60 91 aa 01 	lds	r22, 0x01AA
    2bbc:	70 91 ab 01 	lds	r23, 0x01AB
    2bc0:	80 91 ac 01 	lds	r24, 0x01AC
    2bc4:	90 91 ad 01 	lds	r25, 0x01AD
    2bc8:	0c 94 a7 15 	jmp	0x2b4e	; 0x2b4e <debug_record>

00002bcc <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    2bcc:	cf 93       	push	r28
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    2bce:	80 91 ad 01 	lds	r24, 0x01AD
    2bd2:	82 95       	swap	r24
    2bd4:	8f 70       	andi	r24, 0x0F	; 15
    2bd6:	09 f0       	breq	.+2      	; 0x2bda <waiting_buffer_scan_tap+0xe>
    2bd8:	5f c0       	rjmp	.+190    	; 0x2c98 <waiting_buffer_scan_tap+0xcc>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    2bda:	80 91 aa 01 	lds	r24, 0x01AA
    2bde:	88 23       	and	r24, r24
    2be0:	09 f4       	brne	.+2      	; 0x2be4 <waiting_buffer_scan_tap+0x18>
    2be2:	5a c0       	rjmp	.+180    	; 0x2c98 <waiting_buffer_scan_tap+0xcc>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2be4:	20 91 76 01 	lds	r18, 0x0176
    2be8:	a0 91 77 01 	lds	r26, 0x0177
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2bec:	60 91 a8 01 	lds	r22, 0x01A8
    2bf0:	70 91 a9 01 	lds	r23, 0x01A9
    2bf4:	80 91 ab 01 	lds	r24, 0x01AB
    2bf8:	90 91 ac 01 	lds	r25, 0x01AC
    2bfc:	31 e0       	ldi	r19, 0x01	; 1
    2bfe:	6f 3f       	cpi	r22, 0xFF	; 255
    2c00:	09 f0       	breq	.+2      	; 0x2c04 <waiting_buffer_scan_tap+0x38>
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	b3 2f       	mov	r27, r19
    2c06:	c6 e0       	ldi	r28, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2c08:	2a 17       	cp	r18, r26
    2c0a:	09 f4       	brne	.+2      	; 0x2c0e <waiting_buffer_scan_tap+0x42>
    2c0c:	45 c0       	rjmp	.+138    	; 0x2c98 <waiting_buffer_scan_tap+0xcc>
    2c0e:	00 97       	sbiw	r24, 0x00	; 0
    2c10:	21 f0       	breq	.+8      	; 0x2c1a <waiting_buffer_scan_tap+0x4e>
    2c12:	7f 3f       	cpi	r23, 0xFF	; 255
    2c14:	21 f4       	brne	.+8      	; 0x2c1e <waiting_buffer_scan_tap+0x52>
    2c16:	4b 2f       	mov	r20, r27
    2c18:	03 c0       	rjmp	.+6      	; 0x2c20 <waiting_buffer_scan_tap+0x54>
    2c1a:	41 e0       	ldi	r20, 0x01	; 1
    2c1c:	01 c0       	rjmp	.+2      	; 0x2c20 <waiting_buffer_scan_tap+0x54>
    2c1e:	40 e0       	ldi	r20, 0x00	; 0
    2c20:	30 e0       	ldi	r19, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2c22:	40 fd       	sbrc	r20, 0
    2c24:	35 c0       	rjmp	.+106    	; 0x2c90 <waiting_buffer_scan_tap+0xc4>
    2c26:	c2 9f       	mul	r28, r18
    2c28:	f0 01       	movw	r30, r0
    2c2a:	c3 9f       	mul	r28, r19
    2c2c:	f0 0d       	add	r31, r0
    2c2e:	11 24       	eor	r1, r1
    2c30:	e8 58       	subi	r30, 0x88	; 136
    2c32:	fe 4f       	sbci	r31, 0xFE	; 254
    2c34:	41 81       	ldd	r20, Z+1	; 0x01
    2c36:	74 13       	cpse	r23, r20
    2c38:	2b c0       	rjmp	.+86     	; 0x2c90 <waiting_buffer_scan_tap+0xc4>
    2c3a:	40 81       	ld	r20, Z
    2c3c:	64 13       	cpse	r22, r20
    2c3e:	28 c0       	rjmp	.+80     	; 0x2c90 <waiting_buffer_scan_tap+0xc4>
    2c40:	42 81       	ldd	r20, Z+2	; 0x02
    2c42:	41 11       	cpse	r20, r1
    2c44:	25 c0       	rjmp	.+74     	; 0x2c90 <waiting_buffer_scan_tap+0xc4>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2c46:	43 81       	ldd	r20, Z+3	; 0x03
    2c48:	54 81       	ldd	r21, Z+4	; 0x04
    2c4a:	48 17       	cp	r20, r24
    2c4c:	59 07       	cpc	r21, r25
    2c4e:	10 f4       	brcc	.+4      	; 0x2c54 <waiting_buffer_scan_tap+0x88>
    2c50:	41 50       	subi	r20, 0x01	; 1
    2c52:	51 09       	sbc	r21, r1
    2c54:	48 1b       	sub	r20, r24
    2c56:	59 0b       	sbc	r21, r25
    2c58:	4c 32       	cpi	r20, 0x2C	; 44
    2c5a:	51 40       	sbci	r21, 0x01	; 1
    2c5c:	c8 f4       	brcc	.+50     	; 0x2c90 <waiting_buffer_scan_tap+0xc4>
            tapping_key.tap.count = 1;
    2c5e:	80 91 ad 01 	lds	r24, 0x01AD
    2c62:	8f 70       	andi	r24, 0x0F	; 15
    2c64:	80 61       	ori	r24, 0x10	; 16
    2c66:	80 93 ad 01 	sts	0x01AD, r24
            waiting_buffer[i].tap.count = 1;
    2c6a:	86 e0       	ldi	r24, 0x06	; 6
    2c6c:	82 9f       	mul	r24, r18
    2c6e:	f0 01       	movw	r30, r0
    2c70:	83 9f       	mul	r24, r19
    2c72:	f0 0d       	add	r31, r0
    2c74:	11 24       	eor	r1, r1
    2c76:	e3 58       	subi	r30, 0x83	; 131
    2c78:	fe 4f       	sbci	r31, 0xFE	; 254
    2c7a:	80 81       	ld	r24, Z
    2c7c:	8f 70       	andi	r24, 0x0F	; 15
    2c7e:	80 61       	ori	r24, 0x10	; 16
    2c80:	80 83       	st	Z, r24
            process_action(&tapping_key);
    2c82:	88 ea       	ldi	r24, 0xA8	; 168
    2c84:	91 e0       	ldi	r25, 0x01	; 1
    2c86:	0e 94 57 12 	call	0x24ae	; 0x24ae <process_action>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    2c8a:	cf 91       	pop	r28
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    2c8c:	0c 94 b7 15 	jmp	0x2b6e	; 0x2b6e <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2c90:	2f 5f       	subi	r18, 0xFF	; 255
    2c92:	3f 4f       	sbci	r19, 0xFF	; 255
    2c94:	27 70       	andi	r18, 0x07	; 7
    2c96:	b8 cf       	rjmp	.-144    	; 0x2c08 <waiting_buffer_scan_tap+0x3c>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    2c98:	cf 91       	pop	r28
    2c9a:	08 95       	ret

00002c9c <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    2c9c:	cf 92       	push	r12
    2c9e:	df 92       	push	r13
    2ca0:	ef 92       	push	r14
    2ca2:	ff 92       	push	r15
    2ca4:	0f 93       	push	r16
    2ca6:	1f 93       	push	r17
    2ca8:	cf 93       	push	r28
    2caa:	df 93       	push	r29
    2cac:	cd b7       	in	r28, 0x3d	; 61
    2cae:	de b7       	in	r29, 0x3e	; 62
    2cb0:	62 97       	sbiw	r28, 0x12	; 18
    2cb2:	0f b6       	in	r0, 0x3f	; 63
    2cb4:	f8 94       	cli
    2cb6:	de bf       	out	0x3e, r29	; 62
    2cb8:	0f be       	out	0x3f, r0	; 63
    2cba:	cd bf       	out	0x3d, r28	; 61
    2cbc:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    2cbe:	85 e0       	ldi	r24, 0x05	; 5
    2cc0:	f8 01       	movw	r30, r16
    2cc2:	de 01       	movw	r26, r28
    2cc4:	1d 96       	adiw	r26, 0x0d	; 13
    2cc6:	01 90       	ld	r0, Z+
    2cc8:	0d 92       	st	X+, r0
    2cca:	8a 95       	dec	r24
    2ccc:	e1 f7       	brne	.-8      	; 0x2cc6 <process_tapping+0x2a>
    2cce:	d8 01       	movw	r26, r16
    2cd0:	4c 91       	ld	r20, X
    2cd2:	11 96       	adiw	r26, 0x01	; 1
    2cd4:	5c 91       	ld	r21, X
    2cd6:	11 97       	sbiw	r26, 0x01	; 1
    2cd8:	12 96       	adiw	r26, 0x02	; 2
    2cda:	6c 91       	ld	r22, X
    2cdc:	12 97       	sbiw	r26, 0x02	; 2
    2cde:	13 96       	adiw	r26, 0x03	; 3
    2ce0:	ed 90       	ld	r14, X+
    2ce2:	fc 90       	ld	r15, X
    2ce4:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    2ce6:	70 91 a8 01 	lds	r23, 0x01A8
    2cea:	e0 91 a9 01 	lds	r30, 0x01A9
    2cee:	20 91 ab 01 	lds	r18, 0x01AB
    2cf2:	30 91 ac 01 	lds	r19, 0x01AC
    2cf6:	21 15       	cp	r18, r1
    2cf8:	31 05       	cpc	r19, r1
    2cfa:	31 f0       	breq	.+12     	; 0x2d08 <process_tapping+0x6c>
    2cfc:	ef 3f       	cpi	r30, 0xFF	; 255
    2cfe:	31 f4       	brne	.+12     	; 0x2d0c <process_tapping+0x70>
    2d00:	81 e0       	ldi	r24, 0x01	; 1
    2d02:	7f 3f       	cpi	r23, 0xFF	; 255
    2d04:	19 f4       	brne	.+6      	; 0x2d0c <process_tapping+0x70>
    2d06:	03 c0       	rjmp	.+6      	; 0x2d0e <process_tapping+0x72>
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	01 c0       	rjmp	.+2      	; 0x2d0e <process_tapping+0x72>
    2d0c:	80 e0       	ldi	r24, 0x00	; 0
    2d0e:	b8 2f       	mov	r27, r24
    2d10:	b1 70       	andi	r27, 0x01	; 1
    2d12:	cb 2e       	mov	r12, r27
    2d14:	80 fd       	sbrc	r24, 0
    2d16:	6d c1       	rjmp	.+730    	; 0x2ff2 <process_tapping+0x356>
    2d18:	d0 90 aa 01 	lds	r13, 0x01AA
    2d1c:	dd 20       	and	r13, r13
    2d1e:	09 f4       	brne	.+2      	; 0x2d22 <process_tapping+0x86>
    2d20:	f6 c0       	rjmp	.+492    	; 0x2f0e <process_tapping+0x272>
    2d22:	f0 91 ad 01 	lds	r31, 0x01AD
        if (WITHIN_TAPPING_TERM(event)) {
    2d26:	e2 16       	cp	r14, r18
    2d28:	f3 06       	cpc	r15, r19
    2d2a:	38 f0       	brcs	.+14     	; 0x2d3a <process_tapping+0x9e>
    2d2c:	c7 01       	movw	r24, r14
    2d2e:	82 1b       	sub	r24, r18
    2d30:	93 0b       	sbc	r25, r19
    2d32:	8c 32       	cpi	r24, 0x2C	; 44
    2d34:	91 40       	sbci	r25, 0x01	; 1
    2d36:	48 f0       	brcs	.+18     	; 0x2d4a <process_tapping+0xae>
    2d38:	9c c0       	rjmp	.+312    	; 0x2e72 <process_tapping+0x1d6>
    2d3a:	20 95       	com	r18
    2d3c:	30 95       	com	r19
    2d3e:	2e 0d       	add	r18, r14
    2d40:	3f 1d       	adc	r19, r15
    2d42:	2c 32       	cpi	r18, 0x2C	; 44
    2d44:	31 40       	sbci	r19, 0x01	; 1
    2d46:	08 f0       	brcs	.+2      	; 0x2d4a <process_tapping+0xae>
    2d48:	94 c0       	rjmp	.+296    	; 0x2e72 <process_tapping+0x1d6>
            if (tapping_key.tap.count == 0) {
    2d4a:	8f 2f       	mov	r24, r31
    2d4c:	80 7f       	andi	r24, 0xF0	; 240
    2d4e:	09 f0       	breq	.+2      	; 0x2d52 <process_tapping+0xb6>
    2d50:	53 c0       	rjmp	.+166    	; 0x2df8 <process_tapping+0x15c>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2d52:	e5 13       	cpse	r30, r21
    2d54:	15 c0       	rjmp	.+42     	; 0x2d80 <process_tapping+0xe4>
    2d56:	74 13       	cpse	r23, r20
    2d58:	13 c0       	rjmp	.+38     	; 0x2d80 <process_tapping+0xe4>
    2d5a:	d6 2e       	mov	r13, r22
    2d5c:	61 11       	cpse	r22, r1
    2d5e:	10 c0       	rjmp	.+32     	; 0x2d80 <process_tapping+0xe4>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    2d60:	ff 70       	andi	r31, 0x0F	; 15
    2d62:	f0 61       	ori	r31, 0x10	; 16
    2d64:	f0 93 ad 01 	sts	0x01AD, r31
                    debug_tapping_key();
    2d68:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <debug_tapping_key>
                    process_action(&tapping_key);
    2d6c:	88 ea       	ldi	r24, 0xA8	; 168
    2d6e:	91 e0       	ldi	r25, 0x01	; 1
    2d70:	0e 94 57 12 	call	0x24ae	; 0x24ae <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    2d74:	80 91 ad 01 	lds	r24, 0x01AD
    2d78:	d8 01       	movw	r26, r16
    2d7a:	15 96       	adiw	r26, 0x05	; 5
    2d7c:	8c 93       	st	X, r24
                    // enqueue
                    return false;
    2d7e:	6b c1       	rjmp	.+726    	; 0x3056 <process_tapping+0x3ba>
    2d80:	ef 28       	or	r14, r15
    2d82:	31 f0       	breq	.+12     	; 0x2d90 <process_tapping+0xf4>
    2d84:	5f 3f       	cpi	r21, 0xFF	; 255
    2d86:	31 f4       	brne	.+12     	; 0x2d94 <process_tapping+0xf8>
    2d88:	81 e0       	ldi	r24, 0x01	; 1
    2d8a:	4f 3f       	cpi	r20, 0xFF	; 255
    2d8c:	19 f4       	brne	.+6      	; 0x2d94 <process_tapping+0xf8>
    2d8e:	03 c0       	rjmp	.+6      	; 0x2d96 <process_tapping+0xfa>
    2d90:	81 e0       	ldi	r24, 0x01	; 1
    2d92:	01 c0       	rjmp	.+2      	; 0x2d96 <process_tapping+0xfa>
    2d94:	80 e0       	ldi	r24, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    2d96:	80 fd       	sbrc	r24, 0
    2d98:	03 c0       	rjmp	.+6      	; 0x2da0 <process_tapping+0x104>
    2d9a:	81 e0       	ldi	r24, 0x01	; 1
    2d9c:	86 27       	eor	r24, r22
    2d9e:	01 c0       	rjmp	.+2      	; 0x2da2 <process_tapping+0x106>
    2da0:	80 e0       	ldi	r24, 0x00	; 0
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    2da2:	b8 2f       	mov	r27, r24
    2da4:	b1 70       	andi	r27, 0x01	; 1
    2da6:	fb 2e       	mov	r15, r27
    2da8:	80 ff       	sbrs	r24, 0
    2daa:	1c c0       	rjmp	.+56     	; 0x2de4 <process_tapping+0x148>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2dac:	80 91 76 01 	lds	r24, 0x0176
    2db0:	20 91 77 01 	lds	r18, 0x0177
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2db4:	36 e0       	ldi	r19, 0x06	; 6
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2db6:	82 17       	cp	r24, r18
    2db8:	09 f4       	brne	.+2      	; 0x2dbc <process_tapping+0x120>
    2dba:	28 c1       	rjmp	.+592    	; 0x300c <process_tapping+0x370>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	38 9f       	mul	r19, r24
    2dc0:	f0 01       	movw	r30, r0
    2dc2:	39 9f       	mul	r19, r25
    2dc4:	f0 0d       	add	r31, r0
    2dc6:	11 24       	eor	r1, r1
    2dc8:	e8 58       	subi	r30, 0x88	; 136
    2dca:	fe 4f       	sbci	r31, 0xFE	; 254
    2dcc:	71 81       	ldd	r23, Z+1	; 0x01
    2dce:	57 13       	cpse	r21, r23
    2dd0:	06 c0       	rjmp	.+12     	; 0x2dde <process_tapping+0x142>
    2dd2:	70 81       	ld	r23, Z
    2dd4:	47 13       	cpse	r20, r23
    2dd6:	03 c0       	rjmp	.+6      	; 0x2dde <process_tapping+0x142>
    2dd8:	72 81       	ldd	r23, Z+2	; 0x02
    2dda:	67 13       	cpse	r22, r23
    2ddc:	03 c0       	rjmp	.+6      	; 0x2de4 <process_tapping+0x148>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2dde:	01 96       	adiw	r24, 0x01	; 1
    2de0:	87 70       	andi	r24, 0x07	; 7
    2de2:	e9 cf       	rjmp	.-46     	; 0x2db6 <process_tapping+0x11a>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    2de4:	d6 2e       	mov	r13, r22
    2de6:	66 23       	and	r22, r22
    2de8:	09 f4       	brne	.+2      	; 0x2dec <process_tapping+0x150>
    2dea:	35 c1       	rjmp	.+618    	; 0x3056 <process_tapping+0x3ba>
                        tapping_key.tap.interrupted = true;
    2dec:	80 91 ad 01 	lds	r24, 0x01AD
    2df0:	81 60       	ori	r24, 0x01	; 1
    2df2:	80 93 ad 01 	sts	0x01AD, r24
    2df6:	53 c0       	rjmp	.+166    	; 0x2e9e <process_tapping+0x202>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2df8:	e5 13       	cpse	r30, r21
    2dfa:	08 c0       	rjmp	.+16     	; 0x2e0c <process_tapping+0x170>
    2dfc:	74 13       	cpse	r23, r20
    2dfe:	06 c0       	rjmp	.+12     	; 0x2e0c <process_tapping+0x170>
    2e00:	61 11       	cpse	r22, r1
    2e02:	04 c0       	rjmp	.+8      	; 0x2e0c <process_tapping+0x170>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    2e04:	d8 01       	movw	r26, r16
    2e06:	15 96       	adiw	r26, 0x05	; 5
    2e08:	fc 93       	st	X, r31
    2e0a:	ae c0       	rjmp	.+348    	; 0x2f68 <process_tapping+0x2cc>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    2e0c:	4d 87       	std	Y+13, r20	; 0x0d
    2e0e:	5e 87       	std	Y+14, r21	; 0x0e
    2e10:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e12:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e14:	6a 8b       	std	Y+18, r22	; 0x12
    2e16:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <is_tap_key>
    2e1a:	6a 89       	ldd	r22, Y+18	; 0x12
    2e1c:	88 23       	and	r24, r24
    2e1e:	29 f1       	breq	.+74     	; 0x2e6a <process_tapping+0x1ce>
    2e20:	d6 2e       	mov	r13, r22
    2e22:	66 23       	and	r22, r22
    2e24:	11 f1       	breq	.+68     	; 0x2e6a <process_tapping+0x1ce>
                    if (tapping_key.tap.count > 1) {
    2e26:	20 91 ad 01 	lds	r18, 0x01AD
    2e2a:	82 2f       	mov	r24, r18
    2e2c:	82 95       	swap	r24
    2e2e:	8f 70       	andi	r24, 0x0F	; 15
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	02 97       	sbiw	r24, 0x02	; 2
    2e34:	0c f4       	brge	.+2      	; 0x2e38 <process_tapping+0x19c>
    2e36:	60 c0       	rjmp	.+192    	; 0x2ef8 <process_tapping+0x25c>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    2e38:	80 91 a8 01 	lds	r24, 0x01A8
    2e3c:	90 91 a9 01 	lds	r25, 0x01A9
    2e40:	98 87       	std	Y+8, r25	; 0x08
    2e42:	8f 83       	std	Y+7, r24	; 0x07
    2e44:	19 86       	std	Y+9, r1	; 0x09
    2e46:	fb 86       	std	Y+11, r15	; 0x0b
    2e48:	ea 86       	std	Y+10, r14	; 0x0a
    2e4a:	2c 87       	std	Y+12, r18	; 0x0c
    2e4c:	ce 01       	movw	r24, r28
    2e4e:	07 96       	adiw	r24, 0x07	; 7
    2e50:	51 c0       	rjmp	.+162    	; 0x2ef4 <process_tapping+0x258>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2e52:	e5 17       	cp	r30, r21
    2e54:	31 f1       	breq	.+76     	; 0x2ea2 <process_tapping+0x206>
                    keyp->tap = tapping_key.tap;
                    process_action(keyp);
                    tapping_key = (keyrecord_t){};
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    2e56:	4d 87       	std	Y+13, r20	; 0x0d
    2e58:	5e 87       	std	Y+14, r21	; 0x0e
    2e5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e5e:	6a 8b       	std	Y+18, r22	; 0x12
    2e60:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <is_tap_key>
    2e64:	6a 89       	ldd	r22, Y+18	; 0x12
    2e66:	81 11       	cpse	r24, r1
    2e68:	2e c0       	rjmp	.+92     	; 0x2ec6 <process_tapping+0x22a>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    2e6a:	c8 01       	movw	r24, r16
    2e6c:	0e 94 57 12 	call	0x24ae	; 0x24ae <process_action>
    2e70:	a4 c0       	rjmp	.+328    	; 0x2fba <process_tapping+0x31e>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    2e72:	8f 2f       	mov	r24, r31
    2e74:	80 7f       	andi	r24, 0xF0	; 240
    2e76:	69 f7       	brne	.-38     	; 0x2e52 <process_tapping+0x1b6>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    2e78:	7e 2d       	mov	r23, r14
    2e7a:	f9 8a       	std	Y+17, r15	; 0x11
    2e7c:	e8 8a       	std	Y+16, r14	; 0x10
    2e7e:	89 89       	ldd	r24, Y+17	; 0x11
    2e80:	0e 94 98 15 	call	0x2b30	; 0x2b30 <debug_event>
                process_action(&tapping_key);
    2e84:	88 ea       	ldi	r24, 0xA8	; 168
    2e86:	91 e0       	ldi	r25, 0x01	; 1
    2e88:	0e 94 57 12 	call	0x24ae	; 0x24ae <process_action>
                tapping_key = (keyrecord_t){};
    2e8c:	e8 ea       	ldi	r30, 0xA8	; 168
    2e8e:	f1 e0       	ldi	r31, 0x01	; 1
    2e90:	86 e0       	ldi	r24, 0x06	; 6
    2e92:	df 01       	movw	r26, r30
    2e94:	1d 92       	st	X+, r1
    2e96:	8a 95       	dec	r24
    2e98:	e9 f7       	brne	.-6      	; 0x2e94 <process_tapping+0x1f8>
                debug_tapping_key();
    2e9a:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <debug_tapping_key>
                return false;
    2e9e:	d1 2c       	mov	r13, r1
    2ea0:	da c0       	rjmp	.+436    	; 0x3056 <process_tapping+0x3ba>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2ea2:	74 13       	cpse	r23, r20
    2ea4:	d8 cf       	rjmp	.-80     	; 0x2e56 <process_tapping+0x1ba>
    2ea6:	61 11       	cpse	r22, r1
    2ea8:	d6 cf       	rjmp	.-84     	; 0x2e56 <process_tapping+0x1ba>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    2eaa:	d8 01       	movw	r26, r16
    2eac:	15 96       	adiw	r26, 0x05	; 5
    2eae:	fc 93       	st	X, r31
                    process_action(keyp);
    2eb0:	c8 01       	movw	r24, r16
    2eb2:	0e 94 57 12 	call	0x24ae	; 0x24ae <process_action>
                    tapping_key = (keyrecord_t){};
    2eb6:	e8 ea       	ldi	r30, 0xA8	; 168
    2eb8:	f1 e0       	ldi	r31, 0x01	; 1
    2eba:	86 e0       	ldi	r24, 0x06	; 6
    2ebc:	df 01       	movw	r26, r30
    2ebe:	1d 92       	st	X+, r1
    2ec0:	8a 95       	dec	r24
    2ec2:	e9 f7       	brne	.-6      	; 0x2ebe <process_tapping+0x222>
                    return true;
    2ec4:	c8 c0       	rjmp	.+400    	; 0x3056 <process_tapping+0x3ba>
                }
                else if (is_tap_key(event.key) && event.pressed) {
    2ec6:	d6 2e       	mov	r13, r22
    2ec8:	66 23       	and	r22, r22
    2eca:	79 f2       	breq	.-98     	; 0x2e6a <process_tapping+0x1ce>
                    if (tapping_key.tap.count > 1) {
    2ecc:	20 91 ad 01 	lds	r18, 0x01AD
    2ed0:	82 2f       	mov	r24, r18
    2ed2:	82 95       	swap	r24
    2ed4:	8f 70       	andi	r24, 0x0F	; 15
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	02 97       	sbiw	r24, 0x02	; 2
    2eda:	74 f0       	brlt	.+28     	; 0x2ef8 <process_tapping+0x25c>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    2edc:	80 91 a8 01 	lds	r24, 0x01A8
    2ee0:	90 91 a9 01 	lds	r25, 0x01A9
    2ee4:	9a 83       	std	Y+2, r25	; 0x02
    2ee6:	89 83       	std	Y+1, r24	; 0x01
    2ee8:	1b 82       	std	Y+3, r1	; 0x03
    2eea:	fd 82       	std	Y+5, r15	; 0x05
    2eec:	ec 82       	std	Y+4, r14	; 0x04
    2eee:	2e 83       	std	Y+6, r18	; 0x06
    2ef0:	ce 01       	movw	r24, r28
    2ef2:	01 96       	adiw	r24, 0x01	; 1
    2ef4:	0e 94 57 12 	call	0x24ae	; 0x24ae <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last timeout tap(1).\n");
                    }
                    tapping_key = *keyp;
    2ef8:	86 e0       	ldi	r24, 0x06	; 6
    2efa:	f8 01       	movw	r30, r16
    2efc:	a8 ea       	ldi	r26, 0xA8	; 168
    2efe:	b1 e0       	ldi	r27, 0x01	; 1
    2f00:	01 90       	ld	r0, Z+
    2f02:	0d 92       	st	X+, r0
    2f04:	8a 95       	dec	r24
    2f06:	e1 f7       	brne	.-8      	; 0x2f00 <process_tapping+0x264>
                    waiting_buffer_scan_tap();
    2f08:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <waiting_buffer_scan_tap>
    2f0c:	6f c0       	rjmp	.+222    	; 0x2fec <process_tapping+0x350>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    2f0e:	e2 16       	cp	r14, r18
    2f10:	f3 06       	cpc	r15, r19
    2f12:	40 f0       	brcs	.+16     	; 0x2f24 <process_tapping+0x288>
    2f14:	c7 01       	movw	r24, r14
    2f16:	82 1b       	sub	r24, r18
    2f18:	93 0b       	sbc	r25, r19
    2f1a:	9c 01       	movw	r18, r24
    2f1c:	2c 32       	cpi	r18, 0x2C	; 44
    2f1e:	31 40       	sbci	r19, 0x01	; 1
    2f20:	48 f0       	brcs	.+18     	; 0x2f34 <process_tapping+0x298>
    2f22:	57 c0       	rjmp	.+174    	; 0x2fd2 <process_tapping+0x336>
    2f24:	20 95       	com	r18
    2f26:	30 95       	com	r19
    2f28:	2e 0d       	add	r18, r14
    2f2a:	3f 1d       	adc	r19, r15
    2f2c:	2c 32       	cpi	r18, 0x2C	; 44
    2f2e:	31 40       	sbci	r19, 0x01	; 1
    2f30:	08 f0       	brcs	.+2      	; 0x2f34 <process_tapping+0x298>
    2f32:	4f c0       	rjmp	.+158    	; 0x2fd2 <process_tapping+0x336>
            if (event.pressed) {
    2f34:	d6 2e       	mov	r13, r22
    2f36:	66 23       	and	r22, r22
    2f38:	09 f4       	brne	.+2      	; 0x2f3c <process_tapping+0x2a0>
    2f3a:	97 cf       	rjmp	.-210    	; 0x2e6a <process_tapping+0x1ce>
                if (IS_TAPPING_KEY(event.key)) {
    2f3c:	e5 13       	cpse	r30, r21
    2f3e:	29 c0       	rjmp	.+82     	; 0x2f92 <process_tapping+0x2f6>
    2f40:	74 13       	cpse	r23, r20
    2f42:	27 c0       	rjmp	.+78     	; 0x2f92 <process_tapping+0x2f6>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    2f44:	80 91 ad 01 	lds	r24, 0x01AD
    2f48:	80 fd       	sbrc	r24, 0
    2f4a:	1a c0       	rjmp	.+52     	; 0x2f80 <process_tapping+0x2e4>
    2f4c:	98 2f       	mov	r25, r24
    2f4e:	92 95       	swap	r25
    2f50:	9f 70       	andi	r25, 0x0F	; 15
    2f52:	b1 f0       	breq	.+44     	; 0x2f80 <process_tapping+0x2e4>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    2f54:	f8 01       	movw	r30, r16
    2f56:	85 83       	std	Z+5, r24	; 0x05
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    2f58:	9f 30       	cpi	r25, 0x0F	; 15
    2f5a:	31 f0       	breq	.+12     	; 0x2f68 <process_tapping+0x2cc>
    2f5c:	9f 5f       	subi	r25, 0xFF	; 255
    2f5e:	92 95       	swap	r25
    2f60:	90 7f       	andi	r25, 0xF0	; 240
    2f62:	8f 70       	andi	r24, 0x0F	; 15
    2f64:	89 2b       	or	r24, r25
    2f66:	85 83       	std	Z+5, r24	; 0x05
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    2f68:	c8 01       	movw	r24, r16
    2f6a:	0e 94 57 12 	call	0x24ae	; 0x24ae <process_action>
                        tapping_key = *keyp;
    2f6e:	86 e0       	ldi	r24, 0x06	; 6
    2f70:	f8 01       	movw	r30, r16
    2f72:	a8 ea       	ldi	r26, 0xA8	; 168
    2f74:	b1 e0       	ldi	r27, 0x01	; 1
    2f76:	01 90       	ld	r0, Z+
    2f78:	0d 92       	st	X+, r0
    2f7a:	8a 95       	dec	r24
    2f7c:	e1 f7       	brne	.-8      	; 0x2f76 <process_tapping+0x2da>
    2f7e:	36 c0       	rjmp	.+108    	; 0x2fec <process_tapping+0x350>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    2f80:	86 e0       	ldi	r24, 0x06	; 6
    2f82:	f8 01       	movw	r30, r16
    2f84:	a8 ea       	ldi	r26, 0xA8	; 168
    2f86:	b1 e0       	ldi	r27, 0x01	; 1
    2f88:	01 90       	ld	r0, Z+
    2f8a:	0d 92       	st	X+, r0
    2f8c:	8a 95       	dec	r24
    2f8e:	e1 f7       	brne	.-8      	; 0x2f88 <process_tapping+0x2ec>
                        return true;
    2f90:	62 c0       	rjmp	.+196    	; 0x3056 <process_tapping+0x3ba>
                    }
                } else if (is_tap_key(event.key)) {
    2f92:	4d 87       	std	Y+13, r20	; 0x0d
    2f94:	5e 87       	std	Y+14, r21	; 0x0e
    2f96:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f98:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f9a:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <is_tap_key>
    2f9e:	88 23       	and	r24, r24
    2fa0:	79 f0       	breq	.+30     	; 0x2fc0 <process_tapping+0x324>
                    // Sequential tap can be interfered with other tap key.
                    debug("Tapping: Start with interfering other tap.\n");
                    tapping_key = *keyp;
    2fa2:	86 e0       	ldi	r24, 0x06	; 6
    2fa4:	f8 01       	movw	r30, r16
    2fa6:	a8 ea       	ldi	r26, 0xA8	; 168
    2fa8:	b1 e0       	ldi	r27, 0x01	; 1
    2faa:	01 90       	ld	r0, Z+
    2fac:	0d 92       	st	X+, r0
    2fae:	8a 95       	dec	r24
    2fb0:	e1 f7       	brne	.-8      	; 0x2faa <process_tapping+0x30e>
                    waiting_buffer_scan_tap();
    2fb2:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <waiting_buffer_scan_tap>
                    debug_tapping_key();
    2fb6:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <debug_tapping_key>
                    return true;
    2fba:	dd 24       	eor	r13, r13
    2fbc:	d3 94       	inc	r13
    2fbe:	4b c0       	rjmp	.+150    	; 0x3056 <process_tapping+0x3ba>
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    2fc0:	80 91 ad 01 	lds	r24, 0x01AD
    2fc4:	81 60       	ori	r24, 0x01	; 1
    2fc6:	80 93 ad 01 	sts	0x01AD, r24
                    process_action(keyp);
    2fca:	c8 01       	movw	r24, r16
    2fcc:	0e 94 57 12 	call	0x24ae	; 0x24ae <process_action>
                    return true;
    2fd0:	42 c0       	rjmp	.+132    	; 0x3056 <process_tapping+0x3ba>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    2fd2:	7e 2d       	mov	r23, r14
    2fd4:	f9 8a       	std	Y+17, r15	; 0x11
    2fd6:	e8 8a       	std	Y+16, r14	; 0x10
    2fd8:	89 89       	ldd	r24, Y+17	; 0x11
    2fda:	0e 94 98 15 	call	0x2b30	; 0x2b30 <debug_event>
            tapping_key = (keyrecord_t){};
    2fde:	e8 ea       	ldi	r30, 0xA8	; 168
    2fe0:	f1 e0       	ldi	r31, 0x01	; 1
    2fe2:	86 e0       	ldi	r24, 0x06	; 6
    2fe4:	df 01       	movw	r26, r30
    2fe6:	1d 92       	st	X+, r1
    2fe8:	8a 95       	dec	r24
    2fea:	e9 f7       	brne	.-6      	; 0x2fe6 <process_tapping+0x34a>
            debug_tapping_key();
    2fec:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <debug_tapping_key>
            return false;
    2ff0:	32 c0       	rjmp	.+100    	; 0x3056 <process_tapping+0x3ba>
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    2ff2:	66 23       	and	r22, r22
    2ff4:	09 f4       	brne	.+2      	; 0x2ff8 <process_tapping+0x35c>
    2ff6:	39 cf       	rjmp	.-398    	; 0x2e6a <process_tapping+0x1ce>
    2ff8:	4d 87       	std	Y+13, r20	; 0x0d
    2ffa:	5e 87       	std	Y+14, r21	; 0x0e
    2ffc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ffe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3000:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <is_tap_key>
    3004:	88 23       	and	r24, r24
    3006:	09 f4       	brne	.+2      	; 0x300a <process_tapping+0x36e>
    3008:	30 cf       	rjmp	.-416    	; 0x2e6a <process_tapping+0x1ce>
    300a:	cb cf       	rjmp	.-106    	; 0x2fa2 <process_tapping+0x306>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    300c:	4d 87       	std	Y+13, r20	; 0x0d
    300e:	5e 87       	std	Y+14, r21	; 0x0e
    3010:	8d 85       	ldd	r24, Y+13	; 0x0d
    3012:	9e 85       	ldd	r25, Y+14	; 0x0e
    3014:	0e 94 96 1a 	call	0x352c	; 0x352c <layer_switch_get_action>
                    switch (action.kind.id) {
    3018:	29 2f       	mov	r18, r25
    301a:	22 95       	swap	r18
    301c:	2f 70       	andi	r18, 0x0F	; 15
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	22 30       	cpi	r18, 0x02	; 2
    3022:	31 05       	cpc	r19, r1
    3024:	2c f4       	brge	.+10     	; 0x3030 <process_tapping+0x394>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    3026:	9f 70       	andi	r25, 0x0F	; 15
    3028:	41 f0       	breq	.+16     	; 0x303a <process_tapping+0x39e>
    302a:	81 11       	cpse	r24, r1
    302c:	06 c0       	rjmp	.+12     	; 0x303a <process_tapping+0x39e>
    302e:	0c c0       	rjmp	.+24     	; 0x3048 <process_tapping+0x3ac>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
    3030:	24 30       	cpi	r18, 0x04	; 4
    3032:	31 05       	cpc	r19, r1
    3034:	2c f4       	brge	.+10     	; 0x3040 <process_tapping+0x3a4>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    3036:	9f 70       	andi	r25, 0x0F	; 15
    3038:	49 f4       	brne	.+18     	; 0x304c <process_tapping+0x3b0>
                            if (IS_MOD(action.key.code)) return false;
    303a:	80 5e       	subi	r24, 0xE0	; 224
    303c:	88 30       	cpi	r24, 0x08	; 8
    303e:	20 f0       	brcs	.+8      	; 0x3048 <process_tapping+0x3ac>
                            break;
                    }
                    // Release of key should be process immediately.
                    debug("Tapping: release event of a key pressed before tapping\n");
                    process_action(keyp);
    3040:	c8 01       	movw	r24, r16
    3042:	0e 94 57 12 	call	0x24ae	; 0x24ae <process_action>
                    return true;
    3046:	cf 2c       	mov	r12, r15
    3048:	dc 2c       	mov	r13, r12
    304a:	05 c0       	rjmp	.+10     	; 0x3056 <process_tapping+0x3ba>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    304c:	f8 01       	movw	r30, r16
    304e:	95 81       	ldd	r25, Z+5	; 0x05
    3050:	90 7f       	andi	r25, 0xF0	; 240
    3052:	99 f7       	brne	.-26     	; 0x303a <process_tapping+0x39e>
    3054:	f9 cf       	rjmp	.-14     	; 0x3048 <process_tapping+0x3ac>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    3056:	8d 2d       	mov	r24, r13
    3058:	62 96       	adiw	r28, 0x12	; 18
    305a:	0f b6       	in	r0, 0x3f	; 63
    305c:	f8 94       	cli
    305e:	de bf       	out	0x3e, r29	; 62
    3060:	0f be       	out	0x3f, r0	; 63
    3062:	cd bf       	out	0x3d, r28	; 61
    3064:	df 91       	pop	r29
    3066:	cf 91       	pop	r28
    3068:	1f 91       	pop	r17
    306a:	0f 91       	pop	r16
    306c:	ff 90       	pop	r15
    306e:	ef 90       	pop	r14
    3070:	df 90       	pop	r13
    3072:	cf 90       	pop	r12
    3074:	08 95       	ret

00003076 <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    3076:	1f 93       	push	r17
    3078:	cf 93       	push	r28
    307a:	df 93       	push	r29
    307c:	cd b7       	in	r28, 0x3d	; 61
    307e:	de b7       	in	r29, 0x3e	; 62
    3080:	2c 97       	sbiw	r28, 0x0c	; 12
    3082:	0f b6       	in	r0, 0x3f	; 63
    3084:	f8 94       	cli
    3086:	de bf       	out	0x3e, r29	; 62
    3088:	0f be       	out	0x3f, r0	; 63
    308a:	cd bf       	out	0x3d, r28	; 61
    308c:	4f 83       	std	Y+7, r20	; 0x07
    308e:	58 87       	std	Y+8, r21	; 0x08
    3090:	69 87       	std	Y+9, r22	; 0x09
    3092:	7a 87       	std	Y+10, r23	; 0x0a
    3094:	8b 87       	std	Y+11, r24	; 0x0b
    3096:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    3098:	ce 01       	movw	r24, r28
    309a:	07 96       	adiw	r24, 0x07	; 7
    309c:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <process_tapping>
    30a0:	88 23       	and	r24, r24
    30a2:	c1 f0       	breq	.+48     	; 0x30d4 <action_tapping_process+0x5e>
        if (!IS_NOEVENT(record.event)) {
    30a4:	2f 81       	ldd	r18, Y+7	; 0x07
    30a6:	38 85       	ldd	r19, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    30a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    30aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    30ac:	89 2b       	or	r24, r25
    30ae:	31 f0       	breq	.+12     	; 0x30bc <action_tapping_process+0x46>
    30b0:	3f 3f       	cpi	r19, 0xFF	; 255
    30b2:	11 f0       	breq	.+4      	; 0x30b8 <action_tapping_process+0x42>
    30b4:	80 e0       	ldi	r24, 0x00	; 0
    30b6:	03 c0       	rjmp	.+6      	; 0x30be <action_tapping_process+0x48>
    30b8:	2f 3f       	cpi	r18, 0xFF	; 255
    30ba:	e1 f7       	brne	.-8      	; 0x30b4 <action_tapping_process+0x3e>
    30bc:	81 e0       	ldi	r24, 0x01	; 1
    30be:	81 11       	cpse	r24, r1
    30c0:	47 c0       	rjmp	.+142    	; 0x3150 <action_tapping_process+0xda>
            debug("processed: "); debug_record(record); debug("\n");
    30c2:	4f 81       	ldd	r20, Y+7	; 0x07
    30c4:	58 85       	ldd	r21, Y+8	; 0x08
    30c6:	69 85       	ldd	r22, Y+9	; 0x09
    30c8:	7a 85       	ldd	r23, Y+10	; 0x0a
    30ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    30cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    30ce:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <debug_record>
    30d2:	3e c0       	rjmp	.+124    	; 0x3150 <action_tapping_process+0xda>
    30d4:	86 e0       	ldi	r24, 0x06	; 6
    30d6:	fe 01       	movw	r30, r28
    30d8:	37 96       	adiw	r30, 0x07	; 7
    30da:	de 01       	movw	r26, r28
    30dc:	11 96       	adiw	r26, 0x01	; 1
    30de:	01 90       	ld	r0, Z+
    30e0:	0d 92       	st	X+, r0
    30e2:	8a 95       	dec	r24
    30e4:	e1 f7       	brne	.-8      	; 0x30de <action_tapping_process+0x68>
    30e6:	ff 81       	ldd	r31, Y+7	; 0x07
    30e8:	e8 85       	ldd	r30, Y+8	; 0x08
    30ea:	4a 85       	ldd	r20, Y+10	; 0x0a
    30ec:	5b 85       	ldd	r21, Y+11	; 0x0b
    30ee:	41 15       	cp	r20, r1
    30f0:	51 05       	cpc	r21, r1
    30f2:	31 f0       	breq	.+12     	; 0x3100 <action_tapping_process+0x8a>
    30f4:	ef 3f       	cpi	r30, 0xFF	; 255
    30f6:	31 f4       	brne	.+12     	; 0x3104 <action_tapping_process+0x8e>
    30f8:	81 e0       	ldi	r24, 0x01	; 1
    30fa:	ff 3f       	cpi	r31, 0xFF	; 255
    30fc:	19 f4       	brne	.+6      	; 0x3104 <action_tapping_process+0x8e>
    30fe:	03 c0       	rjmp	.+6      	; 0x3106 <action_tapping_process+0x90>
    3100:	81 e0       	ldi	r24, 0x01	; 1
    3102:	01 c0       	rjmp	.+2      	; 0x3106 <action_tapping_process+0x90>
    3104:	80 e0       	ldi	r24, 0x00	; 0
/*
 * Waiting buffer
 */
bool waiting_buffer_enq(keyrecord_t record)
{
    if (IS_NOEVENT(record.event)) {
    3106:	80 fd       	sbrc	r24, 0
    3108:	23 c0       	rjmp	.+70     	; 0x3150 <action_tapping_process+0xda>
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    310a:	20 91 77 01 	lds	r18, 0x0177
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	c9 01       	movw	r24, r18
    3112:	01 96       	adiw	r24, 0x01	; 1
    3114:	87 70       	andi	r24, 0x07	; 7
    3116:	99 27       	eor	r25, r25
    3118:	60 91 76 01 	lds	r22, 0x0176
    311c:	70 e0       	ldi	r23, 0x00	; 0
    311e:	86 17       	cp	r24, r22
    3120:	97 07       	cpc	r25, r23
    3122:	f1 f1       	breq	.+124    	; 0x31a0 <action_tapping_process+0x12a>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    3124:	f9 83       	std	Y+1, r31	; 0x01
    3126:	ea 83       	std	Y+2, r30	; 0x02
    3128:	5d 83       	std	Y+5, r21	; 0x05
    312a:	4c 83       	std	Y+4, r20	; 0x04
    312c:	96 e0       	ldi	r25, 0x06	; 6
    312e:	92 9f       	mul	r25, r18
    3130:	d0 01       	movw	r26, r0
    3132:	93 9f       	mul	r25, r19
    3134:	b0 0d       	add	r27, r0
    3136:	11 24       	eor	r1, r1
    3138:	a8 58       	subi	r26, 0x88	; 136
    313a:	be 4f       	sbci	r27, 0xFE	; 254
    313c:	fe 01       	movw	r30, r28
    313e:	31 96       	adiw	r30, 0x01	; 1
    3140:	01 90       	ld	r0, Z+
    3142:	0d 92       	st	X+, r0
    3144:	9a 95       	dec	r25
    3146:	e1 f7       	brne	.-8      	; 0x3140 <action_tapping_process+0xca>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    3148:	80 93 77 01 	sts	0x0177, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    314c:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <debug_waiting_buffer>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3150:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3152:	80 91 76 01 	lds	r24, 0x0176
    3156:	90 91 77 01 	lds	r25, 0x0177
    315a:	89 17       	cp	r24, r25
    315c:	79 f1       	breq	.+94     	; 0x31bc <action_tapping_process+0x146>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    315e:	18 9f       	mul	r17, r24
    3160:	c0 01       	movw	r24, r0
    3162:	11 24       	eor	r1, r1
    3164:	88 58       	subi	r24, 0x88	; 136
    3166:	9e 4f       	sbci	r25, 0xFE	; 254
    3168:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <process_tapping>
    316c:	88 23       	and	r24, r24
    316e:	31 f1       	breq	.+76     	; 0x31bc <action_tapping_process+0x146>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    3170:	e0 91 76 01 	lds	r30, 0x0176
    3174:	1e 9f       	mul	r17, r30
    3176:	f0 01       	movw	r30, r0
    3178:	11 24       	eor	r1, r1
    317a:	e8 58       	subi	r30, 0x88	; 136
    317c:	fe 4f       	sbci	r31, 0xFE	; 254
    317e:	40 81       	ld	r20, Z
    3180:	51 81       	ldd	r21, Z+1	; 0x01
    3182:	62 81       	ldd	r22, Z+2	; 0x02
    3184:	73 81       	ldd	r23, Z+3	; 0x03
    3186:	84 81       	ldd	r24, Z+4	; 0x04
    3188:	95 81       	ldd	r25, Z+5	; 0x05
    318a:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    318e:	80 91 76 01 	lds	r24, 0x0176
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	01 96       	adiw	r24, 0x01	; 1
    3196:	87 70       	andi	r24, 0x07	; 7
    3198:	99 27       	eor	r25, r25
    319a:	80 93 76 01 	sts	0x0176, r24
    319e:	d9 cf       	rjmp	.-78     	; 0x3152 <action_tapping_process+0xdc>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    31a0:	0e 94 6f 15 	call	0x2ade	; 0x2ade <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    31a4:	10 92 77 01 	sts	0x0177, r1
    waiting_buffer_tail = 0;
    31a8:	10 92 76 01 	sts	0x0176, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    31ac:	e8 ea       	ldi	r30, 0xA8	; 168
    31ae:	f1 e0       	ldi	r31, 0x01	; 1
    31b0:	86 e0       	ldi	r24, 0x06	; 6
    31b2:	df 01       	movw	r26, r30
    31b4:	1d 92       	st	X+, r1
    31b6:	8a 95       	dec	r24
    31b8:	e9 f7       	brne	.-6      	; 0x31b4 <action_tapping_process+0x13e>
    31ba:	ca cf       	rjmp	.-108    	; 0x3150 <action_tapping_process+0xda>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    31bc:	2c 96       	adiw	r28, 0x0c	; 12
    31be:	0f b6       	in	r0, 0x3f	; 63
    31c0:	f8 94       	cli
    31c2:	de bf       	out	0x3e, r29	; 62
    31c4:	0f be       	out	0x3f, r0	; 63
    31c6:	cd bf       	out	0x3d, r28	; 61
    31c8:	df 91       	pop	r29
    31ca:	cf 91       	pop	r28
    31cc:	1f 91       	pop	r17
    31ce:	08 95       	ret

000031d0 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    31d0:	ef 92       	push	r14
    31d2:	ff 92       	push	r15
    31d4:	0f 93       	push	r16
    31d6:	1f 93       	push	r17
    31d8:	cf 93       	push	r28
    31da:	df 93       	push	r29
    31dc:	fc 01       	movw	r30, r24
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    31de:	00 97       	sbiw	r24, 0x00	; 0
    31e0:	09 f4       	brne	.+2      	; 0x31e4 <action_macro_play+0x14>
    31e2:	6f c0       	rjmp	.+222    	; 0x32c2 <action_macro_play+0xf2>
    31e4:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    31e6:	ee 24       	eor	r14, r14
    31e8:	e3 94       	inc	r14
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    31ea:	ef 01       	movw	r28, r30
    31ec:	21 96       	adiw	r28, 0x01	; 1
    31ee:	84 91       	lpm	r24, Z
    31f0:	84 37       	cpi	r24, 0x74	; 116
    31f2:	40 f4       	brcc	.+16     	; 0x3204 <action_macro_play+0x34>
    31f4:	84 30       	cpi	r24, 0x04	; 4
    31f6:	08 f0       	brcs	.+2      	; 0x31fa <action_macro_play+0x2a>
    31f8:	55 c0       	rjmp	.+170    	; 0x32a4 <action_macro_play+0xd4>
    31fa:	81 30       	cpi	r24, 0x01	; 1
    31fc:	81 f0       	breq	.+32     	; 0x321e <action_macro_play+0x4e>
    31fe:	82 30       	cpi	r24, 0x02	; 2
    3200:	21 f1       	breq	.+72     	; 0x324a <action_macro_play+0x7a>
    3202:	5f c0       	rjmp	.+190    	; 0x32c2 <action_macro_play+0xf2>
    3204:	85 37       	cpi	r24, 0x75	; 117
    3206:	09 f4       	brne	.+2      	; 0x320a <action_macro_play+0x3a>
    3208:	47 c0       	rjmp	.+142    	; 0x3298 <action_macro_play+0xc8>
    320a:	c0 f1       	brcs	.+112    	; 0x327c <action_macro_play+0xac>
    320c:	9c e7       	ldi	r25, 0x7C	; 124
    320e:	98 0f       	add	r25, r24
    3210:	90 37       	cpi	r25, 0x70	; 112
    3212:	08 f0       	brcs	.+2      	; 0x3216 <action_macro_play+0x46>
    3214:	56 c0       	rjmp	.+172    	; 0x32c2 <action_macro_play+0xf2>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    3216:	8f 77       	andi	r24, 0x7F	; 127
    3218:	0e 94 21 12 	call	0x2442	; 0x2442 <unregister_code>
                break;
    321c:	45 c0       	rjmp	.+138    	; 0x32a8 <action_macro_play+0xd8>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    321e:	8f 01       	movw	r16, r30
    3220:	0e 5f       	subi	r16, 0xFE	; 254
    3222:	1f 4f       	sbci	r17, 0xFF	; 255
    3224:	fe 01       	movw	r30, r28
    3226:	84 91       	lpm	r24, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    3228:	90 e2       	ldi	r25, 0x20	; 32
    322a:	98 0f       	add	r25, r24
    322c:	98 30       	cpi	r25, 0x08	; 8
    322e:	50 f4       	brcc	.+20     	; 0x3244 <action_macro_play+0x74>
                    add_weak_mods(MOD_BIT(macro));
    3230:	87 70       	andi	r24, 0x07	; 7
    3232:	fe 2d       	mov	r31, r14
    3234:	01 c0       	rjmp	.+2      	; 0x3238 <action_macro_play+0x68>
    3236:	ff 0f       	add	r31, r31
    3238:	8a 95       	dec	r24
    323a:	ea f7       	brpl	.-6      	; 0x3236 <action_macro_play+0x66>
    323c:	8f 2f       	mov	r24, r31
    323e:	0e 94 8b 1b 	call	0x3716	; 0x3716 <add_weak_mods>
    3242:	15 c0       	rjmp	.+42     	; 0x326e <action_macro_play+0x9e>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    3244:	0e 94 82 11 	call	0x2304	; 0x2304 <register_code>
    3248:	14 c0       	rjmp	.+40     	; 0x3272 <action_macro_play+0xa2>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    324a:	8f 01       	movw	r16, r30
    324c:	0e 5f       	subi	r16, 0xFE	; 254
    324e:	1f 4f       	sbci	r17, 0xFF	; 255
    3250:	fe 01       	movw	r30, r28
    3252:	84 91       	lpm	r24, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    3254:	90 e2       	ldi	r25, 0x20	; 32
    3256:	98 0f       	add	r25, r24
    3258:	98 30       	cpi	r25, 0x08	; 8
    325a:	68 f4       	brcc	.+26     	; 0x3276 <action_macro_play+0xa6>
                    del_weak_mods(MOD_BIT(macro));
    325c:	87 70       	andi	r24, 0x07	; 7
    325e:	fe 2d       	mov	r31, r14
    3260:	01 c0       	rjmp	.+2      	; 0x3264 <action_macro_play+0x94>
    3262:	ff 0f       	add	r31, r31
    3264:	8a 95       	dec	r24
    3266:	ea f7       	brpl	.-6      	; 0x3262 <action_macro_play+0x92>
    3268:	8f 2f       	mov	r24, r31
    326a:	0e 94 91 1b 	call	0x3722	; 0x3722 <del_weak_mods>
                    send_keyboard_report();
    326e:	0e 94 be 1b 	call	0x377c	; 0x377c <send_keyboard_report>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    3272:	e8 01       	movw	r28, r16
    3274:	19 c0       	rjmp	.+50     	; 0x32a8 <action_macro_play+0xd8>
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    del_weak_mods(MOD_BIT(macro));
                    send_keyboard_report();
                } else {
                    unregister_code(macro);
    3276:	0e 94 21 12 	call	0x2442	; 0x2442 <unregister_code>
    327a:	fb cf       	rjmp	.-10     	; 0x3272 <action_macro_play+0xa2>
                }
                break;
            case WAIT:
                MACRO_READ();
    327c:	cf 01       	movw	r24, r30
    327e:	02 96       	adiw	r24, 0x02	; 2
    3280:	fe 01       	movw	r30, r28
    3282:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    3284:	cc 23       	and	r28, r28
    3286:	61 f0       	breq	.+24     	; 0x32a0 <action_macro_play+0xd0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3288:	ef e9       	ldi	r30, 0x9F	; 159
    328a:	ff e0       	ldi	r31, 0x0F	; 15
    328c:	31 97       	sbiw	r30, 0x01	; 1
    328e:	f1 f7       	brne	.-4      	; 0x328c <action_macro_play+0xbc>
    3290:	00 c0       	rjmp	.+0      	; 0x3292 <action_macro_play+0xc2>
    3292:	00 00       	nop
    3294:	c1 50       	subi	r28, 0x01	; 1
    3296:	f6 cf       	rjmp	.-20     	; 0x3284 <action_macro_play+0xb4>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    3298:	cf 01       	movw	r24, r30
    329a:	02 96       	adiw	r24, 0x02	; 2
    329c:	fe 01       	movw	r30, r28
    329e:	f4 90       	lpm	r15, Z
    32a0:	ec 01       	movw	r28, r24
                dprintf("INTERVAL(%u)\n", interval);
                break;
    32a2:	02 c0       	rjmp	.+4      	; 0x32a8 <action_macro_play+0xd8>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    32a4:	0e 94 82 11 	call	0x2304	; 0x2304 <register_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    32a8:	8f 2d       	mov	r24, r15
    32aa:	88 23       	and	r24, r24
    32ac:	41 f0       	breq	.+16     	; 0x32be <action_macro_play+0xee>
    32ae:	ef e9       	ldi	r30, 0x9F	; 159
    32b0:	ff e0       	ldi	r31, 0x0F	; 15
    32b2:	31 97       	sbiw	r30, 0x01	; 1
    32b4:	f1 f7       	brne	.-4      	; 0x32b2 <action_macro_play+0xe2>
    32b6:	00 c0       	rjmp	.+0      	; 0x32b8 <action_macro_play+0xe8>
    32b8:	00 00       	nop
    32ba:	81 50       	subi	r24, 0x01	; 1
    32bc:	f6 cf       	rjmp	.-20     	; 0x32aa <action_macro_play+0xda>
    32be:	fe 01       	movw	r30, r28
    32c0:	94 cf       	rjmp	.-216    	; 0x31ea <action_macro_play+0x1a>
    }
}
    32c2:	df 91       	pop	r29
    32c4:	cf 91       	pop	r28
    32c6:	1f 91       	pop	r17
    32c8:	0f 91       	pop	r16
    32ca:	ff 90       	pop	r15
    32cc:	ef 90       	pop	r14
    32ce:	08 95       	ret

000032d0 <default_layer_debug>:
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void default_layer_debug(void)
{
    32d0:	08 95       	ret

000032d2 <default_layer_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    32d2:	60 93 b2 01 	sts	0x01B2, r22
    32d6:	70 93 b3 01 	sts	0x01B3, r23
    32da:	80 93 b4 01 	sts	0x01B4, r24
    32de:	90 93 b5 01 	sts	0x01B5, r25
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    32e2:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <clear_keyboard_but_mods>

000032e6 <default_layer_or>:
    default_layer_state_set(state);
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    32e6:	0f 93       	push	r16
    32e8:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    32ea:	00 91 b2 01 	lds	r16, 0x01B2
    32ee:	10 91 b3 01 	lds	r17, 0x01B3
    32f2:	20 91 b4 01 	lds	r18, 0x01B4
    32f6:	30 91 b5 01 	lds	r19, 0x01B5
    32fa:	06 2b       	or	r16, r22
    32fc:	17 2b       	or	r17, r23
    32fe:	28 2b       	or	r18, r24
    3300:	39 2b       	or	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3302:	00 93 b2 01 	sts	0x01B2, r16
    3306:	10 93 b3 01 	sts	0x01B3, r17
    330a:	20 93 b4 01 	sts	0x01B4, r18
    330e:	30 93 b5 01 	sts	0x01B5, r19

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
    3312:	1f 91       	pop	r17
    3314:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3316:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <clear_keyboard_but_mods>

0000331a <default_layer_and>:
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    331a:	0f 93       	push	r16
    331c:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    331e:	00 91 b2 01 	lds	r16, 0x01B2
    3322:	10 91 b3 01 	lds	r17, 0x01B3
    3326:	20 91 b4 01 	lds	r18, 0x01B4
    332a:	30 91 b5 01 	lds	r19, 0x01B5
    332e:	06 23       	and	r16, r22
    3330:	17 23       	and	r17, r23
    3332:	28 23       	and	r18, r24
    3334:	39 23       	and	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3336:	00 93 b2 01 	sts	0x01B2, r16
    333a:	10 93 b3 01 	sts	0x01B3, r17
    333e:	20 93 b4 01 	sts	0x01B4, r18
    3342:	30 93 b5 01 	sts	0x01B5, r19
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
    3346:	1f 91       	pop	r17
    3348:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    334a:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <clear_keyboard_but_mods>

0000334e <default_layer_xor>:
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    334e:	0f 93       	push	r16
    3350:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    3352:	00 91 b2 01 	lds	r16, 0x01B2
    3356:	10 91 b3 01 	lds	r17, 0x01B3
    335a:	20 91 b4 01 	lds	r18, 0x01B4
    335e:	30 91 b5 01 	lds	r19, 0x01B5
    3362:	06 27       	eor	r16, r22
    3364:	17 27       	eor	r17, r23
    3366:	28 27       	eor	r18, r24
    3368:	39 27       	eor	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    336a:	00 93 b2 01 	sts	0x01B2, r16
    336e:	10 93 b3 01 	sts	0x01B3, r17
    3372:	20 93 b4 01 	sts	0x01B4, r18
    3376:	30 93 b5 01 	sts	0x01B5, r19
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
}
    337a:	1f 91       	pop	r17
    337c:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    337e:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <clear_keyboard_but_mods>

00003382 <layer_clear>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3382:	10 92 ae 01 	sts	0x01AE, r1
    3386:	10 92 af 01 	sts	0x01AF, r1
    338a:	10 92 b0 01 	sts	0x01B0, r1
    338e:	10 92 b1 01 	sts	0x01B1, r1
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3392:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <clear_keyboard_but_mods>

00003396 <layer_move>:
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    3396:	41 e0       	ldi	r20, 0x01	; 1
    3398:	50 e0       	ldi	r21, 0x00	; 0
    339a:	60 e0       	ldi	r22, 0x00	; 0
    339c:	70 e0       	ldi	r23, 0x00	; 0
    339e:	04 c0       	rjmp	.+8      	; 0x33a8 <layer_move+0x12>
    33a0:	44 0f       	add	r20, r20
    33a2:	55 1f       	adc	r21, r21
    33a4:	66 1f       	adc	r22, r22
    33a6:	77 1f       	adc	r23, r23
    33a8:	8a 95       	dec	r24
    33aa:	d2 f7       	brpl	.-12     	; 0x33a0 <layer_move+0xa>

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    33ac:	40 93 ae 01 	sts	0x01AE, r20
    33b0:	50 93 af 01 	sts	0x01AF, r21
    33b4:	60 93 b0 01 	sts	0x01B0, r22
    33b8:	70 93 b1 01 	sts	0x01B1, r23
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    33bc:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <clear_keyboard_but_mods>

000033c0 <layer_on>:
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    33c0:	41 e0       	ldi	r20, 0x01	; 1
    33c2:	50 e0       	ldi	r21, 0x00	; 0
    33c4:	60 e0       	ldi	r22, 0x00	; 0
    33c6:	70 e0       	ldi	r23, 0x00	; 0
    33c8:	04 c0       	rjmp	.+8      	; 0x33d2 <layer_on+0x12>
    33ca:	44 0f       	add	r20, r20
    33cc:	55 1f       	adc	r21, r21
    33ce:	66 1f       	adc	r22, r22
    33d0:	77 1f       	adc	r23, r23
    33d2:	8a 95       	dec	r24
    33d4:	d2 f7       	brpl	.-12     	; 0x33ca <layer_on+0xa>
    33d6:	80 91 ae 01 	lds	r24, 0x01AE
    33da:	90 91 af 01 	lds	r25, 0x01AF
    33de:	a0 91 b0 01 	lds	r26, 0x01B0
    33e2:	b0 91 b1 01 	lds	r27, 0x01B1
    33e6:	84 2b       	or	r24, r20
    33e8:	95 2b       	or	r25, r21
    33ea:	a6 2b       	or	r26, r22
    33ec:	b7 2b       	or	r27, r23

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    33ee:	80 93 ae 01 	sts	0x01AE, r24
    33f2:	90 93 af 01 	sts	0x01AF, r25
    33f6:	a0 93 b0 01 	sts	0x01B0, r26
    33fa:	b0 93 b1 01 	sts	0x01B1, r27
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    33fe:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <clear_keyboard_but_mods>

00003402 <layer_off>:
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    3402:	41 e0       	ldi	r20, 0x01	; 1
    3404:	50 e0       	ldi	r21, 0x00	; 0
    3406:	60 e0       	ldi	r22, 0x00	; 0
    3408:	70 e0       	ldi	r23, 0x00	; 0
    340a:	04 c0       	rjmp	.+8      	; 0x3414 <layer_off+0x12>
    340c:	44 0f       	add	r20, r20
    340e:	55 1f       	adc	r21, r21
    3410:	66 1f       	adc	r22, r22
    3412:	77 1f       	adc	r23, r23
    3414:	8a 95       	dec	r24
    3416:	d2 f7       	brpl	.-12     	; 0x340c <layer_off+0xa>
    3418:	40 95       	com	r20
    341a:	50 95       	com	r21
    341c:	60 95       	com	r22
    341e:	70 95       	com	r23
    3420:	80 91 ae 01 	lds	r24, 0x01AE
    3424:	90 91 af 01 	lds	r25, 0x01AF
    3428:	a0 91 b0 01 	lds	r26, 0x01B0
    342c:	b0 91 b1 01 	lds	r27, 0x01B1
    3430:	84 23       	and	r24, r20
    3432:	95 23       	and	r25, r21
    3434:	a6 23       	and	r26, r22
    3436:	b7 23       	and	r27, r23

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3438:	80 93 ae 01 	sts	0x01AE, r24
    343c:	90 93 af 01 	sts	0x01AF, r25
    3440:	a0 93 b0 01 	sts	0x01B0, r26
    3444:	b0 93 b1 01 	sts	0x01B1, r27
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3448:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <clear_keyboard_but_mods>

0000344c <layer_invert>:
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    344c:	41 e0       	ldi	r20, 0x01	; 1
    344e:	50 e0       	ldi	r21, 0x00	; 0
    3450:	60 e0       	ldi	r22, 0x00	; 0
    3452:	70 e0       	ldi	r23, 0x00	; 0
    3454:	04 c0       	rjmp	.+8      	; 0x345e <layer_invert+0x12>
    3456:	44 0f       	add	r20, r20
    3458:	55 1f       	adc	r21, r21
    345a:	66 1f       	adc	r22, r22
    345c:	77 1f       	adc	r23, r23
    345e:	8a 95       	dec	r24
    3460:	d2 f7       	brpl	.-12     	; 0x3456 <layer_invert+0xa>
    3462:	80 91 ae 01 	lds	r24, 0x01AE
    3466:	90 91 af 01 	lds	r25, 0x01AF
    346a:	a0 91 b0 01 	lds	r26, 0x01B0
    346e:	b0 91 b1 01 	lds	r27, 0x01B1
    3472:	84 27       	eor	r24, r20
    3474:	95 27       	eor	r25, r21
    3476:	a6 27       	eor	r26, r22
    3478:	b7 27       	eor	r27, r23

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    347a:	80 93 ae 01 	sts	0x01AE, r24
    347e:	90 93 af 01 	sts	0x01AF, r25
    3482:	a0 93 b0 01 	sts	0x01B0, r26
    3486:	b0 93 b1 01 	sts	0x01B1, r27
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    348a:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <clear_keyboard_but_mods>

0000348e <layer_or>:
{
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    348e:	0f 93       	push	r16
    3490:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    3492:	00 91 ae 01 	lds	r16, 0x01AE
    3496:	10 91 af 01 	lds	r17, 0x01AF
    349a:	20 91 b0 01 	lds	r18, 0x01B0
    349e:	30 91 b1 01 	lds	r19, 0x01B1
    34a2:	06 2b       	or	r16, r22
    34a4:	17 2b       	or	r17, r23
    34a6:	28 2b       	or	r18, r24
    34a8:	39 2b       	or	r19, r25

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    34aa:	00 93 ae 01 	sts	0x01AE, r16
    34ae:	10 93 af 01 	sts	0x01AF, r17
    34b2:	20 93 b0 01 	sts	0x01B0, r18
    34b6:	30 93 b1 01 	sts	0x01B1, r19
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
    34ba:	1f 91       	pop	r17
    34bc:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    34be:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <clear_keyboard_but_mods>

000034c2 <layer_and>:
void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    34c2:	0f 93       	push	r16
    34c4:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    34c6:	00 91 ae 01 	lds	r16, 0x01AE
    34ca:	10 91 af 01 	lds	r17, 0x01AF
    34ce:	20 91 b0 01 	lds	r18, 0x01B0
    34d2:	30 91 b1 01 	lds	r19, 0x01B1
    34d6:	06 23       	and	r16, r22
    34d8:	17 23       	and	r17, r23
    34da:	28 23       	and	r18, r24
    34dc:	39 23       	and	r19, r25

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    34de:	00 93 ae 01 	sts	0x01AE, r16
    34e2:	10 93 af 01 	sts	0x01AF, r17
    34e6:	20 93 b0 01 	sts	0x01B0, r18
    34ea:	30 93 b1 01 	sts	0x01B1, r19
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
    34ee:	1f 91       	pop	r17
    34f0:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    34f2:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <clear_keyboard_but_mods>

000034f6 <layer_xor>:
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    34f6:	0f 93       	push	r16
    34f8:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    34fa:	00 91 ae 01 	lds	r16, 0x01AE
    34fe:	10 91 af 01 	lds	r17, 0x01AF
    3502:	20 91 b0 01 	lds	r18, 0x01B0
    3506:	30 91 b1 01 	lds	r19, 0x01B1
    350a:	06 27       	eor	r16, r22
    350c:	17 27       	eor	r17, r23
    350e:	28 27       	eor	r18, r24
    3510:	39 27       	eor	r19, r25

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3512:	00 93 ae 01 	sts	0x01AE, r16
    3516:	10 93 af 01 	sts	0x01AF, r17
    351a:	20 93 b0 01 	sts	0x01B0, r18
    351e:	30 93 b1 01 	sts	0x01B1, r19
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
}
    3522:	1f 91       	pop	r17
    3524:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3526:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <clear_keyboard_but_mods>

0000352a <layer_debug>:
{
    layer_state_set(layer_state ^ state);
}

void layer_debug(void)
{
    352a:	08 95       	ret

0000352c <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    352c:	cf 92       	push	r12
    352e:	df 92       	push	r13
    3530:	ef 92       	push	r14
    3532:	ff 92       	push	r15
    3534:	0f 93       	push	r16
    3536:	1f 93       	push	r17
    3538:	cf 93       	push	r28
    353a:	df 93       	push	r29
    353c:	ec 01       	movw	r28, r24
    action_t action;
    action.code = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    353e:	c0 90 b2 01 	lds	r12, 0x01B2
    3542:	d0 90 b3 01 	lds	r13, 0x01B3
    3546:	e0 90 b4 01 	lds	r14, 0x01B4
    354a:	f0 90 b5 01 	lds	r15, 0x01B5
    354e:	80 91 ae 01 	lds	r24, 0x01AE
    3552:	90 91 af 01 	lds	r25, 0x01AF
    3556:	a0 91 b0 01 	lds	r26, 0x01B0
    355a:	b0 91 b1 01 	lds	r27, 0x01B1
    355e:	c8 2a       	or	r12, r24
    3560:	d9 2a       	or	r13, r25
    3562:	ea 2a       	or	r14, r26
    3564:	fb 2a       	or	r15, r27
    3566:	0f e1       	ldi	r16, 0x1F	; 31
    3568:	10 e0       	ldi	r17, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    356a:	b7 01       	movw	r22, r14
    356c:	a6 01       	movw	r20, r12
    356e:	00 2e       	mov	r0, r16
    3570:	04 c0       	rjmp	.+8      	; 0x357a <layer_switch_get_action+0x4e>
    3572:	76 95       	lsr	r23
    3574:	67 95       	ror	r22
    3576:	57 95       	ror	r21
    3578:	47 95       	ror	r20
    357a:	0a 94       	dec	r0
    357c:	d2 f7       	brpl	.-12     	; 0x3572 <layer_switch_get_action+0x46>
    357e:	40 ff       	sbrs	r20, 0
    3580:	07 c0       	rjmp	.+14     	; 0x3590 <layer_switch_get_action+0x64>
            action = action_for_key(i, key);
    3582:	be 01       	movw	r22, r28
    3584:	80 2f       	mov	r24, r16
    3586:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <action_for_key>
            if (action.code != ACTION_TRANSPARENT) {
    358a:	81 30       	cpi	r24, 0x01	; 1
    358c:	91 05       	cpc	r25, r1
    358e:	39 f4       	brne	.+14     	; 0x359e <layer_switch_get_action+0x72>
    3590:	01 50       	subi	r16, 0x01	; 1
    3592:	11 09       	sbc	r17, r1
    3594:	50 f7       	brcc	.-44     	; 0x356a <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    3596:	be 01       	movw	r22, r28
    3598:	80 e0       	ldi	r24, 0x00	; 0
    359a:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    359e:	df 91       	pop	r29
    35a0:	cf 91       	pop	r28
    35a2:	1f 91       	pop	r17
    35a4:	0f 91       	pop	r16
    35a6:	ff 90       	pop	r15
    35a8:	ef 90       	pop	r14
    35aa:	df 90       	pop	r13
    35ac:	cf 90       	pop	r12
    35ae:	08 95       	ret

000035b0 <add_key>:

/* key */
void add_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    35b0:	90 91 0a 01 	lds	r25, 0x010A
    35b4:	99 23       	and	r25, r25
    35b6:	61 f1       	breq	.+88     	; 0x3610 <add_key+0x60>
    35b8:	90 91 0b 01 	lds	r25, 0x010B
    35bc:	99 23       	and	r25, r25
    35be:	41 f1       	breq	.+80     	; 0x3610 <add_key+0x60>
}

#ifdef NKRO_ENABLE
static inline void add_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    35c0:	98 2f       	mov	r25, r24
    35c2:	96 95       	lsr	r25
    35c4:	96 95       	lsr	r25
    35c6:	96 95       	lsr	r25
    35c8:	9f 30       	cpi	r25, 0x0F	; 15
    35ca:	88 f4       	brcc	.+34     	; 0x35ee <add_key+0x3e>
        keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
    35cc:	e0 91 0c 01 	lds	r30, 0x010C
    35d0:	f0 91 0d 01 	lds	r31, 0x010D
    35d4:	e9 0f       	add	r30, r25
    35d6:	f1 1d       	adc	r31, r1
    35d8:	87 70       	andi	r24, 0x07	; 7
    35da:	21 e0       	ldi	r18, 0x01	; 1
    35dc:	30 e0       	ldi	r19, 0x00	; 0
    35de:	01 c0       	rjmp	.+2      	; 0x35e2 <add_key+0x32>
    35e0:	22 0f       	add	r18, r18
    35e2:	8a 95       	dec	r24
    35e4:	ea f7       	brpl	.-6      	; 0x35e0 <add_key+0x30>
    35e6:	81 81       	ldd	r24, Z+1	; 0x01
    35e8:	82 2b       	or	r24, r18
    35ea:	81 83       	std	Z+1, r24	; 0x01
    35ec:	08 95       	ret
    } else {
        dprintf("add_key_bit: can't add: %02X\n", code);
    35ee:	90 91 cb 01 	lds	r25, 0x01CB
    35f2:	90 ff       	sbrs	r25, 0
    35f4:	2d c0       	rjmp	.+90     	; 0x3650 <add_key+0xa0>
    35f6:	1f 92       	push	r1
    35f8:	8f 93       	push	r24
    35fa:	83 e5       	ldi	r24, 0x53	; 83
    35fc:	94 e0       	ldi	r25, 0x04	; 4
    35fe:	9f 93       	push	r25
    3600:	8f 93       	push	r24
    3602:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    3606:	0f 90       	pop	r0
    3608:	0f 90       	pop	r0
    360a:	0f 90       	pop	r0
    360c:	0f 90       	pop	r0
    360e:	08 95       	ret
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3610:	40 91 0c 01 	lds	r20, 0x010C
    3614:	50 91 0d 01 	lds	r21, 0x010D
    3618:	20 e0       	ldi	r18, 0x00	; 0
    361a:	30 e0       	ldi	r19, 0x00	; 0
    361c:	9f ef       	ldi	r25, 0xFF	; 255
    361e:	fa 01       	movw	r30, r20
    3620:	e2 0f       	add	r30, r18
    3622:	f3 1f       	adc	r31, r19
    3624:	62 81       	ldd	r22, Z+2	; 0x02
    3626:	68 17       	cp	r22, r24
    3628:	99 f0       	breq	.+38     	; 0x3650 <add_key+0xa0>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    362a:	9f 3f       	cpi	r25, 0xFF	; 255
    362c:	19 f4       	brne	.+6      	; 0x3634 <add_key+0x84>
    362e:	61 11       	cpse	r22, r1
    3630:	01 c0       	rjmp	.+2      	; 0x3634 <add_key+0x84>
    3632:	92 2f       	mov	r25, r18
    3634:	2f 5f       	subi	r18, 0xFF	; 255
    3636:	3f 4f       	sbci	r19, 0xFF	; 255
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    3638:	2e 30       	cpi	r18, 0x0E	; 14
    363a:	31 05       	cpc	r19, r1
    363c:	81 f7       	brne	.-32     	; 0x361e <add_key+0x6e>
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    363e:	9f 3f       	cpi	r25, 0xFF	; 255
    3640:	39 f0       	breq	.+14     	; 0x3650 <add_key+0xa0>
            keyboard_report->keys[empty] = code;
    3642:	fa 01       	movw	r30, r20
    3644:	e9 0f       	add	r30, r25
    3646:	f1 1d       	adc	r31, r1
    3648:	97 fd       	sbrc	r25, 7
    364a:	fa 95       	dec	r31
    364c:	82 83       	std	Z+2, r24	; 0x02
    364e:	08 95       	ret
    3650:	08 95       	ret

00003652 <del_key>:
}

void del_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    3652:	90 91 0a 01 	lds	r25, 0x010A
    3656:	99 23       	and	r25, r25
    3658:	69 f1       	breq	.+90     	; 0x36b4 <del_key+0x62>
    365a:	90 91 0b 01 	lds	r25, 0x010B
    365e:	99 23       	and	r25, r25
    3660:	49 f1       	breq	.+82     	; 0x36b4 <del_key+0x62>
    }
}

static inline void del_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    3662:	98 2f       	mov	r25, r24
    3664:	96 95       	lsr	r25
    3666:	96 95       	lsr	r25
    3668:	96 95       	lsr	r25
    366a:	9f 30       	cpi	r25, 0x0F	; 15
    366c:	90 f4       	brcc	.+36     	; 0x3692 <del_key+0x40>
        keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
    366e:	e0 91 0c 01 	lds	r30, 0x010C
    3672:	f0 91 0d 01 	lds	r31, 0x010D
    3676:	e9 0f       	add	r30, r25
    3678:	f1 1d       	adc	r31, r1
    367a:	87 70       	andi	r24, 0x07	; 7
    367c:	21 e0       	ldi	r18, 0x01	; 1
    367e:	30 e0       	ldi	r19, 0x00	; 0
    3680:	01 c0       	rjmp	.+2      	; 0x3684 <del_key+0x32>
    3682:	22 0f       	add	r18, r18
    3684:	8a 95       	dec	r24
    3686:	ea f7       	brpl	.-6      	; 0x3682 <del_key+0x30>
    3688:	20 95       	com	r18
    368a:	81 81       	ldd	r24, Z+1	; 0x01
    368c:	28 23       	and	r18, r24
    368e:	21 83       	std	Z+1, r18	; 0x01
    3690:	08 95       	ret
    } else {
        dprintf("del_key_bit: can't del: %02X\n", code);
    3692:	90 91 cb 01 	lds	r25, 0x01CB
    3696:	90 ff       	sbrs	r25, 0
    3698:	1f c0       	rjmp	.+62     	; 0x36d8 <del_key+0x86>
    369a:	1f 92       	push	r1
    369c:	8f 93       	push	r24
    369e:	85 e3       	ldi	r24, 0x35	; 53
    36a0:	94 e0       	ldi	r25, 0x04	; 4
    36a2:	9f 93       	push	r25
    36a4:	8f 93       	push	r24
    36a6:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    36aa:	0f 90       	pop	r0
    36ac:	0f 90       	pop	r0
    36ae:	0f 90       	pop	r0
    36b0:	0f 90       	pop	r0
    36b2:	08 95       	ret
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    36b4:	40 91 0c 01 	lds	r20, 0x010C
    36b8:	50 91 0d 01 	lds	r21, 0x010D
    36bc:	20 e0       	ldi	r18, 0x00	; 0
    36be:	30 e0       	ldi	r19, 0x00	; 0
    36c0:	fa 01       	movw	r30, r20
    36c2:	e2 0f       	add	r30, r18
    36c4:	f3 1f       	adc	r31, r19
    36c6:	92 81       	ldd	r25, Z+2	; 0x02
    36c8:	98 13       	cpse	r25, r24
    36ca:	01 c0       	rjmp	.+2      	; 0x36ce <del_key+0x7c>
            keyboard_report->keys[i] = 0;
    36cc:	12 82       	std	Z+2, r1	; 0x02
    36ce:	2f 5f       	subi	r18, 0xFF	; 255
    36d0:	3f 4f       	sbci	r19, 0xFF	; 255
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    36d2:	2e 30       	cpi	r18, 0x0E	; 14
    36d4:	31 05       	cpc	r19, r1
    36d6:	a1 f7       	brne	.-24     	; 0x36c0 <del_key+0x6e>
    36d8:	08 95       	ret

000036da <clear_keys>:
#endif
    del_key_byte(key);
}

void clear_keys(void)
{
    36da:	81 e0       	ldi	r24, 0x01	; 1
    36dc:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    36de:	e0 91 0c 01 	lds	r30, 0x010C
    36e2:	f0 91 0d 01 	lds	r31, 0x010D
    36e6:	e8 0f       	add	r30, r24
    36e8:	f9 1f       	adc	r31, r25
    36ea:	10 82       	st	Z, r1
    36ec:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    36ee:	80 31       	cpi	r24, 0x10	; 16
    36f0:	91 05       	cpc	r25, r1
    36f2:	a9 f7       	brne	.-22     	; 0x36de <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    36f4:	08 95       	ret

000036f6 <add_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
void add_mods(uint8_t mods) { real_mods |= mods; }
    36f6:	90 91 ca 01 	lds	r25, 0x01CA
    36fa:	98 2b       	or	r25, r24
    36fc:	90 93 ca 01 	sts	0x01CA, r25
    3700:	08 95       	ret

00003702 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    3702:	80 95       	com	r24
    3704:	90 91 ca 01 	lds	r25, 0x01CA
    3708:	98 23       	and	r25, r24
    370a:	90 93 ca 01 	sts	0x01CA, r25
    370e:	08 95       	ret

00003710 <clear_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
void clear_mods(void) { real_mods = 0; }
    3710:	10 92 ca 01 	sts	0x01CA, r1
    3714:	08 95       	ret

00003716 <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    3716:	90 91 c9 01 	lds	r25, 0x01C9
    371a:	98 2b       	or	r25, r24
    371c:	90 93 c9 01 	sts	0x01C9, r25
    3720:	08 95       	ret

00003722 <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    3722:	80 95       	com	r24
    3724:	90 91 c9 01 	lds	r25, 0x01C9
    3728:	98 23       	and	r25, r24
    372a:	90 93 c9 01 	sts	0x01C9, r25
    372e:	08 95       	ret

00003730 <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    3730:	10 92 c9 01 	sts	0x01C9, r1
    3734:	08 95       	ret

00003736 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    3736:	80 93 b8 01 	sts	0x01B8, r24
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_time = timer_read();
    373a:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <timer_read>
    373e:	90 93 b7 01 	sts	0x01B7, r25
    3742:	80 93 b6 01 	sts	0x01B6, r24
    3746:	08 95       	ret

00003748 <clear_oneshot_mods>:
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3748:	10 92 b8 01 	sts	0x01B8, r1
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_time = 0;
    374c:	10 92 b7 01 	sts	0x01B7, r1
    3750:	10 92 b6 01 	sts	0x01B6, r1
    3754:	08 95       	ret

00003756 <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3756:	40 91 0c 01 	lds	r20, 0x010C
    375a:	50 91 0d 01 	lds	r21, 0x010D
    375e:	20 e0       	ldi	r18, 0x00	; 0
    3760:	30 e0       	ldi	r19, 0x00	; 0
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    3762:	80 e0       	ldi	r24, 0x00	; 0
    3764:	fa 01       	movw	r30, r20
    3766:	e2 0f       	add	r30, r18
    3768:	f3 1f       	adc	r31, r19
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    376a:	91 81       	ldd	r25, Z+1	; 0x01
    376c:	91 11       	cpse	r25, r1
            cnt++;
    376e:	8f 5f       	subi	r24, 0xFF	; 255
    3770:	2f 5f       	subi	r18, 0xFF	; 255
    3772:	3f 4f       	sbci	r19, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3774:	2f 30       	cpi	r18, 0x0F	; 15
    3776:	31 05       	cpc	r19, r1
    3778:	a9 f7       	brne	.-22     	; 0x3764 <has_anykey+0xe>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    377a:	08 95       	ret

0000377c <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    377c:	e0 91 0c 01 	lds	r30, 0x010C
    3780:	f0 91 0d 01 	lds	r31, 0x010D
    3784:	80 91 ca 01 	lds	r24, 0x01CA
    3788:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    378a:	e0 91 0c 01 	lds	r30, 0x010C
    378e:	f0 91 0d 01 	lds	r31, 0x010D
    3792:	80 81       	ld	r24, Z
    3794:	90 91 c9 01 	lds	r25, 0x01C9
    3798:	89 2b       	or	r24, r25
    379a:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    379c:	80 91 b8 01 	lds	r24, 0x01B8
    37a0:	88 23       	and	r24, r24
    37a2:	09 f4       	brne	.+2      	; 0x37a6 <send_keyboard_report+0x2a>
    37a4:	3e c0       	rjmp	.+124    	; 0x3822 <send_keyboard_report+0xa6>
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
    37a6:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <timer_read>
    37aa:	20 91 b6 01 	lds	r18, 0x01B6
    37ae:	30 91 b7 01 	lds	r19, 0x01B7
    37b2:	82 17       	cp	r24, r18
    37b4:	93 07       	cpc	r25, r19
    37b6:	60 f0       	brcs	.+24     	; 0x37d0 <send_keyboard_report+0x54>
    37b8:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <timer_read>
    37bc:	20 91 b6 01 	lds	r18, 0x01B6
    37c0:	30 91 b7 01 	lds	r19, 0x01B7
    37c4:	82 1b       	sub	r24, r18
    37c6:	93 0b       	sbc	r25, r19
    37c8:	8c 32       	cpi	r24, 0x2C	; 44
    37ca:	91 40       	sbci	r25, 0x01	; 1
    37cc:	70 f4       	brcc	.+28     	; 0x37ea <send_keyboard_report+0x6e>
    37ce:	1b c0       	rjmp	.+54     	; 0x3806 <send_keyboard_report+0x8a>
    37d0:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <timer_read>
    37d4:	20 91 b6 01 	lds	r18, 0x01B6
    37d8:	30 91 b7 01 	lds	r19, 0x01B7
    37dc:	20 95       	com	r18
    37de:	30 95       	com	r19
    37e0:	28 0f       	add	r18, r24
    37e2:	39 1f       	adc	r19, r25
    37e4:	2c 32       	cpi	r18, 0x2C	; 44
    37e6:	31 40       	sbci	r19, 0x01	; 1
    37e8:	70 f0       	brcs	.+28     	; 0x3806 <send_keyboard_report+0x8a>
            dprintf("Oneshot: timeout\n");
    37ea:	80 91 cb 01 	lds	r24, 0x01CB
    37ee:	80 ff       	sbrs	r24, 0
    37f0:	08 c0       	rjmp	.+16     	; 0x3802 <send_keyboard_report+0x86>
    37f2:	81 e7       	ldi	r24, 0x71	; 113
    37f4:	94 e0       	ldi	r25, 0x04	; 4
    37f6:	9f 93       	push	r25
    37f8:	8f 93       	push	r24
    37fa:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    37fe:	0f 90       	pop	r0
    3800:	0f 90       	pop	r0
            clear_oneshot_mods();
    3802:	0e 94 a4 1b 	call	0x3748	; 0x3748 <clear_oneshot_mods>
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    3806:	e0 91 0c 01 	lds	r30, 0x010C
    380a:	f0 91 0d 01 	lds	r31, 0x010D
    380e:	80 81       	ld	r24, Z
    3810:	90 91 b8 01 	lds	r25, 0x01B8
    3814:	89 2b       	or	r24, r25
    3816:	80 83       	st	Z, r24
        if (has_anykey()) {
    3818:	0e 94 ab 1b 	call	0x3756	; 0x3756 <has_anykey>
    381c:	81 11       	cpse	r24, r1
            clear_oneshot_mods();
    381e:	0e 94 a4 1b 	call	0x3748	; 0x3748 <clear_oneshot_mods>
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    3822:	80 91 0c 01 	lds	r24, 0x010C
    3826:	90 91 0d 01 	lds	r25, 0x010D
    382a:	0c 94 04 10 	jmp	0x2008	; 0x2008 <host_keyboard_send>

0000382e <keycode_to_action>:



/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    382e:	cf 93       	push	r28
    3830:	df 93       	push	r29
    action_t action;
    switch (keycode) {
    3832:	8d 3b       	cpi	r24, 0xBD	; 189
    3834:	60 f4       	brcc	.+24     	; 0x384e <keycode_to_action+0x20>
    3836:	88 3a       	cpi	r24, 0xA8	; 168
    3838:	90 f5       	brcc	.+100    	; 0x389e <keycode_to_action+0x70>
    383a:	85 3a       	cpi	r24, 0xA5	; 165
    383c:	38 f5       	brcc	.+78     	; 0x388c <keycode_to_action+0x5e>
    383e:	84 30       	cpi	r24, 0x04	; 4
    3840:	10 f5       	brcc	.+68     	; 0x3886 <keycode_to_action+0x58>
    3842:	81 30       	cpi	r24, 0x01	; 1
    3844:	09 f0       	breq	.+2      	; 0x3848 <keycode_to_action+0x1a>
    3846:	6d c0       	rjmp	.+218    	; 0x3922 <keycode_to_action+0xf4>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
    3848:	c1 e0       	ldi	r28, 0x01	; 1
    384a:	d0 e0       	ldi	r29, 0x00	; 0
    384c:	b1 c0       	rjmp	.+354    	; 0x39b0 <keycode_to_action+0x182>

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action;
    switch (keycode) {
    384e:	88 3e       	cpi	r24, 0xE8	; 232
    3850:	98 f4       	brcc	.+38     	; 0x3878 <keycode_to_action+0x4a>
    3852:	80 3e       	cpi	r24, 0xE0	; 224
    3854:	c0 f4       	brcc	.+48     	; 0x3886 <keycode_to_action+0x58>
    3856:	8f 3b       	cpi	r24, 0xBF	; 191
    3858:	09 f0       	breq	.+2      	; 0x385c <keycode_to_action+0x2e>
    385a:	63 c0       	rjmp	.+198    	; 0x3922 <keycode_to_action+0xf4>
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
    385c:	0e 94 6f 15 	call	0x2ade	; 0x2ade <clear_keyboard>
    3860:	2f ef       	ldi	r18, 0xFF	; 255
    3862:	80 e7       	ldi	r24, 0x70	; 112
    3864:	92 e0       	ldi	r25, 0x02	; 2
    3866:	21 50       	subi	r18, 0x01	; 1
    3868:	80 40       	sbci	r24, 0x00	; 0
    386a:	90 40       	sbci	r25, 0x00	; 0
    386c:	e1 f7       	brne	.-8      	; 0x3866 <keycode_to_action+0x38>
    386e:	00 c0       	rjmp	.+0      	; 0x3870 <keycode_to_action+0x42>
    3870:	00 00       	nop
            wait_ms(50);
            bootloader_jump(); // not return
    3872:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <bootloader_jump>
            break;
    3876:	9c c0       	rjmp	.+312    	; 0x39b0 <keycode_to_action+0x182>

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action;
    switch (keycode) {
    3878:	80 3f       	cpi	r24, 0xF0	; 240
    387a:	08 f4       	brcc	.+2      	; 0x387e <keycode_to_action+0x50>
    387c:	52 c0       	rjmp	.+164    	; 0x3922 <keycode_to_action+0xf4>
            break;
        case KC_AUDIO_MUTE ... KC_MEDIA_REWIND:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
    387e:	c8 2f       	mov	r28, r24
    3880:	d0 e0       	ldi	r29, 0x00	; 0
    3882:	d0 65       	ori	r29, 0x50	; 80
            break;
    3884:	95 c0       	rjmp	.+298    	; 0x39b0 <keycode_to_action+0x182>
{
    action_t action;
    switch (keycode) {
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
    3886:	c8 2f       	mov	r28, r24
    3888:	d0 e0       	ldi	r29, 0x00	; 0
            break;
    388a:	92 c0       	rjmp	.+292    	; 0x39b0 <keycode_to_action+0x182>
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    388c:	85 3a       	cpi	r24, 0xA5	; 165
    388e:	09 f4       	brne	.+2      	; 0x3892 <keycode_to_action+0x64>
    3890:	4b c0       	rjmp	.+150    	; 0x3928 <keycode_to_action+0xfa>
    3892:	86 3a       	cpi	r24, 0xA6	; 166
    3894:	09 f0       	breq	.+2      	; 0x3898 <keycode_to_action+0x6a>
    3896:	4b c0       	rjmp	.+150    	; 0x392e <keycode_to_action+0x100>
    3898:	c2 e8       	ldi	r28, 0x82	; 130
    389a:	d0 e4       	ldi	r29, 0x40	; 64
    389c:	89 c0       	rjmp	.+274    	; 0x39b0 <keycode_to_action+0x182>
            break;
        case KC_AUDIO_MUTE ... KC_MEDIA_REWIND:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    389e:	88 3a       	cpi	r24, 0xA8	; 168
    38a0:	09 f4       	brne	.+2      	; 0x38a4 <keycode_to_action+0x76>
    38a2:	48 c0       	rjmp	.+144    	; 0x3934 <keycode_to_action+0x106>
    38a4:	89 3a       	cpi	r24, 0xA9	; 169
    38a6:	09 f4       	brne	.+2      	; 0x38aa <keycode_to_action+0x7c>
    38a8:	48 c0       	rjmp	.+144    	; 0x393a <keycode_to_action+0x10c>
    38aa:	8a 3a       	cpi	r24, 0xAA	; 170
    38ac:	09 f4       	brne	.+2      	; 0x38b0 <keycode_to_action+0x82>
    38ae:	48 c0       	rjmp	.+144    	; 0x3940 <keycode_to_action+0x112>
    38b0:	8b 3a       	cpi	r24, 0xAB	; 171
    38b2:	09 f4       	brne	.+2      	; 0x38b6 <keycode_to_action+0x88>
    38b4:	48 c0       	rjmp	.+144    	; 0x3946 <keycode_to_action+0x118>
    38b6:	8c 3a       	cpi	r24, 0xAC	; 172
    38b8:	09 f4       	brne	.+2      	; 0x38bc <keycode_to_action+0x8e>
    38ba:	48 c0       	rjmp	.+144    	; 0x394c <keycode_to_action+0x11e>
    38bc:	8b 3b       	cpi	r24, 0xBB	; 187
    38be:	09 f4       	brne	.+2      	; 0x38c2 <keycode_to_action+0x94>
    38c0:	48 c0       	rjmp	.+144    	; 0x3952 <keycode_to_action+0x124>
    38c2:	8c 3b       	cpi	r24, 0xBC	; 188
    38c4:	09 f4       	brne	.+2      	; 0x38c8 <keycode_to_action+0x9a>
    38c6:	48 c0       	rjmp	.+144    	; 0x3958 <keycode_to_action+0x12a>
    38c8:	8d 3a       	cpi	r24, 0xAD	; 173
    38ca:	09 f4       	brne	.+2      	; 0x38ce <keycode_to_action+0xa0>
    38cc:	48 c0       	rjmp	.+144    	; 0x395e <keycode_to_action+0x130>
    38ce:	80 3b       	cpi	r24, 0xB0	; 176
    38d0:	09 f4       	brne	.+2      	; 0x38d4 <keycode_to_action+0xa6>
    38d2:	48 c0       	rjmp	.+144    	; 0x3964 <keycode_to_action+0x136>
    38d4:	8e 3a       	cpi	r24, 0xAE	; 174
    38d6:	09 f4       	brne	.+2      	; 0x38da <keycode_to_action+0xac>
    38d8:	48 c0       	rjmp	.+144    	; 0x396a <keycode_to_action+0x13c>
    38da:	8f 3a       	cpi	r24, 0xAF	; 175
    38dc:	09 f4       	brne	.+2      	; 0x38e0 <keycode_to_action+0xb2>
    38de:	48 c0       	rjmp	.+144    	; 0x3970 <keycode_to_action+0x142>
    38e0:	81 3b       	cpi	r24, 0xB1	; 177
    38e2:	09 f4       	brne	.+2      	; 0x38e6 <keycode_to_action+0xb8>
    38e4:	48 c0       	rjmp	.+144    	; 0x3976 <keycode_to_action+0x148>
    38e6:	82 3b       	cpi	r24, 0xB2	; 178
    38e8:	09 f4       	brne	.+2      	; 0x38ec <keycode_to_action+0xbe>
    38ea:	48 c0       	rjmp	.+144    	; 0x397c <keycode_to_action+0x14e>
    38ec:	83 3b       	cpi	r24, 0xB3	; 179
    38ee:	09 f4       	brne	.+2      	; 0x38f2 <keycode_to_action+0xc4>
    38f0:	48 c0       	rjmp	.+144    	; 0x3982 <keycode_to_action+0x154>
    38f2:	84 3b       	cpi	r24, 0xB4	; 180
    38f4:	09 f4       	brne	.+2      	; 0x38f8 <keycode_to_action+0xca>
    38f6:	48 c0       	rjmp	.+144    	; 0x3988 <keycode_to_action+0x15a>
    38f8:	85 3b       	cpi	r24, 0xB5	; 181
    38fa:	09 f4       	brne	.+2      	; 0x38fe <keycode_to_action+0xd0>
    38fc:	48 c0       	rjmp	.+144    	; 0x398e <keycode_to_action+0x160>
    38fe:	86 3b       	cpi	r24, 0xB6	; 182
    3900:	09 f4       	brne	.+2      	; 0x3904 <keycode_to_action+0xd6>
    3902:	48 c0       	rjmp	.+144    	; 0x3994 <keycode_to_action+0x166>
    3904:	87 3b       	cpi	r24, 0xB7	; 183
    3906:	09 f4       	brne	.+2      	; 0x390a <keycode_to_action+0xdc>
    3908:	48 c0       	rjmp	.+144    	; 0x399a <keycode_to_action+0x16c>
    390a:	88 3b       	cpi	r24, 0xB8	; 184
    390c:	09 f4       	brne	.+2      	; 0x3910 <keycode_to_action+0xe2>
    390e:	48 c0       	rjmp	.+144    	; 0x39a0 <keycode_to_action+0x172>
    3910:	89 3b       	cpi	r24, 0xB9	; 185
    3912:	09 f4       	brne	.+2      	; 0x3916 <keycode_to_action+0xe8>
    3914:	48 c0       	rjmp	.+144    	; 0x39a6 <keycode_to_action+0x178>
    3916:	8a 3b       	cpi	r24, 0xBA	; 186
    3918:	09 f0       	breq	.+2      	; 0x391c <keycode_to_action+0xee>
    391a:	48 c0       	rjmp	.+144    	; 0x39ac <keycode_to_action+0x17e>
    391c:	ca e2       	ldi	r28, 0x2A	; 42
    391e:	d6 e4       	ldi	r29, 0x46	; 70
    3920:	47 c0       	rjmp	.+142    	; 0x39b0 <keycode_to_action+0x182>
            clear_keyboard();
            wait_ms(50);
            bootloader_jump(); // not return
            break;
        default:
            action.code = ACTION_NO;
    3922:	c0 e0       	ldi	r28, 0x00	; 0
    3924:	d0 e0       	ldi	r29, 0x00	; 0
    3926:	44 c0       	rjmp	.+136    	; 0x39b0 <keycode_to_action+0x182>
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3928:	c1 e8       	ldi	r28, 0x81	; 129
    392a:	d0 e4       	ldi	r29, 0x40	; 64
    392c:	41 c0       	rjmp	.+130    	; 0x39b0 <keycode_to_action+0x182>
    392e:	c3 e8       	ldi	r28, 0x83	; 131
    3930:	d0 e4       	ldi	r29, 0x40	; 64
    3932:	3e c0       	rjmp	.+124    	; 0x39b0 <keycode_to_action+0x182>
            break;
        case KC_AUDIO_MUTE ... KC_MEDIA_REWIND:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3934:	c2 ee       	ldi	r28, 0xE2	; 226
    3936:	d4 e4       	ldi	r29, 0x44	; 68
    3938:	3b c0       	rjmp	.+118    	; 0x39b0 <keycode_to_action+0x182>
    393a:	c9 ee       	ldi	r28, 0xE9	; 233
    393c:	d4 e4       	ldi	r29, 0x44	; 68
    393e:	38 c0       	rjmp	.+112    	; 0x39b0 <keycode_to_action+0x182>
    3940:	ca ee       	ldi	r28, 0xEA	; 234
    3942:	d4 e4       	ldi	r29, 0x44	; 68
    3944:	35 c0       	rjmp	.+106    	; 0x39b0 <keycode_to_action+0x182>
    3946:	c5 eb       	ldi	r28, 0xB5	; 181
    3948:	d4 e4       	ldi	r29, 0x44	; 68
    394a:	32 c0       	rjmp	.+100    	; 0x39b0 <keycode_to_action+0x182>
    394c:	c6 eb       	ldi	r28, 0xB6	; 182
    394e:	d4 e4       	ldi	r29, 0x44	; 68
    3950:	2f c0       	rjmp	.+94     	; 0x39b0 <keycode_to_action+0x182>
    3952:	c3 eb       	ldi	r28, 0xB3	; 179
    3954:	d4 e4       	ldi	r29, 0x44	; 68
    3956:	2c c0       	rjmp	.+88     	; 0x39b0 <keycode_to_action+0x182>
    3958:	c4 eb       	ldi	r28, 0xB4	; 180
    395a:	d4 e4       	ldi	r29, 0x44	; 68
    395c:	29 c0       	rjmp	.+82     	; 0x39b0 <keycode_to_action+0x182>
    395e:	c7 eb       	ldi	r28, 0xB7	; 183
    3960:	d4 e4       	ldi	r29, 0x44	; 68
    3962:	26 c0       	rjmp	.+76     	; 0x39b0 <keycode_to_action+0x182>
    3964:	cc ec       	ldi	r28, 0xCC	; 204
    3966:	d4 e4       	ldi	r29, 0x44	; 68
    3968:	23 c0       	rjmp	.+70     	; 0x39b0 <keycode_to_action+0x182>
    396a:	cd ec       	ldi	r28, 0xCD	; 205
    396c:	d4 e4       	ldi	r29, 0x44	; 68
    396e:	20 c0       	rjmp	.+64     	; 0x39b0 <keycode_to_action+0x182>
    3970:	c3 e8       	ldi	r28, 0x83	; 131
    3972:	d5 e4       	ldi	r29, 0x45	; 69
    3974:	1d c0       	rjmp	.+58     	; 0x39b0 <keycode_to_action+0x182>
    3976:	ca e8       	ldi	r28, 0x8A	; 138
    3978:	d5 e4       	ldi	r29, 0x45	; 69
    397a:	1a c0       	rjmp	.+52     	; 0x39b0 <keycode_to_action+0x182>
    397c:	c2 e9       	ldi	r28, 0x92	; 146
    397e:	d5 e4       	ldi	r29, 0x45	; 69
    3980:	17 c0       	rjmp	.+46     	; 0x39b0 <keycode_to_action+0x182>
    3982:	c4 e9       	ldi	r28, 0x94	; 148
    3984:	d5 e4       	ldi	r29, 0x45	; 69
    3986:	14 c0       	rjmp	.+40     	; 0x39b0 <keycode_to_action+0x182>
    3988:	c1 e2       	ldi	r28, 0x21	; 33
    398a:	d6 e4       	ldi	r29, 0x46	; 70
    398c:	11 c0       	rjmp	.+34     	; 0x39b0 <keycode_to_action+0x182>
    398e:	c3 e2       	ldi	r28, 0x23	; 35
    3990:	d6 e4       	ldi	r29, 0x46	; 70
    3992:	0e c0       	rjmp	.+28     	; 0x39b0 <keycode_to_action+0x182>
    3994:	c4 e2       	ldi	r28, 0x24	; 36
    3996:	d6 e4       	ldi	r29, 0x46	; 70
    3998:	0b c0       	rjmp	.+22     	; 0x39b0 <keycode_to_action+0x182>
    399a:	c5 e2       	ldi	r28, 0x25	; 37
    399c:	d6 e4       	ldi	r29, 0x46	; 70
    399e:	08 c0       	rjmp	.+16     	; 0x39b0 <keycode_to_action+0x182>
    39a0:	c6 e2       	ldi	r28, 0x26	; 38
    39a2:	d6 e4       	ldi	r29, 0x46	; 70
    39a4:	05 c0       	rjmp	.+10     	; 0x39b0 <keycode_to_action+0x182>
    39a6:	c7 e2       	ldi	r28, 0x27	; 39
    39a8:	d6 e4       	ldi	r29, 0x46	; 70
    39aa:	02 c0       	rjmp	.+4      	; 0x39b0 <keycode_to_action+0x182>
    39ac:	c0 e0       	ldi	r28, 0x00	; 0
    39ae:	d4 e4       	ldi	r29, 0x44	; 68
        default:
            action.code = ACTION_NO;
            break;
    }
    return action;
}
    39b0:	ce 01       	movw	r24, r28
    39b2:	df 91       	pop	r29
    39b4:	cf 91       	pop	r28
    39b6:	08 95       	ret

000039b8 <action_for_key>:


/* converts key to action */
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    39b8:	0e 94 2b 07 	call	0xe56	; 0xe56 <keymap_key_to_keycode>
    switch (keycode) {
    39bc:	80 3e       	cpi	r24, 0xE0	; 224
    39be:	a8 f4       	brcc	.+42     	; 0x39ea <action_for_key+0x32>
    39c0:	80 3c       	cpi	r24, 0xC0	; 192
    39c2:	00 f5       	brcc	.+64     	; 0x3a04 <action_for_key+0x4c>
    39c4:	81 33       	cpi	r24, 0x31	; 49
    39c6:	09 f4       	brne	.+2      	; 0x39ca <action_for_key+0x12>
    39c8:	5c c0       	rjmp	.+184    	; 0x3a82 <action_for_key+0xca>
    39ca:	38 f4       	brcc	.+14     	; 0x39da <action_for_key+0x22>
    39cc:	89 32       	cpi	r24, 0x29	; 41
    39ce:	09 f4       	brne	.+2      	; 0x39d2 <action_for_key+0x1a>
    39d0:	52 c0       	rjmp	.+164    	; 0x3a76 <action_for_key+0xbe>
    39d2:	8a 32       	cpi	r24, 0x2A	; 42
    39d4:	09 f4       	brne	.+2      	; 0x39d8 <action_for_key+0x20>
    39d6:	5b c0       	rjmp	.+182    	; 0x3a8e <action_for_key+0xd6>
    39d8:	5f c0       	rjmp	.+190    	; 0x3a98 <action_for_key+0xe0>
    39da:	89 33       	cpi	r24, 0x39	; 57
    39dc:	b1 f0       	breq	.+44     	; 0x3a0a <action_for_key+0x52>
    39de:	82 38       	cpi	r24, 0x82	; 130
    39e0:	a1 f0       	breq	.+40     	; 0x3a0a <action_for_key+0x52>
    39e2:	85 33       	cpi	r24, 0x35	; 53
    39e4:	09 f4       	brne	.+2      	; 0x39e8 <action_for_key+0x30>
    39e6:	41 c0       	rjmp	.+130    	; 0x3a6a <action_for_key+0xb2>
    39e8:	57 c0       	rjmp	.+174    	; 0x3a98 <action_for_key+0xe0>
    39ea:	83 3e       	cpi	r24, 0xE3	; 227
    39ec:	41 f1       	breq	.+80     	; 0x3a3e <action_for_key+0x86>
    39ee:	28 f4       	brcc	.+10     	; 0x39fa <action_for_key+0x42>
    39f0:	80 3e       	cpi	r24, 0xE0	; 224
    39f2:	99 f0       	breq	.+38     	; 0x3a1a <action_for_key+0x62>
    39f4:	82 3e       	cpi	r24, 0xE2	; 226
    39f6:	b9 f0       	breq	.+46     	; 0x3a26 <action_for_key+0x6e>
    39f8:	4f c0       	rjmp	.+158    	; 0x3a98 <action_for_key+0xe0>
    39fa:	86 3e       	cpi	r24, 0xE6	; 230
    39fc:	31 f1       	breq	.+76     	; 0x3a4a <action_for_key+0x92>
    39fe:	87 3e       	cpi	r24, 0xE7	; 231
    3a00:	71 f1       	breq	.+92     	; 0x3a5e <action_for_key+0xa6>
    3a02:	4a c0       	rjmp	.+148    	; 0x3a98 <action_for_key+0xe0>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    3a04:	0e 94 3d 07 	call	0xe7a	; 0xe7a <keymap_fn_to_action>
    3a08:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    3a0a:	90 91 dc 01 	lds	r25, 0x01DC
    3a0e:	90 fd       	sbrc	r25, 0
    3a10:	02 c0       	rjmp	.+4      	; 0x3a16 <action_for_key+0x5e>
    3a12:	91 ff       	sbrs	r25, 1
    3a14:	41 c0       	rjmp	.+130    	; 0x3a98 <action_for_key+0xe0>
                return keycode_to_action(KC_LCTL);
    3a16:	80 ee       	ldi	r24, 0xE0	; 224
    3a18:	3f c0       	rjmp	.+126    	; 0x3a98 <action_for_key+0xe0>
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    3a1a:	80 91 dc 01 	lds	r24, 0x01DC
    3a1e:	80 ff       	sbrs	r24, 0
    3a20:	fa cf       	rjmp	.-12     	; 0x3a16 <action_for_key+0x5e>
                return keycode_to_action(KC_CAPSLOCK);
    3a22:	89 e3       	ldi	r24, 0x39	; 57
    3a24:	39 c0       	rjmp	.+114    	; 0x3a98 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LCTL);
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    3a26:	80 91 dc 01 	lds	r24, 0x01DC
    3a2a:	82 ff       	sbrs	r24, 2
    3a2c:	0c c0       	rjmp	.+24     	; 0x3a46 <action_for_key+0x8e>
                if (keymap_config.no_gui) {
    3a2e:	80 91 dc 01 	lds	r24, 0x01DC
    3a32:	84 ff       	sbrs	r24, 4
    3a34:	02 c0       	rjmp	.+4      	; 0x3a3a <action_for_key+0x82>
                    return keycode_to_action(ACTION_NO);
    3a36:	80 e0       	ldi	r24, 0x00	; 0
    3a38:	2f c0       	rjmp	.+94     	; 0x3a98 <action_for_key+0xe0>
                }
                return keycode_to_action(KC_LGUI);
    3a3a:	83 ee       	ldi	r24, 0xE3	; 227
    3a3c:	2d c0       	rjmp	.+90     	; 0x3a98 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LALT);
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    3a3e:	80 91 dc 01 	lds	r24, 0x01DC
    3a42:	82 ff       	sbrs	r24, 2
    3a44:	f4 cf       	rjmp	.-24     	; 0x3a2e <action_for_key+0x76>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_LGUI);
            }
            return keycode_to_action(KC_LALT);
    3a46:	82 ee       	ldi	r24, 0xE2	; 226
    3a48:	27 c0       	rjmp	.+78     	; 0x3a98 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_LGUI);
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    3a4a:	80 91 dc 01 	lds	r24, 0x01DC
    3a4e:	83 ff       	sbrs	r24, 3
    3a50:	0a c0       	rjmp	.+20     	; 0x3a66 <action_for_key+0xae>
                if (keymap_config.no_gui) {
    3a52:	80 91 dc 01 	lds	r24, 0x01DC
    3a56:	84 fd       	sbrc	r24, 4
    3a58:	ee cf       	rjmp	.-36     	; 0x3a36 <action_for_key+0x7e>
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
    3a5a:	87 ee       	ldi	r24, 0xE7	; 231
    3a5c:	1d c0       	rjmp	.+58     	; 0x3a98 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_RALT);
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    3a5e:	80 91 dc 01 	lds	r24, 0x01DC
    3a62:	83 ff       	sbrs	r24, 3
    3a64:	f6 cf       	rjmp	.-20     	; 0x3a52 <action_for_key+0x9a>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
            }
            return keycode_to_action(KC_RALT);
    3a66:	86 ee       	ldi	r24, 0xE6	; 230
    3a68:	17 c0       	rjmp	.+46     	; 0x3a98 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    3a6a:	80 91 dc 01 	lds	r24, 0x01DC
    3a6e:	85 ff       	sbrs	r24, 5
    3a70:	06 c0       	rjmp	.+12     	; 0x3a7e <action_for_key+0xc6>
                return keycode_to_action(KC_ESC);
    3a72:	89 e2       	ldi	r24, 0x29	; 41
    3a74:	11 c0       	rjmp	.+34     	; 0x3a98 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_GRAVE);
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    3a76:	80 91 dc 01 	lds	r24, 0x01DC
    3a7a:	85 ff       	sbrs	r24, 5
    3a7c:	fa cf       	rjmp	.-12     	; 0x3a72 <action_for_key+0xba>
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_ESC);
            }
            return keycode_to_action(KC_GRAVE);
    3a7e:	85 e3       	ldi	r24, 0x35	; 53
    3a80:	0b c0       	rjmp	.+22     	; 0x3a98 <action_for_key+0xe0>
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_GRAVE);
            }
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    3a82:	80 91 dc 01 	lds	r24, 0x01DC
    3a86:	86 ff       	sbrs	r24, 6
    3a88:	06 c0       	rjmp	.+12     	; 0x3a96 <action_for_key+0xde>
                return keycode_to_action(KC_BSPACE);
    3a8a:	8a e2       	ldi	r24, 0x2A	; 42
    3a8c:	05 c0       	rjmp	.+10     	; 0x3a98 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_BSLASH);
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    3a8e:	80 91 dc 01 	lds	r24, 0x01DC
    3a92:	86 ff       	sbrs	r24, 6
    3a94:	fa cf       	rjmp	.-12     	; 0x3a8a <action_for_key+0xd2>
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
                return keycode_to_action(KC_BSPACE);
            }
            return keycode_to_action(KC_BSLASH);
    3a96:	81 e3       	ldi	r24, 0x31	; 49
                return keycode_to_action(KC_BSLASH);
            }
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    3a98:	0e 94 17 1c 	call	0x382e	; 0x382e <keycode_to_action>
    }
}
    3a9c:	08 95       	ret

00003a9e <action_function>:
}

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    3a9e:	08 95       	ret

00003aa0 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    3aa0:	90 93 39 01 	sts	0x0139, r25
    3aa4:	80 93 38 01 	sts	0x0138, r24
    3aa8:	08 95       	ret

00003aaa <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    3aaa:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    3aac:	98 2f       	mov	r25, r24
    3aae:	9c 7c       	andi	r25, 0xCC	; 204
    3ab0:	96 95       	lsr	r25
    3ab2:	96 95       	lsr	r25
    3ab4:	83 73       	andi	r24, 0x33	; 51
    3ab6:	44 e0       	ldi	r20, 0x04	; 4
    3ab8:	84 9f       	mul	r24, r20
    3aba:	90 01       	movw	r18, r0
    3abc:	11 24       	eor	r1, r1
    3abe:	92 2b       	or	r25, r18
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    3ac0:	89 2f       	mov	r24, r25
    3ac2:	8a 7a       	andi	r24, 0xAA	; 170
    3ac4:	86 95       	lsr	r24
    3ac6:	95 75       	andi	r25, 0x55	; 85
    3ac8:	99 0f       	add	r25, r25
    return bits;
}
    3aca:	89 2b       	or	r24, r25
    3acc:	08 95       	ret

00003ace <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3ace:	80 91 e1 01 	lds	r24, 0x01E1
    3ad2:	84 30       	cpi	r24, 0x04	; 4
    3ad4:	09 f1       	breq	.+66     	; 0x3b18 <suspend_power_down+0x4a>
#endif
    wdt_timeout = wdto;
    3ad6:	10 92 cc 01 	sts	0x01CC, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    3ada:	20 e4       	ldi	r18, 0x40	; 64
    3adc:	88 e1       	ldi	r24, 0x18	; 24
    3ade:	90 e0       	ldi	r25, 0x00	; 0
    3ae0:	0f b6       	in	r0, 0x3f	; 63
    3ae2:	f8 94       	cli
    3ae4:	a8 95       	wdr
    3ae6:	80 93 60 00 	sts	0x0060, r24
    3aea:	0f be       	out	0x3f, r0	; 63
    3aec:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3af0:	83 b7       	in	r24, 0x33	; 51
    3af2:	81 7f       	andi	r24, 0xF1	; 241
    3af4:	84 60       	ori	r24, 0x04	; 4
    3af6:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    3af8:	83 b7       	in	r24, 0x33	; 51
    3afa:	81 60       	ori	r24, 0x01	; 1
    3afc:	83 bf       	out	0x33, r24	; 51
    sei();
    3afe:	78 94       	sei
    sleep_cpu();
    3b00:	88 95       	sleep
    sleep_disable();
    3b02:	83 b7       	in	r24, 0x33	; 51
    3b04:	8e 7f       	andi	r24, 0xFE	; 254
    3b06:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    3b08:	88 e1       	ldi	r24, 0x18	; 24
    3b0a:	0f b6       	in	r0, 0x3f	; 63
    3b0c:	f8 94       	cli
    3b0e:	80 93 60 00 	sts	0x0060, r24
    3b12:	10 92 60 00 	sts	0x0060, r1
    3b16:	0f be       	out	0x3f, r0	; 63
    3b18:	08 95       	ret

00003b1a <suspend_wakeup_condition>:
}

__attribute__ ((weak)) void matrix_power_up(void) {}
__attribute__ ((weak)) void matrix_power_down(void) {}
bool suspend_wakeup_condition(void)
{
    3b1a:	cf 93       	push	r28
    matrix_power_up();
    3b1c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <matrix_power_up>
    matrix_scan();
    3b20:	0e 94 6a 07 	call	0xed4	; 0xed4 <matrix_scan>
    matrix_power_down();
    3b24:	0e 94 6d 08 	call	0x10da	; 0x10da <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3b28:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    3b2a:	8c 2f       	mov	r24, r28
    3b2c:	0e 94 38 08 	call	0x1070	; 0x1070 <matrix_get_row>
    3b30:	81 11       	cpse	r24, r1
    3b32:	05 c0       	rjmp	.+10     	; 0x3b3e <suspend_wakeup_condition+0x24>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3b34:	cf 5f       	subi	r28, 0xFF	; 255
    3b36:	c8 30       	cpi	r28, 0x08	; 8
    3b38:	c1 f7       	brne	.-16     	; 0x3b2a <suspend_wakeup_condition+0x10>
        if (matrix_get_row(r)) return true;
    }
    return false;
    3b3a:	80 e0       	ldi	r24, 0x00	; 0
    3b3c:	01 c0       	rjmp	.+2      	; 0x3b40 <suspend_wakeup_condition+0x26>
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    3b3e:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    3b40:	cf 91       	pop	r28
    3b42:	08 95       	ret

00003b44 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    3b44:	0c 94 6f 15 	jmp	0x2ade	; 0x2ade <clear_keyboard>

00003b48 <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    3b48:	1f 92       	push	r1
    3b4a:	0f 92       	push	r0
    3b4c:	0f b6       	in	r0, 0x3f	; 63
    3b4e:	0f 92       	push	r0
    3b50:	11 24       	eor	r1, r1
    3b52:	8f 93       	push	r24
    3b54:	9f 93       	push	r25
    3b56:	af 93       	push	r26
    3b58:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    3b5a:	80 91 cc 01 	lds	r24, 0x01CC
    3b5e:	81 11       	cpse	r24, r1
    3b60:	13 c0       	rjmp	.+38     	; 0x3b88 <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    3b62:	80 91 cd 01 	lds	r24, 0x01CD
    3b66:	90 91 ce 01 	lds	r25, 0x01CE
    3b6a:	a0 91 cf 01 	lds	r26, 0x01CF
    3b6e:	b0 91 d0 01 	lds	r27, 0x01D0
    3b72:	41 96       	adiw	r24, 0x11	; 17
    3b74:	a1 1d       	adc	r26, r1
    3b76:	b1 1d       	adc	r27, r1
    3b78:	80 93 cd 01 	sts	0x01CD, r24
    3b7c:	90 93 ce 01 	sts	0x01CE, r25
    3b80:	a0 93 cf 01 	sts	0x01CF, r26
    3b84:	b0 93 d0 01 	sts	0x01D0, r27
            break;
        default:
            ;
    }
}
    3b88:	bf 91       	pop	r27
    3b8a:	af 91       	pop	r26
    3b8c:	9f 91       	pop	r25
    3b8e:	8f 91       	pop	r24
    3b90:	0f 90       	pop	r0
    3b92:	0f be       	out	0x3f, r0	; 63
    3b94:	0f 90       	pop	r0
    3b96:	1f 90       	pop	r1
    3b98:	18 95       	reti

00003b9a <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    3b9a:	82 e0       	ldi	r24, 0x02	; 2
    3b9c:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    3b9e:	93 e0       	ldi	r25, 0x03	; 3
    3ba0:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    3ba2:	9a ef       	ldi	r25, 0xFA	; 250
    3ba4:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    3ba6:	80 93 6e 00 	sts	0x006E, r24
    3baa:	08 95       	ret

00003bac <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3bac:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3bae:	f8 94       	cli
    t = timer_count;
    3bb0:	80 91 cd 01 	lds	r24, 0x01CD
    3bb4:	90 91 ce 01 	lds	r25, 0x01CE
    3bb8:	a0 91 cf 01 	lds	r26, 0x01CF
    3bbc:	b0 91 d0 01 	lds	r27, 0x01D0
    SREG = sreg;
    3bc0:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    3bc2:	08 95       	ret

00003bc4 <timer_read32>:
inline
uint32_t timer_read32(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3bc4:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3bc6:	f8 94       	cli
    t = timer_count;
    3bc8:	60 91 cd 01 	lds	r22, 0x01CD
    3bcc:	70 91 ce 01 	lds	r23, 0x01CE
    3bd0:	80 91 cf 01 	lds	r24, 0x01CF
    3bd4:	90 91 d0 01 	lds	r25, 0x01D0
    SREG = sreg;
    3bd8:	2f bf       	out	0x3f, r18	; 63

    return t;
}
    3bda:	08 95       	ret

00003bdc <timer_elapsed>:

inline
uint16_t timer_elapsed(uint16_t last)
{
    3bdc:	cf 92       	push	r12
    3bde:	df 92       	push	r13
    3be0:	ef 92       	push	r14
    3be2:	ff 92       	push	r15
    3be4:	0f 93       	push	r16
    3be6:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    3be8:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3bea:	f8 94       	cli
    t = timer_count;
    3bec:	40 91 cd 01 	lds	r20, 0x01CD
    3bf0:	50 91 ce 01 	lds	r21, 0x01CE
    3bf4:	60 91 cf 01 	lds	r22, 0x01CF
    3bf8:	70 91 d0 01 	lds	r23, 0x01D0
    SREG = sreg;
    3bfc:	2f bf       	out	0x3f, r18	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    3bfe:	6a 01       	movw	r12, r20
    3c00:	7b 01       	movw	r14, r22
    3c02:	ee 24       	eor	r14, r14
    3c04:	ff 24       	eor	r15, r15
    3c06:	8c 01       	movw	r16, r24
    3c08:	20 e0       	ldi	r18, 0x00	; 0
    3c0a:	30 e0       	ldi	r19, 0x00	; 0
    3c0c:	c0 16       	cp	r12, r16
    3c0e:	d1 06       	cpc	r13, r17
    3c10:	e2 06       	cpc	r14, r18
    3c12:	f3 06       	cpc	r15, r19
    3c14:	10 f4       	brcc	.+4      	; 0x3c1a <timer_elapsed+0x3e>
    3c16:	41 50       	subi	r20, 0x01	; 1
    3c18:	51 09       	sbc	r21, r1
    3c1a:	48 1b       	sub	r20, r24
    3c1c:	59 0b       	sbc	r21, r25
}
    3c1e:	ca 01       	movw	r24, r20
    3c20:	1f 91       	pop	r17
    3c22:	0f 91       	pop	r16
    3c24:	ff 90       	pop	r15
    3c26:	ef 90       	pop	r14
    3c28:	df 90       	pop	r13
    3c2a:	cf 90       	pop	r12
    3c2c:	08 95       	ret

00003c2e <timer_elapsed32>:

inline
uint32_t timer_elapsed32(uint32_t last)
{
    3c2e:	cf 92       	push	r12
    3c30:	df 92       	push	r13
    3c32:	ef 92       	push	r14
    3c34:	ff 92       	push	r15
    3c36:	0f 93       	push	r16
    3c38:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    3c3a:	4f b7       	in	r20, 0x3f	; 63
    cli();
    3c3c:	f8 94       	cli
    t = timer_count;
    3c3e:	00 91 cd 01 	lds	r16, 0x01CD
    3c42:	10 91 ce 01 	lds	r17, 0x01CE
    3c46:	20 91 cf 01 	lds	r18, 0x01CF
    3c4a:	30 91 d0 01 	lds	r19, 0x01D0
    SREG = sreg;
    3c4e:	4f bf       	out	0x3f, r20	; 63
    3c50:	68 01       	movw	r12, r16
    3c52:	79 01       	movw	r14, r18
    3c54:	c6 1a       	sub	r12, r22
    3c56:	d7 0a       	sbc	r13, r23
    3c58:	e8 0a       	sbc	r14, r24
    3c5a:	f9 0a       	sbc	r15, r25

    return TIMER_DIFF_32(t, last);
    3c5c:	06 17       	cp	r16, r22
    3c5e:	17 07       	cpc	r17, r23
    3c60:	28 07       	cpc	r18, r24
    3c62:	39 07       	cpc	r19, r25
    3c64:	18 f0       	brcs	.+6      	; 0x3c6c <timer_elapsed32+0x3e>
    3c66:	c7 01       	movw	r24, r14
    3c68:	b6 01       	movw	r22, r12
    3c6a:	06 c0       	rjmp	.+12     	; 0x3c78 <timer_elapsed32+0x4a>
    3c6c:	c7 01       	movw	r24, r14
    3c6e:	b6 01       	movw	r22, r12
    3c70:	61 50       	subi	r22, 0x01	; 1
    3c72:	71 09       	sbc	r23, r1
    3c74:	81 09       	sbc	r24, r1
    3c76:	91 09       	sbc	r25, r1
}
    3c78:	1f 91       	pop	r17
    3c7a:	0f 91       	pop	r16
    3c7c:	ff 90       	pop	r15
    3c7e:	ef 90       	pop	r14
    3c80:	df 90       	pop	r13
    3c82:	cf 90       	pop	r12
    3c84:	08 95       	ret

00003c86 <__vector_21>:

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    3c86:	1f 92       	push	r1
    3c88:	0f 92       	push	r0
    3c8a:	0f b6       	in	r0, 0x3f	; 63
    3c8c:	0f 92       	push	r0
    3c8e:	11 24       	eor	r1, r1
    3c90:	8f 93       	push	r24
    3c92:	9f 93       	push	r25
    3c94:	af 93       	push	r26
    3c96:	bf 93       	push	r27
    timer_count++;
    3c98:	80 91 cd 01 	lds	r24, 0x01CD
    3c9c:	90 91 ce 01 	lds	r25, 0x01CE
    3ca0:	a0 91 cf 01 	lds	r26, 0x01CF
    3ca4:	b0 91 d0 01 	lds	r27, 0x01D0
    3ca8:	01 96       	adiw	r24, 0x01	; 1
    3caa:	a1 1d       	adc	r26, r1
    3cac:	b1 1d       	adc	r27, r1
    3cae:	80 93 cd 01 	sts	0x01CD, r24
    3cb2:	90 93 ce 01 	sts	0x01CE, r25
    3cb6:	a0 93 cf 01 	sts	0x01CF, r26
    3cba:	b0 93 d0 01 	sts	0x01D0, r27
}
    3cbe:	bf 91       	pop	r27
    3cc0:	af 91       	pop	r26
    3cc2:	9f 91       	pop	r25
    3cc4:	8f 91       	pop	r24
    3cc6:	0f 90       	pop	r0
    3cc8:	0f be       	out	0x3f, r0	; 63
    3cca:	0f 90       	pop	r0
    3ccc:	1f 90       	pop	r1
    3cce:	18 95       	reti

00003cd0 <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    3cd0:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <USB_Disable>
    cli();
    3cd4:	f8 94       	cli
    3cd6:	2f ef       	ldi	r18, 0xFF	; 255
    3cd8:	87 ea       	ldi	r24, 0xA7	; 167
    3cda:	91 e6       	ldi	r25, 0x61	; 97
    3cdc:	21 50       	subi	r18, 0x01	; 1
    3cde:	80 40       	sbci	r24, 0x00	; 0
    3ce0:	90 40       	sbci	r25, 0x00	; 0
    3ce2:	e1 f7       	brne	.-8      	; 0x3cdc <bootloader_jump+0xc>
    3ce4:	00 c0       	rjmp	.+0      	; 0x3ce6 <bootloader_jump+0x16>
    3ce6:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    3ce8:	87 e0       	ldi	r24, 0x07	; 7
    3cea:	90 eb       	ldi	r25, 0xB0	; 176
    3cec:	dc 01       	movw	r26, r24
    3cee:	80 93 ea 01 	sts	0x01EA, r24
    3cf2:	90 93 eb 01 	sts	0x01EB, r25
    3cf6:	a0 93 ec 01 	sts	0x01EC, r26
    3cfa:	b0 93 ed 01 	sts	0x01ED, r27
    wdt_enable(WDTO_250MS);
    3cfe:	2c e0       	ldi	r18, 0x0C	; 12
    3d00:	88 e1       	ldi	r24, 0x18	; 24
    3d02:	90 e0       	ldi	r25, 0x00	; 0
    3d04:	0f b6       	in	r0, 0x3f	; 63
    3d06:	f8 94       	cli
    3d08:	a8 95       	wdr
    3d0a:	80 93 60 00 	sts	0x0060, r24
    3d0e:	0f be       	out	0x3f, r0	; 63
    3d10:	20 93 60 00 	sts	0x0060, r18
    3d14:	ff cf       	rjmp	.-2      	; 0x3d14 <bootloader_jump+0x44>

00003d16 <scan_keycode>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_keycode(uint8_t keycode)
{
    3d16:	ef 92       	push	r14
    3d18:	ff 92       	push	r15
    3d1a:	0f 93       	push	r16
    3d1c:	1f 93       	push	r17
    3d1e:	cf 93       	push	r28
    3d20:	df 93       	push	r29
    3d22:	e8 2e       	mov	r14, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3d24:	f1 2c       	mov	r15, r1
        matrix_row_t matrix_row = matrix_get_row(r);
    3d26:	8f 2d       	mov	r24, r15
    3d28:	0e 94 38 08 	call	0x1070	; 0x1070 <matrix_get_row>
    3d2c:	c0 e0       	ldi	r28, 0x00	; 0
    3d2e:	d0 e0       	ldi	r29, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3d30:	08 2f       	mov	r16, r24
    3d32:	10 e0       	ldi	r17, 0x00	; 0
    3d34:	98 01       	movw	r18, r16
    3d36:	0c 2e       	mov	r0, r28
    3d38:	02 c0       	rjmp	.+4      	; 0x3d3e <scan_keycode+0x28>
    3d3a:	35 95       	asr	r19
    3d3c:	27 95       	ror	r18
    3d3e:	0a 94       	dec	r0
    3d40:	e2 f7       	brpl	.-8      	; 0x3d3a <scan_keycode+0x24>
    3d42:	20 fd       	sbrc	r18, 0
    3d44:	05 c0       	rjmp	.+10     	; 0x3d50 <scan_keycode+0x3a>
    3d46:	21 96       	adiw	r28, 0x01	; 1

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    3d48:	c8 30       	cpi	r28, 0x08	; 8
    3d4a:	d1 05       	cpc	r29, r1
    3d4c:	99 f7       	brne	.-26     	; 0x3d34 <scan_keycode+0x1e>
    3d4e:	09 c0       	rjmp	.+18     	; 0x3d62 <scan_keycode+0x4c>
            if (matrix_row & ((matrix_row_t)1<<c)) {
                if (keycode == keymap_key_to_keycode(0, (keypos_t){ .row = r, .col = c })) {
    3d50:	6c 2f       	mov	r22, r28
    3d52:	7f 2d       	mov	r23, r15
    3d54:	80 e0       	ldi	r24, 0x00	; 0
    3d56:	0e 94 2b 07 	call	0xe56	; 0xe56 <keymap_key_to_keycode>
    3d5a:	e8 12       	cpse	r14, r24
    3d5c:	f4 cf       	rjmp	.-24     	; 0x3d46 <scan_keycode+0x30>
                    return true;
    3d5e:	81 e0       	ldi	r24, 0x01	; 1
    3d60:	05 c0       	rjmp	.+10     	; 0x3d6c <scan_keycode+0x56>
    }
}

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3d62:	f3 94       	inc	r15
    3d64:	88 e0       	ldi	r24, 0x08	; 8
    3d66:	f8 12       	cpse	r15, r24
    3d68:	de cf       	rjmp	.-68     	; 0x3d26 <scan_keycode+0x10>
                    return true;
                }
            }
        }
    }
    return false;
    3d6a:	80 e0       	ldi	r24, 0x00	; 0
}
    3d6c:	df 91       	pop	r29
    3d6e:	cf 91       	pop	r28
    3d70:	1f 91       	pop	r17
    3d72:	0f 91       	pop	r16
    3d74:	ff 90       	pop	r15
    3d76:	ef 90       	pop	r14
    3d78:	08 95       	ret

00003d7a <bootmagic_scan_keycode>:

bool bootmagic_scan_keycode(uint8_t keycode)
{
    3d7a:	cf 93       	push	r28
    3d7c:	c8 2f       	mov	r28, r24
    if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;
    3d7e:	8c e2       	ldi	r24, 0x2C	; 44
    3d80:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <scan_keycode>
    3d84:	88 23       	and	r24, r24
    3d86:	21 f0       	breq	.+8      	; 0x3d90 <bootmagic_scan_keycode+0x16>

    return scan_keycode(keycode);
    3d88:	8c 2f       	mov	r24, r28
}
    3d8a:	cf 91       	pop	r28

bool bootmagic_scan_keycode(uint8_t keycode)
{
    if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;

    return scan_keycode(keycode);
    3d8c:	0c 94 8b 1e 	jmp	0x3d16	; 0x3d16 <scan_keycode>
}
    3d90:	80 e0       	ldi	r24, 0x00	; 0
    3d92:	cf 91       	pop	r28
    3d94:	08 95       	ret

00003d96 <bootmagic>:
#include "eeconfig.h"
#include "bootmagic.h"


void bootmagic(void)
{
    3d96:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    3d98:	0e 94 18 20 	call	0x4030	; 0x4030 <eeconfig_is_enabled>
    3d9c:	81 11       	cpse	r24, r1
    3d9e:	02 c0       	rjmp	.+4      	; 0x3da4 <bootmagic+0xe>
        eeconfig_init();
    3da0:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("boogmagic scan: ... ");
    3da4:	8a e8       	ldi	r24, 0x8A	; 138
    3da6:	94 e0       	ldi	r25, 0x04	; 4
    3da8:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); _delay_ms(10); }
    3dac:	c5 e6       	ldi	r28, 0x65	; 101
    3dae:	c1 50       	subi	r28, 0x01	; 1
    3db0:	49 f0       	breq	.+18     	; 0x3dc4 <bootmagic+0x2e>
    3db2:	0e 94 6a 07 	call	0xed4	; 0xed4 <matrix_scan>
    3db6:	8f e3       	ldi	r24, 0x3F	; 63
    3db8:	9c e9       	ldi	r25, 0x9C	; 156
    3dba:	01 97       	sbiw	r24, 0x01	; 1
    3dbc:	f1 f7       	brne	.-4      	; 0x3dba <bootmagic+0x24>
    3dbe:	00 c0       	rjmp	.+0      	; 0x3dc0 <bootmagic+0x2a>
    3dc0:	00 00       	nop
    3dc2:	f5 cf       	rjmp	.-22     	; 0x3dae <bootmagic+0x18>
    print("done.\n");
    3dc4:	83 e8       	ldi	r24, 0x83	; 131
    3dc6:	94 e0       	ldi	r25, 0x04	; 4
    3dc8:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SKIP)) {
    3dcc:	89 e2       	ldi	r24, 0x29	; 41
    3dce:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <bootmagic_scan_keycode>
    3dd2:	81 11       	cpse	r24, r1
    3dd4:	11 c1       	rjmp	.+546    	; 0x3ff8 <bootmagic+0x262>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    3dd6:	8a e2       	ldi	r24, 0x2A	; 42
    3dd8:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <bootmagic_scan_keycode>
    3ddc:	81 11       	cpse	r24, r1
        eeconfig_init();
    3dde:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_BOOTLOADER)) {
    3de2:	85 e0       	ldi	r24, 0x05	; 5
    3de4:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <bootmagic_scan_keycode>
    3de8:	81 11       	cpse	r24, r1
        bootloader_jump();
    3dea:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <bootloader_jump>
    }

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    3dee:	0e 94 23 20 	call	0x4046	; 0x4046 <eeconfig_read_debug>
    3df2:	80 93 cb 01 	sts	0x01CB, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    3df6:	87 e0       	ldi	r24, 0x07	; 7
    3df8:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <bootmagic_scan_keycode>
    3dfc:	88 23       	and	r24, r24
    3dfe:	99 f1       	breq	.+102    	; 0x3e66 <bootmagic+0xd0>
        if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    3e00:	8b e1       	ldi	r24, 0x1B	; 27
    3e02:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <bootmagic_scan_keycode>
    3e06:	88 23       	and	r24, r24
    3e08:	51 f0       	breq	.+20     	; 0x3e1e <bootmagic+0x88>
            debug_config.matrix = !debug_config.matrix;
    3e0a:	90 91 cb 01 	lds	r25, 0x01CB
    3e0e:	91 fb       	bst	r25, 1
    3e10:	88 27       	eor	r24, r24
    3e12:	80 f9       	bld	r24, 0
    3e14:	21 e0       	ldi	r18, 0x01	; 1
    3e16:	82 27       	eor	r24, r18
    3e18:	80 fb       	bst	r24, 0
    3e1a:	91 f9       	bld	r25, 1
    3e1c:	22 c0       	rjmp	.+68     	; 0x3e62 <bootmagic+0xcc>
        } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    3e1e:	8e e0       	ldi	r24, 0x0E	; 14
    3e20:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <bootmagic_scan_keycode>
    3e24:	88 23       	and	r24, r24
    3e26:	51 f0       	breq	.+20     	; 0x3e3c <bootmagic+0xa6>
            debug_config.keyboard = !debug_config.keyboard;
    3e28:	90 91 cb 01 	lds	r25, 0x01CB
    3e2c:	92 fb       	bst	r25, 2
    3e2e:	88 27       	eor	r24, r24
    3e30:	80 f9       	bld	r24, 0
    3e32:	21 e0       	ldi	r18, 0x01	; 1
    3e34:	82 27       	eor	r24, r18
    3e36:	80 fb       	bst	r24, 0
    3e38:	92 f9       	bld	r25, 2
    3e3a:	13 c0       	rjmp	.+38     	; 0x3e62 <bootmagic+0xcc>
        } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    3e3c:	80 e1       	ldi	r24, 0x10	; 16
    3e3e:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <bootmagic_scan_keycode>
    3e42:	90 91 cb 01 	lds	r25, 0x01CB
    3e46:	88 23       	and	r24, r24
    3e48:	41 f0       	breq	.+16     	; 0x3e5a <bootmagic+0xc4>
            debug_config.mouse = !debug_config.mouse;
    3e4a:	93 fb       	bst	r25, 3
    3e4c:	88 27       	eor	r24, r24
    3e4e:	80 f9       	bld	r24, 0
    3e50:	21 e0       	ldi	r18, 0x01	; 1
    3e52:	82 27       	eor	r24, r18
    3e54:	80 fb       	bst	r24, 0
    3e56:	93 f9       	bld	r25, 3
    3e58:	04 c0       	rjmp	.+8      	; 0x3e62 <bootmagic+0xcc>
        } else {
            debug_config.enable = !debug_config.enable;
    3e5a:	89 2f       	mov	r24, r25
    3e5c:	80 95       	com	r24
    3e5e:	80 fb       	bst	r24, 0
    3e60:	90 f9       	bld	r25, 0
    3e62:	90 93 cb 01 	sts	0x01CB, r25
        }
    }
    eeconfig_write_debug(debug_config.raw);
    3e66:	80 91 cb 01 	lds	r24, 0x01CB
    3e6a:	0e 94 27 20 	call	0x404e	; 0x404e <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    3e6e:	0e 94 35 20 	call	0x406a	; 0x406a <eeconfig_read_keymap>
    3e72:	80 93 dc 01 	sts	0x01DC, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    3e76:	80 ee       	ldi	r24, 0xE0	; 224
    3e78:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <bootmagic_scan_keycode>
    3e7c:	88 23       	and	r24, r24
    3e7e:	41 f0       	breq	.+16     	; 0x3e90 <bootmagic+0xfa>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    3e80:	80 91 dc 01 	lds	r24, 0x01DC
    3e84:	98 2f       	mov	r25, r24
    3e86:	90 95       	com	r25
    3e88:	90 fb       	bst	r25, 0
    3e8a:	80 f9       	bld	r24, 0
    3e8c:	80 93 dc 01 	sts	0x01DC, r24
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    3e90:	89 e3       	ldi	r24, 0x39	; 57
    3e92:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <bootmagic_scan_keycode>
    3e96:	88 23       	and	r24, r24
    3e98:	59 f0       	breq	.+22     	; 0x3eb0 <bootmagic+0x11a>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    3e9a:	90 91 dc 01 	lds	r25, 0x01DC
    3e9e:	91 fb       	bst	r25, 1
    3ea0:	88 27       	eor	r24, r24
    3ea2:	80 f9       	bld	r24, 0
    3ea4:	21 e0       	ldi	r18, 0x01	; 1
    3ea6:	82 27       	eor	r24, r18
    3ea8:	80 fb       	bst	r24, 0
    3eaa:	91 f9       	bld	r25, 1
    3eac:	90 93 dc 01 	sts	0x01DC, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    3eb0:	82 ee       	ldi	r24, 0xE2	; 226
    3eb2:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <bootmagic_scan_keycode>
    3eb6:	88 23       	and	r24, r24
    3eb8:	59 f0       	breq	.+22     	; 0x3ed0 <bootmagic+0x13a>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    3eba:	90 91 dc 01 	lds	r25, 0x01DC
    3ebe:	92 fb       	bst	r25, 2
    3ec0:	88 27       	eor	r24, r24
    3ec2:	80 f9       	bld	r24, 0
    3ec4:	21 e0       	ldi	r18, 0x01	; 1
    3ec6:	82 27       	eor	r24, r18
    3ec8:	80 fb       	bst	r24, 0
    3eca:	92 f9       	bld	r25, 2
    3ecc:	90 93 dc 01 	sts	0x01DC, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    3ed0:	86 ee       	ldi	r24, 0xE6	; 230
    3ed2:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <bootmagic_scan_keycode>
    3ed6:	88 23       	and	r24, r24
    3ed8:	59 f0       	breq	.+22     	; 0x3ef0 <bootmagic+0x15a>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    3eda:	90 91 dc 01 	lds	r25, 0x01DC
    3ede:	93 fb       	bst	r25, 3
    3ee0:	88 27       	eor	r24, r24
    3ee2:	80 f9       	bld	r24, 0
    3ee4:	21 e0       	ldi	r18, 0x01	; 1
    3ee6:	82 27       	eor	r24, r18
    3ee8:	80 fb       	bst	r24, 0
    3eea:	93 f9       	bld	r25, 3
    3eec:	90 93 dc 01 	sts	0x01DC, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_NO_GUI)) {
    3ef0:	83 ee       	ldi	r24, 0xE3	; 227
    3ef2:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <bootmagic_scan_keycode>
    3ef6:	88 23       	and	r24, r24
    3ef8:	59 f0       	breq	.+22     	; 0x3f10 <bootmagic+0x17a>
        keymap_config.no_gui = !keymap_config.no_gui;
    3efa:	90 91 dc 01 	lds	r25, 0x01DC
    3efe:	94 fb       	bst	r25, 4
    3f00:	88 27       	eor	r24, r24
    3f02:	80 f9       	bld	r24, 0
    3f04:	21 e0       	ldi	r18, 0x01	; 1
    3f06:	82 27       	eor	r24, r18
    3f08:	80 fb       	bst	r24, 0
    3f0a:	94 f9       	bld	r25, 4
    3f0c:	90 93 dc 01 	sts	0x01DC, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    3f10:	85 e3       	ldi	r24, 0x35	; 53
    3f12:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <bootmagic_scan_keycode>
    3f16:	88 23       	and	r24, r24
    3f18:	59 f0       	breq	.+22     	; 0x3f30 <bootmagic+0x19a>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    3f1a:	90 91 dc 01 	lds	r25, 0x01DC
    3f1e:	95 fb       	bst	r25, 5
    3f20:	88 27       	eor	r24, r24
    3f22:	80 f9       	bld	r24, 0
    3f24:	21 e0       	ldi	r18, 0x01	; 1
    3f26:	82 27       	eor	r24, r18
    3f28:	80 fb       	bst	r24, 0
    3f2a:	95 f9       	bld	r25, 5
    3f2c:	90 93 dc 01 	sts	0x01DC, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    3f30:	81 e3       	ldi	r24, 0x31	; 49
    3f32:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <bootmagic_scan_keycode>
    3f36:	88 23       	and	r24, r24
    3f38:	59 f0       	breq	.+22     	; 0x3f50 <bootmagic+0x1ba>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    3f3a:	90 91 dc 01 	lds	r25, 0x01DC
    3f3e:	96 fb       	bst	r25, 6
    3f40:	88 27       	eor	r24, r24
    3f42:	80 f9       	bld	r24, 0
    3f44:	21 e0       	ldi	r18, 0x01	; 1
    3f46:	82 27       	eor	r24, r18
    3f48:	80 fb       	bst	r24, 0
    3f4a:	96 f9       	bld	r25, 6
    3f4c:	90 93 dc 01 	sts	0x01DC, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_HOST_NKRO)) {
    3f50:	81 e1       	ldi	r24, 0x11	; 17
    3f52:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <bootmagic_scan_keycode>
    3f56:	88 23       	and	r24, r24
    3f58:	59 f0       	breq	.+22     	; 0x3f70 <bootmagic+0x1da>
        keymap_config.nkro = !keymap_config.nkro;
    3f5a:	90 91 dc 01 	lds	r25, 0x01DC
    3f5e:	97 fb       	bst	r25, 7
    3f60:	88 27       	eor	r24, r24
    3f62:	80 f9       	bld	r24, 0
    3f64:	21 e0       	ldi	r18, 0x01	; 1
    3f66:	82 27       	eor	r24, r18
    3f68:	80 fb       	bst	r24, 0
    3f6a:	97 f9       	bld	r25, 7
    3f6c:	90 93 dc 01 	sts	0x01DC, r25
    }
    eeconfig_write_keymap(keymap_config.raw);
    3f70:	80 91 dc 01 	lds	r24, 0x01DC
    3f74:	0e 94 39 20 	call	0x4072	; 0x4072 <eeconfig_write_keymap>

#ifdef NKRO_ENABLE
    keyboard_nkro = keymap_config.nkro;
    3f78:	80 91 dc 01 	lds	r24, 0x01DC
    3f7c:	87 fb       	bst	r24, 7
    3f7e:	88 27       	eor	r24, r24
    3f80:	80 f9       	bld	r24, 0
    3f82:	80 93 0b 01 	sts	0x010B, r24
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    3f86:	87 e2       	ldi	r24, 0x27	; 39
    3f88:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <bootmagic_scan_keycode>
    3f8c:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    3f8e:	8e e1       	ldi	r24, 0x1E	; 30
    3f90:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <bootmagic_scan_keycode>
    3f94:	81 11       	cpse	r24, r1
    3f96:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    3f98:	8f e1       	ldi	r24, 0x1F	; 31
    3f9a:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <bootmagic_scan_keycode>
    3f9e:	81 11       	cpse	r24, r1
    3fa0:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    3fa2:	80 e2       	ldi	r24, 0x20	; 32
    3fa4:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <bootmagic_scan_keycode>
    3fa8:	81 11       	cpse	r24, r1
    3faa:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    3fac:	81 e2       	ldi	r24, 0x21	; 33
    3fae:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <bootmagic_scan_keycode>
    3fb2:	81 11       	cpse	r24, r1
    3fb4:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    3fb6:	82 e2       	ldi	r24, 0x22	; 34
    3fb8:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <bootmagic_scan_keycode>
    3fbc:	81 11       	cpse	r24, r1
    3fbe:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    3fc0:	83 e2       	ldi	r24, 0x23	; 35
    3fc2:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <bootmagic_scan_keycode>
    3fc6:	81 11       	cpse	r24, r1
    3fc8:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    3fca:	84 e2       	ldi	r24, 0x24	; 36
    3fcc:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <bootmagic_scan_keycode>
    3fd0:	88 23       	and	r24, r24
    3fd2:	11 f0       	breq	.+4      	; 0x3fd8 <bootmagic+0x242>
    3fd4:	c0 68       	ori	r28, 0x80	; 128
    3fd6:	02 c0       	rjmp	.+4      	; 0x3fdc <bootmagic+0x246>
    if (default_layer) {
    3fd8:	cc 23       	and	r28, r28
    3fda:	29 f0       	breq	.+10     	; 0x3fe6 <bootmagic+0x250>
        eeconfig_write_default_layer(default_layer);
    3fdc:	8c 2f       	mov	r24, r28
    3fde:	0e 94 30 20 	call	0x4060	; 0x4060 <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    3fe2:	6c 2f       	mov	r22, r28
    3fe4:	03 c0       	rjmp	.+6      	; 0x3fec <bootmagic+0x256>
    } else {
        default_layer = eeconfig_read_default_layer();
    3fe6:	0e 94 2c 20 	call	0x4058	; 0x4058 <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    3fea:	68 2f       	mov	r22, r24
    3fec:	70 e0       	ldi	r23, 0x00	; 0
    3fee:	80 e0       	ldi	r24, 0x00	; 0
    3ff0:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    3ff2:	cf 91       	pop	r28
    if (default_layer) {
        eeconfig_write_default_layer(default_layer);
        default_layer_set((uint32_t)default_layer);
    } else {
        default_layer = eeconfig_read_default_layer();
        default_layer_set((uint32_t)default_layer);
    3ff4:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <default_layer_set>
    }
}
    3ff8:	cf 91       	pop	r28
    3ffa:	08 95       	ret

00003ffc <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    3ffc:	6d ee       	ldi	r22, 0xED	; 237
    3ffe:	7e ef       	ldi	r23, 0xFE	; 254
    4000:	80 e0       	ldi	r24, 0x00	; 0
    4002:	90 e0       	ldi	r25, 0x00	; 0
    4004:	0e 94 80 29 	call	0x5300	; 0x5300 <__eewr_word_m32u4>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    4008:	60 e0       	ldi	r22, 0x00	; 0
    400a:	82 e0       	ldi	r24, 0x02	; 2
    400c:	90 e0       	ldi	r25, 0x00	; 0
    400e:	0e 94 72 29 	call	0x52e4	; 0x52e4 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    4012:	60 e0       	ldi	r22, 0x00	; 0
    4014:	83 e0       	ldi	r24, 0x03	; 3
    4016:	90 e0       	ldi	r25, 0x00	; 0
    4018:	0e 94 72 29 	call	0x52e4	; 0x52e4 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    401c:	60 e0       	ldi	r22, 0x00	; 0
    401e:	84 e0       	ldi	r24, 0x04	; 4
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	0e 94 72 29 	call	0x52e4	; 0x52e4 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    4026:	60 e0       	ldi	r22, 0x00	; 0
    4028:	85 e0       	ldi	r24, 0x05	; 5
    402a:	90 e0       	ldi	r25, 0x00	; 0
    402c:	0c 94 72 29 	jmp	0x52e4	; 0x52e4 <__eewr_byte_m32u4>

00004030 <eeconfig_is_enabled>:
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    4030:	80 e0       	ldi	r24, 0x00	; 0
    4032:	90 e0       	ldi	r25, 0x00	; 0
    4034:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <__eerd_word_m32u4>
    4038:	21 e0       	ldi	r18, 0x01	; 1
    403a:	8d 3e       	cpi	r24, 0xED	; 237
    403c:	9e 4f       	sbci	r25, 0xFE	; 254
    403e:	09 f0       	breq	.+2      	; 0x4042 <eeconfig_is_enabled+0x12>
    4040:	20 e0       	ldi	r18, 0x00	; 0
}
    4042:	82 2f       	mov	r24, r18
    4044:	08 95       	ret

00004046 <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    4046:	82 e0       	ldi	r24, 0x02	; 2
    4048:	90 e0       	ldi	r25, 0x00	; 0
    404a:	0c 94 64 29 	jmp	0x52c8	; 0x52c8 <__eerd_byte_m32u4>

0000404e <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    404e:	68 2f       	mov	r22, r24
    4050:	82 e0       	ldi	r24, 0x02	; 2
    4052:	90 e0       	ldi	r25, 0x00	; 0
    4054:	0c 94 72 29 	jmp	0x52e4	; 0x52e4 <__eewr_byte_m32u4>

00004058 <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    4058:	83 e0       	ldi	r24, 0x03	; 3
    405a:	90 e0       	ldi	r25, 0x00	; 0
    405c:	0c 94 64 29 	jmp	0x52c8	; 0x52c8 <__eerd_byte_m32u4>

00004060 <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    4060:	68 2f       	mov	r22, r24
    4062:	83 e0       	ldi	r24, 0x03	; 3
    4064:	90 e0       	ldi	r25, 0x00	; 0
    4066:	0c 94 72 29 	jmp	0x52e4	; 0x52e4 <__eewr_byte_m32u4>

0000406a <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    406a:	84 e0       	ldi	r24, 0x04	; 4
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	0c 94 64 29 	jmp	0x52c8	; 0x52c8 <__eerd_byte_m32u4>

00004072 <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    4072:	68 2f       	mov	r22, r24
    4074:	84 e0       	ldi	r24, 0x04	; 4
    4076:	90 e0       	ldi	r25, 0x00	; 0
    4078:	0c 94 72 29 	jmp	0x52e4	; 0x52e4 <__eewr_byte_m32u4>

0000407c <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    407c:	80 91 d3 01 	lds	r24, 0x01D3
    4080:	80 ff       	sbrs	r24, 0
    4082:	0b c0       	rjmp	.+22     	; 0x409a <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    4084:	60 91 11 01 	lds	r22, 0x0111
    4088:	85 e0       	ldi	r24, 0x05	; 5
    408a:	68 9f       	mul	r22, r24
    408c:	b0 01       	movw	r22, r0
    408e:	11 24       	eor	r1, r1
    4090:	75 95       	asr	r23
    4092:	67 95       	ror	r22
    4094:	75 95       	asr	r23
    4096:	67 95       	ror	r22
    4098:	2a c0       	rjmp	.+84     	; 0x40ee <move_unit+0x72>
    } else if (mousekey_accel & (1<<1)) {
    409a:	81 ff       	sbrs	r24, 1
    409c:	09 c0       	rjmp	.+18     	; 0x40b0 <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    409e:	60 91 11 01 	lds	r22, 0x0111
    40a2:	85 e0       	ldi	r24, 0x05	; 5
    40a4:	68 9f       	mul	r22, r24
    40a6:	b0 01       	movw	r22, r0
    40a8:	11 24       	eor	r1, r1
    40aa:	75 95       	asr	r23
    40ac:	67 95       	ror	r22
    40ae:	1f c0       	rjmp	.+62     	; 0x40ee <move_unit+0x72>
    } else if (mousekey_accel & (1<<2)) {
    40b0:	82 ff       	sbrs	r24, 2
    40b2:	07 c0       	rjmp	.+14     	; 0x40c2 <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    40b4:	60 91 11 01 	lds	r22, 0x0111
    40b8:	85 e0       	ldi	r24, 0x05	; 5
    40ba:	68 9f       	mul	r22, r24
    40bc:	b0 01       	movw	r22, r0
    40be:	11 24       	eor	r1, r1
    40c0:	16 c0       	rjmp	.+44     	; 0x40ee <move_unit+0x72>
    } else if (mousekey_repeat == 0) {
    40c2:	40 91 d4 01 	lds	r20, 0x01D4
    40c6:	44 23       	and	r20, r20
    40c8:	c9 f0       	breq	.+50     	; 0x40fc <move_unit+0x80>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    40ca:	60 91 10 01 	lds	r22, 0x0110
    40ce:	46 17       	cp	r20, r22
    40d0:	88 f7       	brcc	.-30     	; 0x40b4 <move_unit+0x38>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    40d2:	20 91 11 01 	lds	r18, 0x0111
    40d6:	85 e0       	ldi	r24, 0x05	; 5
    40d8:	28 9f       	mul	r18, r24
    40da:	90 01       	movw	r18, r0
    40dc:	11 24       	eor	r1, r1
    40de:	42 9f       	mul	r20, r18
    40e0:	c0 01       	movw	r24, r0
    40e2:	43 9f       	mul	r20, r19
    40e4:	90 0d       	add	r25, r0
    40e6:	11 24       	eor	r1, r1
    40e8:	70 e0       	ldi	r23, 0x00	; 0
    40ea:	0e 94 36 29 	call	0x526c	; 0x526c <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    40ee:	60 38       	cpi	r22, 0x80	; 128
    40f0:	71 05       	cpc	r23, r1
    40f2:	40 f4       	brcc	.+16     	; 0x4104 <move_unit+0x88>
    40f4:	61 15       	cp	r22, r1
    40f6:	71 05       	cpc	r23, r1
    40f8:	39 f0       	breq	.+14     	; 0x4108 <move_unit+0x8c>
    40fa:	02 c0       	rjmp	.+4      	; 0x4100 <move_unit+0x84>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    40fc:	65 e0       	ldi	r22, 0x05	; 5
    40fe:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4100:	86 2f       	mov	r24, r22
    4102:	08 95       	ret
    4104:	8f e7       	ldi	r24, 0x7F	; 127
    4106:	08 95       	ret
    4108:	81 e0       	ldi	r24, 0x01	; 1
}
    410a:	08 95       	ret

0000410c <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    410c:	80 91 d3 01 	lds	r24, 0x01D3
    4110:	80 ff       	sbrs	r24, 0
    4112:	08 c0       	rjmp	.+16     	; 0x4124 <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    4114:	60 91 0f 01 	lds	r22, 0x010F
    4118:	70 e0       	ldi	r23, 0x00	; 0
    411a:	75 95       	asr	r23
    411c:	67 95       	ror	r22
    411e:	75 95       	asr	r23
    4120:	67 95       	ror	r22
    4122:	21 c0       	rjmp	.+66     	; 0x4166 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<1)) {
    4124:	81 ff       	sbrs	r24, 1
    4126:	06 c0       	rjmp	.+12     	; 0x4134 <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    4128:	60 91 0f 01 	lds	r22, 0x010F
    412c:	70 e0       	ldi	r23, 0x00	; 0
    412e:	75 95       	asr	r23
    4130:	67 95       	ror	r22
    4132:	19 c0       	rjmp	.+50     	; 0x4166 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<2)) {
    4134:	82 ff       	sbrs	r24, 2
    4136:	04 c0       	rjmp	.+8      	; 0x4140 <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    4138:	60 91 0f 01 	lds	r22, 0x010F
    413c:	70 e0       	ldi	r23, 0x00	; 0
    413e:	10 c0       	rjmp	.+32     	; 0x4160 <wheel_unit+0x54>
    } else if (mousekey_repeat == 0) {
    4140:	80 91 d4 01 	lds	r24, 0x01D4
    4144:	88 23       	and	r24, r24
    4146:	c1 f0       	breq	.+48     	; 0x4178 <wheel_unit+0x6c>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    4148:	60 91 0e 01 	lds	r22, 0x010E
    414c:	86 17       	cp	r24, r22
    414e:	a0 f7       	brcc	.-24     	; 0x4138 <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    4150:	90 91 0f 01 	lds	r25, 0x010F
    4154:	98 9f       	mul	r25, r24
    4156:	c0 01       	movw	r24, r0
    4158:	11 24       	eor	r1, r1
    415a:	70 e0       	ldi	r23, 0x00	; 0
    415c:	0e 94 36 29 	call	0x526c	; 0x526c <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    4160:	60 38       	cpi	r22, 0x80	; 128
    4162:	71 05       	cpc	r23, r1
    4164:	28 f4       	brcc	.+10     	; 0x4170 <wheel_unit+0x64>
    4166:	61 15       	cp	r22, r1
    4168:	71 05       	cpc	r23, r1
    416a:	21 f0       	breq	.+8      	; 0x4174 <wheel_unit+0x68>
    416c:	86 2f       	mov	r24, r22
    416e:	08 95       	ret
    4170:	8f e7       	ldi	r24, 0x7F	; 127
    4172:	08 95       	ret
    4174:	81 e0       	ldi	r24, 0x01	; 1
    4176:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    4178:	61 e0       	ldi	r22, 0x01	; 1
    417a:	70 e0       	ldi	r23, 0x00	; 0
    417c:	f4 cf       	rjmp	.-24     	; 0x4166 <wheel_unit+0x5a>

0000417e <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    417e:	80 3f       	cpi	r24, 0xF0	; 240
    4180:	21 f4       	brne	.+8      	; 0x418a <mousekey_on+0xc>
    4182:	0e 94 3e 20 	call	0x407c	; 0x407c <move_unit>
    4186:	81 95       	neg	r24
    4188:	04 c0       	rjmp	.+8      	; 0x4192 <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    418a:	81 3f       	cpi	r24, 0xF1	; 241
    418c:	29 f4       	brne	.+10     	; 0x4198 <mousekey_on+0x1a>
    418e:	0e 94 3e 20 	call	0x407c	; 0x407c <move_unit>
    4192:	80 93 d7 01 	sts	0x01D7, r24
    4196:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    4198:	82 3f       	cpi	r24, 0xF2	; 242
    419a:	21 f4       	brne	.+8      	; 0x41a4 <mousekey_on+0x26>
    419c:	0e 94 3e 20 	call	0x407c	; 0x407c <move_unit>
    41a0:	81 95       	neg	r24
    41a2:	04 c0       	rjmp	.+8      	; 0x41ac <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    41a4:	83 3f       	cpi	r24, 0xF3	; 243
    41a6:	29 f4       	brne	.+10     	; 0x41b2 <mousekey_on+0x34>
    41a8:	0e 94 3e 20 	call	0x407c	; 0x407c <move_unit>
    41ac:	80 93 d6 01 	sts	0x01D6, r24
    41b0:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    41b2:	89 3f       	cpi	r24, 0xF9	; 249
    41b4:	19 f4       	brne	.+6      	; 0x41bc <mousekey_on+0x3e>
    41b6:	0e 94 86 20 	call	0x410c	; 0x410c <wheel_unit>
    41ba:	05 c0       	rjmp	.+10     	; 0x41c6 <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    41bc:	8a 3f       	cpi	r24, 0xFA	; 250
    41be:	31 f4       	brne	.+12     	; 0x41cc <mousekey_on+0x4e>
    41c0:	0e 94 86 20 	call	0x410c	; 0x410c <wheel_unit>
    41c4:	81 95       	neg	r24
    41c6:	80 93 d8 01 	sts	0x01D8, r24
    41ca:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    41cc:	8b 3f       	cpi	r24, 0xFB	; 251
    41ce:	21 f4       	brne	.+8      	; 0x41d8 <mousekey_on+0x5a>
    41d0:	0e 94 86 20 	call	0x410c	; 0x410c <wheel_unit>
    41d4:	81 95       	neg	r24
    41d6:	04 c0       	rjmp	.+8      	; 0x41e0 <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    41d8:	8c 3f       	cpi	r24, 0xFC	; 252
    41da:	29 f4       	brne	.+10     	; 0x41e6 <mousekey_on+0x68>
    41dc:	0e 94 86 20 	call	0x410c	; 0x410c <wheel_unit>
    41e0:	80 93 d9 01 	sts	0x01D9, r24
    41e4:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    41e6:	84 3f       	cpi	r24, 0xF4	; 244
    41e8:	21 f4       	brne	.+8      	; 0x41f2 <mousekey_on+0x74>
    41ea:	80 91 d5 01 	lds	r24, 0x01D5
    41ee:	81 60       	ori	r24, 0x01	; 1
    41f0:	17 c0       	rjmp	.+46     	; 0x4220 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    41f2:	85 3f       	cpi	r24, 0xF5	; 245
    41f4:	21 f4       	brne	.+8      	; 0x41fe <mousekey_on+0x80>
    41f6:	80 91 d5 01 	lds	r24, 0x01D5
    41fa:	82 60       	ori	r24, 0x02	; 2
    41fc:	11 c0       	rjmp	.+34     	; 0x4220 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    41fe:	86 3f       	cpi	r24, 0xF6	; 246
    4200:	21 f4       	brne	.+8      	; 0x420a <mousekey_on+0x8c>
    4202:	80 91 d5 01 	lds	r24, 0x01D5
    4206:	84 60       	ori	r24, 0x04	; 4
    4208:	0b c0       	rjmp	.+22     	; 0x4220 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    420a:	87 3f       	cpi	r24, 0xF7	; 247
    420c:	21 f4       	brne	.+8      	; 0x4216 <mousekey_on+0x98>
    420e:	80 91 d5 01 	lds	r24, 0x01D5
    4212:	88 60       	ori	r24, 0x08	; 8
    4214:	05 c0       	rjmp	.+10     	; 0x4220 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    4216:	88 3f       	cpi	r24, 0xF8	; 248
    4218:	31 f4       	brne	.+12     	; 0x4226 <mousekey_on+0xa8>
    421a:	80 91 d5 01 	lds	r24, 0x01D5
    421e:	80 61       	ori	r24, 0x10	; 16
    4220:	80 93 d5 01 	sts	0x01D5, r24
    4224:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    4226:	8d 3f       	cpi	r24, 0xFD	; 253
    4228:	21 f4       	brne	.+8      	; 0x4232 <mousekey_on+0xb4>
    422a:	80 91 d3 01 	lds	r24, 0x01D3
    422e:	81 60       	ori	r24, 0x01	; 1
    4230:	0b c0       	rjmp	.+22     	; 0x4248 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    4232:	8e 3f       	cpi	r24, 0xFE	; 254
    4234:	21 f4       	brne	.+8      	; 0x423e <mousekey_on+0xc0>
    4236:	80 91 d3 01 	lds	r24, 0x01D3
    423a:	82 60       	ori	r24, 0x02	; 2
    423c:	05 c0       	rjmp	.+10     	; 0x4248 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    423e:	8f 3f       	cpi	r24, 0xFF	; 255
    4240:	29 f4       	brne	.+10     	; 0x424c <mousekey_on+0xce>
    4242:	80 91 d3 01 	lds	r24, 0x01D3
    4246:	84 60       	ori	r24, 0x04	; 4
    4248:	80 93 d3 01 	sts	0x01D3, r24
    424c:	08 95       	ret

0000424e <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    424e:	80 3f       	cpi	r24, 0xF0	; 240
    4250:	39 f4       	brne	.+14     	; 0x4260 <mousekey_off+0x12>
    4252:	80 91 d7 01 	lds	r24, 0x01D7
    4256:	87 ff       	sbrs	r24, 7
    4258:	6c c0       	rjmp	.+216    	; 0x4332 <mousekey_off+0xe4>
    425a:	10 92 d7 01 	sts	0x01D7, r1
    425e:	69 c0       	rjmp	.+210    	; 0x4332 <mousekey_off+0xe4>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    4260:	81 3f       	cpi	r24, 0xF1	; 241
    4262:	29 f4       	brne	.+10     	; 0x426e <mousekey_off+0x20>
    4264:	80 91 d7 01 	lds	r24, 0x01D7
    4268:	18 16       	cp	r1, r24
    426a:	bc f3       	brlt	.-18     	; 0x425a <mousekey_off+0xc>
    426c:	62 c0       	rjmp	.+196    	; 0x4332 <mousekey_off+0xe4>
    426e:	90 91 d6 01 	lds	r25, 0x01D6
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    4272:	82 3f       	cpi	r24, 0xF2	; 242
    4274:	29 f4       	brne	.+10     	; 0x4280 <mousekey_off+0x32>
    4276:	97 ff       	sbrs	r25, 7
    4278:	5c c0       	rjmp	.+184    	; 0x4332 <mousekey_off+0xe4>
    427a:	10 92 d6 01 	sts	0x01D6, r1
    427e:	59 c0       	rjmp	.+178    	; 0x4332 <mousekey_off+0xe4>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    4280:	83 3f       	cpi	r24, 0xF3	; 243
    4282:	19 f4       	brne	.+6      	; 0x428a <mousekey_off+0x3c>
    4284:	19 16       	cp	r1, r25
    4286:	cc f3       	brlt	.-14     	; 0x427a <mousekey_off+0x2c>
    4288:	54 c0       	rjmp	.+168    	; 0x4332 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    428a:	89 3f       	cpi	r24, 0xF9	; 249
    428c:	41 f4       	brne	.+16     	; 0x429e <mousekey_off+0x50>
    428e:	80 91 d8 01 	lds	r24, 0x01D8
    4292:	18 16       	cp	r1, r24
    4294:	0c f0       	brlt	.+2      	; 0x4298 <mousekey_off+0x4a>
    4296:	4d c0       	rjmp	.+154    	; 0x4332 <mousekey_off+0xe4>
    4298:	10 92 d8 01 	sts	0x01D8, r1
    429c:	4a c0       	rjmp	.+148    	; 0x4332 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    429e:	8a 3f       	cpi	r24, 0xFA	; 250
    42a0:	29 f4       	brne	.+10     	; 0x42ac <mousekey_off+0x5e>
    42a2:	80 91 d8 01 	lds	r24, 0x01D8
    42a6:	87 ff       	sbrs	r24, 7
    42a8:	44 c0       	rjmp	.+136    	; 0x4332 <mousekey_off+0xe4>
    42aa:	f6 cf       	rjmp	.-20     	; 0x4298 <mousekey_off+0x4a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    42ac:	8b 3f       	cpi	r24, 0xFB	; 251
    42ae:	39 f4       	brne	.+14     	; 0x42be <mousekey_off+0x70>
    42b0:	80 91 d9 01 	lds	r24, 0x01D9
    42b4:	87 ff       	sbrs	r24, 7
    42b6:	3d c0       	rjmp	.+122    	; 0x4332 <mousekey_off+0xe4>
    42b8:	10 92 d9 01 	sts	0x01D9, r1
    42bc:	3a c0       	rjmp	.+116    	; 0x4332 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    42be:	8c 3f       	cpi	r24, 0xFC	; 252
    42c0:	29 f4       	brne	.+10     	; 0x42cc <mousekey_off+0x7e>
    42c2:	80 91 d9 01 	lds	r24, 0x01D9
    42c6:	18 16       	cp	r1, r24
    42c8:	bc f3       	brlt	.-18     	; 0x42b8 <mousekey_off+0x6a>
    42ca:	33 c0       	rjmp	.+102    	; 0x4332 <mousekey_off+0xe4>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    42cc:	84 3f       	cpi	r24, 0xF4	; 244
    42ce:	21 f4       	brne	.+8      	; 0x42d8 <mousekey_off+0x8a>
    42d0:	80 91 d5 01 	lds	r24, 0x01D5
    42d4:	8e 7f       	andi	r24, 0xFE	; 254
    42d6:	17 c0       	rjmp	.+46     	; 0x4306 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    42d8:	85 3f       	cpi	r24, 0xF5	; 245
    42da:	21 f4       	brne	.+8      	; 0x42e4 <mousekey_off+0x96>
    42dc:	80 91 d5 01 	lds	r24, 0x01D5
    42e0:	8d 7f       	andi	r24, 0xFD	; 253
    42e2:	11 c0       	rjmp	.+34     	; 0x4306 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    42e4:	86 3f       	cpi	r24, 0xF6	; 246
    42e6:	21 f4       	brne	.+8      	; 0x42f0 <mousekey_off+0xa2>
    42e8:	80 91 d5 01 	lds	r24, 0x01D5
    42ec:	8b 7f       	andi	r24, 0xFB	; 251
    42ee:	0b c0       	rjmp	.+22     	; 0x4306 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    42f0:	87 3f       	cpi	r24, 0xF7	; 247
    42f2:	21 f4       	brne	.+8      	; 0x42fc <mousekey_off+0xae>
    42f4:	80 91 d5 01 	lds	r24, 0x01D5
    42f8:	87 7f       	andi	r24, 0xF7	; 247
    42fa:	05 c0       	rjmp	.+10     	; 0x4306 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    42fc:	88 3f       	cpi	r24, 0xF8	; 248
    42fe:	31 f4       	brne	.+12     	; 0x430c <mousekey_off+0xbe>
    4300:	80 91 d5 01 	lds	r24, 0x01D5
    4304:	8f 7e       	andi	r24, 0xEF	; 239
    4306:	80 93 d5 01 	sts	0x01D5, r24
    430a:	13 c0       	rjmp	.+38     	; 0x4332 <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    430c:	8d 3f       	cpi	r24, 0xFD	; 253
    430e:	21 f4       	brne	.+8      	; 0x4318 <mousekey_off+0xca>
    4310:	80 91 d3 01 	lds	r24, 0x01D3
    4314:	8e 7f       	andi	r24, 0xFE	; 254
    4316:	0b c0       	rjmp	.+22     	; 0x432e <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    4318:	8e 3f       	cpi	r24, 0xFE	; 254
    431a:	21 f4       	brne	.+8      	; 0x4324 <mousekey_off+0xd6>
    431c:	80 91 d3 01 	lds	r24, 0x01D3
    4320:	8d 7f       	andi	r24, 0xFD	; 253
    4322:	05 c0       	rjmp	.+10     	; 0x432e <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    4324:	8f 3f       	cpi	r24, 0xFF	; 255
    4326:	29 f4       	brne	.+10     	; 0x4332 <mousekey_off+0xe4>
    4328:	80 91 d3 01 	lds	r24, 0x01D3
    432c:	8b 7f       	andi	r24, 0xFB	; 251
    432e:	80 93 d3 01 	sts	0x01D3, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4332:	80 91 d6 01 	lds	r24, 0x01D6
    4336:	81 11       	cpse	r24, r1
    4338:	0e c0       	rjmp	.+28     	; 0x4356 <mousekey_off+0x108>
    433a:	80 91 d7 01 	lds	r24, 0x01D7
    433e:	81 11       	cpse	r24, r1
    4340:	0a c0       	rjmp	.+20     	; 0x4356 <mousekey_off+0x108>
    4342:	80 91 d8 01 	lds	r24, 0x01D8
    4346:	81 11       	cpse	r24, r1
    4348:	06 c0       	rjmp	.+12     	; 0x4356 <mousekey_off+0x108>
    434a:	80 91 d9 01 	lds	r24, 0x01D9
    434e:	81 11       	cpse	r24, r1
    4350:	02 c0       	rjmp	.+4      	; 0x4356 <mousekey_off+0x108>
        mousekey_repeat = 0;
    4352:	10 92 d4 01 	sts	0x01D4, r1
    4356:	08 95       	ret

00004358 <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    4358:	80 91 cb 01 	lds	r24, 0x01CB
    435c:	83 ff       	sbrs	r24, 3
    435e:	7e c0       	rjmp	.+252    	; 0x445c <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    4360:	86 ec       	ldi	r24, 0xC6	; 198
    4362:	94 e0       	ldi	r25, 0x04	; 4
    4364:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    phex(mouse_report.buttons); print("|");
    4368:	80 91 d5 01 	lds	r24, 0x01D5
    436c:	1f 92       	push	r1
    436e:	8f 93       	push	r24
    4370:	81 ec       	ldi	r24, 0xC1	; 193
    4372:	94 e0       	ldi	r25, 0x04	; 4
    4374:	9f 93       	push	r25
    4376:	8f 93       	push	r24
    4378:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    437c:	8f eb       	ldi	r24, 0xBF	; 191
    437e:	94 e0       	ldi	r25, 0x04	; 4
    4380:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    print_decs(mouse_report.x); print(" ");
    4384:	20 91 d6 01 	lds	r18, 0x01D6
    4388:	82 2f       	mov	r24, r18
    438a:	99 27       	eor	r25, r25
    438c:	87 fd       	sbrc	r24, 7
    438e:	90 95       	com	r25
    4390:	9f 93       	push	r25
    4392:	2f 93       	push	r18
    4394:	8c eb       	ldi	r24, 0xBC	; 188
    4396:	94 e0       	ldi	r25, 0x04	; 4
    4398:	9f 93       	push	r25
    439a:	8f 93       	push	r24
    439c:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    43a0:	8a eb       	ldi	r24, 0xBA	; 186
    43a2:	94 e0       	ldi	r25, 0x04	; 4
    43a4:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    print_decs(mouse_report.y); print(" ");
    43a8:	20 91 d7 01 	lds	r18, 0x01D7
    43ac:	82 2f       	mov	r24, r18
    43ae:	99 27       	eor	r25, r25
    43b0:	87 fd       	sbrc	r24, 7
    43b2:	90 95       	com	r25
    43b4:	9f 93       	push	r25
    43b6:	2f 93       	push	r18
    43b8:	87 eb       	ldi	r24, 0xB7	; 183
    43ba:	94 e0       	ldi	r25, 0x04	; 4
    43bc:	9f 93       	push	r25
    43be:	8f 93       	push	r24
    43c0:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    43c4:	85 eb       	ldi	r24, 0xB5	; 181
    43c6:	94 e0       	ldi	r25, 0x04	; 4
    43c8:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    print_decs(mouse_report.v); print(" ");
    43cc:	20 91 d8 01 	lds	r18, 0x01D8
    43d0:	82 2f       	mov	r24, r18
    43d2:	99 27       	eor	r25, r25
    43d4:	87 fd       	sbrc	r24, 7
    43d6:	90 95       	com	r25
    43d8:	9f 93       	push	r25
    43da:	2f 93       	push	r18
    43dc:	82 eb       	ldi	r24, 0xB2	; 178
    43de:	94 e0       	ldi	r25, 0x04	; 4
    43e0:	9f 93       	push	r25
    43e2:	8f 93       	push	r24
    43e4:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    43e8:	80 eb       	ldi	r24, 0xB0	; 176
    43ea:	94 e0       	ldi	r25, 0x04	; 4
    43ec:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    print_decs(mouse_report.h); print("](");
    43f0:	20 91 d9 01 	lds	r18, 0x01D9
    43f4:	82 2f       	mov	r24, r18
    43f6:	99 27       	eor	r25, r25
    43f8:	87 fd       	sbrc	r24, 7
    43fa:	90 95       	com	r25
    43fc:	9f 93       	push	r25
    43fe:	2f 93       	push	r18
    4400:	8d ea       	ldi	r24, 0xAD	; 173
    4402:	94 e0       	ldi	r25, 0x04	; 4
    4404:	9f 93       	push	r25
    4406:	8f 93       	push	r24
    4408:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    440c:	8a ea       	ldi	r24, 0xAA	; 170
    440e:	94 e0       	ldi	r25, 0x04	; 4
    4410:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    print_dec(mousekey_repeat); print("/");
    4414:	80 91 d4 01 	lds	r24, 0x01D4
    4418:	1f 92       	push	r1
    441a:	8f 93       	push	r24
    441c:	87 ea       	ldi	r24, 0xA7	; 167
    441e:	94 e0       	ldi	r25, 0x04	; 4
    4420:	9f 93       	push	r25
    4422:	8f 93       	push	r24
    4424:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    4428:	85 ea       	ldi	r24, 0xA5	; 165
    442a:	94 e0       	ldi	r25, 0x04	; 4
    442c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    print_dec(mousekey_accel); print(")\n");
    4430:	80 91 d3 01 	lds	r24, 0x01D3
    4434:	1f 92       	push	r1
    4436:	8f 93       	push	r24
    4438:	82 ea       	ldi	r24, 0xA2	; 162
    443a:	94 e0       	ldi	r25, 0x04	; 4
    443c:	9f 93       	push	r25
    443e:	8f 93       	push	r24
    4440:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    4444:	8f e9       	ldi	r24, 0x9F	; 159
    4446:	94 e0       	ldi	r25, 0x04	; 4
    4448:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    444c:	8d b7       	in	r24, 0x3d	; 61
    444e:	9e b7       	in	r25, 0x3e	; 62
    4450:	4c 96       	adiw	r24, 0x1c	; 28
    4452:	0f b6       	in	r0, 0x3f	; 63
    4454:	f8 94       	cli
    4456:	9e bf       	out	0x3e, r25	; 62
    4458:	0f be       	out	0x3f, r0	; 63
    445a:	8d bf       	out	0x3d, r24	; 61
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    445c:	85 ed       	ldi	r24, 0xD5	; 213
    445e:	91 e0       	ldi	r25, 0x01	; 1
    4460:	0e 94 49 10 	call	0x2092	; 0x2092 <host_mouse_send>
    last_timer = timer_read();
    4464:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <timer_read>
    4468:	90 93 d2 01 	sts	0x01D2, r25
    446c:	80 93 d1 01 	sts	0x01D1, r24
    4470:	08 95       	ret

00004472 <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    4472:	1f 93       	push	r17
    4474:	cf 93       	push	r28
    4476:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    4478:	80 91 d1 01 	lds	r24, 0x01D1
    447c:	90 91 d2 01 	lds	r25, 0x01D2
    4480:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <timer_elapsed>
    4484:	40 91 d4 01 	lds	r20, 0x01D4
    4488:	44 23       	and	r20, r20
    448a:	21 f0       	breq	.+8      	; 0x4494 <mousekey_task+0x22>
    448c:	20 91 12 01 	lds	r18, 0x0112
    4490:	30 e0       	ldi	r19, 0x00	; 0
    4492:	06 c0       	rjmp	.+12     	; 0x44a0 <mousekey_task+0x2e>
    4494:	20 91 13 01 	lds	r18, 0x0113
    4498:	5a e0       	ldi	r21, 0x0A	; 10
    449a:	25 9f       	mul	r18, r21
    449c:	90 01       	movw	r18, r0
    449e:	11 24       	eor	r1, r1
    44a0:	82 17       	cp	r24, r18
    44a2:	93 07       	cpc	r25, r19
    44a4:	08 f4       	brcc	.+2      	; 0x44a8 <mousekey_task+0x36>
    44a6:	82 c0       	rjmp	.+260    	; 0x45ac <mousekey_task+0x13a>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    44a8:	80 91 d6 01 	lds	r24, 0x01D6
    44ac:	10 91 d7 01 	lds	r17, 0x01D7
    44b0:	d0 91 d8 01 	lds	r29, 0x01D8
    44b4:	c0 91 d9 01 	lds	r28, 0x01D9
    44b8:	81 11       	cpse	r24, r1
    44ba:	07 c0       	rjmp	.+14     	; 0x44ca <mousekey_task+0x58>
    44bc:	11 11       	cpse	r17, r1
    44be:	05 c0       	rjmp	.+10     	; 0x44ca <mousekey_task+0x58>
    44c0:	d1 11       	cpse	r29, r1
    44c2:	03 c0       	rjmp	.+6      	; 0x44ca <mousekey_task+0x58>
    44c4:	cc 23       	and	r28, r28
    44c6:	09 f4       	brne	.+2      	; 0x44ca <mousekey_task+0x58>
    44c8:	71 c0       	rjmp	.+226    	; 0x45ac <mousekey_task+0x13a>
        return;

    if (mousekey_repeat != UINT8_MAX)
    44ca:	4f 3f       	cpi	r20, 0xFF	; 255
    44cc:	19 f0       	breq	.+6      	; 0x44d4 <mousekey_task+0x62>
        mousekey_repeat++;
    44ce:	4f 5f       	subi	r20, 0xFF	; 255
    44d0:	40 93 d4 01 	sts	0x01D4, r20


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    44d4:	18 16       	cp	r1, r24
    44d6:	24 f4       	brge	.+8      	; 0x44e0 <mousekey_task+0x6e>
    44d8:	0e 94 3e 20 	call	0x407c	; 0x407c <move_unit>
    44dc:	80 93 d6 01 	sts	0x01D6, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    44e0:	80 91 d6 01 	lds	r24, 0x01D6
    44e4:	87 ff       	sbrs	r24, 7
    44e6:	05 c0       	rjmp	.+10     	; 0x44f2 <mousekey_task+0x80>
    44e8:	0e 94 3e 20 	call	0x407c	; 0x407c <move_unit>
    44ec:	81 95       	neg	r24
    44ee:	80 93 d6 01 	sts	0x01D6, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    44f2:	11 16       	cp	r1, r17
    44f4:	24 f4       	brge	.+8      	; 0x44fe <mousekey_task+0x8c>
    44f6:	0e 94 3e 20 	call	0x407c	; 0x407c <move_unit>
    44fa:	80 93 d7 01 	sts	0x01D7, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    44fe:	80 91 d7 01 	lds	r24, 0x01D7
    4502:	87 ff       	sbrs	r24, 7
    4504:	05 c0       	rjmp	.+10     	; 0x4510 <mousekey_task+0x9e>
    4506:	0e 94 3e 20 	call	0x407c	; 0x407c <move_unit>
    450a:	81 95       	neg	r24
    450c:	80 93 d7 01 	sts	0x01D7, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    4510:	60 91 d6 01 	lds	r22, 0x01D6
    4514:	66 23       	and	r22, r22
    4516:	39 f1       	breq	.+78     	; 0x4566 <mousekey_task+0xf4>
    4518:	10 91 d7 01 	lds	r17, 0x01D7
    451c:	11 23       	and	r17, r17
    451e:	19 f1       	breq	.+70     	; 0x4566 <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    4520:	77 27       	eor	r23, r23
    4522:	67 fd       	sbrc	r22, 7
    4524:	70 95       	com	r23
    4526:	87 2f       	mov	r24, r23
    4528:	97 2f       	mov	r25, r23
    452a:	0e 94 3b 28 	call	0x5076	; 0x5076 <__floatsisf>
    452e:	23 e3       	ldi	r18, 0x33	; 51
    4530:	33 e3       	ldi	r19, 0x33	; 51
    4532:	43 e3       	ldi	r20, 0x33	; 51
    4534:	5f e3       	ldi	r21, 0x3F	; 63
    4536:	0e 94 9f 28 	call	0x513e	; 0x513e <__mulsf3>
    453a:	0e 94 08 28 	call	0x5010	; 0x5010 <__fixsfsi>
    453e:	60 93 d6 01 	sts	0x01D6, r22
        mouse_report.y *= 0.7;
    4542:	61 2f       	mov	r22, r17
    4544:	77 27       	eor	r23, r23
    4546:	67 fd       	sbrc	r22, 7
    4548:	70 95       	com	r23
    454a:	87 2f       	mov	r24, r23
    454c:	97 2f       	mov	r25, r23
    454e:	0e 94 3b 28 	call	0x5076	; 0x5076 <__floatsisf>
    4552:	23 e3       	ldi	r18, 0x33	; 51
    4554:	33 e3       	ldi	r19, 0x33	; 51
    4556:	43 e3       	ldi	r20, 0x33	; 51
    4558:	5f e3       	ldi	r21, 0x3F	; 63
    455a:	0e 94 9f 28 	call	0x513e	; 0x513e <__mulsf3>
    455e:	0e 94 08 28 	call	0x5010	; 0x5010 <__fixsfsi>
    4562:	60 93 d7 01 	sts	0x01D7, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    4566:	1d 16       	cp	r1, r29
    4568:	24 f4       	brge	.+8      	; 0x4572 <mousekey_task+0x100>
    456a:	0e 94 86 20 	call	0x410c	; 0x410c <wheel_unit>
    456e:	80 93 d8 01 	sts	0x01D8, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    4572:	80 91 d8 01 	lds	r24, 0x01D8
    4576:	87 ff       	sbrs	r24, 7
    4578:	05 c0       	rjmp	.+10     	; 0x4584 <mousekey_task+0x112>
    457a:	0e 94 86 20 	call	0x410c	; 0x410c <wheel_unit>
    457e:	81 95       	neg	r24
    4580:	80 93 d8 01 	sts	0x01D8, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    4584:	1c 16       	cp	r1, r28
    4586:	24 f4       	brge	.+8      	; 0x4590 <mousekey_task+0x11e>
    4588:	0e 94 86 20 	call	0x410c	; 0x410c <wheel_unit>
    458c:	80 93 d9 01 	sts	0x01D9, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    4590:	80 91 d9 01 	lds	r24, 0x01D9
    4594:	87 ff       	sbrs	r24, 7
    4596:	05 c0       	rjmp	.+10     	; 0x45a2 <mousekey_task+0x130>
    4598:	0e 94 86 20 	call	0x410c	; 0x410c <wheel_unit>
    459c:	81 95       	neg	r24
    459e:	80 93 d9 01 	sts	0x01D9, r24

    mousekey_send();
}
    45a2:	df 91       	pop	r29
    45a4:	cf 91       	pop	r28
    45a6:	1f 91       	pop	r17
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    45a8:	0c 94 ac 21 	jmp	0x4358	; 0x4358 <mousekey_send>
}
    45ac:	df 91       	pop	r29
    45ae:	cf 91       	pop	r28
    45b0:	1f 91       	pop	r17
    45b2:	08 95       	ret

000045b4 <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    45b4:	e5 ed       	ldi	r30, 0xD5	; 213
    45b6:	f1 e0       	ldi	r31, 0x01	; 1
    45b8:	85 e0       	ldi	r24, 0x05	; 5
    45ba:	df 01       	movw	r26, r30
    45bc:	1d 92       	st	X+, r1
    45be:	8a 95       	dec	r24
    45c0:	e9 f7       	brne	.-6      	; 0x45bc <mousekey_clear+0x8>
    mousekey_repeat = 0;
    45c2:	10 92 d4 01 	sts	0x01D4, r1
    mousekey_accel = 0;
    45c6:	10 92 d3 01 	sts	0x01D3, r1
    45ca:	08 95       	ret

000045cc <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    45cc:	89 ee       	ldi	r24, 0xE9	; 233
    45ce:	96 e0       	ldi	r25, 0x06	; 6
    45d0:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    45d4:	1f 92       	push	r1
    45d6:	81 e0       	ldi	r24, 0x01	; 1
    45d8:	8f 93       	push	r24
    45da:	1f 92       	push	r1
    45dc:	85 e0       	ldi	r24, 0x05	; 5
    45de:	8f 93       	push	r24
    45e0:	8b e9       	ldi	r24, 0x9B	; 155
    45e2:	96 e0       	ldi	r25, 0x06	; 6
    45e4:	9f 93       	push	r25
    45e6:	8f 93       	push	r24
    45e8:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    45ec:	0f 90       	pop	r0
    45ee:	0f 90       	pop	r0
    45f0:	0f 90       	pop	r0
    45f2:	0f 90       	pop	r0
    45f4:	0f 90       	pop	r0
    45f6:	0f 90       	pop	r0
    45f8:	08 95       	ret

000045fa <mousekey_param_inc>:

//#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    45fa:	83 30       	cpi	r24, 0x03	; 3
    45fc:	e9 f1       	breq	.+122    	; 0x4678 <mousekey_param_inc+0x7e>
    45fe:	28 f4       	brcc	.+10     	; 0x460a <mousekey_param_inc+0x10>
    4600:	81 30       	cpi	r24, 0x01	; 1
    4602:	61 f0       	breq	.+24     	; 0x461c <mousekey_param_inc+0x22>
    4604:	82 30       	cpi	r24, 0x02	; 2
    4606:	09 f1       	breq	.+66     	; 0x464a <mousekey_param_inc+0x50>
    4608:	08 95       	ret
    460a:	85 30       	cpi	r24, 0x05	; 5
    460c:	09 f4       	brne	.+2      	; 0x4610 <mousekey_param_inc+0x16>
    460e:	62 c0       	rjmp	.+196    	; 0x46d4 <mousekey_param_inc+0xda>
    4610:	08 f4       	brcc	.+2      	; 0x4614 <mousekey_param_inc+0x1a>
    4612:	49 c0       	rjmp	.+146    	; 0x46a6 <mousekey_param_inc+0xac>
    4614:	86 30       	cpi	r24, 0x06	; 6
    4616:	09 f4       	brne	.+2      	; 0x461a <mousekey_param_inc+0x20>
    4618:	74 c0       	rjmp	.+232    	; 0x4702 <mousekey_param_inc+0x108>
    461a:	08 95       	ret
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    461c:	20 91 13 01 	lds	r18, 0x0113
    4620:	86 2f       	mov	r24, r22
    4622:	90 e0       	ldi	r25, 0x00	; 0
    4624:	82 0f       	add	r24, r18
    4626:	91 1d       	adc	r25, r1
    4628:	8f 3f       	cpi	r24, 0xFF	; 255
    462a:	91 05       	cpc	r25, r1
    462c:	20 f4       	brcc	.+8      	; 0x4636 <mousekey_param_inc+0x3c>
                mk_delay += inc;
    462e:	62 0f       	add	r22, r18
    4630:	60 93 13 01 	sts	0x0113, r22
    4634:	03 c0       	rjmp	.+6      	; 0x463c <mousekey_param_inc+0x42>
            else
                mk_delay = UINT8_MAX;
    4636:	8f ef       	ldi	r24, 0xFF	; 255
    4638:	80 93 13 01 	sts	0x0113, r24
            PRINT_SET_VAL(mk_delay);
    463c:	80 91 13 01 	lds	r24, 0x0113
    4640:	1f 92       	push	r1
    4642:	8f 93       	push	r24
    4644:	84 ed       	ldi	r24, 0xD4	; 212
    4646:	95 e0       	ldi	r25, 0x05	; 5
    4648:	72 c0       	rjmp	.+228    	; 0x472e <mousekey_param_inc+0x134>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    464a:	20 91 12 01 	lds	r18, 0x0112
    464e:	86 2f       	mov	r24, r22
    4650:	90 e0       	ldi	r25, 0x00	; 0
    4652:	82 0f       	add	r24, r18
    4654:	91 1d       	adc	r25, r1
    4656:	8f 3f       	cpi	r24, 0xFF	; 255
    4658:	91 05       	cpc	r25, r1
    465a:	20 f4       	brcc	.+8      	; 0x4664 <mousekey_param_inc+0x6a>
                mk_interval += inc;
    465c:	62 0f       	add	r22, r18
    465e:	60 93 12 01 	sts	0x0112, r22
    4662:	03 c0       	rjmp	.+6      	; 0x466a <mousekey_param_inc+0x70>
            else
                mk_interval = UINT8_MAX;
    4664:	8f ef       	ldi	r24, 0xFF	; 255
    4666:	80 93 12 01 	sts	0x0112, r24
            PRINT_SET_VAL(mk_interval);
    466a:	80 91 12 01 	lds	r24, 0x0112
    466e:	1f 92       	push	r1
    4670:	8f 93       	push	r24
    4672:	82 ec       	ldi	r24, 0xC2	; 194
    4674:	95 e0       	ldi	r25, 0x05	; 5
    4676:	5b c0       	rjmp	.+182    	; 0x472e <mousekey_param_inc+0x134>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    4678:	20 91 11 01 	lds	r18, 0x0111
    467c:	86 2f       	mov	r24, r22
    467e:	90 e0       	ldi	r25, 0x00	; 0
    4680:	82 0f       	add	r24, r18
    4682:	91 1d       	adc	r25, r1
    4684:	8f 3f       	cpi	r24, 0xFF	; 255
    4686:	91 05       	cpc	r25, r1
    4688:	20 f4       	brcc	.+8      	; 0x4692 <mousekey_param_inc+0x98>
                mk_max_speed += inc;
    468a:	62 0f       	add	r22, r18
    468c:	60 93 11 01 	sts	0x0111, r22
    4690:	03 c0       	rjmp	.+6      	; 0x4698 <mousekey_param_inc+0x9e>
            else
                mk_max_speed = UINT8_MAX;
    4692:	8f ef       	ldi	r24, 0xFF	; 255
    4694:	80 93 11 01 	sts	0x0111, r24
            PRINT_SET_VAL(mk_max_speed);
    4698:	80 91 11 01 	lds	r24, 0x0111
    469c:	1f 92       	push	r1
    469e:	8f 93       	push	r24
    46a0:	8f ea       	ldi	r24, 0xAF	; 175
    46a2:	95 e0       	ldi	r25, 0x05	; 5
    46a4:	44 c0       	rjmp	.+136    	; 0x472e <mousekey_param_inc+0x134>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    46a6:	20 91 10 01 	lds	r18, 0x0110
    46aa:	86 2f       	mov	r24, r22
    46ac:	90 e0       	ldi	r25, 0x00	; 0
    46ae:	82 0f       	add	r24, r18
    46b0:	91 1d       	adc	r25, r1
    46b2:	8f 3f       	cpi	r24, 0xFF	; 255
    46b4:	91 05       	cpc	r25, r1
    46b6:	20 f4       	brcc	.+8      	; 0x46c0 <mousekey_param_inc+0xc6>
                mk_time_to_max += inc;
    46b8:	62 0f       	add	r22, r18
    46ba:	60 93 10 01 	sts	0x0110, r22
    46be:	03 c0       	rjmp	.+6      	; 0x46c6 <mousekey_param_inc+0xcc>
            else
                mk_time_to_max = UINT8_MAX;
    46c0:	8f ef       	ldi	r24, 0xFF	; 255
    46c2:	80 93 10 01 	sts	0x0110, r24
            PRINT_SET_VAL(mk_time_to_max);
    46c6:	80 91 10 01 	lds	r24, 0x0110
    46ca:	1f 92       	push	r1
    46cc:	8f 93       	push	r24
    46ce:	8a e9       	ldi	r24, 0x9A	; 154
    46d0:	95 e0       	ldi	r25, 0x05	; 5
    46d2:	2d c0       	rjmp	.+90     	; 0x472e <mousekey_param_inc+0x134>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    46d4:	20 91 0f 01 	lds	r18, 0x010F
    46d8:	86 2f       	mov	r24, r22
    46da:	90 e0       	ldi	r25, 0x00	; 0
    46dc:	82 0f       	add	r24, r18
    46de:	91 1d       	adc	r25, r1
    46e0:	8f 3f       	cpi	r24, 0xFF	; 255
    46e2:	91 05       	cpc	r25, r1
    46e4:	20 f4       	brcc	.+8      	; 0x46ee <mousekey_param_inc+0xf4>
                mk_wheel_max_speed += inc;
    46e6:	62 0f       	add	r22, r18
    46e8:	60 93 0f 01 	sts	0x010F, r22
    46ec:	03 c0       	rjmp	.+6      	; 0x46f4 <mousekey_param_inc+0xfa>
            else
                mk_wheel_max_speed = UINT8_MAX;
    46ee:	8f ef       	ldi	r24, 0xFF	; 255
    46f0:	80 93 0f 01 	sts	0x010F, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    46f4:	80 91 0f 01 	lds	r24, 0x010F
    46f8:	1f 92       	push	r1
    46fa:	8f 93       	push	r24
    46fc:	81 e8       	ldi	r24, 0x81	; 129
    46fe:	95 e0       	ldi	r25, 0x05	; 5
    4700:	16 c0       	rjmp	.+44     	; 0x472e <mousekey_param_inc+0x134>
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    4702:	20 91 0e 01 	lds	r18, 0x010E
    4706:	86 2f       	mov	r24, r22
    4708:	90 e0       	ldi	r25, 0x00	; 0
    470a:	82 0f       	add	r24, r18
    470c:	91 1d       	adc	r25, r1
    470e:	8f 3f       	cpi	r24, 0xFF	; 255
    4710:	91 05       	cpc	r25, r1
    4712:	20 f4       	brcc	.+8      	; 0x471c <mousekey_param_inc+0x122>
                mk_wheel_time_to_max += inc;
    4714:	62 0f       	add	r22, r18
    4716:	60 93 0e 01 	sts	0x010E, r22
    471a:	03 c0       	rjmp	.+6      	; 0x4722 <mousekey_param_inc+0x128>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    471c:	8f ef       	ldi	r24, 0xFF	; 255
    471e:	80 93 0e 01 	sts	0x010E, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4722:	80 91 0e 01 	lds	r24, 0x010E
    4726:	1f 92       	push	r1
    4728:	8f 93       	push	r24
    472a:	86 e6       	ldi	r24, 0x66	; 102
    472c:	95 e0       	ldi	r25, 0x05	; 5
    472e:	9f 93       	push	r25
    4730:	8f 93       	push	r24
    4732:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
            break;
    4736:	0f 90       	pop	r0
    4738:	0f 90       	pop	r0
    473a:	0f 90       	pop	r0
    473c:	0f 90       	pop	r0
    473e:	08 95       	ret

00004740 <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    4740:	83 30       	cpi	r24, 0x03	; 3
    4742:	81 f1       	breq	.+96     	; 0x47a4 <mousekey_param_dec+0x64>
    4744:	28 f4       	brcc	.+10     	; 0x4750 <mousekey_param_dec+0x10>
    4746:	81 30       	cpi	r24, 0x01	; 1
    4748:	59 f0       	breq	.+22     	; 0x4760 <mousekey_param_dec+0x20>
    474a:	82 30       	cpi	r24, 0x02	; 2
    474c:	d1 f0       	breq	.+52     	; 0x4782 <mousekey_param_dec+0x42>
    474e:	08 95       	ret
    4750:	85 30       	cpi	r24, 0x05	; 5
    4752:	09 f4       	brne	.+2      	; 0x4756 <mousekey_param_dec+0x16>
    4754:	49 c0       	rjmp	.+146    	; 0x47e8 <mousekey_param_dec+0xa8>
    4756:	b8 f1       	brcs	.+110    	; 0x47c6 <mousekey_param_dec+0x86>
    4758:	86 30       	cpi	r24, 0x06	; 6
    475a:	09 f4       	brne	.+2      	; 0x475e <mousekey_param_dec+0x1e>
    475c:	56 c0       	rjmp	.+172    	; 0x480a <mousekey_param_dec+0xca>
    475e:	08 95       	ret
        case 1:
            if (mk_delay > dec)
    4760:	80 91 13 01 	lds	r24, 0x0113
    4764:	68 17       	cp	r22, r24
    4766:	20 f4       	brcc	.+8      	; 0x4770 <mousekey_param_dec+0x30>
                mk_delay -= dec;
    4768:	86 1b       	sub	r24, r22
    476a:	80 93 13 01 	sts	0x0113, r24
    476e:	02 c0       	rjmp	.+4      	; 0x4774 <mousekey_param_dec+0x34>
            else
                mk_delay = 0;
    4770:	10 92 13 01 	sts	0x0113, r1
            PRINT_SET_VAL(mk_delay);
    4774:	80 91 13 01 	lds	r24, 0x0113
    4778:	1f 92       	push	r1
    477a:	8f 93       	push	r24
    477c:	87 e5       	ldi	r24, 0x57	; 87
    477e:	95 e0       	ldi	r25, 0x05	; 5
    4780:	54 c0       	rjmp	.+168    	; 0x482a <mousekey_param_dec+0xea>
            break;
        case 2:
            if (mk_interval > dec)
    4782:	80 91 12 01 	lds	r24, 0x0112
    4786:	68 17       	cp	r22, r24
    4788:	20 f4       	brcc	.+8      	; 0x4792 <mousekey_param_dec+0x52>
                mk_interval -= dec;
    478a:	86 1b       	sub	r24, r22
    478c:	80 93 12 01 	sts	0x0112, r24
    4790:	02 c0       	rjmp	.+4      	; 0x4796 <mousekey_param_dec+0x56>
            else
                mk_interval = 0;
    4792:	10 92 12 01 	sts	0x0112, r1
            PRINT_SET_VAL(mk_interval);
    4796:	80 91 12 01 	lds	r24, 0x0112
    479a:	1f 92       	push	r1
    479c:	8f 93       	push	r24
    479e:	85 e4       	ldi	r24, 0x45	; 69
    47a0:	95 e0       	ldi	r25, 0x05	; 5
    47a2:	43 c0       	rjmp	.+134    	; 0x482a <mousekey_param_dec+0xea>
            break;
        case 3:
            if (mk_max_speed > dec)
    47a4:	80 91 11 01 	lds	r24, 0x0111
    47a8:	68 17       	cp	r22, r24
    47aa:	20 f4       	brcc	.+8      	; 0x47b4 <mousekey_param_dec+0x74>
                mk_max_speed -= dec;
    47ac:	86 1b       	sub	r24, r22
    47ae:	80 93 11 01 	sts	0x0111, r24
    47b2:	02 c0       	rjmp	.+4      	; 0x47b8 <mousekey_param_dec+0x78>
            else
                mk_max_speed = 0;
    47b4:	10 92 11 01 	sts	0x0111, r1
            PRINT_SET_VAL(mk_max_speed);
    47b8:	80 91 11 01 	lds	r24, 0x0111
    47bc:	1f 92       	push	r1
    47be:	8f 93       	push	r24
    47c0:	82 e3       	ldi	r24, 0x32	; 50
    47c2:	95 e0       	ldi	r25, 0x05	; 5
    47c4:	32 c0       	rjmp	.+100    	; 0x482a <mousekey_param_dec+0xea>
            break;
        case 4:
            if (mk_time_to_max > dec)
    47c6:	80 91 10 01 	lds	r24, 0x0110
    47ca:	68 17       	cp	r22, r24
    47cc:	20 f4       	brcc	.+8      	; 0x47d6 <mousekey_param_dec+0x96>
                mk_time_to_max -= dec;
    47ce:	86 1b       	sub	r24, r22
    47d0:	80 93 10 01 	sts	0x0110, r24
    47d4:	02 c0       	rjmp	.+4      	; 0x47da <mousekey_param_dec+0x9a>
            else
                mk_time_to_max = 0;
    47d6:	10 92 10 01 	sts	0x0110, r1
            PRINT_SET_VAL(mk_time_to_max);
    47da:	80 91 10 01 	lds	r24, 0x0110
    47de:	1f 92       	push	r1
    47e0:	8f 93       	push	r24
    47e2:	8d e1       	ldi	r24, 0x1D	; 29
    47e4:	95 e0       	ldi	r25, 0x05	; 5
    47e6:	21 c0       	rjmp	.+66     	; 0x482a <mousekey_param_dec+0xea>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    47e8:	80 91 0f 01 	lds	r24, 0x010F
    47ec:	68 17       	cp	r22, r24
    47ee:	20 f4       	brcc	.+8      	; 0x47f8 <mousekey_param_dec+0xb8>
                mk_wheel_max_speed -= dec;
    47f0:	86 1b       	sub	r24, r22
    47f2:	80 93 0f 01 	sts	0x010F, r24
    47f6:	02 c0       	rjmp	.+4      	; 0x47fc <mousekey_param_dec+0xbc>
            else
                mk_wheel_max_speed = 0;
    47f8:	10 92 0f 01 	sts	0x010F, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    47fc:	80 91 0f 01 	lds	r24, 0x010F
    4800:	1f 92       	push	r1
    4802:	8f 93       	push	r24
    4804:	84 e0       	ldi	r24, 0x04	; 4
    4806:	95 e0       	ldi	r25, 0x05	; 5
    4808:	10 c0       	rjmp	.+32     	; 0x482a <mousekey_param_dec+0xea>
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    480a:	80 91 0e 01 	lds	r24, 0x010E
    480e:	68 17       	cp	r22, r24
    4810:	20 f4       	brcc	.+8      	; 0x481a <mousekey_param_dec+0xda>
                mk_wheel_time_to_max -= dec;
    4812:	86 1b       	sub	r24, r22
    4814:	80 93 0e 01 	sts	0x010E, r24
    4818:	02 c0       	rjmp	.+4      	; 0x481e <mousekey_param_dec+0xde>
            else
                mk_wheel_time_to_max = 0;
    481a:	10 92 0e 01 	sts	0x010E, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    481e:	80 91 0e 01 	lds	r24, 0x010E
    4822:	1f 92       	push	r1
    4824:	8f 93       	push	r24
    4826:	89 ee       	ldi	r24, 0xE9	; 233
    4828:	94 e0       	ldi	r25, 0x04	; 4
    482a:	9f 93       	push	r25
    482c:	8f 93       	push	r24
    482e:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
            break;
    4832:	0f 90       	pop	r0
    4834:	0f 90       	pop	r0
    4836:	0f 90       	pop	r0
    4838:	0f 90       	pop	r0
    483a:	08 95       	ret

0000483c <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    483c:	cf 93       	push	r28
    483e:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    4840:	1f 92       	push	r1
    4842:	8f 93       	push	r24
    4844:	2e ee       	ldi	r18, 0xEE	; 238
    4846:	37 e0       	ldi	r19, 0x07	; 7
    4848:	3f 93       	push	r19
    484a:	2f 93       	push	r18
    484c:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    default_layer_set(1UL<<layer);
    4850:	61 e0       	ldi	r22, 0x01	; 1
    4852:	70 e0       	ldi	r23, 0x00	; 0
    4854:	80 e0       	ldi	r24, 0x00	; 0
    4856:	90 e0       	ldi	r25, 0x00	; 0
    4858:	04 c0       	rjmp	.+8      	; 0x4862 <switch_default_layer+0x26>
    485a:	66 0f       	add	r22, r22
    485c:	77 1f       	adc	r23, r23
    485e:	88 1f       	adc	r24, r24
    4860:	99 1f       	adc	r25, r25
    4862:	ca 95       	dec	r28
    4864:	d2 f7       	brpl	.-12     	; 0x485a <switch_default_layer+0x1e>
    4866:	0e 94 69 19 	call	0x32d2	; 0x32d2 <default_layer_set>
    clear_keyboard();
    486a:	0f 90       	pop	r0
    486c:	0f 90       	pop	r0
    486e:	0f 90       	pop	r0
    4870:	0f 90       	pop	r0
}
    4872:	cf 91       	pop	r28

static void switch_default_layer(uint8_t layer)
{
    xprintf("L%d\n", layer);
    default_layer_set(1UL<<layer);
    clear_keyboard();
    4874:	0c 94 6f 15 	jmp	0x2ade	; 0x2ade <clear_keyboard>

00004878 <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    4878:	cf 93       	push	r28
    static host_driver_t *host_driver = 0;
    switch (code) {
    487a:	8b 31       	cpi	r24, 0x1B	; 27
    487c:	09 f4       	brne	.+2      	; 0x4880 <command_common+0x8>
    487e:	cb c1       	rjmp	.+918    	; 0x4c16 <command_common+0x39e>
    4880:	08 f0       	brcs	.+2      	; 0x4884 <command_common+0xc>
    4882:	49 c0       	rjmp	.+146    	; 0x4916 <command_common+0x9e>
    4884:	8e 30       	cpi	r24, 0x0E	; 14
    4886:	09 f4       	brne	.+2      	; 0x488a <command_common+0x12>
    4888:	d9 c1       	rjmp	.+946    	; 0x4c3c <command_common+0x3c4>
    488a:	00 f5       	brcc	.+64     	; 0x48cc <command_common+0x54>
    488c:	87 30       	cpi	r24, 0x07	; 7
    488e:	09 f4       	brne	.+2      	; 0x4892 <command_common+0x1a>
    4890:	a9 c1       	rjmp	.+850    	; 0x4be4 <command_common+0x36c>
    4892:	a8 f4       	brcc	.+42     	; 0x48be <command_common+0x46>
    4894:	86 30       	cpi	r24, 0x06	; 6
    4896:	09 f0       	breq	.+2      	; 0x489a <command_common+0x22>
    4898:	5d c2       	rjmp	.+1210   	; 0x4d54 <command_common+0x4dc>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    489a:	80 91 cb 01 	lds	r24, 0x01CB
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    489e:	81 7f       	andi	r24, 0xF1	; 241
    48a0:	8e 7f       	andi	r24, 0xFE	; 254
    48a2:	80 93 cb 01 	sts	0x01CB, r24
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    48a6:	83 ef       	ldi	r24, 0xF3	; 243
    48a8:	97 e0       	ldi	r25, 0x07	; 7
    48aa:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
            debug_matrix   = false;
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
            command_console_help();
            print("C> ");
    48ae:	81 e2       	ldi	r24, 0x21	; 33
    48b0:	9c e0       	ldi	r25, 0x0C	; 12
    48b2:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
            command_state = CONSOLE;
    48b6:	81 e0       	ldi	r24, 0x01	; 1
    48b8:	80 93 db 01 	sts	0x01DB, r24
    48bc:	91 c1       	rjmp	.+802    	; 0x4be0 <command_common+0x368>
#endif

static bool command_common(uint8_t code)
{
    static host_driver_t *host_driver = 0;
    switch (code) {
    48be:	88 30       	cpi	r24, 0x08	; 8
    48c0:	09 f4       	brne	.+2      	; 0x48c4 <command_common+0x4c>
    48c2:	5b c0       	rjmp	.+182    	; 0x497a <command_common+0x102>
    48c4:	8b 30       	cpi	r24, 0x0B	; 11
    48c6:	09 f4       	brne	.+2      	; 0x48ca <command_common+0x52>
    48c8:	87 c1       	rjmp	.+782    	; 0x4bd8 <command_common+0x360>
    48ca:	44 c2       	rjmp	.+1160   	; 0x4d54 <command_common+0x4dc>
    48cc:	81 31       	cpi	r24, 0x11	; 17
    48ce:	09 f4       	brne	.+2      	; 0x48d2 <command_common+0x5a>
    48d0:	29 c2       	rjmp	.+1106   	; 0x4d24 <command_common+0x4ac>
    48d2:	20 f4       	brcc	.+8      	; 0x48dc <command_common+0x64>
    48d4:	80 31       	cpi	r24, 0x10	; 16
    48d6:	09 f4       	brne	.+2      	; 0x48da <command_common+0x62>
    48d8:	c4 c1       	rjmp	.+904    	; 0x4c62 <command_common+0x3ea>
    48da:	3c c2       	rjmp	.+1144   	; 0x4d54 <command_common+0x4dc>
    48dc:	86 31       	cpi	r24, 0x16	; 22
    48de:	09 f4       	brne	.+2      	; 0x48e2 <command_common+0x6a>
    48e0:	da c1       	rjmp	.+948    	; 0x4c96 <command_common+0x41e>
    48e2:	89 31       	cpi	r24, 0x19	; 25
    48e4:	09 f0       	breq	.+2      	; 0x48e8 <command_common+0x70>
    48e6:	36 c2       	rjmp	.+1132   	; 0x4d54 <command_common+0x4dc>
            } else {
                print("\nmouse: off\n");
            }
            break;
        case KC_V: // print version & information
            print("\n\t- Version -\n");
    48e8:	85 e9       	ldi	r24, 0x95	; 149
    48ea:	9b e0       	ldi	r25, 0x0B	; 11
    48ec:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    48f0:	88 e6       	ldi	r24, 0x68	; 104
    48f2:	9b e0       	ldi	r25, 0x0B	; 11
    48f4:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    48f8:	81 e3       	ldi	r24, 0x31	; 49
    48fa:	9b e0       	ldi	r25, 0x0B	; 11
    48fc:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    4900:	84 e0       	ldi	r24, 0x04	; 4
    4902:	9b e0       	ldi	r25, 0x0B	; 11
    4904:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
            /* build options */
            print("OPTIONS:"
    4908:	80 ec       	ldi	r24, 0xC0	; 192
    490a:	9a e0       	ldi	r25, 0x0A	; 10
    490c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    4910:	82 e9       	ldi	r24, 0x92	; 146
    4912:	9a e0       	ldi	r25, 0x0A	; 10
    4914:	63 c1       	rjmp	.+710    	; 0x4bdc <command_common+0x364>
#endif

static bool command_common(uint8_t code)
{
    static host_driver_t *host_driver = 0;
    switch (code) {
    4916:	85 33       	cpi	r24, 0x35	; 53
    4918:	09 f4       	brne	.+2      	; 0x491c <command_common+0xa4>
    491a:	16 c2       	rjmp	.+1068   	; 0x4d48 <command_common+0x4d0>
    491c:	68 f4       	brcc	.+26     	; 0x4938 <command_common+0xc0>
    491e:	87 32       	cpi	r24, 0x27	; 39
    4920:	09 f4       	brne	.+2      	; 0x4924 <command_common+0xac>
    4922:	12 c2       	rjmp	.+1060   	; 0x4d48 <command_common+0x4d0>
    4924:	28 f4       	brcc	.+10     	; 0x4930 <command_common+0xb8>
    4926:	8e 31       	cpi	r24, 0x1E	; 30
    4928:	08 f4       	brcc	.+2      	; 0x492c <command_common+0xb4>
    492a:	14 c2       	rjmp	.+1064   	; 0x4d54 <command_common+0x4dc>
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    492c:	8d 51       	subi	r24, 0x1D	; 29
    492e:	0f c2       	rjmp	.+1054   	; 0x4d4e <command_common+0x4d6>
#endif

static bool command_common(uint8_t code)
{
    static host_driver_t *host_driver = 0;
    switch (code) {
    4930:	89 32       	cpi	r24, 0x29	; 41
    4932:	09 f4       	brne	.+2      	; 0x4936 <command_common+0xbe>
    4934:	09 c2       	rjmp	.+1042   	; 0x4d48 <command_common+0x4d0>
    4936:	0e c2       	rjmp	.+1052   	; 0x4d54 <command_common+0x4dc>
    4938:	83 34       	cpi	r24, 0x43	; 67
    493a:	38 f4       	brcc	.+14     	; 0x494a <command_common+0xd2>
    493c:	8a 33       	cpi	r24, 0x3A	; 58
    493e:	08 f0       	brcs	.+2      	; 0x4942 <command_common+0xca>
    4940:	05 c2       	rjmp	.+1034   	; 0x4d4c <command_common+0x4d4>
    4942:	88 33       	cpi	r24, 0x38	; 56
    4944:	09 f4       	brne	.+2      	; 0x4948 <command_common+0xd0>
    4946:	48 c1       	rjmp	.+656    	; 0x4bd8 <command_common+0x360>
    4948:	05 c2       	rjmp	.+1034   	; 0x4d54 <command_common+0x4dc>
    494a:	83 34       	cpi	r24, 0x43	; 67
    494c:	09 f4       	brne	.+2      	; 0x4950 <command_common+0xd8>
    494e:	fc c1       	rjmp	.+1016   	; 0x4d48 <command_common+0x4d0>
    4950:	88 34       	cpi	r24, 0x48	; 72
    4952:	09 f0       	breq	.+2      	; 0x4956 <command_common+0xde>
    4954:	ff c1       	rjmp	.+1022   	; 0x4d54 <command_common+0x4dc>
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
            break;
        case KC_PAUSE:
            clear_keyboard();
    4956:	0e 94 6f 15 	call	0x2ade	; 0x2ade <clear_keyboard>
            print("\n\nbootloader... ");
    495a:	80 e1       	ldi	r24, 0x10	; 16
    495c:	9c e0       	ldi	r25, 0x0C	; 12
    495e:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    4962:	9f ef       	ldi	r25, 0xFF	; 255
    4964:	23 ed       	ldi	r18, 0xD3	; 211
    4966:	80 e3       	ldi	r24, 0x30	; 48
    4968:	91 50       	subi	r25, 0x01	; 1
    496a:	20 40       	sbci	r18, 0x00	; 0
    496c:	80 40       	sbci	r24, 0x00	; 0
    496e:	e1 f7       	brne	.-8      	; 0x4968 <command_common+0xf0>
    4970:	00 c0       	rjmp	.+0      	; 0x4972 <command_common+0xfa>
    4972:	00 00       	nop
            _delay_ms(1000);
            bootloader_jump(); // not return
    4974:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <bootloader_jump>
    4978:	33 c1       	rjmp	.+614    	; 0x4be0 <command_common+0x368>
            led_set(host_keyboard_leds());
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    497a:	85 e2       	ldi	r24, 0x25	; 37
    497c:	9c e0       	ldi	r25, 0x0C	; 12
    497e:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    4982:	82 ef       	ldi	r24, 0xF2	; 242
    4984:	99 e0       	ldi	r25, 0x09	; 9
    4986:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    498a:	0e 94 2c 20 	call	0x4058	; 0x4058 <eeconfig_read_default_layer>
    498e:	1f 92       	push	r1
    4990:	8f 93       	push	r24
    4992:	8f ee       	ldi	r24, 0xEF	; 239
    4994:	99 e0       	ldi	r25, 0x09	; 9
    4996:	9f 93       	push	r25
    4998:	8f 93       	push	r24
    499a:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    499e:	8d ee       	ldi	r24, 0xED	; 237
    49a0:	99 e0       	ldi	r25, 0x09	; 9
    49a2:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    49a6:	0e 94 23 20 	call	0x4046	; 0x4046 <eeconfig_read_debug>
    49aa:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    49ac:	8a ed       	ldi	r24, 0xDA	; 218
    49ae:	99 e0       	ldi	r25, 0x09	; 9
    49b0:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    49b4:	1f 92       	push	r1
    49b6:	cf 93       	push	r28
    49b8:	25 ed       	ldi	r18, 0xD5	; 213
    49ba:	39 e0       	ldi	r19, 0x09	; 9
    49bc:	3f 93       	push	r19
    49be:	2f 93       	push	r18
    49c0:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    49c4:	83 ed       	ldi	r24, 0xD3	; 211
    49c6:	99 e0       	ldi	r25, 0x09	; 9
    49c8:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    49cc:	89 ec       	ldi	r24, 0xC9	; 201
    49ce:	99 e0       	ldi	r25, 0x09	; 9
    49d0:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    49d4:	8c 2f       	mov	r24, r28
    49d6:	81 70       	andi	r24, 0x01	; 1
    49d8:	1f 92       	push	r1
    49da:	8f 93       	push	r24
    49dc:	26 ec       	ldi	r18, 0xC6	; 198
    49de:	39 e0       	ldi	r19, 0x09	; 9
    49e0:	3f 93       	push	r19
    49e2:	2f 93       	push	r18
    49e4:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    49e8:	84 ec       	ldi	r24, 0xC4	; 196
    49ea:	99 e0       	ldi	r25, 0x09	; 9
    49ec:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    49f0:	8a eb       	ldi	r24, 0xBA	; 186
    49f2:	99 e0       	ldi	r25, 0x09	; 9
    49f4:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    49f8:	c1 fb       	bst	r28, 1
    49fa:	88 27       	eor	r24, r24
    49fc:	80 f9       	bld	r24, 0
    49fe:	1f 92       	push	r1
    4a00:	8f 93       	push	r24
    4a02:	27 eb       	ldi	r18, 0xB7	; 183
    4a04:	39 e0       	ldi	r19, 0x09	; 9
    4a06:	3f 93       	push	r19
    4a08:	2f 93       	push	r18
    4a0a:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    4a0e:	85 eb       	ldi	r24, 0xB5	; 181
    4a10:	99 e0       	ldi	r25, 0x09	; 9
    4a12:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    4a16:	89 ea       	ldi	r24, 0xA9	; 169
    4a18:	99 e0       	ldi	r25, 0x09	; 9
    4a1a:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    4a1e:	c2 fb       	bst	r28, 2
    4a20:	88 27       	eor	r24, r24
    4a22:	80 f9       	bld	r24, 0
    4a24:	1f 92       	push	r1
    4a26:	8f 93       	push	r24
    4a28:	26 ea       	ldi	r18, 0xA6	; 166
    4a2a:	39 e0       	ldi	r19, 0x09	; 9
    4a2c:	3f 93       	push	r19
    4a2e:	2f 93       	push	r18
    4a30:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    4a34:	84 ea       	ldi	r24, 0xA4	; 164
    4a36:	99 e0       	ldi	r25, 0x09	; 9
    4a38:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    4a3c:	8b e9       	ldi	r24, 0x9B	; 155
    4a3e:	99 e0       	ldi	r25, 0x09	; 9
    4a40:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    4a44:	c3 fb       	bst	r28, 3
    4a46:	cc 27       	eor	r28, r28
    4a48:	c0 f9       	bld	r28, 0
    4a4a:	1f 92       	push	r1
    4a4c:	cf 93       	push	r28
    4a4e:	88 e9       	ldi	r24, 0x98	; 152
    4a50:	99 e0       	ldi	r25, 0x09	; 9
    4a52:	9f 93       	push	r25
    4a54:	8f 93       	push	r24
    4a56:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    4a5a:	86 e9       	ldi	r24, 0x96	; 150
    4a5c:	99 e0       	ldi	r25, 0x09	; 9
    4a5e:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    4a62:	0e 94 35 20 	call	0x406a	; 0x406a <eeconfig_read_keymap>
    4a66:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    4a68:	82 e8       	ldi	r24, 0x82	; 130
    4a6a:	99 e0       	ldi	r25, 0x09	; 9
    4a6c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    4a70:	1f 92       	push	r1
    4a72:	cf 93       	push	r28
    4a74:	2d e7       	ldi	r18, 0x7D	; 125
    4a76:	39 e0       	ldi	r19, 0x09	; 9
    4a78:	3f 93       	push	r19
    4a7a:	2f 93       	push	r18
    4a7c:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    4a80:	8b e7       	ldi	r24, 0x7B	; 123
    4a82:	99 e0       	ldi	r25, 0x09	; 9
    4a84:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    4a88:	82 e6       	ldi	r24, 0x62	; 98
    4a8a:	99 e0       	ldi	r25, 0x09	; 9
    4a8c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    4a90:	8c 2f       	mov	r24, r28
    4a92:	81 70       	andi	r24, 0x01	; 1
    4a94:	1f 92       	push	r1
    4a96:	8f 93       	push	r24
    4a98:	2f e5       	ldi	r18, 0x5F	; 95
    4a9a:	39 e0       	ldi	r19, 0x09	; 9
    4a9c:	3f 93       	push	r19
    4a9e:	2f 93       	push	r18
    4aa0:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    4aa4:	8d b7       	in	r24, 0x3d	; 61
    4aa6:	9e b7       	in	r25, 0x3e	; 62
    4aa8:	80 96       	adiw	r24, 0x20	; 32
    4aaa:	0f b6       	in	r0, 0x3f	; 63
    4aac:	f8 94       	cli
    4aae:	9e bf       	out	0x3e, r25	; 62
    4ab0:	0f be       	out	0x3f, r0	; 63
    4ab2:	8d bf       	out	0x3d, r24	; 61
    4ab4:	8d e5       	ldi	r24, 0x5D	; 93
    4ab6:	99 e0       	ldi	r25, 0x09	; 9
    4ab8:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    4abc:	86 e4       	ldi	r24, 0x46	; 70
    4abe:	99 e0       	ldi	r25, 0x09	; 9
    4ac0:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    4ac4:	c1 fb       	bst	r28, 1
    4ac6:	88 27       	eor	r24, r24
    4ac8:	80 f9       	bld	r24, 0
    4aca:	1f 92       	push	r1
    4acc:	8f 93       	push	r24
    4ace:	23 e4       	ldi	r18, 0x43	; 67
    4ad0:	39 e0       	ldi	r19, 0x09	; 9
    4ad2:	3f 93       	push	r19
    4ad4:	2f 93       	push	r18
    4ad6:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    4ada:	81 e4       	ldi	r24, 0x41	; 65
    4adc:	99 e0       	ldi	r25, 0x09	; 9
    4ade:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    4ae2:	8f e2       	ldi	r24, 0x2F	; 47
    4ae4:	99 e0       	ldi	r25, 0x09	; 9
    4ae6:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    4aea:	c2 fb       	bst	r28, 2
    4aec:	88 27       	eor	r24, r24
    4aee:	80 f9       	bld	r24, 0
    4af0:	1f 92       	push	r1
    4af2:	8f 93       	push	r24
    4af4:	2c e2       	ldi	r18, 0x2C	; 44
    4af6:	39 e0       	ldi	r19, 0x09	; 9
    4af8:	3f 93       	push	r19
    4afa:	2f 93       	push	r18
    4afc:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    4b00:	8a e2       	ldi	r24, 0x2A	; 42
    4b02:	99 e0       	ldi	r25, 0x09	; 9
    4b04:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    4b08:	88 e1       	ldi	r24, 0x18	; 24
    4b0a:	99 e0       	ldi	r25, 0x09	; 9
    4b0c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    4b10:	c3 fb       	bst	r28, 3
    4b12:	88 27       	eor	r24, r24
    4b14:	80 f9       	bld	r24, 0
    4b16:	1f 92       	push	r1
    4b18:	8f 93       	push	r24
    4b1a:	25 e1       	ldi	r18, 0x15	; 21
    4b1c:	39 e0       	ldi	r19, 0x09	; 9
    4b1e:	3f 93       	push	r19
    4b20:	2f 93       	push	r18
    4b22:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    4b26:	83 e1       	ldi	r24, 0x13	; 19
    4b28:	99 e0       	ldi	r25, 0x09	; 9
    4b2a:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    4b2e:	89 e0       	ldi	r24, 0x09	; 9
    4b30:	99 e0       	ldi	r25, 0x09	; 9
    4b32:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    4b36:	c4 fb       	bst	r28, 4
    4b38:	88 27       	eor	r24, r24
    4b3a:	80 f9       	bld	r24, 0
    4b3c:	1f 92       	push	r1
    4b3e:	8f 93       	push	r24
    4b40:	26 e0       	ldi	r18, 0x06	; 6
    4b42:	39 e0       	ldi	r19, 0x09	; 9
    4b44:	3f 93       	push	r19
    4b46:	2f 93       	push	r18
    4b48:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    4b4c:	84 e0       	ldi	r24, 0x04	; 4
    4b4e:	99 e0       	ldi	r25, 0x09	; 9
    4b50:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    4b54:	82 ef       	ldi	r24, 0xF2	; 242
    4b56:	98 e0       	ldi	r25, 0x08	; 8
    4b58:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    4b5c:	c5 fb       	bst	r28, 5
    4b5e:	88 27       	eor	r24, r24
    4b60:	80 f9       	bld	r24, 0
    4b62:	1f 92       	push	r1
    4b64:	8f 93       	push	r24
    4b66:	2f ee       	ldi	r18, 0xEF	; 239
    4b68:	38 e0       	ldi	r19, 0x08	; 8
    4b6a:	3f 93       	push	r19
    4b6c:	2f 93       	push	r18
    4b6e:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    4b72:	8d ee       	ldi	r24, 0xED	; 237
    4b74:	98 e0       	ldi	r25, 0x08	; 8
    4b76:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    4b7a:	81 ed       	ldi	r24, 0xD1	; 209
    4b7c:	98 e0       	ldi	r25, 0x08	; 8
    4b7e:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    4b82:	c6 fb       	bst	r28, 6
    4b84:	88 27       	eor	r24, r24
    4b86:	80 f9       	bld	r24, 0
    4b88:	1f 92       	push	r1
    4b8a:	8f 93       	push	r24
    4b8c:	2e ec       	ldi	r18, 0xCE	; 206
    4b8e:	38 e0       	ldi	r19, 0x08	; 8
    4b90:	3f 93       	push	r19
    4b92:	2f 93       	push	r18
    4b94:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    4b98:	8c ec       	ldi	r24, 0xCC	; 204
    4b9a:	98 e0       	ldi	r25, 0x08	; 8
    4b9c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    4ba0:	84 ec       	ldi	r24, 0xC4	; 196
    4ba2:	98 e0       	ldi	r25, 0x08	; 8
    4ba4:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    4ba8:	c7 fb       	bst	r28, 7
    4baa:	cc 27       	eor	r28, r28
    4bac:	c0 f9       	bld	r28, 0
    4bae:	1f 92       	push	r1
    4bb0:	cf 93       	push	r28
    4bb2:	81 ec       	ldi	r24, 0xC1	; 193
    4bb4:	98 e0       	ldi	r25, 0x08	; 8
    4bb6:	9f 93       	push	r25
    4bb8:	8f 93       	push	r24
    4bba:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    4bbe:	8f eb       	ldi	r24, 0xBF	; 191
    4bc0:	98 e0       	ldi	r25, 0x08	; 8
    4bc2:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    4bc6:	8d b7       	in	r24, 0x3d	; 61
    4bc8:	9e b7       	in	r25, 0x3e	; 62
    4bca:	4c 96       	adiw	r24, 0x1c	; 28
    4bcc:	0f b6       	in	r0, 0x3f	; 63
    4bce:	f8 94       	cli
    4bd0:	9e bf       	out	0x3e, r25	; 62
    4bd2:	0f be       	out	0x3f, r0	; 63
    4bd4:	8d bf       	out	0x3d, r24	; 61
    4bd6:	04 c0       	rjmp	.+8      	; 0x4be0 <command_common+0x368>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\t- Magic -\n"
    4bd8:	8a e1       	ldi	r24, 0x1A	; 26
    4bda:	98 e0       	ldi	r25, 0x08	; 8
    4bdc:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
            break;
        default:
            print("?");
            return false;
    }
    return true;
    4be0:	c1 e0       	ldi	r28, 0x01	; 1
    4be2:	bd c0       	rjmp	.+378    	; 0x4d5e <command_common+0x4e6>
            print("\n\nbootloader... ");
            _delay_ms(1000);
            bootloader_jump(); // not return
            break;
        case KC_D:
            if (debug_enable) {
    4be4:	80 91 cb 01 	lds	r24, 0x01CB
    4be8:	c8 2f       	mov	r28, r24
    4bea:	c1 70       	andi	r28, 0x01	; 1
    4bec:	80 ff       	sbrs	r24, 0
    4bee:	09 c0       	rjmp	.+18     	; 0x4c02 <command_common+0x38a>
                print("\ndebug: off\n");
    4bf0:	83 e0       	ldi	r24, 0x03	; 3
    4bf2:	9c e0       	ldi	r25, 0x0C	; 12
    4bf4:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
                debug_matrix   = false;
    4bf8:	80 91 cb 01 	lds	r24, 0x01CB
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    4bfc:	81 7f       	andi	r24, 0xF1	; 241
    4bfe:	8e 7f       	andi	r24, 0xFE	; 254
    4c00:	44 c0       	rjmp	.+136    	; 0x4c8a <command_common+0x412>
            } else {
                print("\ndebug: on\n");
    4c02:	87 ef       	ldi	r24, 0xF7	; 247
    4c04:	9b e0       	ldi	r25, 0x0B	; 11
    4c06:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
                debug_enable   = true;
    4c0a:	80 91 cb 01 	lds	r24, 0x01CB
    4c0e:	81 60       	ori	r24, 0x01	; 1
    4c10:	80 93 cb 01 	sts	0x01CB, r24
    4c14:	e5 cf       	rjmp	.-54     	; 0x4be0 <command_common+0x368>
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    4c16:	80 91 cb 01 	lds	r24, 0x01CB
    4c1a:	81 fb       	bst	r24, 1
    4c1c:	cc 27       	eor	r28, r28
    4c1e:	c0 f9       	bld	r28, 0
    4c20:	91 e0       	ldi	r25, 0x01	; 1
    4c22:	c9 27       	eor	r28, r25
    4c24:	c0 fb       	bst	r28, 0
    4c26:	81 f9       	bld	r24, 1
    4c28:	80 93 cb 01 	sts	0x01CB, r24
            if (debug_matrix) {
    4c2c:	cc 23       	and	r28, r28
    4c2e:	19 f0       	breq	.+6      	; 0x4c36 <command_common+0x3be>
                print("\nmatrix: on\n");
    4c30:	8a ee       	ldi	r24, 0xEA	; 234
    4c32:	9b e0       	ldi	r25, 0x0B	; 11
    4c34:	25 c0       	rjmp	.+74     	; 0x4c80 <command_common+0x408>
                debug_enable = true;
            } else {
                print("\nmatrix: off\n");
    4c36:	8c ed       	ldi	r24, 0xDC	; 220
    4c38:	9b e0       	ldi	r25, 0x0B	; 11
    4c3a:	d0 cf       	rjmp	.-96     	; 0x4bdc <command_common+0x364>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    4c3c:	80 91 cb 01 	lds	r24, 0x01CB
    4c40:	82 fb       	bst	r24, 2
    4c42:	cc 27       	eor	r28, r28
    4c44:	c0 f9       	bld	r28, 0
    4c46:	91 e0       	ldi	r25, 0x01	; 1
    4c48:	c9 27       	eor	r28, r25
    4c4a:	c0 fb       	bst	r28, 0
    4c4c:	82 f9       	bld	r24, 2
    4c4e:	80 93 cb 01 	sts	0x01CB, r24
            if (debug_keyboard) {
    4c52:	cc 23       	and	r28, r28
    4c54:	19 f0       	breq	.+6      	; 0x4c5c <command_common+0x3e4>
                print("\nkeyboard: on\n");
    4c56:	8d ec       	ldi	r24, 0xCD	; 205
    4c58:	9b e0       	ldi	r25, 0x0B	; 11
    4c5a:	12 c0       	rjmp	.+36     	; 0x4c80 <command_common+0x408>
                debug_enable = true;
            } else {
                print("\nkeyboard: off\n");
    4c5c:	8d eb       	ldi	r24, 0xBD	; 189
    4c5e:	9b e0       	ldi	r25, 0x0B	; 11
    4c60:	bd cf       	rjmp	.-134    	; 0x4bdc <command_common+0x364>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    4c62:	80 91 cb 01 	lds	r24, 0x01CB
    4c66:	83 fb       	bst	r24, 3
    4c68:	cc 27       	eor	r28, r28
    4c6a:	c0 f9       	bld	r28, 0
    4c6c:	91 e0       	ldi	r25, 0x01	; 1
    4c6e:	c9 27       	eor	r28, r25
    4c70:	c0 fb       	bst	r28, 0
    4c72:	83 f9       	bld	r24, 3
    4c74:	80 93 cb 01 	sts	0x01CB, r24
            if (debug_mouse) {
    4c78:	cc 23       	and	r28, r28
    4c7a:	51 f0       	breq	.+20     	; 0x4c90 <command_common+0x418>
                print("\nmouse: on\n");
    4c7c:	81 eb       	ldi	r24, 0xB1	; 177
    4c7e:	9b e0       	ldi	r25, 0x0B	; 11
    4c80:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
                debug_enable = true;
    4c84:	80 91 cb 01 	lds	r24, 0x01CB
    4c88:	81 60       	ori	r24, 0x01	; 1
    4c8a:	80 93 cb 01 	sts	0x01CB, r24
    4c8e:	67 c0       	rjmp	.+206    	; 0x4d5e <command_common+0x4e6>
            } else {
                print("\nmouse: off\n");
    4c90:	84 ea       	ldi	r24, 0xA4	; 164
    4c92:	9b e0       	ldi	r25, 0x0B	; 11
    4c94:	a3 cf       	rjmp	.-186    	; 0x4bdc <command_common+0x364>
            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
                  " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
                  " AVR_ARCH: avr" STR(__AVR_ARCH__) "\n");
            break;
        case KC_S:
            print("\n\t- Status -\n");
    4c96:	84 e8       	ldi	r24, 0x84	; 132
    4c98:	9a e0       	ldi	r25, 0x0A	; 10
    4c9a:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
            print_val_hex8(host_keyboard_leds());
    4c9e:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <host_keyboard_leds>
    4ca2:	1f 92       	push	r1
    4ca4:	8f 93       	push	r24
    4ca6:	8a e6       	ldi	r24, 0x6A	; 106
    4ca8:	9a e0       	ldi	r25, 0x0A	; 10
    4caa:	9f 93       	push	r25
    4cac:	8f 93       	push	r24
    4cae:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
            print_val_hex8(keyboard_protocol);
    4cb2:	80 91 0a 01 	lds	r24, 0x010A
    4cb6:	1f 92       	push	r1
    4cb8:	8f 93       	push	r24
    4cba:	83 e5       	ldi	r24, 0x53	; 83
    4cbc:	9a e0       	ldi	r25, 0x0A	; 10
    4cbe:	9f 93       	push	r25
    4cc0:	8f 93       	push	r24
    4cc2:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
            print_val_hex8(keyboard_idle);
    4cc6:	80 91 66 01 	lds	r24, 0x0166
    4cca:	1f 92       	push	r1
    4ccc:	8f 93       	push	r24
    4cce:	80 e4       	ldi	r24, 0x40	; 64
    4cd0:	9a e0       	ldi	r25, 0x0A	; 10
    4cd2:	9f 93       	push	r25
    4cd4:	8f 93       	push	r24
    4cd6:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
#ifdef NKRO_ENABLE
            print_val_hex8(keyboard_nkro);
    4cda:	80 91 0b 01 	lds	r24, 0x010B
    4cde:	1f 92       	push	r1
    4ce0:	8f 93       	push	r24
    4ce2:	8d e2       	ldi	r24, 0x2D	; 45
    4ce4:	9a e0       	ldi	r25, 0x0A	; 10
    4ce6:	9f 93       	push	r25
    4ce8:	8f 93       	push	r24
    4cea:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
#endif
            print_val_hex32(timer_count);
    4cee:	80 91 cd 01 	lds	r24, 0x01CD
    4cf2:	90 91 ce 01 	lds	r25, 0x01CE
    4cf6:	a0 91 cf 01 	lds	r26, 0x01CF
    4cfa:	b0 91 d0 01 	lds	r27, 0x01D0
    4cfe:	bf 93       	push	r27
    4d00:	af 93       	push	r26
    4d02:	9f 93       	push	r25
    4d04:	8f 93       	push	r24
    4d06:	89 e1       	ldi	r24, 0x19	; 25
    4d08:	9a e0       	ldi	r25, 0x0A	; 10
    4d0a:	9f 93       	push	r25
    4d0c:	8f 93       	push	r24
    4d0e:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    4d12:	8d b7       	in	r24, 0x3d	; 61
    4d14:	9e b7       	in	r25, 0x3e	; 62
    4d16:	46 96       	adiw	r24, 0x16	; 22
    4d18:	0f b6       	in	r0, 0x3f	; 63
    4d1a:	f8 94       	cli
    4d1c:	9e bf       	out	0x3e, r25	; 62
    4d1e:	0f be       	out	0x3f, r0	; 63
    4d20:	8d bf       	out	0x3d, r24	; 61
    4d22:	5e cf       	rjmp	.-324    	; 0x4be0 <command_common+0x368>
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
    4d24:	0e 94 6f 15 	call	0x2ade	; 0x2ade <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    4d28:	c0 91 0b 01 	lds	r28, 0x010B
    4d2c:	81 e0       	ldi	r24, 0x01	; 1
    4d2e:	c8 27       	eor	r28, r24
    4d30:	c0 93 0b 01 	sts	0x010B, r28
            if (keyboard_nkro)
    4d34:	cc 23       	and	r28, r28
    4d36:	29 f0       	breq	.+10     	; 0x4d42 <command_common+0x4ca>
                print("NKRO: on\n");
    4d38:	8f e0       	ldi	r24, 0x0F	; 15
    4d3a:	9a e0       	ldi	r25, 0x0A	; 10
    4d3c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    4d40:	0e c0       	rjmp	.+28     	; 0x4d5e <command_common+0x4e6>
            else
                print("NKRO: off\n");
    4d42:	84 e0       	ldi	r24, 0x04	; 4
    4d44:	9a e0       	ldi	r25, 0x0A	; 10
    4d46:	4a cf       	rjmp	.-364    	; 0x4bdc <command_common+0x364>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    4d48:	80 e0       	ldi	r24, 0x00	; 0
    4d4a:	01 c0       	rjmp	.+2      	; 0x4d4e <command_common+0x4d6>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    4d4c:	89 53       	subi	r24, 0x39	; 57
    4d4e:	0e 94 1e 24 	call	0x483c	; 0x483c <switch_default_layer>
    4d52:	46 cf       	rjmp	.-372    	; 0x4be0 <command_common+0x368>
            break;
        default:
            print("?");
    4d54:	82 e0       	ldi	r24, 0x02	; 2
    4d56:	9a e0       	ldi	r25, 0x0A	; 10
    4d58:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
            return false;
    4d5c:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return true;
}
    4d5e:	8c 2f       	mov	r24, r28
    4d60:	cf 91       	pop	r28
    4d62:	08 95       	ret

00004d64 <command_extra>:
/* This allows to define extra commands. return false when not processed. */
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    return false;
}
    4d64:	80 e0       	ldi	r24, 0x00	; 0
    4d66:	08 95       	ret

00004d68 <command_console_extra>:

bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    return false;
}
    4d68:	80 e0       	ldi	r24, 0x00	; 0
    4d6a:	08 95       	ret

00004d6c <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    4d6c:	cf 93       	push	r28
    4d6e:	c8 2f       	mov	r28, r24
    switch (command_state) {
    4d70:	80 91 db 01 	lds	r24, 0x01DB
    4d74:	81 30       	cpi	r24, 0x01	; 1
    4d76:	71 f0       	breq	.+28     	; 0x4d94 <command_proc+0x28>
    4d78:	20 f0       	brcs	.+8      	; 0x4d82 <command_proc+0x16>
    4d7a:	82 30       	cpi	r24, 0x02	; 2
    4d7c:	09 f4       	brne	.+2      	; 0x4d80 <command_proc+0x14>
    4d7e:	48 c0       	rjmp	.+144    	; 0x4e10 <command_proc+0xa4>
    4d80:	3f c1       	rjmp	.+638    	; 0x5000 <command_proc+0x294>
        case ONESHOT:
            if (!IS_COMMAND())
    4d82:	a0 91 0c 01 	lds	r26, 0x010C
    4d86:	b0 91 0d 01 	lds	r27, 0x010D
    4d8a:	8c 91       	ld	r24, X
    4d8c:	82 32       	cpi	r24, 0x22	; 34
    4d8e:	09 f0       	breq	.+2      	; 0x4d92 <command_proc+0x26>
    4d90:	39 c1       	rjmp	.+626    	; 0x5004 <command_proc+0x298>
    4d92:	07 c0       	rjmp	.+14     	; 0x4da2 <command_proc+0x36>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    4d94:	a0 91 0c 01 	lds	r26, 0x010C
    4d98:	b0 91 0d 01 	lds	r27, 0x010D
    4d9c:	8c 91       	ld	r24, X
    4d9e:	82 32       	cpi	r24, 0x22	; 34
    4da0:	49 f4       	brne	.+18     	; 0x4db4 <command_proc+0x48>
                return (command_extra(code) || command_common(code));
    4da2:	8c 2f       	mov	r24, r28
    4da4:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <command_extra>
    4da8:	81 11       	cpse	r24, r1
    4daa:	2f c0       	rjmp	.+94     	; 0x4e0a <command_proc+0x9e>
    4dac:	8c 2f       	mov	r24, r28
    4dae:	0e 94 3c 24 	call	0x4878	; 0x4878 <command_common>
    4db2:	2c c0       	rjmp	.+88     	; 0x4e0c <command_proc+0xa0>
            else
                return (command_console_extra(code) || command_console(code));
    4db4:	8c 2f       	mov	r24, r28
    4db6:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <command_console_extra>
    4dba:	81 11       	cpse	r24, r1
    4dbc:	26 c0       	rjmp	.+76     	; 0x4e0a <command_proc+0x9e>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    4dbe:	c4 31       	cpi	r28, 0x14	; 20
    4dc0:	e1 f0       	breq	.+56     	; 0x4dfa <command_proc+0x8e>
    4dc2:	70 f4       	brcc	.+28     	; 0x4de0 <command_proc+0x74>
    4dc4:	cb 30       	cpi	r28, 0x0B	; 11
    4dc6:	81 f0       	breq	.+32     	; 0x4de8 <command_proc+0x7c>
    4dc8:	c0 31       	cpi	r28, 0x10	; 16
    4dca:	d1 f4       	brne	.+52     	; 0x4e00 <command_proc+0x94>
        case KC_ESC:
            command_state = ONESHOT;
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    4dcc:	0e 94 e6 22 	call	0x45cc	; 0x45cc <mousekey_console_help>
            print("M> ");
    4dd0:	86 ee       	ldi	r24, 0xE6	; 230
    4dd2:	97 e0       	ldi	r25, 0x07	; 7
    4dd4:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
            command_state = MOUSEKEY;
    4dd8:	82 e0       	ldi	r24, 0x02	; 2
    4dda:	80 93 db 01 	sts	0x01DB, r24
    4dde:	15 c0       	rjmp	.+42     	; 0x4e0a <command_proc+0x9e>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    4de0:	c9 32       	cpi	r28, 0x29	; 41
    4de2:	59 f0       	breq	.+22     	; 0x4dfa <command_proc+0x8e>
    4de4:	c8 33       	cpi	r28, 0x38	; 56
    4de6:	61 f4       	brne	.+24     	; 0x4e00 <command_proc+0x94>
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    4de8:	83 ef       	ldi	r24, 0xF3	; 243
    4dea:	97 e0       	ldi	r25, 0x07	; 7
    4dec:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    4df0:	8a ee       	ldi	r24, 0xEA	; 234
    4df2:	97 e0       	ldi	r25, 0x07	; 7
    4df4:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    4df8:	08 c0       	rjmp	.+16     	; 0x4e0a <command_proc+0x9e>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    4dfa:	10 92 db 01 	sts	0x01DB, r1
    4dfe:	04 c1       	rjmp	.+520    	; 0x5008 <command_proc+0x29c>
            print("M> ");
            command_state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    4e00:	84 ee       	ldi	r24, 0xE4	; 228
    4e02:	97 e0       	ldi	r25, 0x07	; 7
    4e04:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    4e08:	ff c0       	rjmp	.+510    	; 0x5008 <command_proc+0x29c>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    4e0a:	81 e0       	ldi	r24, 0x01	; 1
    4e0c:	81 70       	andi	r24, 0x01	; 1
    4e0e:	fe c0       	rjmp	.+508    	; 0x500c <command_proc+0x2a0>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    4e10:	c4 32       	cpi	r28, 0x24	; 36
    4e12:	28 f5       	brcc	.+74     	; 0x4e5e <command_proc+0xf2>
    4e14:	ce 31       	cpi	r28, 0x1E	; 30
    4e16:	08 f0       	brcs	.+2      	; 0x4e1a <command_proc+0xae>
    4e18:	c1 c0       	rjmp	.+386    	; 0x4f9c <command_proc+0x230>
    4e1a:	cb 30       	cpi	r28, 0x0B	; 11
    4e1c:	a1 f1       	breq	.+104    	; 0x4e86 <command_proc+0x11a>
    4e1e:	d0 f4       	brcc	.+52     	; 0x4e54 <command_proc+0xe8>
    4e20:	c7 30       	cpi	r28, 0x07	; 7
    4e22:	09 f0       	breq	.+2      	; 0x4e26 <command_proc+0xba>
    4e24:	d3 c0       	rjmp	.+422    	; 0x4fcc <command_proc+0x260>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    4e26:	8e e1       	ldi	r24, 0x1E	; 30
    4e28:	80 93 13 01 	sts	0x0113, r24
            mk_interval = MOUSEKEY_INTERVAL;
    4e2c:	82 e3       	ldi	r24, 0x32	; 50
    4e2e:	80 93 12 01 	sts	0x0112, r24
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    4e32:	8a e0       	ldi	r24, 0x0A	; 10
    4e34:	80 93 11 01 	sts	0x0111, r24
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    4e38:	84 e1       	ldi	r24, 0x14	; 20
    4e3a:	80 93 10 01 	sts	0x0110, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    4e3e:	88 e0       	ldi	r24, 0x08	; 8
    4e40:	80 93 0f 01 	sts	0x010F, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    4e44:	88 e2       	ldi	r24, 0x28	; 40
    4e46:	80 93 0e 01 	sts	0x010E, r24
            print("set default\n");
    4e4a:	8a e8       	ldi	r24, 0x8A	; 138
    4e4c:	96 e0       	ldi	r25, 0x06	; 6
    4e4e:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    4e52:	bf c0       	rjmp	.+382    	; 0x4fd2 <command_proc+0x266>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    4e54:	c3 31       	cpi	r28, 0x13	; 19
    4e56:	49 f1       	breq	.+82     	; 0x4eaa <command_proc+0x13e>
    4e58:	c4 31       	cpi	r28, 0x14	; 20
    4e5a:	c1 f0       	breq	.+48     	; 0x4e8c <command_proc+0x120>
    4e5c:	b7 c0       	rjmp	.+366    	; 0x4fcc <command_proc+0x260>
    4e5e:	cb 34       	cpi	r28, 0x4B	; 75
    4e60:	09 f4       	brne	.+2      	; 0x4e64 <command_proc+0xf8>
    4e62:	a9 c0       	rjmp	.+338    	; 0x4fb6 <command_proc+0x24a>
    4e64:	28 f4       	brcc	.+10     	; 0x4e70 <command_proc+0x104>
    4e66:	c9 32       	cpi	r28, 0x29	; 41
    4e68:	89 f0       	breq	.+34     	; 0x4e8c <command_proc+0x120>
    4e6a:	c8 33       	cpi	r28, 0x38	; 56
    4e6c:	61 f0       	breq	.+24     	; 0x4e86 <command_proc+0x11a>
    4e6e:	ae c0       	rjmp	.+348    	; 0x4fcc <command_proc+0x260>
    4e70:	c1 35       	cpi	r28, 0x51	; 81
    4e72:	09 f4       	brne	.+2      	; 0x4e76 <command_proc+0x10a>
    4e74:	9e c0       	rjmp	.+316    	; 0x4fb2 <command_proc+0x246>
    4e76:	c2 35       	cpi	r28, 0x52	; 82
    4e78:	09 f4       	brne	.+2      	; 0x4e7c <command_proc+0x110>
    4e7a:	99 c0       	rjmp	.+306    	; 0x4fae <command_proc+0x242>
    4e7c:	ce 34       	cpi	r28, 0x4E	; 78
    4e7e:	09 f0       	breq	.+2      	; 0x4e82 <command_proc+0x116>
    4e80:	a5 c0       	rjmp	.+330    	; 0x4fcc <command_proc+0x260>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    4e82:	6a e0       	ldi	r22, 0x0A	; 10
    4e84:	9e c0       	rjmp	.+316    	; 0x4fc2 <command_proc+0x256>
static bool mousekey_console(uint8_t code)
{
    switch (code) {
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    4e86:	0e 94 e6 22 	call	0x45cc	; 0x45cc <mousekey_console_help>
    4e8a:	a3 c0       	rjmp	.+326    	; 0x4fd2 <command_proc+0x266>
            break;
        case KC_Q:
        case KC_ESC:
            if (mousekey_param) {
    4e8c:	80 91 da 01 	lds	r24, 0x01DA
    4e90:	88 23       	and	r24, r24
    4e92:	19 f0       	breq	.+6      	; 0x4e9a <command_proc+0x12e>
                mousekey_param = 0;
    4e94:	10 92 da 01 	sts	0x01DA, r1
    4e98:	9c c0       	rjmp	.+312    	; 0x4fd2 <command_proc+0x266>
            } else {
                print("C> ");
    4e9a:	87 e9       	ldi	r24, 0x97	; 151
    4e9c:	96 e0       	ldi	r25, 0x06	; 6
    4e9e:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
                command_state = CONSOLE;
    4ea2:	81 e0       	ldi	r24, 0x01	; 1
    4ea4:	80 93 db 01 	sts	0x01DB, r24
    4ea8:	b1 c0       	rjmp	.+354    	; 0x500c <command_proc+0x2a0>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\t- Values -\n");
    4eaa:	81 e7       	ldi	r24, 0x71	; 113
    4eac:	96 e0       	ldi	r25, 0x06	; 6
    4eae:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    4eb2:	8f e5       	ldi	r24, 0x5F	; 95
    4eb4:	96 e0       	ldi	r25, 0x06	; 6
    4eb6:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    4eba:	80 91 13 01 	lds	r24, 0x0113
    4ebe:	1f 92       	push	r1
    4ec0:	8f 93       	push	r24
    4ec2:	8c e5       	ldi	r24, 0x5C	; 92
    4ec4:	96 e0       	ldi	r25, 0x06	; 6
    4ec6:	9f 93       	push	r25
    4ec8:	8f 93       	push	r24
    4eca:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    4ece:	8a e5       	ldi	r24, 0x5A	; 90
    4ed0:	96 e0       	ldi	r25, 0x06	; 6
    4ed2:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    4ed6:	88 e4       	ldi	r24, 0x48	; 72
    4ed8:	96 e0       	ldi	r25, 0x06	; 6
    4eda:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    4ede:	80 91 12 01 	lds	r24, 0x0112
    4ee2:	1f 92       	push	r1
    4ee4:	8f 93       	push	r24
    4ee6:	85 e4       	ldi	r24, 0x45	; 69
    4ee8:	96 e0       	ldi	r25, 0x06	; 6
    4eea:	9f 93       	push	r25
    4eec:	8f 93       	push	r24
    4eee:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    4ef2:	83 e4       	ldi	r24, 0x43	; 67
    4ef4:	96 e0       	ldi	r25, 0x06	; 6
    4ef6:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    4efa:	84 e3       	ldi	r24, 0x34	; 52
    4efc:	96 e0       	ldi	r25, 0x06	; 6
    4efe:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    4f02:	80 91 11 01 	lds	r24, 0x0111
    4f06:	1f 92       	push	r1
    4f08:	8f 93       	push	r24
    4f0a:	81 e3       	ldi	r24, 0x31	; 49
    4f0c:	96 e0       	ldi	r25, 0x06	; 6
    4f0e:	9f 93       	push	r25
    4f10:	8f 93       	push	r24
    4f12:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    4f16:	8f e2       	ldi	r24, 0x2F	; 47
    4f18:	96 e0       	ldi	r25, 0x06	; 6
    4f1a:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    4f1e:	8e e1       	ldi	r24, 0x1E	; 30
    4f20:	96 e0       	ldi	r25, 0x06	; 6
    4f22:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    4f26:	80 91 10 01 	lds	r24, 0x0110
    4f2a:	1f 92       	push	r1
    4f2c:	8f 93       	push	r24
    4f2e:	8b e1       	ldi	r24, 0x1B	; 27
    4f30:	96 e0       	ldi	r25, 0x06	; 6
    4f32:	9f 93       	push	r25
    4f34:	8f 93       	push	r24
    4f36:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    4f3a:	89 e1       	ldi	r24, 0x19	; 25
    4f3c:	96 e0       	ldi	r25, 0x06	; 6
    4f3e:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    4f42:	84 e0       	ldi	r24, 0x04	; 4
    4f44:	96 e0       	ldi	r25, 0x06	; 6
    4f46:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    4f4a:	80 91 0f 01 	lds	r24, 0x010F
    4f4e:	1f 92       	push	r1
    4f50:	8f 93       	push	r24
    4f52:	81 e0       	ldi	r24, 0x01	; 1
    4f54:	96 e0       	ldi	r25, 0x06	; 6
    4f56:	9f 93       	push	r25
    4f58:	8f 93       	push	r24
    4f5a:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    4f5e:	8f ef       	ldi	r24, 0xFF	; 255
    4f60:	95 e0       	ldi	r25, 0x05	; 5
    4f62:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    4f66:	88 ee       	ldi	r24, 0xE8	; 232
    4f68:	95 e0       	ldi	r25, 0x05	; 5
    4f6a:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    4f6e:	80 91 0e 01 	lds	r24, 0x010E
    4f72:	1f 92       	push	r1
    4f74:	8f 93       	push	r24
    4f76:	85 ee       	ldi	r24, 0xE5	; 229
    4f78:	95 e0       	ldi	r25, 0x05	; 5
    4f7a:	9f 93       	push	r25
    4f7c:	8f 93       	push	r24
    4f7e:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    4f82:	83 ee       	ldi	r24, 0xE3	; 227
    4f84:	95 e0       	ldi	r25, 0x05	; 5
    4f86:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
    4f8a:	8d b7       	in	r24, 0x3d	; 61
    4f8c:	9e b7       	in	r25, 0x3e	; 62
    4f8e:	48 96       	adiw	r24, 0x18	; 24
    4f90:	0f b6       	in	r0, 0x3f	; 63
    4f92:	f8 94       	cli
    4f94:	9e bf       	out	0x3e, r25	; 62
    4f96:	0f be       	out	0x3f, r0	; 63
    4f98:	8d bf       	out	0x3d, r24	; 61
    4f9a:	1b c0       	rjmp	.+54     	; 0x4fd2 <command_proc+0x266>
    4f9c:	ce 51       	subi	r28, 0x1E	; 30
    4f9e:	ec 2f       	mov	r30, r28
    4fa0:	f0 e0       	ldi	r31, 0x00	; 0
    4fa2:	e3 5d       	subi	r30, 0xD3	; 211
    4fa4:	fe 4f       	sbci	r31, 0xFE	; 254
        case KC_2:
        case KC_3:
        case KC_4:
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
    4fa6:	80 81       	ld	r24, Z
    4fa8:	80 93 da 01 	sts	0x01DA, r24
    4fac:	12 c0       	rjmp	.+36     	; 0x4fd2 <command_proc+0x266>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    4fae:	61 e0       	ldi	r22, 0x01	; 1
    4fb0:	03 c0       	rjmp	.+6      	; 0x4fb8 <command_proc+0x24c>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    4fb2:	61 e0       	ldi	r22, 0x01	; 1
    4fb4:	06 c0       	rjmp	.+12     	; 0x4fc2 <command_proc+0x256>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    4fb6:	6a e0       	ldi	r22, 0x0A	; 10
    4fb8:	80 91 da 01 	lds	r24, 0x01DA
    4fbc:	0e 94 fd 22 	call	0x45fa	; 0x45fa <mousekey_param_inc>
    4fc0:	08 c0       	rjmp	.+16     	; 0x4fd2 <command_proc+0x266>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    4fc2:	80 91 da 01 	lds	r24, 0x01DA
    4fc6:	0e 94 a0 23 	call	0x4740	; 0x4740 <mousekey_param_dec>
    4fca:	03 c0       	rjmp	.+6      	; 0x4fd2 <command_proc+0x266>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
            print("set default\n");
            break;
        default:
            print("?");
    4fcc:	88 e8       	ldi	r24, 0x88	; 136
    4fce:	96 e0       	ldi	r25, 0x06	; 6
    4fd0:	13 c0       	rjmp	.+38     	; 0x4ff8 <command_proc+0x28c>
            return false;
    }
    if (mousekey_param)
    4fd2:	80 91 da 01 	lds	r24, 0x01DA
    4fd6:	88 23       	and	r24, r24
    4fd8:	69 f0       	breq	.+26     	; 0x4ff4 <command_proc+0x288>
        xprintf("M%d> ", mousekey_param);
    4fda:	1f 92       	push	r1
    4fdc:	8f 93       	push	r24
    4fde:	82 e8       	ldi	r24, 0x82	; 130
    4fe0:	96 e0       	ldi	r25, 0x06	; 6
    4fe2:	9f 93       	push	r25
    4fe4:	8f 93       	push	r24
    4fe6:	0e 94 03 07 	call	0xe06	; 0xe06 <__xprintf>
    4fea:	0f 90       	pop	r0
    4fec:	0f 90       	pop	r0
    4fee:	0f 90       	pop	r0
    4ff0:	0f 90       	pop	r0
    4ff2:	04 c0       	rjmp	.+8      	; 0x4ffc <command_proc+0x290>
    else
        print("M>" );
    4ff4:	8f e7       	ldi	r24, 0x7F	; 127
    4ff6:	96 e0       	ldi	r25, 0x06	; 6
    4ff8:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <xputs>
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    4ffc:	81 e0       	ldi	r24, 0x01	; 1
    4ffe:	06 c0       	rjmp	.+12     	; 0x500c <command_proc+0x2a0>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    5000:	10 92 db 01 	sts	0x01DB, r1
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    5004:	80 e0       	ldi	r24, 0x00	; 0
    5006:	02 c0       	rjmp	.+4      	; 0x500c <command_proc+0x2a0>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    5008:	80 e0       	ldi	r24, 0x00	; 0
    500a:	00 cf       	rjmp	.-512    	; 0x4e0c <command_proc+0xa0>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    500c:	cf 91       	pop	r28
    500e:	08 95       	ret

00005010 <__fixsfsi>:
    5010:	04 d0       	rcall	.+8      	; 0x501a <__fixunssfsi>
    5012:	68 94       	set
    5014:	b1 11       	cpse	r27, r1
    5016:	8d c0       	rjmp	.+282    	; 0x5132 <__fp_szero>
    5018:	08 95       	ret

0000501a <__fixunssfsi>:
    501a:	70 d0       	rcall	.+224    	; 0x50fc <__fp_splitA>
    501c:	88 f0       	brcs	.+34     	; 0x5040 <__fixunssfsi+0x26>
    501e:	9f 57       	subi	r25, 0x7F	; 127
    5020:	90 f0       	brcs	.+36     	; 0x5046 <__fixunssfsi+0x2c>
    5022:	b9 2f       	mov	r27, r25
    5024:	99 27       	eor	r25, r25
    5026:	b7 51       	subi	r27, 0x17	; 23
    5028:	a0 f0       	brcs	.+40     	; 0x5052 <__fixunssfsi+0x38>
    502a:	d1 f0       	breq	.+52     	; 0x5060 <__fixunssfsi+0x46>
    502c:	66 0f       	add	r22, r22
    502e:	77 1f       	adc	r23, r23
    5030:	88 1f       	adc	r24, r24
    5032:	99 1f       	adc	r25, r25
    5034:	1a f0       	brmi	.+6      	; 0x503c <__fixunssfsi+0x22>
    5036:	ba 95       	dec	r27
    5038:	c9 f7       	brne	.-14     	; 0x502c <__fixunssfsi+0x12>
    503a:	12 c0       	rjmp	.+36     	; 0x5060 <__fixunssfsi+0x46>
    503c:	b1 30       	cpi	r27, 0x01	; 1
    503e:	81 f0       	breq	.+32     	; 0x5060 <__fixunssfsi+0x46>
    5040:	77 d0       	rcall	.+238    	; 0x5130 <__fp_zero>
    5042:	b1 e0       	ldi	r27, 0x01	; 1
    5044:	08 95       	ret
    5046:	74 c0       	rjmp	.+232    	; 0x5130 <__fp_zero>
    5048:	67 2f       	mov	r22, r23
    504a:	78 2f       	mov	r23, r24
    504c:	88 27       	eor	r24, r24
    504e:	b8 5f       	subi	r27, 0xF8	; 248
    5050:	39 f0       	breq	.+14     	; 0x5060 <__fixunssfsi+0x46>
    5052:	b9 3f       	cpi	r27, 0xF9	; 249
    5054:	cc f3       	brlt	.-14     	; 0x5048 <__fixunssfsi+0x2e>
    5056:	86 95       	lsr	r24
    5058:	77 95       	ror	r23
    505a:	67 95       	ror	r22
    505c:	b3 95       	inc	r27
    505e:	d9 f7       	brne	.-10     	; 0x5056 <__fixunssfsi+0x3c>
    5060:	3e f4       	brtc	.+14     	; 0x5070 <__fixunssfsi+0x56>
    5062:	90 95       	com	r25
    5064:	80 95       	com	r24
    5066:	70 95       	com	r23
    5068:	61 95       	neg	r22
    506a:	7f 4f       	sbci	r23, 0xFF	; 255
    506c:	8f 4f       	sbci	r24, 0xFF	; 255
    506e:	9f 4f       	sbci	r25, 0xFF	; 255
    5070:	08 95       	ret

00005072 <__floatunsisf>:
    5072:	e8 94       	clt
    5074:	09 c0       	rjmp	.+18     	; 0x5088 <__floatsisf+0x12>

00005076 <__floatsisf>:
    5076:	97 fb       	bst	r25, 7
    5078:	3e f4       	brtc	.+14     	; 0x5088 <__floatsisf+0x12>
    507a:	90 95       	com	r25
    507c:	80 95       	com	r24
    507e:	70 95       	com	r23
    5080:	61 95       	neg	r22
    5082:	7f 4f       	sbci	r23, 0xFF	; 255
    5084:	8f 4f       	sbci	r24, 0xFF	; 255
    5086:	9f 4f       	sbci	r25, 0xFF	; 255
    5088:	99 23       	and	r25, r25
    508a:	a9 f0       	breq	.+42     	; 0x50b6 <__floatsisf+0x40>
    508c:	f9 2f       	mov	r31, r25
    508e:	96 e9       	ldi	r25, 0x96	; 150
    5090:	bb 27       	eor	r27, r27
    5092:	93 95       	inc	r25
    5094:	f6 95       	lsr	r31
    5096:	87 95       	ror	r24
    5098:	77 95       	ror	r23
    509a:	67 95       	ror	r22
    509c:	b7 95       	ror	r27
    509e:	f1 11       	cpse	r31, r1
    50a0:	f8 cf       	rjmp	.-16     	; 0x5092 <__floatsisf+0x1c>
    50a2:	fa f4       	brpl	.+62     	; 0x50e2 <__floatsisf+0x6c>
    50a4:	bb 0f       	add	r27, r27
    50a6:	11 f4       	brne	.+4      	; 0x50ac <__floatsisf+0x36>
    50a8:	60 ff       	sbrs	r22, 0
    50aa:	1b c0       	rjmp	.+54     	; 0x50e2 <__floatsisf+0x6c>
    50ac:	6f 5f       	subi	r22, 0xFF	; 255
    50ae:	7f 4f       	sbci	r23, 0xFF	; 255
    50b0:	8f 4f       	sbci	r24, 0xFF	; 255
    50b2:	9f 4f       	sbci	r25, 0xFF	; 255
    50b4:	16 c0       	rjmp	.+44     	; 0x50e2 <__floatsisf+0x6c>
    50b6:	88 23       	and	r24, r24
    50b8:	11 f0       	breq	.+4      	; 0x50be <__floatsisf+0x48>
    50ba:	96 e9       	ldi	r25, 0x96	; 150
    50bc:	11 c0       	rjmp	.+34     	; 0x50e0 <__floatsisf+0x6a>
    50be:	77 23       	and	r23, r23
    50c0:	21 f0       	breq	.+8      	; 0x50ca <__floatsisf+0x54>
    50c2:	9e e8       	ldi	r25, 0x8E	; 142
    50c4:	87 2f       	mov	r24, r23
    50c6:	76 2f       	mov	r23, r22
    50c8:	05 c0       	rjmp	.+10     	; 0x50d4 <__floatsisf+0x5e>
    50ca:	66 23       	and	r22, r22
    50cc:	71 f0       	breq	.+28     	; 0x50ea <__floatsisf+0x74>
    50ce:	96 e8       	ldi	r25, 0x86	; 134
    50d0:	86 2f       	mov	r24, r22
    50d2:	70 e0       	ldi	r23, 0x00	; 0
    50d4:	60 e0       	ldi	r22, 0x00	; 0
    50d6:	2a f0       	brmi	.+10     	; 0x50e2 <__floatsisf+0x6c>
    50d8:	9a 95       	dec	r25
    50da:	66 0f       	add	r22, r22
    50dc:	77 1f       	adc	r23, r23
    50de:	88 1f       	adc	r24, r24
    50e0:	da f7       	brpl	.-10     	; 0x50d8 <__floatsisf+0x62>
    50e2:	88 0f       	add	r24, r24
    50e4:	96 95       	lsr	r25
    50e6:	87 95       	ror	r24
    50e8:	97 f9       	bld	r25, 7
    50ea:	08 95       	ret

000050ec <__fp_split3>:
    50ec:	57 fd       	sbrc	r21, 7
    50ee:	90 58       	subi	r25, 0x80	; 128
    50f0:	44 0f       	add	r20, r20
    50f2:	55 1f       	adc	r21, r21
    50f4:	59 f0       	breq	.+22     	; 0x510c <__fp_splitA+0x10>
    50f6:	5f 3f       	cpi	r21, 0xFF	; 255
    50f8:	71 f0       	breq	.+28     	; 0x5116 <__fp_splitA+0x1a>
    50fa:	47 95       	ror	r20

000050fc <__fp_splitA>:
    50fc:	88 0f       	add	r24, r24
    50fe:	97 fb       	bst	r25, 7
    5100:	99 1f       	adc	r25, r25
    5102:	61 f0       	breq	.+24     	; 0x511c <__fp_splitA+0x20>
    5104:	9f 3f       	cpi	r25, 0xFF	; 255
    5106:	79 f0       	breq	.+30     	; 0x5126 <__fp_splitA+0x2a>
    5108:	87 95       	ror	r24
    510a:	08 95       	ret
    510c:	12 16       	cp	r1, r18
    510e:	13 06       	cpc	r1, r19
    5110:	14 06       	cpc	r1, r20
    5112:	55 1f       	adc	r21, r21
    5114:	f2 cf       	rjmp	.-28     	; 0x50fa <__fp_split3+0xe>
    5116:	46 95       	lsr	r20
    5118:	f1 df       	rcall	.-30     	; 0x50fc <__fp_splitA>
    511a:	08 c0       	rjmp	.+16     	; 0x512c <__fp_splitA+0x30>
    511c:	16 16       	cp	r1, r22
    511e:	17 06       	cpc	r1, r23
    5120:	18 06       	cpc	r1, r24
    5122:	99 1f       	adc	r25, r25
    5124:	f1 cf       	rjmp	.-30     	; 0x5108 <__fp_splitA+0xc>
    5126:	86 95       	lsr	r24
    5128:	71 05       	cpc	r23, r1
    512a:	61 05       	cpc	r22, r1
    512c:	08 94       	sec
    512e:	08 95       	ret

00005130 <__fp_zero>:
    5130:	e8 94       	clt

00005132 <__fp_szero>:
    5132:	bb 27       	eor	r27, r27
    5134:	66 27       	eor	r22, r22
    5136:	77 27       	eor	r23, r23
    5138:	cb 01       	movw	r24, r22
    513a:	97 f9       	bld	r25, 7
    513c:	08 95       	ret

0000513e <__mulsf3>:
    513e:	0b d0       	rcall	.+22     	; 0x5156 <__mulsf3x>
    5140:	78 c0       	rjmp	.+240    	; 0x5232 <__fp_round>
    5142:	69 d0       	rcall	.+210    	; 0x5216 <__fp_pscA>
    5144:	28 f0       	brcs	.+10     	; 0x5150 <__mulsf3+0x12>
    5146:	6e d0       	rcall	.+220    	; 0x5224 <__fp_pscB>
    5148:	18 f0       	brcs	.+6      	; 0x5150 <__mulsf3+0x12>
    514a:	95 23       	and	r25, r21
    514c:	09 f0       	breq	.+2      	; 0x5150 <__mulsf3+0x12>
    514e:	5a c0       	rjmp	.+180    	; 0x5204 <__fp_inf>
    5150:	5f c0       	rjmp	.+190    	; 0x5210 <__fp_nan>
    5152:	11 24       	eor	r1, r1
    5154:	ee cf       	rjmp	.-36     	; 0x5132 <__fp_szero>

00005156 <__mulsf3x>:
    5156:	ca df       	rcall	.-108    	; 0x50ec <__fp_split3>
    5158:	a0 f3       	brcs	.-24     	; 0x5142 <__mulsf3+0x4>

0000515a <__mulsf3_pse>:
    515a:	95 9f       	mul	r25, r21
    515c:	d1 f3       	breq	.-12     	; 0x5152 <__mulsf3+0x14>
    515e:	95 0f       	add	r25, r21
    5160:	50 e0       	ldi	r21, 0x00	; 0
    5162:	55 1f       	adc	r21, r21
    5164:	62 9f       	mul	r22, r18
    5166:	f0 01       	movw	r30, r0
    5168:	72 9f       	mul	r23, r18
    516a:	bb 27       	eor	r27, r27
    516c:	f0 0d       	add	r31, r0
    516e:	b1 1d       	adc	r27, r1
    5170:	63 9f       	mul	r22, r19
    5172:	aa 27       	eor	r26, r26
    5174:	f0 0d       	add	r31, r0
    5176:	b1 1d       	adc	r27, r1
    5178:	aa 1f       	adc	r26, r26
    517a:	64 9f       	mul	r22, r20
    517c:	66 27       	eor	r22, r22
    517e:	b0 0d       	add	r27, r0
    5180:	a1 1d       	adc	r26, r1
    5182:	66 1f       	adc	r22, r22
    5184:	82 9f       	mul	r24, r18
    5186:	22 27       	eor	r18, r18
    5188:	b0 0d       	add	r27, r0
    518a:	a1 1d       	adc	r26, r1
    518c:	62 1f       	adc	r22, r18
    518e:	73 9f       	mul	r23, r19
    5190:	b0 0d       	add	r27, r0
    5192:	a1 1d       	adc	r26, r1
    5194:	62 1f       	adc	r22, r18
    5196:	83 9f       	mul	r24, r19
    5198:	a0 0d       	add	r26, r0
    519a:	61 1d       	adc	r22, r1
    519c:	22 1f       	adc	r18, r18
    519e:	74 9f       	mul	r23, r20
    51a0:	33 27       	eor	r19, r19
    51a2:	a0 0d       	add	r26, r0
    51a4:	61 1d       	adc	r22, r1
    51a6:	23 1f       	adc	r18, r19
    51a8:	84 9f       	mul	r24, r20
    51aa:	60 0d       	add	r22, r0
    51ac:	21 1d       	adc	r18, r1
    51ae:	82 2f       	mov	r24, r18
    51b0:	76 2f       	mov	r23, r22
    51b2:	6a 2f       	mov	r22, r26
    51b4:	11 24       	eor	r1, r1
    51b6:	9f 57       	subi	r25, 0x7F	; 127
    51b8:	50 40       	sbci	r21, 0x00	; 0
    51ba:	8a f0       	brmi	.+34     	; 0x51de <__mulsf3_pse+0x84>
    51bc:	e1 f0       	breq	.+56     	; 0x51f6 <__mulsf3_pse+0x9c>
    51be:	88 23       	and	r24, r24
    51c0:	4a f0       	brmi	.+18     	; 0x51d4 <__mulsf3_pse+0x7a>
    51c2:	ee 0f       	add	r30, r30
    51c4:	ff 1f       	adc	r31, r31
    51c6:	bb 1f       	adc	r27, r27
    51c8:	66 1f       	adc	r22, r22
    51ca:	77 1f       	adc	r23, r23
    51cc:	88 1f       	adc	r24, r24
    51ce:	91 50       	subi	r25, 0x01	; 1
    51d0:	50 40       	sbci	r21, 0x00	; 0
    51d2:	a9 f7       	brne	.-22     	; 0x51be <__mulsf3_pse+0x64>
    51d4:	9e 3f       	cpi	r25, 0xFE	; 254
    51d6:	51 05       	cpc	r21, r1
    51d8:	70 f0       	brcs	.+28     	; 0x51f6 <__mulsf3_pse+0x9c>
    51da:	14 c0       	rjmp	.+40     	; 0x5204 <__fp_inf>
    51dc:	aa cf       	rjmp	.-172    	; 0x5132 <__fp_szero>
    51de:	5f 3f       	cpi	r21, 0xFF	; 255
    51e0:	ec f3       	brlt	.-6      	; 0x51dc <__mulsf3_pse+0x82>
    51e2:	98 3e       	cpi	r25, 0xE8	; 232
    51e4:	dc f3       	brlt	.-10     	; 0x51dc <__mulsf3_pse+0x82>
    51e6:	86 95       	lsr	r24
    51e8:	77 95       	ror	r23
    51ea:	67 95       	ror	r22
    51ec:	b7 95       	ror	r27
    51ee:	f7 95       	ror	r31
    51f0:	e7 95       	ror	r30
    51f2:	9f 5f       	subi	r25, 0xFF	; 255
    51f4:	c1 f7       	brne	.-16     	; 0x51e6 <__mulsf3_pse+0x8c>
    51f6:	fe 2b       	or	r31, r30
    51f8:	88 0f       	add	r24, r24
    51fa:	91 1d       	adc	r25, r1
    51fc:	96 95       	lsr	r25
    51fe:	87 95       	ror	r24
    5200:	97 f9       	bld	r25, 7
    5202:	08 95       	ret

00005204 <__fp_inf>:
    5204:	97 f9       	bld	r25, 7
    5206:	9f 67       	ori	r25, 0x7F	; 127
    5208:	80 e8       	ldi	r24, 0x80	; 128
    520a:	70 e0       	ldi	r23, 0x00	; 0
    520c:	60 e0       	ldi	r22, 0x00	; 0
    520e:	08 95       	ret

00005210 <__fp_nan>:
    5210:	9f ef       	ldi	r25, 0xFF	; 255
    5212:	80 ec       	ldi	r24, 0xC0	; 192
    5214:	08 95       	ret

00005216 <__fp_pscA>:
    5216:	00 24       	eor	r0, r0
    5218:	0a 94       	dec	r0
    521a:	16 16       	cp	r1, r22
    521c:	17 06       	cpc	r1, r23
    521e:	18 06       	cpc	r1, r24
    5220:	09 06       	cpc	r0, r25
    5222:	08 95       	ret

00005224 <__fp_pscB>:
    5224:	00 24       	eor	r0, r0
    5226:	0a 94       	dec	r0
    5228:	12 16       	cp	r1, r18
    522a:	13 06       	cpc	r1, r19
    522c:	14 06       	cpc	r1, r20
    522e:	05 06       	cpc	r0, r21
    5230:	08 95       	ret

00005232 <__fp_round>:
    5232:	09 2e       	mov	r0, r25
    5234:	03 94       	inc	r0
    5236:	00 0c       	add	r0, r0
    5238:	11 f4       	brne	.+4      	; 0x523e <__fp_round+0xc>
    523a:	88 23       	and	r24, r24
    523c:	52 f0       	brmi	.+20     	; 0x5252 <__fp_round+0x20>
    523e:	bb 0f       	add	r27, r27
    5240:	40 f4       	brcc	.+16     	; 0x5252 <__fp_round+0x20>
    5242:	bf 2b       	or	r27, r31
    5244:	11 f4       	brne	.+4      	; 0x524a <__fp_round+0x18>
    5246:	60 ff       	sbrs	r22, 0
    5248:	04 c0       	rjmp	.+8      	; 0x5252 <__fp_round+0x20>
    524a:	6f 5f       	subi	r22, 0xFF	; 255
    524c:	7f 4f       	sbci	r23, 0xFF	; 255
    524e:	8f 4f       	sbci	r24, 0xFF	; 255
    5250:	9f 4f       	sbci	r25, 0xFF	; 255
    5252:	08 95       	ret

00005254 <__udivmodqi4>:
    5254:	99 1b       	sub	r25, r25
    5256:	79 e0       	ldi	r23, 0x09	; 9
    5258:	04 c0       	rjmp	.+8      	; 0x5262 <__udivmodqi4_ep>

0000525a <__udivmodqi4_loop>:
    525a:	99 1f       	adc	r25, r25
    525c:	96 17       	cp	r25, r22
    525e:	08 f0       	brcs	.+2      	; 0x5262 <__udivmodqi4_ep>
    5260:	96 1b       	sub	r25, r22

00005262 <__udivmodqi4_ep>:
    5262:	88 1f       	adc	r24, r24
    5264:	7a 95       	dec	r23
    5266:	c9 f7       	brne	.-14     	; 0x525a <__udivmodqi4_loop>
    5268:	80 95       	com	r24
    526a:	08 95       	ret

0000526c <__divmodhi4>:
    526c:	97 fb       	bst	r25, 7
    526e:	07 2e       	mov	r0, r23
    5270:	16 f4       	brtc	.+4      	; 0x5276 <__divmodhi4+0xa>
    5272:	00 94       	com	r0
    5274:	07 d0       	rcall	.+14     	; 0x5284 <__divmodhi4_neg1>
    5276:	77 fd       	sbrc	r23, 7
    5278:	09 d0       	rcall	.+18     	; 0x528c <__divmodhi4_neg2>
    527a:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__udivmodhi4>
    527e:	07 fc       	sbrc	r0, 7
    5280:	05 d0       	rcall	.+10     	; 0x528c <__divmodhi4_neg2>
    5282:	3e f4       	brtc	.+14     	; 0x5292 <__divmodhi4_exit>

00005284 <__divmodhi4_neg1>:
    5284:	90 95       	com	r25
    5286:	81 95       	neg	r24
    5288:	9f 4f       	sbci	r25, 0xFF	; 255
    528a:	08 95       	ret

0000528c <__divmodhi4_neg2>:
    528c:	70 95       	com	r23
    528e:	61 95       	neg	r22
    5290:	7f 4f       	sbci	r23, 0xFF	; 255

00005292 <__divmodhi4_exit>:
    5292:	08 95       	ret

00005294 <__tablejump2__>:
    5294:	ee 0f       	add	r30, r30
    5296:	ff 1f       	adc	r31, r31

00005298 <__tablejump__>:
    5298:	05 90       	lpm	r0, Z+
    529a:	f4 91       	lpm	r31, Z
    529c:	e0 2d       	mov	r30, r0
    529e:	09 94       	ijmp

000052a0 <__udivmodhi4>:
    52a0:	aa 1b       	sub	r26, r26
    52a2:	bb 1b       	sub	r27, r27
    52a4:	51 e1       	ldi	r21, 0x11	; 17
    52a6:	07 c0       	rjmp	.+14     	; 0x52b6 <__udivmodhi4_ep>

000052a8 <__udivmodhi4_loop>:
    52a8:	aa 1f       	adc	r26, r26
    52aa:	bb 1f       	adc	r27, r27
    52ac:	a6 17       	cp	r26, r22
    52ae:	b7 07       	cpc	r27, r23
    52b0:	10 f0       	brcs	.+4      	; 0x52b6 <__udivmodhi4_ep>
    52b2:	a6 1b       	sub	r26, r22
    52b4:	b7 0b       	sbc	r27, r23

000052b6 <__udivmodhi4_ep>:
    52b6:	88 1f       	adc	r24, r24
    52b8:	99 1f       	adc	r25, r25
    52ba:	5a 95       	dec	r21
    52bc:	a9 f7       	brne	.-22     	; 0x52a8 <__udivmodhi4_loop>
    52be:	80 95       	com	r24
    52c0:	90 95       	com	r25
    52c2:	bc 01       	movw	r22, r24
    52c4:	cd 01       	movw	r24, r26
    52c6:	08 95       	ret

000052c8 <__eerd_byte_m32u4>:
    52c8:	f9 99       	sbic	0x1f, 1	; 31
    52ca:	fe cf       	rjmp	.-4      	; 0x52c8 <__eerd_byte_m32u4>
    52cc:	92 bd       	out	0x22, r25	; 34
    52ce:	81 bd       	out	0x21, r24	; 33
    52d0:	f8 9a       	sbi	0x1f, 0	; 31
    52d2:	99 27       	eor	r25, r25
    52d4:	80 b5       	in	r24, 0x20	; 32
    52d6:	08 95       	ret

000052d8 <__eerd_word_m32u4>:
    52d8:	a8 e1       	ldi	r26, 0x18	; 24
    52da:	b0 e0       	ldi	r27, 0x00	; 0
    52dc:	42 e0       	ldi	r20, 0x02	; 2
    52de:	50 e0       	ldi	r21, 0x00	; 0
    52e0:	0c 94 87 29 	jmp	0x530e	; 0x530e <__eerd_blraw_m32u4>

000052e4 <__eewr_byte_m32u4>:
    52e4:	26 2f       	mov	r18, r22

000052e6 <__eewr_r18_m32u4>:
    52e6:	f9 99       	sbic	0x1f, 1	; 31
    52e8:	fe cf       	rjmp	.-4      	; 0x52e6 <__eewr_r18_m32u4>
    52ea:	1f ba       	out	0x1f, r1	; 31
    52ec:	92 bd       	out	0x22, r25	; 34
    52ee:	81 bd       	out	0x21, r24	; 33
    52f0:	20 bd       	out	0x20, r18	; 32
    52f2:	0f b6       	in	r0, 0x3f	; 63
    52f4:	f8 94       	cli
    52f6:	fa 9a       	sbi	0x1f, 2	; 31
    52f8:	f9 9a       	sbi	0x1f, 1	; 31
    52fa:	0f be       	out	0x3f, r0	; 63
    52fc:	01 96       	adiw	r24, 0x01	; 1
    52fe:	08 95       	ret

00005300 <__eewr_word_m32u4>:
    5300:	0e 94 72 29 	call	0x52e4	; 0x52e4 <__eewr_byte_m32u4>
    5304:	27 2f       	mov	r18, r23
    5306:	0c 94 73 29 	jmp	0x52e6	; 0x52e6 <__eewr_r18_m32u4>

0000530a <__eerd_block_m32u4>:
    530a:	dc 01       	movw	r26, r24
    530c:	cb 01       	movw	r24, r22

0000530e <__eerd_blraw_m32u4>:
    530e:	fc 01       	movw	r30, r24
    5310:	f9 99       	sbic	0x1f, 1	; 31
    5312:	fe cf       	rjmp	.-4      	; 0x5310 <__eerd_blraw_m32u4+0x2>
    5314:	06 c0       	rjmp	.+12     	; 0x5322 <__eerd_blraw_m32u4+0x14>
    5316:	f2 bd       	out	0x22, r31	; 34
    5318:	e1 bd       	out	0x21, r30	; 33
    531a:	f8 9a       	sbi	0x1f, 0	; 31
    531c:	31 96       	adiw	r30, 0x01	; 1
    531e:	00 b4       	in	r0, 0x20	; 32
    5320:	0d 92       	st	X+, r0
    5322:	41 50       	subi	r20, 0x01	; 1
    5324:	50 40       	sbci	r21, 0x00	; 0
    5326:	b8 f7       	brcc	.-18     	; 0x5316 <__eerd_blraw_m32u4+0x8>
    5328:	08 95       	ret

0000532a <_exit>:
    532a:	f8 94       	cli

0000532c <__stop_program>:
    532c:	ff cf       	rjmp	.-2      	; 0x532c <__stop_program>
