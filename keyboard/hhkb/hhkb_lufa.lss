
hhkb_lufa.elf：     文件格式 elf32-avr

节：
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  000053ac  00005440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000053ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b2  00800138  00800138  00005478  2**0
                  ALLOC
  3 .noinit       00000004  008001ea  008001ea  00005478  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  00005478  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000073  00000000  00000000  00005d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00005da3  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005db4  2**2
                  CONTENTS, READONLY
  8 .debug_aranges 000008d8  00000000  00000000  00005df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000fa37  00000000  00000000  000066cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003b12  00000000  00000000  00016103  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004ee7  00000000  00000000  00019c15  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001838  00000000  00000000  0001eafc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003e4a  00000000  00000000  00020334  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00007a8b  00000000  00000000  0002417e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a90  00000000  00000000  0002bc09  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 06 	jmp	0xc72	; 0xc72 <__ctors_end>
       4:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
       8:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
       c:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      10:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      14:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      18:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      1c:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      20:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      24:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      28:	0c 94 e2 0d 	jmp	0x1bc4	; 0x1bc4 <__vector_10>
      2c:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      30:	0c 94 c5 1d 	jmp	0x3b8a	; 0x3b8a <__vector_12>
      34:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      38:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      3c:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      40:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      44:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      48:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      4c:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      50:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      54:	0c 94 65 1e 	jmp	0x3cca	; 0x3cca <__vector_21>
      58:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      5c:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      60:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      64:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      68:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      6c:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      70:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      74:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      78:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      7c:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      80:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      84:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      88:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      8c:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      90:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      94:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      98:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      9c:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      a0:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      a4:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      a8:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__bad_interrupt>
      ac:	d8 0e       	add	r13, r24
      ae:	fa 0e       	add	r15, r26
      b0:	e8 0f       	add	r30, r24
      b2:	fa 0e       	add	r15, r26
      b4:	e8 0f       	add	r30, r24
      b6:	3f 0f       	add	r19, r31
      b8:	62 0f       	add	r22, r18
      ba:	e8 0f       	add	r30, r24
      bc:	b7 0f       	add	r27, r23
      be:	ca 0f       	add	r28, r26
      c0:	c1 12       	cpse	r12, r17
      c2:	c1 12       	cpse	r12, r17
      c4:	f0 12       	cpse	r15, r16
      c6:	f0 12       	cpse	r15, r16
      c8:	4a 13       	cpse	r20, r26
      ca:	88 13       	cpse	r24, r24
      cc:	91 15       	cp	r25, r1
      ce:	91 15       	cp	r25, r1
      d0:	a1 13       	cpse	r26, r17
      d2:	91 15       	cp	r25, r1
      d4:	a2 14       	cp	r10, r2
      d6:	a2 14       	cp	r10, r2
      d8:	65 15       	cp	r22, r5
      da:	91 15       	cp	r25, r1
      dc:	91 15       	cp	r25, r1
      de:	7c 15       	cp	r23, r12

000000e0 <__trampolines_end>:
      e0:	02 2b       	or	r16, r18
      e2:	00 01       	movw	r0, r0

000000e3 <__m.4729>:
      e3:	01 e2 01 2b 00                                      ...+.

000000e8 <__m.4726>:
      e8:	01 a9 02 a9 00                                      .....

000000ed <__m.4723>:
      ed:	01 2c 02 2c 01 2d 02 2d 01 e1 01 37 02 37 02 e1     .,.,.-.-...7.7..
      fd:	01 2c 02 2c 00                                      .,.,.

00000102 <fn_actions>:
     102:	f1 a1 04 a2 16 a3 29 21 00 c0                       ......)!..

0000010c <keymaps>:
     10c:	1f 14 1a c2 c1 1d 1b 06 20 21 15 08 07 09 19 05     ........ !......
     11c:	22 23 1c 17 0a 0b 11 00 1e 29 2b c3 e1 e3 e2 2c     "#.......)+....,
     12c:	24 25 18 0c 0e 0d 10 00 31 35 2a 28 c0 e5 e7 e6     $%......15*(....
     13c:	26 27 12 13 33 0f 36 00 2d 2e 30 2f 34 38 37 00     &'..3.6.-.0/487.
     14c:	3b 01 01 a9 aa 01 01 01 3c 3d 01 01 a8 01 01 01     ;.......<=......
     15c:	3e 3f 01 01 01 55 57 00 3a 01 39 01 01 01 01 01     >?...UW.:.9.....
     16c:	40 41 01 46 4a 54 56 00 49 4c 2a 58 01 01 01 01     @A.FJTV.IL*X....
     17c:	42 43 47 48 50 4b 4d 00 44 45 01 52 4f 51 4e 00     BCGHPKM.DE.ROQN.
     18c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     19c:	01 01 01 01 01 50 01 00 01 01 01 01 01 01 01 4c     .....P.........L
     1ac:	01 01 01 01 52 51 01 00 01 01 01 2a 01 01 01 01     ....RQ.....*....
     1bc:	01 01 01 01 01 4f 01 00 01 01 01 01 01 01 c4 00     .....O..........
     1cc:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     1dc:	01 01 01 01 01 f2 01 00 01 01 01 01 01 01 01 f4     ................
     1ec:	01 01 fa f9 f0 f1 01 00 01 01 01 01 01 01 01 01     ................
     1fc:	01 01 01 01 f5 f3 01 00 01 01 01 01 01 01 01 00     ................

0000020c <__c.4591>:
     20c:	25 30 32 58 3a 20 25 30 38 62 0a 00                 %02X: %08b..

00000218 <__c.4588>:
     218:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 0a 00        .r/c 01234567..

00000227 <__c.4808>:
     227:	5b 73 5d 00                                         [s].

0000022b <__c.4806>:
     22b:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
     23b:	00                                                  .

0000023c <__c.4804>:
     23c:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
     24c:	00                                                  .

0000024d <__c.4702>:
     24d:	5b 57 5d 00                                         [W].

00000251 <__c.4698>:
     251:	5b 53 5d 00                                         [S].

00000255 <__c.4694>:
     255:	5b 52 5d 00                                         [R].

00000259 <__c.4689>:
     259:	5b 44 5d 00                                         [D].

0000025d <__c.4684>:
     25d:	5b 43 5d 00                                         [C].

00000261 <ProductString>:
     261:	12 03 48 00 48 00 4b 00 42 00 20 00 6d 00 6f 00     ..H.H.K.B. .m.o.
     271:	64 00 00 00                                         d...

00000275 <ManufacturerString>:
     275:	0e 03 74 00 2e 00 6d 00 2e 00 6b 00 2e 00 00 00     ..t...m...k.....

00000285 <LanguageString>:
     285:	04 03 09 04                                         ....

00000289 <ConfigurationDescriptor>:
     289:	09 02 8d 00 05 01 00 a0 32 09 04 00 00 01 03 01     ........2.......
     299:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
     2a9:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     2b9:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     2c9:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     2d9:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
     2e9:	01 00 01 22 20 00 07 05 84 03 20 00 01 07 05 04     ..." ..... .....
     2f9:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.
     309:	01 00 01 22 39 00 07 05 85 03 10 00 01              ..."9........

00000316 <DeviceDescriptor>:
     316:	12 01 10 01 00 00 00 08 ed fe fe ca 04 01 01 02     ................
     326:	00 01                                               ..

00000328 <NKROReport>:
     328:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     338:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
     348:	91 02 95 01 75 03 91 01 05 07 19 00 29 77 15 00     ....u.......)w..
     358:	25 01 95 78 75 01 81 02 c0                          %..xu....

00000361 <ConsoleReport>:
     361:	06 31 ff 09 74 a1 01 09 75 15 00 25 ff 95 20 75     .1..t...u..%.. u
     371:	08 81 02 09 76 15 00 25 ff 95 20 75 08 91 02 c0     ....v..%.. u....

00000381 <ExtrakeyReport>:
     381:	05 01 09 80 a1 01 85 02 16 01 00 26 b7 00 1a 01     ...........&....
     391:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     3a1:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     3b1:	10 95 01 81 00 c0                                   ......

000003b7 <MouseReport>:
     3b7:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
     3c7:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     3d7:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     3e7:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
     3f7:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

00000404 <KeyboardReport>:
     404:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     414:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     424:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     434:	19 00 29 ff 15 00 25 ff 95 06 75 08 81 00 c0        ..)...%...u....

00000443 <__c.4447>:
     443:	0a 00                                               ..

00000445 <__c.4442>:
     445:	25 30 32 58 20 00                                   %02X .

0000044b <__c.4439>:
     44b:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:
     45b:	20 00                                                .

0000045d <__c.4784>:
     45d:	0a 00                                               ..

0000045f <__c.4782>:
     45f:	25 30 32 58 00                                      %02X.

00000464 <__c.4780>:
     464:	6b 65 79 62 6f 61 72 64 5f 73 65 74 5f 6c 65 64     keyboard_set_led
     474:	3a 20 00                                            : .

00000477 <__c.4590>:
     477:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can
     487:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

00000495 <__c.4585>:
     495:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can
     4a5:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

000004b3 <__c.4498>:
     4b3:	4f 6e 65 73 68 6f 74 3a 20 74 69 6d 65 6f 75 74     Oneshot: timeout
     4c3:	0a 00                                               ..

000004c5 <__c.4724>:
     4c5:	64 6f 6e 65 2e 0a 00                                done...

000004cc <__c.4718>:
     4cc:	62 6f 6f 67 6d 61 67 69 63 20 73 63 61 6e 3a 20     boogmagic scan: 
     4dc:	2e 2e 2e 20 00                                      ... .

000004e1 <__c.4519>:
     4e1:	29 0a 00                                            )..

000004e4 <__c.4517>:
     4e4:	25 75 00                                            %u.

000004e7 <__c.4515>:
     4e7:	2f 00                                               /.

000004e9 <__c.4513>:
     4e9:	25 75 00                                            %u.

000004ec <__c.4511>:
     4ec:	5d 28 00                                            ](.

000004ef <__c.4509>:
     4ef:	25 64 00                                            %d.

000004f2 <__c.4507>:
     4f2:	20 00                                                .

000004f4 <__c.4505>:
     4f4:	25 64 00                                            %d.

000004f7 <__c.4503>:
     4f7:	20 00                                                .

000004f9 <__c.4501>:
     4f9:	25 64 00                                            %d.

000004fc <__c.4499>:
     4fc:	20 00                                                .

000004fe <__c.4497>:
     4fe:	25 64 00                                            %d.

00000501 <__c.4495>:
     501:	7c 00                                               |.

00000503 <__c.4493>:
     503:	25 30 32 58 00                                      %02X.

00000508 <__c.4491>:
     508:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     518:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     528:	20 5b 00                                             [.

0000052b <__c.5115>:
     52b:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     53b:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000546 <__c.5112>:
     546:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     556:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

0000055f <__c.5109>:
     55f:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     56f:	20 25 64 0a 00                                       %d..

00000574 <__c.5106>:
     574:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     584:	64 0a 00                                            d..

00000587 <__c.5103>:
     587:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     597:	0a 00                                               ..

00000599 <__c.5099>:
     599:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

000005a8 <__c.5092>:
     5a8:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     5b8:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

000005c3 <__c.5089>:
     5c3:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     5d3:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

000005dc <__c.5086>:
     5dc:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     5ec:	20 25 64 0a 00                                       %d..

000005f1 <__c.5083>:
     5f1:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     601:	64 0a 00                                            d..

00000604 <__c.5080>:
     604:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     614:	0a 00                                               ..

00000616 <__c.5076>:
     616:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000625 <__c.5069>:
     625:	0a 00                                               ..

00000627 <__c.5067>:
     627:	25 75 00                                            %u.

0000062a <__c.5065>:
     62a:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     63a:	5f 6d 61 78 3a 20 00                                _max: .

00000641 <__c.5063>:
     641:	0a 00                                               ..

00000643 <__c.5061>:
     643:	25 75 00                                            %u.

00000646 <__c.5059>:
     646:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     656:	65 64 3a 20 00                                      ed: .

0000065b <__c.5057>:
     65b:	0a 00                                               ..

0000065d <__c.5055>:
     65d:	25 75 00                                            %u.

00000660 <__c.5053>:
     660:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     670:	00                                                  .

00000671 <__c.5051>:
     671:	0a 00                                               ..

00000673 <__c.5049>:
     673:	25 75 00                                            %u.

00000676 <__c.5047>:
     676:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

00000685 <__c.5045>:
     685:	0a 00                                               ..

00000687 <__c.5043>:
     687:	25 75 00                                            %u.

0000068a <__c.5041>:
     68a:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     69a:	20 00                                                .

0000069c <__c.5039>:
     69c:	0a 00                                               ..

0000069e <__c.5037>:
     69e:	25 75 00                                            %u.

000006a1 <__c.5035>:
     6a1:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     6b1:	20 00                                                .

000006b3 <__c.5033>:
     6b3:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

000006c1 <__c.5153>:
     6c1:	4d 3e 00                                            M>.

000006c4 <__c.5151>:
     6c4:	4d 25 64 3e 20 00                                   M%d> .

000006ca <__c.5149>:
     6ca:	3f 00                                               ?.

000006cc <__c.5146>:
     6cc:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

000006d9 <__c.5132>:
     6d9:	43 3e 20 00                                         C> .

000006dd <__c.5122>:
     6dd:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     6ed:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     6fd:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     70d:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     71d:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

0000072b <__c.5120>:
     72b:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     73b:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     74b:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     75b:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     76b:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     77b:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     78b:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     79b:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     7ab:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     7bb:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     7cb:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     7db:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     7eb:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     7fb:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     80b:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     81b:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

00000826 <__c.5025>:
     826:	3f 00                                               ?.

00000828 <__c.5022>:
     828:	4d 3e 20 00                                         M> .

0000082c <__c.5027>:
     82c:	43 3e 20 00                                         C> .

00000830 <__c.5171>:
     830:	4c 25 64 0a 00                                      L%d..

00000835 <__c.5011>:
     835:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     845:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     855:	73 65 6b 65 79 0a 00                                sekey..

0000085c <__c.4835>:
     85c:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     86c:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     87c:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     88c:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     89c:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     8ac:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     8bc:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     8cc:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     8dc:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     8ec:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 6e 3a 09 4e     r.e:.eeprom.n:.N
     8fc:	4b 52 4f 0a 00                                      KRO..

00000901 <__c.4930>:
     901:	0a 00                                               ..

00000903 <__c.4928>:
     903:	25 75 00                                            %u.

00000906 <__c.4926>:
     906:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

0000090e <__c.4924>:
     90e:	0a 00                                               ..

00000910 <__c.4922>:
     910:	25 75 00                                            %u.

00000913 <__c.4920>:
     913:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     923:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

0000092f <__c.4918>:
     92f:	0a 00                                               ..

00000931 <__c.4916>:
     931:	25 75 00                                            %u.

00000934 <__c.4914>:
     934:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     944:	20 00                                                .

00000946 <__c.4912>:
     946:	0a 00                                               ..

00000948 <__c.4910>:
     948:	25 75 00                                            %u.

0000094b <__c.4908>:
     94b:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

00000955 <__c.4906>:
     955:	0a 00                                               ..

00000957 <__c.4904>:
     957:	25 75 00                                            %u.

0000095a <__c.4902>:
     95a:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     96a:	20 00                                                .

0000096c <__c.4900>:
     96c:	0a 00                                               ..

0000096e <__c.4898>:
     96e:	25 75 00                                            %u.

00000971 <__c.4896>:
     971:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     981:	20 00                                                .

00000983 <__c.4894>:
     983:	0a 00                                               ..

00000985 <__c.4892>:
     985:	25 75 00                                            %u.

00000988 <__c.4890>:
     988:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     998:	74 72 6f 6c 3a 20 00                                trol: .

0000099f <__c.4888>:
     99f:	0a 00                                               ..

000009a1 <__c.4886>:
     9a1:	25 75 00                                            %u.

000009a4 <__c.4884>:
     9a4:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     9b4:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

000009bd <__c.4882>:
     9bd:	0a 00                                               ..

000009bf <__c.4880>:
     9bf:	25 30 32 58 00                                      %02X.

000009c4 <__c.4878>:
     9c4:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     9d4:	77 3a 20 00                                         w: .

000009d8 <__c.4875>:
     9d8:	0a 00                                               ..

000009da <__c.4873>:
     9da:	25 75 00                                            %u.

000009dd <__c.4871>:
     9dd:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

000009e6 <__c.4869>:
     9e6:	0a 00                                               ..

000009e8 <__c.4867>:
     9e8:	25 75 00                                            %u.

000009eb <__c.4865>:
     9eb:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

000009f7 <__c.4863>:
     9f7:	0a 00                                               ..

000009f9 <__c.4861>:
     9f9:	25 75 00                                            %u.

000009fc <__c.4859>:
     9fc:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

00000a06 <__c.4857>:
     a06:	0a 00                                               ..

00000a08 <__c.4855>:
     a08:	25 75 00                                            %u.

00000a0b <__c.4853>:
     a0b:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

00000a15 <__c.4851>:
     a15:	0a 00                                               ..

00000a17 <__c.4849>:
     a17:	25 30 32 58 00                                      %02X.

00000a1c <__c.4847>:
     a1c:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     a2c:	3a 20 00                                            : .

00000a2f <__c.4844>:
     a2f:	0a 00                                               ..

00000a31 <__c.4842>:
     a31:	25 75 00                                            %u.

00000a34 <__c.4840>:
     a34:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

00000a44 <__c.5006>:
     a44:	3f 00                                               ?.

00000a46 <__c.4997>:
     a46:	4e 4b 52 4f 3a 20 6f 66 66 0a 00                    NKRO: off..

00000a51 <__c.4995>:
     a51:	4e 4b 52 4f 3a 20 6f 6e 0a 00                       NKRO: on..

00000a5b <__c.4992>:
     a5b:	74 69 6d 65 72 5f 63 6f 75 6e 74 3a 20 25 30 34     timer_count: %04
     a6b:	6c 58 0a 00                                         lX..

00000a6f <__c.4990>:
     a6f:	6b 65 79 62 6f 61 72 64 5f 6e 6b 72 6f 3a 20 25     keyboard_nkro: %
     a7f:	58 0a 00                                            X..

00000a82 <__c.4988>:
     a82:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     a92:	58 0a 00                                            X..

00000a95 <__c.4986>:
     a95:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     aa5:	6c 3a 20 25 58 0a 00                                l: %X..

00000aac <__c.4984>:
     aac:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     abc:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000ac6 <__c.4982>:
     ac6:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

00000ad4 <__c.4979>:
     ad4:	47 43 43 3a 20 34 2e 39 2e 32 20 41 56 52 2d 4c     GCC: 4.9.2 AVR-L
     ae4:	49 42 43 3a 20 31 2e 38 2e 30 73 76 6e 20 41 56     IBC: 1.8.0svn AV
     af4:	52 5f 41 52 43 48 3a 20 61 76 72 35 0a 00           R_ARCH: avr5..

00000b02 <__c.4977>:
     b02:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     b12:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     b22:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     b32:	45 20 43 4f 4d 4d 41 4e 44 20 4e 4b 52 4f 20 35     E COMMAND NKRO 5
     b42:	31 32 0a 00                                         12..

00000b46 <__c.4975>:
     b46:	42 55 49 4c 44 3a 20 63 36 30 37 38 39 33 2d 64     BUILD: c607893-d
     b56:	69 72 74 79 20 28 31 31 3a 31 37 3a 34 38 20 41     irty (11:17:48 A
     b66:	70 72 20 20 37 20 32 30 31 37 29 0a 00              pr  7 2017)..

00000b73 <__c.4973>:
     b73:	56 49 44 3a 20 30 78 46 45 45 44 28 74 2e 6d 2e     VID: 0xFEED(t.m.
     b83:	6b 2e 29 20 50 49 44 3a 20 30 78 43 41 46 45 28     k.) PID: 0xCAFE(
     b93:	48 48 4b 42 20 6d 6f 64 29 20 56 45 52 3a 20 30     HHKB mod) VER: 0
     ba3:	78 30 31 30 34 0a 00                                x0104..

00000baa <__c.4971>:
     baa:	44 45 53 43 3a 20 74 2e 6d 2e 6b 2e 20 6b 65 79     DESC: t.m.k. key
     bba:	62 6f 61 72 64 20 66 69 72 6d 77 61 72 65 20 66     board firmware f
     bca:	6f 72 20 48 48 4b 42 20 6d 6f 64 0a 00              or HHKB mod..

00000bd7 <__c.4969>:
     bd7:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

00000be6 <__c.4966>:
     be6:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

00000bf3 <__c.4964>:
     bf3:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

00000bff <__c.4961>:
     bff:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

00000c0f <__c.4959>:
     c0f:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

00000c1e <__c.4956>:
     c1e:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000c2c <__c.4954>:
     c2c:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000c39 <__c.4951>:
     c39:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000c45 <__c.4949>:
     c45:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000c52 <__c.4946>:
     c52:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     c62:	00                                                  .

00000c63 <__c.4943>:
     c63:	43 3e 20 00                                         C> .

00000c67 <__c.4937>:
     c67:	65 65 63 6f 6e 66 69 67 3a 0a 00                    eeconfig:..

00000c72 <__ctors_end>:
     c72:	11 24       	eor	r1, r1
     c74:	1f be       	out	0x3f, r1	; 63
     c76:	cf ef       	ldi	r28, 0xFF	; 255
     c78:	da e0       	ldi	r29, 0x0A	; 10
     c7a:	de bf       	out	0x3e, r29	; 62
     c7c:	cd bf       	out	0x3d, r28	; 61

00000c7e <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     c7e:	04 b6       	in	r0, 0x34	; 52
     c80:	03 fe       	sbrs	r0, 3
     c82:	27 c0       	rjmp	.+78     	; 0xcd2 <__do_copy_data>
     c84:	80 91 ea 01 	lds	r24, 0x01EA
     c88:	90 91 eb 01 	lds	r25, 0x01EB
     c8c:	a0 91 ec 01 	lds	r26, 0x01EC
     c90:	b0 91 ed 01 	lds	r27, 0x01ED
     c94:	87 30       	cpi	r24, 0x07	; 7
     c96:	90 4b       	sbci	r25, 0xB0	; 176
     c98:	a7 40       	sbci	r26, 0x07	; 7
     c9a:	b0 4b       	sbci	r27, 0xB0	; 176
     c9c:	d1 f4       	brne	.+52     	; 0xcd2 <__do_copy_data>
        reset_key = 0;
     c9e:	10 92 ea 01 	sts	0x01EA, r1
     ca2:	10 92 eb 01 	sts	0x01EB, r1
     ca6:	10 92 ec 01 	sts	0x01EC, r1
     caa:	10 92 ed 01 	sts	0x01ED, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     cae:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     cb0:	84 b7       	in	r24, 0x34	; 52
     cb2:	87 7f       	andi	r24, 0xF7	; 247
     cb4:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	f8 94       	cli
     cba:	a8 95       	wdr
     cbc:	80 91 60 00 	lds	r24, 0x0060
     cc0:	88 61       	ori	r24, 0x18	; 24
     cc2:	80 93 60 00 	sts	0x0060, r24
     cc6:	10 92 60 00 	sts	0x0060, r1
     cca:	0f be       	out	0x3f, r0	; 63
        wdt_disable();

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     ccc:	e0 e0       	ldi	r30, 0x00	; 0
     cce:	ff e3       	ldi	r31, 0x3F	; 63
     cd0:	09 95       	icall

00000cd2 <__do_copy_data>:
     cd2:	11 e0       	ldi	r17, 0x01	; 1
     cd4:	a0 e0       	ldi	r26, 0x00	; 0
     cd6:	b1 e0       	ldi	r27, 0x01	; 1
     cd8:	ec ea       	ldi	r30, 0xAC	; 172
     cda:	f3 e5       	ldi	r31, 0x53	; 83
     cdc:	02 c0       	rjmp	.+4      	; 0xce2 <__do_copy_data+0x10>
     cde:	05 90       	lpm	r0, Z+
     ce0:	0d 92       	st	X+, r0
     ce2:	a8 33       	cpi	r26, 0x38	; 56
     ce4:	b1 07       	cpc	r27, r17
     ce6:	d9 f7       	brne	.-10     	; 0xcde <__do_copy_data+0xc>

00000ce8 <__do_clear_bss>:
     ce8:	21 e0       	ldi	r18, 0x01	; 1
     cea:	a8 e3       	ldi	r26, 0x38	; 56
     cec:	b1 e0       	ldi	r27, 0x01	; 1
     cee:	01 c0       	rjmp	.+2      	; 0xcf2 <.do_clear_bss_start>

00000cf0 <.do_clear_bss_loop>:
     cf0:	1d 92       	st	X+, r1

00000cf2 <.do_clear_bss_start>:
     cf2:	aa 3e       	cpi	r26, 0xEA	; 234
     cf4:	b2 07       	cpc	r27, r18
     cf6:	e1 f7       	brne	.-8      	; 0xcf0 <.do_clear_bss_loop>
     cf8:	0e 94 0c 0b 	call	0x1618	; 0x1618 <main>
     cfc:	0c 94 d4 29 	jmp	0x53a8	; 0x53a8 <_exit>

00000d00 <__bad_interrupt>:
     d00:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000d04 <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     d04:	ff 93       	push	r31
	push	ZL
     d06:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     d08:	e0 91 38 01 	lds	r30, 0x0138
	lds	ZH, xfunc_out+1	;/
     d0c:	f0 91 39 01 	lds	r31, 0x0139
	sbiw	ZL, 0		;Skip if null
     d10:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     d12:	09 f0       	breq	.+2      	; 0xd16 <xputc+0x12>
	icall
     d14:	09 95       	icall
2:	pop	ZL
     d16:	ef 91       	pop	r30
	pop	ZH
     d18:	ff 91       	pop	r31
	ret
     d1a:	08 95       	ret

00000d1c <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     d1c:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     d1e:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     d20:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     d22:	11 f0       	breq	.+4      	; 0xd28 <xputs+0xc>
	rcall	xputc
     d24:	ef df       	rcall	.-34     	; 0xd04 <xputc>
	rjmp	1b
     d26:	fb cf       	rjmp	.-10     	; 0xd1e <xputs+0x2>
2:	ret
     d28:	08 95       	ret

00000d2a <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     d2a:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     d2c:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     d2e:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     d30:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     d32:	0c c0       	rjmp	.+24     	; 0xd4c <xitoa+0x22>
	neg	r20		;
     d34:	41 95       	neg	r20
	sbrs	r25, 7		;
     d36:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     d38:	09 c0       	rjmp	.+18     	; 0xd4c <xitoa+0x22>
	ldi	r30, '-'	;
     d3a:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     d3c:	60 95       	com	r22
	com	r23		;
     d3e:	70 95       	com	r23
	com	r24		;
     d40:	80 95       	com	r24
	com	r25		;
     d42:	90 95       	com	r25
	adc	r22, r1		;
     d44:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     d46:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     d48:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     d4a:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     d4c:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <xitoa+0x2a>
	neg	r18		;
     d50:	21 95       	neg	r18
	ldi	r19, '0'	;/
     d52:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     d54:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     d56:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     d58:	66 0f       	add	r22, r22
	rol	r23		;
     d5a:	77 1f       	adc	r23, r23
	rol	r24		;
     d5c:	88 1f       	adc	r24, r24
	rol	r25		;
     d5e:	99 1f       	adc	r25, r25
	rol	r26		;
     d60:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     d62:	a4 17       	cp	r26, r20
	brcs	3f		;
     d64:	10 f0       	brcs	.+4      	; 0xd6a <xitoa+0x40>
	sub	r26, r20	;
     d66:	a4 1b       	sub	r26, r20
	inc	r22		;
     d68:	63 95       	inc	r22
3:	dec	r21		;
     d6a:	5a 95       	dec	r21
	brne	2b		;/
     d6c:	a9 f7       	brne	.-22     	; 0xd58 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     d6e:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     d70:	08 f0       	brcs	.+2      	; 0xd74 <xitoa+0x4a>
	subi	r26, -7		;
     d72:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     d74:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     d76:	af 93       	push	r26
	inc	r31		;/
     d78:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     d7a:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     d7c:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     d7e:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     d80:	91 05       	cpc	r25, r1
	brne	1b		;/
     d82:	41 f7       	brne	.-48     	; 0xd54 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     d84:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     d86:	11 f4       	brne	.+4      	; 0xd8c <xitoa+0x62>
	push	r30		;
     d88:	ef 93       	push	r30
	inc	r31		;/
     d8a:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     d8c:	f2 17       	cp	r31, r18
	brcc	6f		;
     d8e:	18 f4       	brcc	.+6      	; 0xd96 <xitoa+0x6c>
	push	r19		;
     d90:	3f 93       	push	r19
	inc	r31		;
     d92:	f3 95       	inc	r31
	rjmp	5b		;/
     d94:	fb cf       	rjmp	.-10     	; 0xd8c <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     d96:	8f 91       	pop	r24
	rcall	xputc		;
     d98:	b5 df       	rcall	.-150    	; 0xd04 <xputc>
	dec	r31		;
     d9a:	fa 95       	dec	r31
	brne	6b		;/
     d9c:	e1 f7       	brne	.-8      	; 0xd96 <xitoa+0x6c>

	ret
     d9e:	08 95       	ret

00000da0 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     da0:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     da2:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     da4:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     da6:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     da8:	21 f0       	breq	.+8      	; 0xdb2 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     daa:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     dac:	19 f0       	breq	.+6      	; 0xdb4 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     dae:	aa df       	rcall	.-172    	; 0xd04 <xputc>
	rjmp	0b		;/
     db0:	f9 cf       	rjmp	.-14     	; 0xda4 <xvprintf+0x4>
90:	ret
     db2:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     db4:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     db6:	e8 94       	clt
	_LPMI	r21		;Get flags
     db8:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     dba:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     dbc:	c1 f3       	breq	.-16     	; 0xdae <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     dbe:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     dc0:	11 f4       	brne	.+4      	; 0xdc6 <xvprintf+0x26>
	set			;/
     dc2:	68 94       	set
22:	_LPMI	r21		;Get width
     dc4:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     dc6:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     dc8:	48 f4       	brcc	.+18     	; 0xddc <xvprintf+0x3c>
	subi	r21, '0'	;
     dca:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     dcc:	90 f3       	brcs	.-28     	; 0xdb2 <xvprintf+0x12>
	lsl	r18		;
     dce:	22 0f       	add	r18, r18
	mov	r0, r18		;
     dd0:	02 2e       	mov	r0, r18
	lsl	r18		;
     dd2:	22 0f       	add	r18, r18
	lsl	r18		;
     dd4:	22 0f       	add	r18, r18
	add	r18, r0		;
     dd6:	20 0d       	add	r18, r0
	add	r18, r21	;
     dd8:	25 0f       	add	r18, r21
	rjmp	22b		;/
     dda:	f4 cf       	rjmp	.-24     	; 0xdc4 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     ddc:	0e f4       	brtc	.+2      	; 0xde0 <xvprintf+0x40>
	neg	r18		;
     dde:	21 95       	neg	r18
25:	ld	r24, Y+		;
     de0:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     de2:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     de4:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     de6:	19 f3       	breq	.-58     	; 0xdae <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     de8:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     dea:	29 f1       	breq	.+74     	; 0xe36 <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     dec:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     dee:	59 f1       	breq	.+86     	; 0xe46 <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     df0:	bc 01       	movw	r22, r24
	clr	r24		;
     df2:	88 27       	eor	r24, r24
	clr	r25		;
     df4:	99 27       	eor	r25, r25
	clt			;/
     df6:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     df8:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     dfa:	21 f4       	brne	.+8      	; 0xe04 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     dfc:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     dfe:	99 91       	ld	r25, Y+
	set			;
     e00:	68 94       	set
	_LPMI	r21		;/
     e02:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     e04:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     e06:	39 f4       	brne	.+14     	; 0xe16 <xvprintf+0x76>
	ldi	r20, -10	;
     e08:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     e0a:	7e f0       	brts	.+30     	; 0xe2a <xvprintf+0x8a>
	sbrs	r23, 7		;
     e0c:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     e0e:	0d c0       	rjmp	.+26     	; 0xe2a <xvprintf+0x8a>
	ldi	r24, -1		;
     e10:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     e12:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     e14:	0a c0       	rjmp	.+20     	; 0xe2a <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     e16:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     e18:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     e1a:	39 f0       	breq	.+14     	; 0xe2a <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     e1c:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     e1e:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     e20:	21 f0       	breq	.+8      	; 0xe2a <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     e22:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     e24:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     e26:	09 f0       	breq	.+2      	; 0xe2a <xvprintf+0x8a>
	ret			;abort
     e28:	08 95       	ret
40:	push	ZH		;Output the value
     e2a:	ff 93       	push	r31
	push	ZL		;
     e2c:	ef 93       	push	r30
	rcall	xitoa		;
     e2e:	7d df       	rcall	.-262    	; 0xd2a <xitoa>
42:	pop	ZL		;
     e30:	ef 91       	pop	r30
	pop	ZH		;
     e32:	ff 91       	pop	r31
	rjmp	0b		;/
     e34:	b7 cf       	rjmp	.-146    	; 0xda4 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     e36:	ff 93       	push	r31
	push	ZL
     e38:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     e3a:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     e3c:	81 91       	ld	r24, Z+
	cpi	r24, 0
     e3e:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     e40:	b9 f3       	breq	.-18     	; 0xe30 <xvprintf+0x90>
	rcall	xputc
     e42:	60 df       	rcall	.-320    	; 0xd04 <xputc>
	rjmp	51b
     e44:	fb cf       	rjmp	.-10     	; 0xe3c <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     e46:	ff 93       	push	r31
	push	ZL
     e48:	ef 93       	push	r30
	rcall	xputs
     e4a:	68 df       	rcall	.-304    	; 0xd1c <xputs>
	rjmp	42b
     e4c:	f1 cf       	rjmp	.-30     	; 0xe30 <xvprintf+0x90>

00000e4e <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     e4e:	df 93       	push	r29
	push	YL
     e50:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     e52:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     e54:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     e56:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     e58:	a3 df       	rcall	.-186    	; 0xda0 <xvprintf>
	pop	YL
     e5a:	cf 91       	pop	r28
	pop	YH
     e5c:	df 91       	pop	r29
	ret
     e5e:	08 95       	ret

00000e60 <action_get_macro>:
    VOLUP,
    ALT_TAB,
};

const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
     e60:	fc 01       	movw	r30, r24
    switch (id) {
     e62:	61 30       	cpi	r22, 0x01	; 1
     e64:	51 f0       	breq	.+20     	; 0xe7a <action_get_macro+0x1a>
     e66:	18 f0       	brcs	.+6      	; 0xe6e <action_get_macro+0xe>
     e68:	62 30       	cpi	r22, 0x02	; 2
     e6a:	69 f0       	breq	.+26     	; 0xe86 <action_get_macro+0x26>
     e6c:	12 c0       	rjmp	.+36     	; 0xe92 <action_get_macro+0x32>
        case HELLO:
            return (record->event.pressed ?
                    MACRO(T(SPC),T(MINS),D(LSHIFT),T(DOT),U(LSHIFT),T(SPC), END ) :
     e6e:	82 81       	ldd	r24, Z+2	; 0x02
     e70:	88 23       	and	r24, r24
     e72:	79 f0       	breq	.+30     	; 0xe92 <action_get_macro+0x32>
     e74:	8d ee       	ldi	r24, 0xED	; 237
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	08 95       	ret
                    MACRO_NONE );
        case VOLUP:
            return (record->event.pressed ?
                    MACRO( D(VOLU), U(VOLU), END ) :
     e7a:	82 81       	ldd	r24, Z+2	; 0x02
     e7c:	88 23       	and	r24, r24
     e7e:	49 f0       	breq	.+18     	; 0xe92 <action_get_macro+0x32>
     e80:	88 ee       	ldi	r24, 0xE8	; 232
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	08 95       	ret
                    MACRO_NONE );
        case ALT_TAB:
            return (record->event.pressed ?
                    MACRO( D(LALT), D(TAB), END ) :
     e86:	82 81       	ldd	r24, Z+2	; 0x02
     e88:	81 11       	cpse	r24, r1
     e8a:	06 c0       	rjmp	.+12     	; 0xe98 <action_get_macro+0x38>
     e8c:	80 ee       	ldi	r24, 0xE0	; 224
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	08 95       	ret
const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    switch (id) {
        case HELLO:
            return (record->event.pressed ?
                    MACRO(T(SPC),T(MINS),D(LSHIFT),T(DOT),U(LSHIFT),T(SPC), END ) :
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	08 95       	ret
            return (record->event.pressed ?
                    MACRO( D(VOLU), U(VOLU), END ) :
                    MACRO_NONE );
        case ALT_TAB:
            return (record->event.pressed ?
                    MACRO( D(LALT), D(TAB), END ) :
     e98:	83 ee       	ldi	r24, 0xE3	; 227
     e9a:	90 e0       	ldi	r25, 0x00	; 0
                    MACRO( U(TAB), END ));
    }
    return MACRO_NONE;
}
     e9c:	08 95       	ret

00000e9e <keymap_key_to_keycode>:


/* translates key to keycode */
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
     e9e:	e7 2f       	mov	r30, r23
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	98 e0       	ldi	r25, 0x08	; 8
     ea4:	89 9f       	mul	r24, r25
     ea6:	e0 0d       	add	r30, r0
     ea8:	f1 1d       	adc	r31, r1
     eaa:	11 24       	eor	r1, r1
     eac:	83 e0       	ldi	r24, 0x03	; 3
     eae:	ee 0f       	add	r30, r30
     eb0:	ff 1f       	adc	r31, r31
     eb2:	8a 95       	dec	r24
     eb4:	e1 f7       	brne	.-8      	; 0xeae <keymap_key_to_keycode+0x10>
     eb6:	e6 0f       	add	r30, r22
     eb8:	f1 1d       	adc	r31, r1
     eba:	e4 5f       	subi	r30, 0xF4	; 244
     ebc:	fe 4f       	sbci	r31, 0xFE	; 254
     ebe:	84 91       	lpm	r24, Z
}
     ec0:	08 95       	ret

00000ec2 <keymap_fn_to_action>:

/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint8_t keycode)
{
    return (action_t){ .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]) };
     ec2:	e8 2f       	mov	r30, r24
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	ee 0f       	add	r30, r30
     ec8:	ff 1f       	adc	r31, r31
     eca:	ee 57       	subi	r30, 0x7E	; 126
     ecc:	f0 40       	sbci	r31, 0x00	; 0
}
     ece:	85 91       	lpm	r24, Z+
     ed0:	94 91       	lpm	r25, Z
     ed2:	08 95       	ret

00000ed4 <matrix_init>:
static inline bool KEY_POWER_STATE(void) { return true; }
#endif
static inline void KEY_INIT(void)
{
    /* row,col,prev: output */
    DDRB  = 0xFF;
     ed4:	8f ef       	ldi	r24, 0xFF	; 255
     ed6:	84 b9       	out	0x04, r24	; 4
    PORTB = 0x40;   // unable
     ed8:	80 e4       	ldi	r24, 0x40	; 64
     eda:	85 b9       	out	0x05, r24	; 5
    DDRF |= (1<<1);
     edc:	81 9a       	sbi	0x10, 1	; 16
    DDRF &= ~(1<<0);
     ede:	80 98       	cbi	0x10, 0	; 16
    PORTF |= (1<<0);
     ee0:	88 9a       	sbi	0x11, 0	; 17
 * prev:    PB7
 * power:   PD4(L:off/H:on)
 * row-ext: PC6,7 for HHKB JP(active low)
 */
static inline void KEY_ENABLE(void) { (PORTB &= ~(1<<6)); }
static inline void KEY_UNABLE(void) { (PORTB |=  (1<<6)); }
     ee2:	2e 9a       	sbi	0x05, 6	; 5
static inline bool KEY_STATE(void) { return (PINF & (1<<0)); }
static inline void KEY_PREV_ON(void) { (PORTF |=  (1<<1)); }
static inline void KEY_PREV_OFF(void) { (PORTF &= ~(1<<1)); }
     ee4:	89 98       	cbi	0x11, 1	; 17
     ee6:	e2 e4       	ldi	r30, 0x42	; 66
     ee8:	f1 e0       	ldi	r31, 0x01	; 1
     eea:	88 e0       	ldi	r24, 0x08	; 8
     eec:	8e 0f       	add	r24, r30
#endif

    KEY_INIT();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) _matrix0[i] = 0x00;
     eee:	11 92       	st	Z+, r1
     ef0:	8e 13       	cpse	r24, r30
     ef2:	fd cf       	rjmp	.-6      	; 0xeee <matrix_init+0x1a>
     ef4:	ea e3       	ldi	r30, 0x3A	; 58
     ef6:	f1 e0       	ldi	r31, 0x01	; 1
     ef8:	88 e0       	ldi	r24, 0x08	; 8
     efa:	8e 0f       	add	r24, r30
    for (uint8_t i=0; i < MATRIX_ROWS; i++) _matrix1[i] = 0x00;
     efc:	11 92       	st	Z+, r1
     efe:	8e 13       	cpse	r24, r30
     f00:	fd cf       	rjmp	.-6      	; 0xefc <matrix_init+0x28>
    matrix = _matrix0;
     f02:	82 e4       	ldi	r24, 0x42	; 66
     f04:	91 e0       	ldi	r25, 0x01	; 1
     f06:	90 93 4d 01 	sts	0x014D, r25
     f0a:	80 93 4c 01 	sts	0x014C, r24
    matrix_prev = _matrix1;
     f0e:	8a e3       	ldi	r24, 0x3A	; 58
     f10:	91 e0       	ldi	r25, 0x01	; 1
     f12:	90 93 4b 01 	sts	0x014B, r25
     f16:	80 93 4a 01 	sts	0x014A, r24
     f1a:	08 95       	ret

00000f1c <matrix_scan>:
}

uint8_t matrix_scan(void)
{
     f1c:	0f 93       	push	r16
     f1e:	1f 93       	push	r17
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
    uint8_t *tmp;

    tmp = matrix_prev;
     f24:	80 91 4a 01 	lds	r24, 0x014A
     f28:	90 91 4b 01 	lds	r25, 0x014B
    matrix_prev = matrix;
     f2c:	20 91 4c 01 	lds	r18, 0x014C
     f30:	30 91 4d 01 	lds	r19, 0x014D
     f34:	30 93 4b 01 	sts	0x014B, r19
     f38:	20 93 4a 01 	sts	0x014A, r18
    matrix = tmp;
     f3c:	90 93 4d 01 	sts	0x014D, r25
     f40:	80 93 4c 01 	sts	0x014C, r24
     f44:	c0 e0       	ldi	r28, 0x00	; 0
     f46:	d0 e0       	ldi	r29, 0x00	; 0
            _delay_us(5);

            if (KEY_STATE()) {
                matrix[row] &= ~(1<<col);
            } else {
                matrix[row] |= (1<<col);
     f48:	01 e0       	ldi	r16, 0x01	; 1
     f4a:	10 e0       	ldi	r17, 0x00	; 0
    matrix = _matrix0;
    matrix_prev = _matrix1;
}

uint8_t matrix_scan(void)
{
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	90 e0       	ldi	r25, 0x00	; 0

    KEY_POWER_OFF();
}
static inline void KEY_SELECT(uint8_t ROW, uint8_t COL)
{
    PORTB = (PORTB & 0xC0) | (((COL) & 0x07)<<3) | ((ROW) & 0x07);
     f50:	25 b1       	in	r18, 0x05	; 5
     f52:	20 7c       	andi	r18, 0xC0	; 192
     f54:	2c 2b       	or	r18, r28
     f56:	ac 01       	movw	r20, r24
     f58:	33 e0       	ldi	r19, 0x03	; 3
     f5a:	44 0f       	add	r20, r20
     f5c:	55 1f       	adc	r21, r21
     f5e:	3a 95       	dec	r19
     f60:	e1 f7       	brne	.-8      	; 0xf5a <matrix_scan+0x3e>
     f62:	24 2b       	or	r18, r20
     f64:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f66:	ea e1       	ldi	r30, 0x1A	; 26
     f68:	ea 95       	dec	r30
     f6a:	f1 f7       	brne	.-4      	; 0xf68 <matrix_scan+0x4c>
     f6c:	00 c0       	rjmp	.+0      	; 0xf6e <matrix_scan+0x52>
        for (uint8_t col = 0; col < MATRIX_COLS; col++) {
            KEY_SELECT(row, col);
            _delay_us(5);

            // Not sure this is needed. This just emulates HHKB controller's behaviour.
            if (matrix_prev[row] & (1<<col)) {
     f6e:	e0 91 4a 01 	lds	r30, 0x014A
     f72:	f0 91 4b 01 	lds	r31, 0x014B
     f76:	ec 0f       	add	r30, r28
     f78:	fd 1f       	adc	r31, r29
     f7a:	20 81       	ld	r18, Z
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	08 2e       	mov	r0, r24
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <matrix_scan+0x6a>
     f82:	35 95       	asr	r19
     f84:	27 95       	ror	r18
     f86:	0a 94       	dec	r0
     f88:	e2 f7       	brpl	.-8      	; 0xf82 <matrix_scan+0x66>
     f8a:	20 fd       	sbrc	r18, 0
 * row-ext: PC6,7 for HHKB JP(active low)
 */
static inline void KEY_ENABLE(void) { (PORTB &= ~(1<<6)); }
static inline void KEY_UNABLE(void) { (PORTB |=  (1<<6)); }
static inline bool KEY_STATE(void) { return (PINF & (1<<0)); }
static inline void KEY_PREV_ON(void) { (PORTF |=  (1<<1)); }
     f8c:	89 9a       	sbi	0x11, 1	; 17
     f8e:	f5 e3       	ldi	r31, 0x35	; 53
     f90:	fa 95       	dec	r31
     f92:	f1 f7       	brne	.-4      	; 0xf90 <matrix_scan+0x74>
     f94:	00 00       	nop
            _delay_us(10);

            // NOTE: KEY_STATE is valid only in 20us after KEY_ENABLE.
            // If V-USB interrupts in this section we could lose 40us or so
            // and would read invalid value from KEY_STATE.
            uint8_t last = TIMER_RAW;
     f96:	e6 b5       	in	r30, 0x26	; 38
 * key:     PD7(pull-uped)
 * prev:    PB7
 * power:   PD4(L:off/H:on)
 * row-ext: PC6,7 for HHKB JP(active low)
 */
static inline void KEY_ENABLE(void) { (PORTB &= ~(1<<6)); }
     f98:	2e 98       	cbi	0x05, 6	; 5
     f9a:	2a e1       	ldi	r18, 0x1A	; 26
     f9c:	2a 95       	dec	r18
     f9e:	f1 f7       	brne	.-4      	; 0xf9c <matrix_scan+0x80>
     fa0:	00 c0       	rjmp	.+0      	; 0xfa2 <matrix_scan+0x86>
     fa2:	40 91 4c 01 	lds	r20, 0x014C
     fa6:	50 91 4d 01 	lds	r21, 0x014D
            // 10us wait does    work on 328p+iwrap with pro
            // 10us wait doesn't work on tmk PCB(8MHz) with pro2(very lagged scan)
            _delay_us(5);

            if (KEY_STATE()) {
                matrix[row] &= ~(1<<col);
     faa:	da 01       	movw	r26, r20
     fac:	ac 0f       	add	r26, r28
     fae:	bd 1f       	adc	r27, r29
            // 10us wait does    work on Teensy++ with pro
            // 10us wait does    work on 328p+iwrap with pro
            // 10us wait doesn't work on tmk PCB(8MHz) with pro2(very lagged scan)
            _delay_us(5);

            if (KEY_STATE()) {
     fb0:	78 9b       	sbis	0x0f, 0	; 15
     fb2:	0a c0       	rjmp	.+20     	; 0xfc8 <matrix_scan+0xac>
                matrix[row] &= ~(1<<col);
     fb4:	98 01       	movw	r18, r16
     fb6:	08 2e       	mov	r0, r24
     fb8:	01 c0       	rjmp	.+2      	; 0xfbc <matrix_scan+0xa0>
     fba:	22 0f       	add	r18, r18
     fbc:	0a 94       	dec	r0
     fbe:	ea f7       	brpl	.-6      	; 0xfba <matrix_scan+0x9e>
     fc0:	20 95       	com	r18
     fc2:	3c 91       	ld	r19, X
     fc4:	23 23       	and	r18, r19
     fc6:	08 c0       	rjmp	.+16     	; 0xfd8 <matrix_scan+0xbc>
            } else {
                matrix[row] |= (1<<col);
     fc8:	6c 91       	ld	r22, X
     fca:	98 01       	movw	r18, r16
     fcc:	08 2e       	mov	r0, r24
     fce:	01 c0       	rjmp	.+2      	; 0xfd2 <matrix_scan+0xb6>
     fd0:	22 0f       	add	r18, r18
     fd2:	0a 94       	dec	r0
     fd4:	ea f7       	brpl	.-6      	; 0xfd0 <matrix_scan+0xb4>
     fd6:	26 2b       	or	r18, r22
     fd8:	2c 93       	st	X, r18
            }

            // Ignore if this code region execution time elapses more than 20us.
            // MEMO: 20[us] * (TIMER_RAW_FREQ / 1000000)[count per us]
            // MEMO: then change above using this rule: a/(b/c) = a*1/(b/c) = a*(c/b)
            if (TIMER_DIFF_RAW(TIMER_RAW, last) > 20/(1000000/TIMER_RAW_FREQ)) {
     fda:	26 b5       	in	r18, 0x26	; 38
     fdc:	6e 2f       	mov	r22, r30
     fde:	70 e0       	ldi	r23, 0x00	; 0
     fe0:	2e 17       	cp	r18, r30
     fe2:	18 f0       	brcs	.+6      	; 0xfea <matrix_scan+0xce>
     fe4:	26 b5       	in	r18, 0x26	; 38
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	04 c0       	rjmp	.+8      	; 0xff2 <matrix_scan+0xd6>
     fea:	26 b5       	in	r18, 0x26	; 38
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	21 50       	subi	r18, 0x01	; 1
     ff0:	3f 4f       	sbci	r19, 0xFF	; 255
     ff2:	26 1b       	sub	r18, r22
     ff4:	37 0b       	sbc	r19, r23
     ff6:	26 30       	cpi	r18, 0x06	; 6
     ff8:	31 05       	cpc	r19, r1
     ffa:	58 f0       	brcs	.+22     	; 0x1012 <matrix_scan+0xf6>
                matrix[row] = matrix_prev[row];
     ffc:	e0 91 4a 01 	lds	r30, 0x014A
    1000:	f0 91 4b 01 	lds	r31, 0x014B
    1004:	ec 0f       	add	r30, r28
    1006:	fd 1f       	adc	r31, r29
    1008:	20 81       	ld	r18, Z
    100a:	fa 01       	movw	r30, r20
    100c:	ec 0f       	add	r30, r28
    100e:	fd 1f       	adc	r31, r29
    1010:	20 83       	st	Z, r18
    1012:	3a e1       	ldi	r19, 0x1A	; 26
    1014:	3a 95       	dec	r19
    1016:	f1 f7       	brne	.-4      	; 0x1014 <matrix_scan+0xf8>
    1018:	00 c0       	rjmp	.+0      	; 0x101a <matrix_scan+0xfe>
static inline void KEY_UNABLE(void) { (PORTB |=  (1<<6)); }
static inline bool KEY_STATE(void) { return (PINF & (1<<0)); }
static inline void KEY_PREV_ON(void) { (PORTF |=  (1<<1)); }
static inline void KEY_PREV_OFF(void) { (PORTF &= ~(1<<1)); }
    101a:	89 98       	cbi	0x11, 1	; 17
 * prev:    PB7
 * power:   PD4(L:off/H:on)
 * row-ext: PC6,7 for HHKB JP(active low)
 */
static inline void KEY_ENABLE(void) { (PORTB &= ~(1<<6)); }
static inline void KEY_UNABLE(void) { (PORTB |=  (1<<6)); }
    101c:	2e 9a       	sbi	0x05, 6	; 5
    101e:	eb e2       	ldi	r30, 0x2B	; 43
    1020:	f1 e0       	ldi	r31, 0x01	; 1
    1022:	31 97       	sbiw	r30, 0x01	; 1
    1024:	f1 f7       	brne	.-4      	; 0x1022 <matrix_scan+0x106>
    1026:	00 c0       	rjmp	.+0      	; 0x1028 <matrix_scan+0x10c>
    1028:	00 00       	nop
    102a:	01 96       	adiw	r24, 0x01	; 1
    matrix = tmp;

    // power on
    if (!KEY_POWER_STATE()) KEY_POWER_ON();
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        for (uint8_t col = 0; col < MATRIX_COLS; col++) {
    102c:	88 30       	cpi	r24, 0x08	; 8
    102e:	91 05       	cpc	r25, r1
    1030:	09 f0       	breq	.+2      	; 0x1034 <matrix_scan+0x118>
    1032:	8e cf       	rjmp	.-228    	; 0xf50 <matrix_scan+0x34>
            _delay_us(30);
#else
            _delay_us(75);
#endif
        }
        if (matrix[row] ^ matrix_prev[row]) matrix_last_modified = timer_read32();
    1034:	a0 91 4c 01 	lds	r26, 0x014C
    1038:	b0 91 4d 01 	lds	r27, 0x014D
    103c:	ac 0f       	add	r26, r28
    103e:	bd 1f       	adc	r27, r29
    1040:	e0 91 4a 01 	lds	r30, 0x014A
    1044:	f0 91 4b 01 	lds	r31, 0x014B
    1048:	ec 0f       	add	r30, r28
    104a:	fd 1f       	adc	r31, r29
    104c:	9c 91       	ld	r25, X
    104e:	80 81       	ld	r24, Z
    1050:	98 17       	cp	r25, r24
    1052:	51 f0       	breq	.+20     	; 0x1068 <matrix_scan+0x14c>
    1054:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <timer_read32>
    1058:	60 93 4e 01 	sts	0x014E, r22
    105c:	70 93 4f 01 	sts	0x014F, r23
    1060:	80 93 50 01 	sts	0x0150, r24
    1064:	90 93 51 01 	sts	0x0151, r25
    1068:	21 96       	adiw	r28, 0x01	; 1
    matrix_prev = matrix;
    matrix = tmp;

    // power on
    if (!KEY_POWER_STATE()) KEY_POWER_ON();
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    106a:	c8 30       	cpi	r28, 0x08	; 8
    106c:	d1 05       	cpc	r29, r1
    106e:	09 f0       	breq	.+2      	; 0x1072 <matrix_scan+0x156>
    1070:	6d cf       	rjmp	.-294    	; 0xf4c <matrix_scan+0x30>
        }
        if (matrix[row] ^ matrix_prev[row]) matrix_last_modified = timer_read32();
    }
    // power off
    if (KEY_POWER_STATE() &&
            (USB_DeviceState == DEVICE_STATE_Suspended ||
    1072:	80 91 e1 01 	lds	r24, 0x01E1
#endif
        }
        if (matrix[row] ^ matrix_prev[row]) matrix_last_modified = timer_read32();
    }
    // power off
    if (KEY_POWER_STATE() &&
    1076:	85 30       	cpi	r24, 0x05	; 5
    1078:	21 f0       	breq	.+8      	; 0x1082 <matrix_scan+0x166>
            (USB_DeviceState == DEVICE_STATE_Suspended ||
             USB_DeviceState == DEVICE_STATE_Unattached ) &&
    107a:	80 91 e1 01 	lds	r24, 0x01E1
        }
        if (matrix[row] ^ matrix_prev[row]) matrix_last_modified = timer_read32();
    }
    // power off
    if (KEY_POWER_STATE() &&
            (USB_DeviceState == DEVICE_STATE_Suspended ||
    107e:	81 11       	cpse	r24, r1
    1080:	11 c0       	rjmp	.+34     	; 0x10a4 <matrix_scan+0x188>
             USB_DeviceState == DEVICE_STATE_Unattached ) &&
            timer_elapsed32(matrix_last_modified) > MATRIX_POWER_SAVE) {
    1082:	60 91 4e 01 	lds	r22, 0x014E
    1086:	70 91 4f 01 	lds	r23, 0x014F
    108a:	80 91 50 01 	lds	r24, 0x0150
    108e:	90 91 51 01 	lds	r25, 0x0151
    1092:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <timer_elapsed32>
        if (matrix[row] ^ matrix_prev[row]) matrix_last_modified = timer_read32();
    }
    // power off
    if (KEY_POWER_STATE() &&
            (USB_DeviceState == DEVICE_STATE_Suspended ||
             USB_DeviceState == DEVICE_STATE_Unattached ) &&
    1096:	61 31       	cpi	r22, 0x11	; 17
    1098:	77 42       	sbci	r23, 0x27	; 39
    109a:	81 05       	cpc	r24, r1
    109c:	91 05       	cpc	r25, r1
    109e:	10 f0       	brcs	.+4      	; 0x10a4 <matrix_scan+0x188>
            timer_elapsed32(matrix_last_modified) > MATRIX_POWER_SAVE) {
        KEY_POWER_OFF();
        suspend_power_down();
    10a0:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <suspend_power_down>
    }
    return 1;
}
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	1f 91       	pop	r17
    10ac:	0f 91       	pop	r16
    10ae:	08 95       	ret

000010b0 <matrix_get_row>:
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    10b0:	20 91 4c 01 	lds	r18, 0x014C
    10b4:	30 91 4d 01 	lds	r19, 0x014D
    10b8:	f9 01       	movw	r30, r18
    10ba:	e8 0f       	add	r30, r24
    10bc:	f1 1d       	adc	r31, r1
}
    10be:	80 81       	ld	r24, Z
    10c0:	08 95       	ret

000010c2 <matrix_print>:

void matrix_print(void)
{
    10c2:	0f 93       	push	r16
    10c4:	1f 93       	push	r17
    10c6:	cf 93       	push	r28
    10c8:	df 93       	push	r29
    print("\nr/c 01234567\n");
    10ca:	88 e1       	ldi	r24, 0x18	; 24
    10cc:	92 e0       	ldi	r25, 0x02	; 2
    10ce:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    10d2:	c0 e0       	ldi	r28, 0x00	; 0
    10d4:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < matrix_rows(); row++) {
        xprintf("%02X: %08b\n", row, bitrev(matrix_get_row(row)));
    10d6:	0c e0       	ldi	r16, 0x0C	; 12
    10d8:	12 e0       	ldi	r17, 0x02	; 2
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    10da:	e0 91 4c 01 	lds	r30, 0x014C
    10de:	f0 91 4d 01 	lds	r31, 0x014D
    10e2:	ec 0f       	add	r30, r28
    10e4:	fd 1f       	adc	r31, r29

void matrix_print(void)
{
    print("\nr/c 01234567\n");
    for (uint8_t row = 0; row < matrix_rows(); row++) {
        xprintf("%02X: %08b\n", row, bitrev(matrix_get_row(row)));
    10e6:	80 81       	ld	r24, Z
    10e8:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <bitrev>
    10ec:	1f 92       	push	r1
    10ee:	8f 93       	push	r24
    10f0:	df 93       	push	r29
    10f2:	cf 93       	push	r28
    10f4:	1f 93       	push	r17
    10f6:	0f 93       	push	r16
    10f8:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    10fc:	21 96       	adiw	r28, 0x01	; 1
}

void matrix_print(void)
{
    print("\nr/c 01234567\n");
    for (uint8_t row = 0; row < matrix_rows(); row++) {
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	c8 30       	cpi	r28, 0x08	; 8
    110c:	d1 05       	cpc	r29, r1
    110e:	29 f7       	brne	.-54     	; 0x10da <matrix_print+0x18>
        xprintf("%02X: %08b\n", row, bitrev(matrix_get_row(row)));
    }
}
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	1f 91       	pop	r17
    1116:	0f 91       	pop	r16
    1118:	08 95       	ret

0000111a <matrix_power_up>:

void matrix_power_up(void) {
    111a:	08 95       	ret

0000111c <matrix_power_down>:
    KEY_POWER_ON();
}
void matrix_power_down(void) {
    111c:	08 95       	ret

0000111e <led_set>:

/* HHKB has no LEDs */
void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_CAPS_LOCK)) {
        DDRD |= (1<<6);
    111e:	56 9a       	sbi	0x0a, 6	; 10


/* HHKB has no LEDs */
void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_CAPS_LOCK)) {
    1120:	81 ff       	sbrs	r24, 1
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <led_set+0xa>
        DDRD |= (1<<6);
        PORTD |= (1<<6);
    1124:	5e 9a       	sbi	0x0b, 6	; 11
    1126:	08 95       	ret
    } else {
        DDRD |= (1<<6);
        PORTD &= ~(1<<6);
    1128:	5e 98       	cbi	0x0b, 6	; 11
    112a:	08 95       	ret

0000112c <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    112c:	80 91 65 01 	lds	r24, 0x0165
    1130:	08 95       	ret

00001132 <sendchar>:
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
    1132:	9f b7       	in	r25, 0x3f	; 63
    1134:	f8 94       	cli
    1136:	10 92 54 01 	sts	0x0154, r1
    113a:	9f bf       	out	0x3f, r25	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
    113c:	90 91 e1 01 	lds	r25, 0x01E1
    1140:	94 30       	cpi	r25, 0x04	; 4
    1142:	09 f0       	breq	.+2      	; 0x1146 <sendchar+0x14>
    1144:	57 c0       	rjmp	.+174    	; 0x11f4 <sendchar+0xc2>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1146:	90 91 e9 00 	lds	r25, 0x00E9
    114a:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    114c:	30 91 ec 00 	lds	r19, 0x00EC
    1150:	23 2f       	mov	r18, r19
    1152:	21 70       	andi	r18, 0x01	; 1
    1154:	30 fd       	sbrc	r19, 0
    1156:	20 e8       	ldi	r18, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1158:	92 2b       	or	r25, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    115a:	24 e0       	ldi	r18, 0x04	; 4
    115c:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1160:	20 91 eb 00 	lds	r18, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1164:	20 ff       	sbrs	r18, 0
    1166:	43 c0       	rjmp	.+134    	; 0x11ee <sendchar+0xbc>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1168:	20 91 ee 00 	lds	r18, 0x00EE
    116c:	27 ff       	sbrs	r18, 7
    116e:	3f c0       	rjmp	.+126    	; 0x11ee <sendchar+0xbc>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    1170:	20 91 52 01 	lds	r18, 0x0152
    1174:	22 23       	and	r18, r18
    1176:	21 f0       	breq	.+8      	; 0x1180 <sendchar+0x4e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1178:	20 91 e8 00 	lds	r18, 0x00E8
    117c:	25 ff       	sbrs	r18, 5
    117e:	37 c0       	rjmp	.+110    	; 0x11ee <sendchar+0xbc>
        goto ERROR_EXIT;
    }

    timeouted = false;
    1180:	10 92 52 01 	sts	0x0152, r1

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    1184:	26 e0       	ldi	r18, 0x06	; 6
    1186:	30 91 e8 00 	lds	r19, 0x00E8
    118a:	35 fd       	sbrc	r19, 5
    118c:	15 c0       	rjmp	.+42     	; 0x11b8 <sendchar+0x86>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    118e:	30 91 e1 01 	lds	r19, 0x01E1
    1192:	34 30       	cpi	r19, 0x04	; 4
    1194:	61 f5       	brne	.+88     	; 0x11ee <sendchar+0xbc>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1196:	30 91 eb 00 	lds	r19, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
    119a:	35 fd       	sbrc	r19, 5
    119c:	28 c0       	rjmp	.+80     	; 0x11ee <sendchar+0xbc>
    119e:	21 50       	subi	r18, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    11a0:	21 f4       	brne	.+8      	; 0x11aa <sendchar+0x78>
            timeouted = true;
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	80 93 52 01 	sts	0x0152, r24
            goto ERROR_EXIT;
    11a8:	22 c0       	rjmp	.+68     	; 0x11ee <sendchar+0xbc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11aa:	ef e9       	ldi	r30, 0x9F	; 159
    11ac:	ff e0       	ldi	r31, 0x0F	; 15
    11ae:	31 97       	sbiw	r30, 0x01	; 1
    11b0:	f1 f7       	brne	.-4      	; 0x11ae <sendchar+0x7c>
    11b2:	00 c0       	rjmp	.+0      	; 0x11b4 <sendchar+0x82>
    11b4:	00 00       	nop
    11b6:	e7 cf       	rjmp	.-50     	; 0x1186 <sendchar+0x54>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    11b8:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    11bc:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
    11c0:	85 fd       	sbrc	r24, 5
    11c2:	0a c0       	rjmp	.+20     	; 0x11d8 <sendchar+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    11c4:	80 91 e8 00 	lds	r24, 0x00E8
        while (!(Endpoint_IsINReady()));
    11c8:	80 ff       	sbrs	r24, 0
    11ca:	fc cf       	rjmp	.-8      	; 0x11c4 <sendchar+0x92>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    11cc:	80 91 e8 00 	lds	r24, 0x00E8
    11d0:	8e 77       	andi	r24, 0x7E	; 126
    11d2:	80 93 e8 00 	sts	0x00E8, r24
    11d6:	06 c0       	rjmp	.+12     	; 0x11e4 <sendchar+0xb2>
        Endpoint_ClearIN();
    } else {
        CONSOLE_FLUSH_SET(true);
    11d8:	8f b7       	in	r24, 0x3f	; 63
    11da:	f8 94       	cli
    11dc:	21 e0       	ldi	r18, 0x01	; 1
    11de:	20 93 54 01 	sts	0x0154, r18
    11e2:	8f bf       	out	0x3f, r24	; 63
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    11e4:	9f 70       	andi	r25, 0x0F	; 15
    11e6:	90 93 e9 00 	sts	0x00E9, r25
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	08 95       	ret
    11ee:	9f 70       	andi	r25, 0x0F	; 15
    11f0:	90 93 e9 00 	sts	0x00E9, r25
    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
    11f4:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    11f6:	08 95       	ret

000011f8 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    11f8:	cf 93       	push	r28
    11fa:	df 93       	push	r29
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <send_consumer+0x6>
    11fe:	1f 92       	push	r1
    1200:	cd b7       	in	r28, 0x3d	; 61
    1202:	de b7       	in	r29, 0x3e	; 62
    1204:	9c 01       	movw	r18, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1206:	80 91 e1 01 	lds	r24, 0x01E1
    120a:	84 30       	cpi	r24, 0x04	; 4
    120c:	19 f5       	brne	.+70     	; 0x1254 <send_consumer+0x5c>
        return;

    report_extra_t r = {
    120e:	93 e0       	ldi	r25, 0x03	; 3
    1210:	99 83       	std	Y+1, r25	; 0x01
    1212:	3b 83       	std	Y+3, r19	; 0x03
    1214:	2a 83       	std	Y+2, r18	; 0x02
    1216:	90 93 e9 00 	sts	0x00E9, r25
    121a:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    121c:	90 91 e8 00 	lds	r25, 0x00E8
    1220:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1222:	95 fd       	sbrc	r25, 5
    1224:	06 c0       	rjmp	.+12     	; 0x1232 <send_consumer+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1226:	95 ed       	ldi	r25, 0xD5	; 213
    1228:	9a 95       	dec	r25
    122a:	f1 f7       	brne	.-4      	; 0x1228 <send_consumer+0x30>
    122c:	00 00       	nop
    122e:	81 11       	cpse	r24, r1
    1230:	f5 cf       	rjmp	.-22     	; 0x121c <send_consumer+0x24>
    1232:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1236:	85 ff       	sbrs	r24, 5
    1238:	0d c0       	rjmp	.+26     	; 0x1254 <send_consumer+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    123a:	40 e0       	ldi	r20, 0x00	; 0
    123c:	50 e0       	ldi	r21, 0x00	; 0
    123e:	63 e0       	ldi	r22, 0x03	; 3
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	ce 01       	movw	r24, r28
    1244:	01 96       	adiw	r24, 0x01	; 1
    1246:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    124a:	80 91 e8 00 	lds	r24, 0x00E8
    124e:	8e 77       	andi	r24, 0x7E	; 126
    1250:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	08 95       	ret

00001260 <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	00 d0       	rcall	.+0      	; 0x1266 <send_system+0x6>
    1266:	1f 92       	push	r1
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    126c:	20 91 e1 01 	lds	r18, 0x01E1
    1270:	24 30       	cpi	r18, 0x04	; 4
    1272:	21 f5       	brne	.+72     	; 0x12bc <send_system+0x5c>
        return;

    report_extra_t r = {
    1274:	22 e0       	ldi	r18, 0x02	; 2
    1276:	29 83       	std	Y+1, r18	; 0x01
    1278:	9b 83       	std	Y+3, r25	; 0x03
    127a:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    127c:	83 e0       	ldi	r24, 0x03	; 3
    127e:	80 93 e9 00 	sts	0x00E9, r24
    1282:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1284:	90 91 e8 00 	lds	r25, 0x00E8
    1288:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    128a:	95 fd       	sbrc	r25, 5
    128c:	06 c0       	rjmp	.+12     	; 0x129a <send_system+0x3a>
    128e:	95 ed       	ldi	r25, 0xD5	; 213
    1290:	9a 95       	dec	r25
    1292:	f1 f7       	brne	.-4      	; 0x1290 <send_system+0x30>
    1294:	00 00       	nop
    1296:	81 11       	cpse	r24, r1
    1298:	f5 cf       	rjmp	.-22     	; 0x1284 <send_system+0x24>
    129a:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    129e:	85 ff       	sbrs	r24, 5
    12a0:	0d c0       	rjmp	.+26     	; 0x12bc <send_system+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    12a2:	40 e0       	ldi	r20, 0x00	; 0
    12a4:	50 e0       	ldi	r21, 0x00	; 0
    12a6:	63 e0       	ldi	r22, 0x03	; 3
    12a8:	70 e0       	ldi	r23, 0x00	; 0
    12aa:	ce 01       	movw	r24, r28
    12ac:	01 96       	adiw	r24, 0x01	; 1
    12ae:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12b2:	80 91 e8 00 	lds	r24, 0x00E8
    12b6:	8e 77       	andi	r24, 0x7E	; 126
    12b8:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
    12c6:	08 95       	ret

000012c8 <send_mouse>:
static void send_mouse(report_mouse_t *report)
{
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    12c8:	20 91 e1 01 	lds	r18, 0x01E1
    12cc:	24 30       	cpi	r18, 0x04	; 4
    12ce:	f1 f4       	brne	.+60     	; 0x130c <send_mouse+0x44>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    12d0:	22 e0       	ldi	r18, 0x02	; 2
    12d2:	20 93 e9 00 	sts	0x00E9, r18
    12d6:	2f ef       	ldi	r18, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    12d8:	30 91 e8 00 	lds	r19, 0x00E8
    12dc:	21 50       	subi	r18, 0x01	; 1

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    12de:	35 fd       	sbrc	r19, 5
    12e0:	06 c0       	rjmp	.+12     	; 0x12ee <send_mouse+0x26>
    12e2:	35 ed       	ldi	r19, 0xD5	; 213
    12e4:	3a 95       	dec	r19
    12e6:	f1 f7       	brne	.-4      	; 0x12e4 <send_mouse+0x1c>
    12e8:	00 00       	nop
    12ea:	21 11       	cpse	r18, r1
    12ec:	f5 cf       	rjmp	.-22     	; 0x12d8 <send_mouse+0x10>
    12ee:	20 91 e8 00 	lds	r18, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    12f2:	25 ff       	sbrs	r18, 5
    12f4:	0b c0       	rjmp	.+22     	; 0x130c <send_mouse+0x44>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    12f6:	40 e0       	ldi	r20, 0x00	; 0
    12f8:	50 e0       	ldi	r21, 0x00	; 0
    12fa:	65 e0       	ldi	r22, 0x05	; 5
    12fc:	70 e0       	ldi	r23, 0x00	; 0
    12fe:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1302:	80 91 e8 00 	lds	r24, 0x00E8
    1306:	8e 77       	andi	r24, 0x7E	; 126
    1308:	80 93 e8 00 	sts	0x00E8, r24
    130c:	08 95       	ret

0000130e <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    130e:	cf 93       	push	r28
    1310:	df 93       	push	r29
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1312:	20 91 e1 01 	lds	r18, 0x01E1
    1316:	24 30       	cpi	r18, 0x04	; 4
    1318:	09 f0       	breq	.+2      	; 0x131c <send_keyboard+0xe>
    131a:	48 c0       	rjmp	.+144    	; 0x13ac <send_keyboard+0x9e>
    131c:	ec 01       	movw	r28, r24
        return;

    /* Select the Keyboard Report Endpoint */
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    131e:	80 91 0a 01 	lds	r24, 0x010A
    1322:	88 23       	and	r24, r24
    1324:	e1 f0       	breq	.+56     	; 0x135e <send_keyboard+0x50>
    1326:	80 91 0b 01 	lds	r24, 0x010B
    132a:	88 23       	and	r24, r24
    132c:	c1 f0       	breq	.+48     	; 0x135e <send_keyboard+0x50>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    132e:	85 e0       	ldi	r24, 0x05	; 5
    1330:	80 93 e9 00 	sts	0x00E9, r24
    1334:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1336:	90 91 e8 00 	lds	r25, 0x00E8
    133a:	81 50       	subi	r24, 0x01	; 1
        /* Report protocol - NKRO */
        Endpoint_SelectEndpoint(NKRO_IN_EPNUM);

        /* Check if write ready for a polling interval around 1ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
    133c:	95 fd       	sbrc	r25, 5
    133e:	06 c0       	rjmp	.+12     	; 0x134c <send_keyboard+0x3e>
    1340:	95 e1       	ldi	r25, 0x15	; 21
    1342:	9a 95       	dec	r25
    1344:	f1 f7       	brne	.-4      	; 0x1342 <send_keyboard+0x34>
    1346:	00 00       	nop
    1348:	81 11       	cpse	r24, r1
    134a:	f5 cf       	rjmp	.-22     	; 0x1336 <send_keyboard+0x28>
    134c:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    1350:	85 ff       	sbrs	r24, 5
    1352:	2c c0       	rjmp	.+88     	; 0x13ac <send_keyboard+0x9e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    1354:	40 e0       	ldi	r20, 0x00	; 0
    1356:	50 e0       	ldi	r21, 0x00	; 0
    1358:	60 e1       	ldi	r22, 0x10	; 16
    135a:	70 e0       	ldi	r23, 0x00	; 0
    135c:	17 c0       	rjmp	.+46     	; 0x138c <send_keyboard+0x7e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	80 93 e9 00 	sts	0x00E9, r24
    1364:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1366:	90 91 e8 00 	lds	r25, 0x00E8
    136a:	81 50       	subi	r24, 0x01	; 1
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    136c:	95 fd       	sbrc	r25, 5
    136e:	06 c0       	rjmp	.+12     	; 0x137c <send_keyboard+0x6e>
    1370:	95 ed       	ldi	r25, 0xD5	; 213
    1372:	9a 95       	dec	r25
    1374:	f1 f7       	brne	.-4      	; 0x1372 <send_keyboard+0x64>
    1376:	00 00       	nop
    1378:	81 11       	cpse	r24, r1
    137a:	f5 cf       	rjmp	.-22     	; 0x1366 <send_keyboard+0x58>
    137c:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    1380:	85 ff       	sbrs	r24, 5
    1382:	14 c0       	rjmp	.+40     	; 0x13ac <send_keyboard+0x9e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    1384:	40 e0       	ldi	r20, 0x00	; 0
    1386:	50 e0       	ldi	r21, 0x00	; 0
    1388:	68 e0       	ldi	r22, 0x08	; 8
    138a:	70 e0       	ldi	r23, 0x00	; 0
    138c:	ce 01       	movw	r24, r28
    138e:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1392:	80 91 e8 00 	lds	r24, 0x00E8
    1396:	8e 77       	andi	r24, 0x7E	; 126
    1398:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    139c:	80 e1       	ldi	r24, 0x10	; 16
    139e:	fe 01       	movw	r30, r28
    13a0:	a5 e5       	ldi	r26, 0x55	; 85
    13a2:	b1 e0       	ldi	r27, 0x01	; 1
    13a4:	01 90       	ld	r0, Z+
    13a6:	0d 92       	st	X+, r0
    13a8:	8a 95       	dec	r24
    13aa:	e1 f7       	brne	.-8      	; 0x13a4 <send_keyboard+0x96>
}
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	08 95       	ret

000013b2 <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    13b2:	8d e5       	ldi	r24, 0x5D	; 93
    13b4:	92 e0       	ldi	r25, 0x02	; 2
    13b6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    13ba:	80 91 e0 01 	lds	r24, 0x01E0
    13be:	81 11       	cpse	r24, r1
    13c0:	09 c0       	rjmp	.+18     	; 0x13d4 <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    13c2:	0e 94 67 0d 	call	0x1ace	; 0x1ace <USB_Disable>
        USB_Init();
    13c6:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    13ca:	80 91 e2 00 	lds	r24, 0x00E2
    13ce:	84 60       	ori	r24, 0x04	; 4
    13d0:	80 93 e2 00 	sts	0x00E2, r24
    13d4:	08 95       	ret

000013d6 <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    13d6:	89 e5       	ldi	r24, 0x59	; 89
    13d8:	92 e0       	ldi	r25, 0x02	; 2
    13da:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    13de:	10 92 e0 01 	sts	0x01E0, r1
    13e2:	08 95       	ret

000013e4 <EVENT_USB_Device_Reset>:
*/
}

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
    13e4:	85 e5       	ldi	r24, 0x55	; 85
    13e6:	92 e0       	ldi	r25, 0x02	; 2
    13e8:	0c 94 8e 06 	jmp	0xd1c	; 0xd1c <xputs>

000013ec <EVENT_USB_Device_Suspend>:
}

void EVENT_USB_Device_Suspend()
{
    print("[S]");
    13ec:	81 e5       	ldi	r24, 0x51	; 81
    13ee:	92 e0       	ldi	r25, 0x02	; 2
    13f0:	0c 94 8e 06 	jmp	0xd1c	; 0xd1c <xputs>

000013f4 <EVENT_USB_Device_WakeUp>:
#endif
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    13f4:	8d e4       	ldi	r24, 0x4D	; 77
    13f6:	92 e0       	ldi	r25, 0x02	; 2
    13f8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    suspend_wakeup_init();
    13fc:	0c 94 c3 1d 	jmp	0x3b86	; 0x3b86 <suspend_wakeup_init>

00001400 <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
    1400:	20 91 53 01 	lds	r18, 0x0153
    1404:	2f 5f       	subi	r18, 0xFF	; 255
    1406:	82 2f       	mov	r24, r18
    1408:	62 e3       	ldi	r22, 0x32	; 50
    140a:	0e 94 69 29 	call	0x52d2	; 0x52d2 <__udivmodqi4>
    140e:	99 23       	and	r25, r25
    1410:	19 f0       	breq	.+6      	; 0x1418 <EVENT_USB_Device_StartOfFrame+0x18>
    1412:	20 93 53 01 	sts	0x0153, r18
    1416:	08 95       	ret
    count = 0;
    1418:	10 92 53 01 	sts	0x0153, r1

    if (!console_flush) return;
    141c:	80 91 54 01 	lds	r24, 0x0154
    1420:	88 23       	and	r24, r24
    1422:	71 f1       	breq	.+92     	; 0x1480 <EVENT_USB_Device_StartOfFrame+0x80>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1424:	80 91 e1 01 	lds	r24, 0x01E1
    1428:	84 30       	cpi	r24, 0x04	; 4
    142a:	41 f5       	brne	.+80     	; 0x147c <EVENT_USB_Device_StartOfFrame+0x7c>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    142c:	80 91 e9 00 	lds	r24, 0x00E9
    1430:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1432:	20 91 ec 00 	lds	r18, 0x00EC
    1436:	92 2f       	mov	r25, r18
    1438:	91 70       	andi	r25, 0x01	; 1
    143a:	20 fd       	sbrc	r18, 0
    143c:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    143e:	89 2b       	or	r24, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1440:	94 e0       	ldi	r25, 0x04	; 4
    1442:	90 93 e9 00 	sts	0x00E9, r25
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1446:	90 91 eb 00 	lds	r25, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    144a:	90 ff       	sbrs	r25, 0
    144c:	14 c0       	rjmp	.+40     	; 0x1476 <EVENT_USB_Device_StartOfFrame+0x76>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    144e:	90 91 ee 00 	lds	r25, 0x00EE
    1452:	97 ff       	sbrs	r25, 7
    1454:	10 c0       	rjmp	.+32     	; 0x1476 <EVENT_USB_Device_StartOfFrame+0x76>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1456:	90 91 e8 00 	lds	r25, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    145a:	95 ff       	sbrs	r25, 5
    145c:	03 c0       	rjmp	.+6      	; 0x1464 <EVENT_USB_Device_StartOfFrame+0x64>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    145e:	10 92 f1 00 	sts	0x00F1, r1
    1462:	f9 cf       	rjmp	.-14     	; 0x1456 <EVENT_USB_Device_StartOfFrame+0x56>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1464:	90 91 e8 00 	lds	r25, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    1468:	90 ff       	sbrs	r25, 0
    146a:	05 c0       	rjmp	.+10     	; 0x1476 <EVENT_USB_Device_StartOfFrame+0x76>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    146c:	90 91 e8 00 	lds	r25, 0x00E8
    1470:	9e 77       	andi	r25, 0x7E	; 126
    1472:	90 93 e8 00 	sts	0x00E8, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1476:	8f 70       	andi	r24, 0x0F	; 15
    1478:	80 93 e9 00 	sts	0x00E9, r24
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
    147c:	10 92 54 01 	sts	0x0154, r1
    1480:	08 95       	ret

00001482 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1482:	42 e0       	ldi	r20, 0x02	; 2
    1484:	61 ec       	ldi	r22, 0xC1	; 193
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <Endpoint_ConfigureEndpoint_Prv>
    148c:	42 e0       	ldi	r20, 0x02	; 2
    148e:	61 ec       	ldi	r22, 0xC1	; 193
    1490:	82 e0       	ldi	r24, 0x02	; 2
    1492:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <Endpoint_ConfigureEndpoint_Prv>
    1496:	42 e0       	ldi	r20, 0x02	; 2
    1498:	61 ec       	ldi	r22, 0xC1	; 193
    149a:	83 e0       	ldi	r24, 0x03	; 3
    149c:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <Endpoint_ConfigureEndpoint_Prv>
    14a0:	42 e2       	ldi	r20, 0x22	; 34
    14a2:	61 ec       	ldi	r22, 0xC1	; 193
    14a4:	84 e0       	ldi	r24, 0x04	; 4
    14a6:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <Endpoint_ConfigureEndpoint_Prv>
    14aa:	42 e1       	ldi	r20, 0x12	; 18
    14ac:	61 ec       	ldi	r22, 0xC1	; 193
    14ae:	85 e0       	ldi	r24, 0x05	; 5
    14b0:	0c 94 e1 0c 	jmp	0x19c2	; 0x19c2 <Endpoint_ConfigureEndpoint_Prv>

000014b4 <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    14b4:	80 91 e3 01 	lds	r24, 0x01E3
    14b8:	83 30       	cpi	r24, 0x03	; 3
    14ba:	09 f4       	brne	.+2      	; 0x14be <EVENT_USB_Device_ControlRequest+0xa>
    14bc:	55 c0       	rjmp	.+170    	; 0x1568 <EVENT_USB_Device_ControlRequest+0xb4>
    14be:	30 f4       	brcc	.+12     	; 0x14cc <EVENT_USB_Device_ControlRequest+0x18>
    14c0:	81 30       	cpi	r24, 0x01	; 1
    14c2:	71 f0       	breq	.+28     	; 0x14e0 <EVENT_USB_Device_ControlRequest+0x2c>
    14c4:	82 30       	cpi	r24, 0x02	; 2
    14c6:	09 f4       	brne	.+2      	; 0x14ca <EVENT_USB_Device_ControlRequest+0x16>
    14c8:	8e c0       	rjmp	.+284    	; 0x15e6 <EVENT_USB_Device_ControlRequest+0x132>
    14ca:	08 95       	ret
    14cc:	8a 30       	cpi	r24, 0x0A	; 10
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <EVENT_USB_Device_ControlRequest+0x1e>
    14d0:	7a c0       	rjmp	.+244    	; 0x15c6 <EVENT_USB_Device_ControlRequest+0x112>
    14d2:	8b 30       	cpi	r24, 0x0B	; 11
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <EVENT_USB_Device_ControlRequest+0x24>
    14d6:	60 c0       	rjmp	.+192    	; 0x1598 <EVENT_USB_Device_ControlRequest+0xe4>
    14d8:	89 30       	cpi	r24, 0x09	; 9
    14da:	09 f0       	breq	.+2      	; 0x14de <EVENT_USB_Device_ControlRequest+0x2a>
    14dc:	9c c0       	rjmp	.+312    	; 0x1616 <EVENT_USB_Device_ControlRequest+0x162>
    14de:	20 c0       	rjmp	.+64     	; 0x1520 <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    14e0:	80 91 e2 01 	lds	r24, 0x01E2
    14e4:	81 3a       	cpi	r24, 0xA1	; 161
    14e6:	09 f0       	breq	.+2      	; 0x14ea <EVENT_USB_Device_ControlRequest+0x36>
    14e8:	96 c0       	rjmp	.+300    	; 0x1616 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    14ea:	80 91 e8 00 	lds	r24, 0x00E8
    14ee:	87 7f       	andi	r24, 0xF7	; 247
    14f0:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    14f4:	80 91 e6 01 	lds	r24, 0x01E6
    14f8:	90 91 e7 01 	lds	r25, 0x01E7
    14fc:	89 2b       	or	r24, r25
    14fe:	21 f4       	brne	.+8      	; 0x1508 <EVENT_USB_Device_ControlRequest+0x54>
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
                    ReportSize = sizeof(keyboard_report_sent);
    1500:	60 e1       	ldi	r22, 0x10	; 16

                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
    1502:	85 e5       	ldi	r24, 0x55	; 85
    1504:	91 e0       	ldi	r25, 0x01	; 1
    1506:	03 c0       	rjmp	.+6      	; 0x150e <EVENT_USB_Device_ControlRequest+0x5a>
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;
    1508:	60 e0       	ldi	r22, 0x00	; 0
/** Event handler for the USB_ControlRequest event.
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	90 e0       	ldi	r25, 0x00	; 0
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    150e:	70 e0       	ldi	r23, 0x00	; 0
    1510:	0e 94 1d 0c 	call	0x183a	; 0x183a <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1514:	80 91 e8 00 	lds	r24, 0x00E8
    1518:	8b 77       	andi	r24, 0x7B	; 123
    151a:	80 93 e8 00 	sts	0x00E8, r24
    151e:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1520:	80 91 e2 01 	lds	r24, 0x01E2
    1524:	81 32       	cpi	r24, 0x21	; 33
    1526:	09 f0       	breq	.+2      	; 0x152a <EVENT_USB_Device_ControlRequest+0x76>
    1528:	76 c0       	rjmp	.+236    	; 0x1616 <EVENT_USB_Device_ControlRequest+0x162>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    152a:	80 91 e6 01 	lds	r24, 0x01E6
    152e:	90 91 e7 01 	lds	r25, 0x01E7
    1532:	00 97       	sbiw	r24, 0x00	; 0
    1534:	19 f0       	breq	.+6      	; 0x153c <EVENT_USB_Device_ControlRequest+0x88>
    1536:	04 97       	sbiw	r24, 0x04	; 4
    1538:	09 f0       	breq	.+2      	; 0x153c <EVENT_USB_Device_ControlRequest+0x88>
    153a:	6d c0       	rjmp	.+218    	; 0x1616 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    153c:	80 91 e8 00 	lds	r24, 0x00E8
    1540:	87 7f       	andi	r24, 0xF7	; 247
    1542:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1546:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    154a:	82 fd       	sbrc	r24, 2
    154c:	05 c0       	rjmp	.+10     	; 0x1558 <EVENT_USB_Device_ControlRequest+0xa4>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    154e:	80 91 e1 01 	lds	r24, 0x01E1
    1552:	81 11       	cpse	r24, r1
    1554:	f8 cf       	rjmp	.-16     	; 0x1546 <EVENT_USB_Device_ControlRequest+0x92>
    1556:	5f c0       	rjmp	.+190    	; 0x1616 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1558:	80 91 f1 00 	lds	r24, 0x00F1
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    155c:	80 93 65 01 	sts	0x0165, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1560:	80 91 e8 00 	lds	r24, 0x00E8
    1564:	8b 77       	andi	r24, 0x7B	; 123
    1566:	53 c0       	rjmp	.+166    	; 0x160e <EVENT_USB_Device_ControlRequest+0x15a>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1568:	80 91 e2 01 	lds	r24, 0x01E2
    156c:	81 3a       	cpi	r24, 0xA1	; 161
    156e:	09 f0       	breq	.+2      	; 0x1572 <EVENT_USB_Device_ControlRequest+0xbe>
    1570:	52 c0       	rjmp	.+164    	; 0x1616 <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1572:	80 91 e6 01 	lds	r24, 0x01E6
    1576:	90 91 e7 01 	lds	r25, 0x01E7
    157a:	89 2b       	or	r24, r25
    157c:	09 f0       	breq	.+2      	; 0x1580 <EVENT_USB_Device_ControlRequest+0xcc>
    157e:	4b c0       	rjmp	.+150    	; 0x1616 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1580:	80 91 e8 00 	lds	r24, 0x00E8
    1584:	87 7f       	andi	r24, 0xF7	; 247
    1586:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    158a:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    158e:	80 ff       	sbrs	r24, 0
    1590:	fc cf       	rjmp	.-8      	; 0x158a <EVENT_USB_Device_ControlRequest+0xd6>
                    Endpoint_Write_8(keyboard_protocol);
    1592:	80 91 0a 01 	lds	r24, 0x010A
    1596:	36 c0       	rjmp	.+108    	; 0x1604 <EVENT_USB_Device_ControlRequest+0x150>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1598:	80 91 e2 01 	lds	r24, 0x01E2
    159c:	81 32       	cpi	r24, 0x21	; 33
    159e:	d9 f5       	brne	.+118    	; 0x1616 <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    15a0:	80 91 e6 01 	lds	r24, 0x01E6
    15a4:	90 91 e7 01 	lds	r25, 0x01E7
    15a8:	89 2b       	or	r24, r25
    15aa:	a9 f5       	brne	.+106    	; 0x1616 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    15ac:	80 91 e8 00 	lds	r24, 0x00E8
    15b0:	87 7f       	andi	r24, 0xF7	; 247
    15b2:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    15b6:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    15ba:	80 91 e4 01 	lds	r24, 0x01E4
    15be:	80 93 0a 01 	sts	0x010A, r24
                    clear_keyboard();
    15c2:	0c 94 b3 15 	jmp	0x2b66	; 0x2b66 <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    15c6:	80 91 e2 01 	lds	r24, 0x01E2
    15ca:	81 32       	cpi	r24, 0x21	; 33
    15cc:	21 f5       	brne	.+72     	; 0x1616 <EVENT_USB_Device_ControlRequest+0x162>
    15ce:	80 91 e8 00 	lds	r24, 0x00E8
    15d2:	87 7f       	andi	r24, 0xF7	; 247
    15d4:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    15d8:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    15dc:	80 91 e5 01 	lds	r24, 0x01E5
    15e0:	80 93 66 01 	sts	0x0166, r24
    15e4:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    15e6:	80 91 e2 01 	lds	r24, 0x01E2
    15ea:	81 3a       	cpi	r24, 0xA1	; 161
    15ec:	a1 f4       	brne	.+40     	; 0x1616 <EVENT_USB_Device_ControlRequest+0x162>
    15ee:	80 91 e8 00 	lds	r24, 0x00E8
    15f2:	87 7f       	andi	r24, 0xF7	; 247
    15f4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    15f8:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    15fc:	80 ff       	sbrs	r24, 0
    15fe:	fc cf       	rjmp	.-8      	; 0x15f8 <EVENT_USB_Device_ControlRequest+0x144>
                Endpoint_Write_8(keyboard_idle);
    1600:	80 91 66 01 	lds	r24, 0x0166
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1604:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1608:	80 91 e8 00 	lds	r24, 0x00E8
    160c:	8e 77       	andi	r24, 0x7E	; 126
    160e:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    1612:	0c 94 16 0d 	jmp	0x1a2c	; 0x1a2c <Endpoint_ClearStatusStage>
    1616:	08 95       	ret

00001618 <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    1618:	84 b7       	in	r24, 0x34	; 52
    161a:	87 7f       	andi	r24, 0xF7	; 247
    161c:	84 bf       	out	0x34, r24	; 52
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	f8 94       	cli
    1622:	a8 95       	wdr
    1624:	80 91 60 00 	lds	r24, 0x0060
    1628:	88 61       	ori	r24, 0x18	; 24
    162a:	80 93 60 00 	sts	0x0060, r24
    162e:	10 92 60 00 	sts	0x0060, r1
    1632:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	80 e8       	ldi	r24, 0x80	; 128
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	f8 94       	cli
    163c:	80 93 61 00 	sts	0x0061, r24
    1640:	90 93 61 00 	sts	0x0061, r25
    1644:	0f be       	out	0x3f, r0	; 63

int main(void)  __attribute__ ((weak));
int main(void)
{
    setup_mcu();
    keyboard_setup();
    1646:	0e 94 ad 10 	call	0x215a	; 0x215a <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    164a:	0e 94 67 0d 	call	0x1ace	; 0x1ace <USB_Disable>

    USB_Init();
    164e:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <USB_Init>
    1652:	80 91 e2 00 	lds	r24, 0x00E2
    1656:	84 60       	ori	r24, 0x04	; 4
    1658:	80 93 e2 00 	sts	0x00E2, r24

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar);
    165c:	89 e9       	ldi	r24, 0x99	; 153
    165e:	98 e0       	ldi	r25, 0x08	; 8
    1660:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <print_set_sendchar>
int main(void)
{
    setup_mcu();
    keyboard_setup();
    setup_usb();
    sei();
    1664:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    1666:	80 91 e1 01 	lds	r24, 0x01E1
    166a:	84 30       	cpi	r24, 0x04	; 4
    166c:	19 f0       	breq	.+6      	; 0x1674 <main+0x5c>
#if defined(INTERRUPT_CONTROL_ENDPOINT)
        ;
#else
        USB_USBTask();
    166e:	0e 94 00 10 	call	0x2000	; 0x2000 <USB_USBTask>
    1672:	f9 cf       	rjmp	.-14     	; 0x1666 <main+0x4e>
#endif
    }
    print("USB configured.\n");
    1674:	8c e3       	ldi	r24, 0x3C	; 60
    1676:	92 e0       	ldi	r25, 0x02	; 2
    1678:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>

    /* init modules */
    keyboard_init();
    167c:	0e 94 af 10 	call	0x215e	; 0x215e <keyboard_init>
    host_set_driver(&lufa_driver);
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	91 e0       	ldi	r25, 0x01	; 1
    1684:	0e 94 1b 10 	call	0x2036	; 0x2036 <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    1688:	8b e2       	ldi	r24, 0x2B	; 43
    168a:	92 e0       	ldi	r25, 0x02	; 2
    168c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    1690:	80 91 e1 01 	lds	r24, 0x01E1
    1694:	85 30       	cpi	r24, 0x05	; 5
    1696:	89 f4       	brne	.+34     	; 0x16ba <main+0xa2>
            print("[s]");
    1698:	87 e2       	ldi	r24, 0x27	; 39
    169a:	92 e0       	ldi	r25, 0x02	; 2
    169c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
            suspend_power_down();
    16a0:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <suspend_power_down>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    16a4:	80 91 df 01 	lds	r24, 0x01DF
    16a8:	88 23       	and	r24, r24
    16aa:	91 f3       	breq	.-28     	; 0x1690 <main+0x78>
    16ac:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <suspend_wakeup_condition>
    16b0:	88 23       	and	r24, r24
    16b2:	71 f3       	breq	.-36     	; 0x1690 <main+0x78>
                    USB_Device_SendRemoteWakeup();
    16b4:	0e 94 ba 0b 	call	0x1774	; 0x1774 <USB_Device_SendRemoteWakeup>
    16b8:	eb cf       	rjmp	.-42     	; 0x1690 <main+0x78>
            }
        }

        keyboard_task();
    16ba:	0e 94 dd 10 	call	0x21ba	; 0x21ba <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
    16be:	0e 94 00 10 	call	0x2000	; 0x2000 <USB_USBTask>
#endif
    }
    16c2:	e6 cf       	rjmp	.-52     	; 0x1690 <main+0x78>

000016c4 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    16c4:	29 2f       	mov	r18, r25
    16c6:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    16c8:	23 30       	cpi	r18, 0x03	; 3
    16ca:	31 05       	cpc	r19, r1
    16cc:	c9 f0       	breq	.+50     	; 0x1700 <CALLBACK_USB_GetDescriptor+0x3c>
    16ce:	64 f4       	brge	.+24     	; 0x16e8 <CALLBACK_USB_GetDescriptor+0x24>
    16d0:	21 30       	cpi	r18, 0x01	; 1
    16d2:	31 05       	cpc	r19, r1
    16d4:	81 f0       	breq	.+32     	; 0x16f6 <CALLBACK_USB_GetDescriptor+0x32>
    16d6:	22 30       	cpi	r18, 0x02	; 2
    16d8:	31 05       	cpc	r19, r1
    16da:	09 f0       	breq	.+2      	; 0x16de <CALLBACK_USB_GetDescriptor+0x1a>
    16dc:	43 c0       	rjmp	.+134    	; 0x1764 <CALLBACK_USB_GetDescriptor+0xa0>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    16de:	8d e8       	ldi	r24, 0x8D	; 141
    16e0:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    16e2:	29 e8       	ldi	r18, 0x89	; 137
    16e4:	32 e0       	ldi	r19, 0x02	; 2
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    16e6:	42 c0       	rjmp	.+132    	; 0x176c <CALLBACK_USB_GetDescriptor+0xa8>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    16e8:	21 32       	cpi	r18, 0x21	; 33
    16ea:	31 05       	cpc	r19, r1
    16ec:	f1 f0       	breq	.+60     	; 0x172a <CALLBACK_USB_GetDescriptor+0x66>
    16ee:	22 32       	cpi	r18, 0x22	; 34
    16f0:	31 05       	cpc	r19, r1
    16f2:	41 f1       	breq	.+80     	; 0x1744 <CALLBACK_USB_GetDescriptor+0x80>
    16f4:	37 c0       	rjmp	.+110    	; 0x1764 <CALLBACK_USB_GetDescriptor+0xa0>
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    16f6:	82 e1       	ldi	r24, 0x12	; 18
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    16fa:	26 e1       	ldi	r18, 0x16	; 22
    16fc:	33 e0       	ldi	r19, 0x03	; 3
    16fe:	36 c0       	rjmp	.+108    	; 0x176c <CALLBACK_USB_GetDescriptor+0xa8>
    1700:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    1702:	81 30       	cpi	r24, 0x01	; 1
    1704:	91 05       	cpc	r25, r1
    1706:	41 f0       	breq	.+16     	; 0x1718 <CALLBACK_USB_GetDescriptor+0x54>
    1708:	82 30       	cpi	r24, 0x02	; 2
    170a:	91 05       	cpc	r25, r1
    170c:	41 f0       	breq	.+16     	; 0x171e <CALLBACK_USB_GetDescriptor+0x5a>
    170e:	89 2b       	or	r24, r25
    1710:	49 f5       	brne	.+82     	; 0x1764 <CALLBACK_USB_GetDescriptor+0xa0>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    1712:	e5 e8       	ldi	r30, 0x85	; 133
    1714:	f2 e0       	ldi	r31, 0x02	; 2
    1716:	05 c0       	rjmp	.+10     	; 0x1722 <CALLBACK_USB_GetDescriptor+0x5e>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    1718:	e5 e7       	ldi	r30, 0x75	; 117
    171a:	f2 e0       	ldi	r31, 0x02	; 2
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <CALLBACK_USB_GetDescriptor+0x5e>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    171e:	e1 e6       	ldi	r30, 0x61	; 97
    1720:	f2 e0       	ldi	r31, 0x02	; 2
    1722:	84 91       	lpm	r24, Z
    1724:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    1726:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    1728:	21 c0       	rjmp	.+66     	; 0x176c <CALLBACK_USB_GetDescriptor+0xa8>
    172a:	65 30       	cpi	r22, 0x05	; 5
    172c:	d8 f4       	brcc	.+54     	; 0x1764 <CALLBACK_USB_GetDescriptor+0xa0>
    172e:	e6 2f       	mov	r30, r22
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	ee 0f       	add	r30, r30
    1734:	ff 1f       	adc	r31, r31
    1736:	ed 5d       	subi	r30, 0xDD	; 221
    1738:	fe 4f       	sbci	r31, 0xFE	; 254
    173a:	20 81       	ld	r18, Z
    173c:	31 81       	ldd	r19, Z+1	; 0x01
    173e:	89 e0       	ldi	r24, 0x09	; 9
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	14 c0       	rjmp	.+40     	; 0x176c <CALLBACK_USB_GetDescriptor+0xa8>
    1744:	65 30       	cpi	r22, 0x05	; 5
    1746:	70 f4       	brcc	.+28     	; 0x1764 <CALLBACK_USB_GetDescriptor+0xa0>
    1748:	70 e0       	ldi	r23, 0x00	; 0
    174a:	fb 01       	movw	r30, r22
    174c:	ee 0f       	add	r30, r30
    174e:	ff 1f       	adc	r31, r31
    1750:	e7 5e       	subi	r30, 0xE7	; 231
    1752:	fe 4f       	sbci	r31, 0xFE	; 254
    1754:	20 81       	ld	r18, Z
    1756:	31 81       	ldd	r19, Z+1	; 0x01
    1758:	fb 01       	movw	r30, r22
    175a:	ec 5e       	subi	r30, 0xEC	; 236
    175c:	fe 4f       	sbci	r31, 0xFE	; 254
    175e:	80 81       	ld	r24, Z
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	04 c0       	rjmp	.+8      	; 0x176c <CALLBACK_USB_GetDescriptor+0xa8>
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    176c:	fa 01       	movw	r30, r20
    176e:	31 83       	std	Z+1, r19	; 0x01
    1770:	20 83       	st	Z, r18
    return Size;
}
    1772:	08 95       	ret

00001774 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1774:	80 e1       	ldi	r24, 0x10	; 16
    1776:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1778:	82 e1       	ldi	r24, 0x12	; 18
    177a:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    177c:	09 b4       	in	r0, 0x29	; 41
    177e:	00 fe       	sbrs	r0, 0
    1780:	fd cf       	rjmp	.-6      	; 0x177c <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1782:	80 91 d8 00 	lds	r24, 0x00D8
    1786:	8f 7d       	andi	r24, 0xDF	; 223
    1788:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    178c:	80 91 e0 00 	lds	r24, 0x00E0
    1790:	82 60       	ori	r24, 0x02	; 2
    1792:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    1796:	80 91 e0 00 	lds	r24, 0x00E0
    179a:	81 fd       	sbrc	r24, 1
    179c:	fc cf       	rjmp	.-8      	; 0x1796 <USB_Device_SendRemoteWakeup+0x22>
}
    179e:	08 95       	ret

000017a0 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    17a0:	cf 92       	push	r12
    17a2:	df 92       	push	r13
    17a4:	ef 92       	push	r14
    17a6:	ff 92       	push	r15
    17a8:	0f 93       	push	r16
    17aa:	1f 93       	push	r17
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	ec 01       	movw	r28, r24
    17b2:	8b 01       	movw	r16, r22
    17b4:	7a 01       	movw	r14, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    17b6:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <Endpoint_WaitUntilReady>
    17ba:	81 11       	cpse	r24, r1
    17bc:	35 c0       	rjmp	.+106    	; 0x1828 <Endpoint_Write_Stream_LE+0x88>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    17be:	e1 14       	cp	r14, r1
    17c0:	f1 04       	cpc	r15, r1
    17c2:	39 f0       	breq	.+14     	; 0x17d2 <Endpoint_Write_Stream_LE+0x32>
	{
		Length -= *BytesProcessed;
    17c4:	f7 01       	movw	r30, r14
    17c6:	80 81       	ld	r24, Z
    17c8:	91 81       	ldd	r25, Z+1	; 0x01
    17ca:	08 1b       	sub	r16, r24
    17cc:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    17ce:	c8 0f       	add	r28, r24
    17d0:	d9 1f       	adc	r29, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    17d2:	c1 2c       	mov	r12, r1
    17d4:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    17d6:	01 15       	cp	r16, r1
    17d8:	11 05       	cpc	r17, r1
    17da:	29 f1       	breq	.+74     	; 0x1826 <Endpoint_Write_Stream_LE+0x86>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    17dc:	80 91 e8 00 	lds	r24, 0x00E8
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    17e0:	85 fd       	sbrc	r24, 5
    17e2:	18 c0       	rjmp	.+48     	; 0x1814 <Endpoint_Write_Stream_LE+0x74>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17e4:	80 91 e8 00 	lds	r24, 0x00E8
    17e8:	8e 77       	andi	r24, 0x7E	; 126
    17ea:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    17ee:	0e 94 00 10 	call	0x2000	; 0x2000 <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
    17f2:	e1 14       	cp	r14, r1
    17f4:	f1 04       	cpc	r15, r1
    17f6:	49 f0       	breq	.+18     	; 0x180a <Endpoint_Write_Stream_LE+0x6a>
			{
				*BytesProcessed += BytesInTransfer;
    17f8:	f7 01       	movw	r30, r14
    17fa:	80 81       	ld	r24, Z
    17fc:	91 81       	ldd	r25, Z+1	; 0x01
    17fe:	c8 0e       	add	r12, r24
    1800:	d9 1e       	adc	r13, r25
    1802:	d1 82       	std	Z+1, r13	; 0x01
    1804:	c0 82       	st	Z, r12
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1806:	85 e0       	ldi	r24, 0x05	; 5
    1808:	0f c0       	rjmp	.+30     	; 0x1828 <Endpoint_Write_Stream_LE+0x88>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    180a:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <Endpoint_WaitUntilReady>
    180e:	88 23       	and	r24, r24
    1810:	11 f3       	breq	.-60     	; 0x17d6 <Endpoint_Write_Stream_LE+0x36>
    1812:	0a c0       	rjmp	.+20     	; 0x1828 <Endpoint_Write_Stream_LE+0x88>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1814:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1816:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    181a:	01 50       	subi	r16, 0x01	; 1
    181c:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    181e:	ff ef       	ldi	r31, 0xFF	; 255
    1820:	cf 1a       	sub	r12, r31
    1822:	df 0a       	sbc	r13, r31
    1824:	d8 cf       	rjmp	.-80     	; 0x17d6 <Endpoint_Write_Stream_LE+0x36>
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    1826:	80 e0       	ldi	r24, 0x00	; 0
}
    1828:	df 91       	pop	r29
    182a:	cf 91       	pop	r28
    182c:	1f 91       	pop	r17
    182e:	0f 91       	pop	r16
    1830:	ff 90       	pop	r15
    1832:	ef 90       	pop	r14
    1834:	df 90       	pop	r13
    1836:	cf 90       	pop	r12
    1838:	08 95       	ret

0000183a <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    183a:	20 91 e8 01 	lds	r18, 0x01E8
    183e:	30 91 e9 01 	lds	r19, 0x01E9
    1842:	26 17       	cp	r18, r22
    1844:	37 07       	cpc	r19, r23
    1846:	48 f0       	brcs	.+18     	; 0x185a <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1848:	61 15       	cp	r22, r1
    184a:	71 05       	cpc	r23, r1
    184c:	39 f4       	brne	.+14     	; 0x185c <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    184e:	20 91 e8 00 	lds	r18, 0x00E8
    1852:	2e 77       	andi	r18, 0x7E	; 126
    1854:	20 93 e8 00 	sts	0x00E8, r18
    1858:	01 c0       	rjmp	.+2      	; 0x185c <Endpoint_Write_Control_Stream_LE+0x22>
    185a:	b9 01       	movw	r22, r18
    185c:	40 e0       	ldi	r20, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    185e:	61 15       	cp	r22, r1
    1860:	71 05       	cpc	r23, r1
    1862:	a9 f1       	breq	.+106    	; 0x18ce <Endpoint_Write_Control_Stream_LE+0x94>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1864:	20 91 e1 01 	lds	r18, 0x01E1

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1868:	22 23       	and	r18, r18
    186a:	09 f4       	brne	.+2      	; 0x186e <Endpoint_Write_Control_Stream_LE+0x34>
    186c:	43 c0       	rjmp	.+134    	; 0x18f4 <Endpoint_Write_Control_Stream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    186e:	25 30       	cpi	r18, 0x05	; 5
    1870:	09 f4       	brne	.+2      	; 0x1874 <Endpoint_Write_Control_Stream_LE+0x3a>
    1872:	42 c0       	rjmp	.+132    	; 0x18f8 <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1874:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1878:	23 fd       	sbrc	r18, 3
    187a:	40 c0       	rjmp	.+128    	; 0x18fc <Endpoint_Write_Control_Stream_LE+0xc2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    187c:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1880:	22 fd       	sbrc	r18, 2
    1882:	32 c0       	rjmp	.+100    	; 0x18e8 <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1884:	20 91 e8 00 	lds	r18, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1888:	20 ff       	sbrs	r18, 0
    188a:	e9 cf       	rjmp	.-46     	; 0x185e <Endpoint_Write_Control_Stream_LE+0x24>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    188c:	40 91 f3 00 	lds	r20, 0x00F3
    1890:	20 91 f2 00 	lds	r18, 0x00F2
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	34 2b       	or	r19, r20
    1898:	fc 01       	movw	r30, r24
    189a:	cf 01       	movw	r24, r30
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    189c:	61 15       	cp	r22, r1
    189e:	71 05       	cpc	r23, r1
    18a0:	59 f0       	breq	.+22     	; 0x18b8 <Endpoint_Write_Control_Stream_LE+0x7e>
    18a2:	28 30       	cpi	r18, 0x08	; 8
    18a4:	31 05       	cpc	r19, r1
    18a6:	40 f4       	brcc	.+16     	; 0x18b8 <Endpoint_Write_Control_Stream_LE+0x7e>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    18a8:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    18aa:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    18ae:	61 50       	subi	r22, 0x01	; 1
    18b0:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    18b2:	2f 5f       	subi	r18, 0xFF	; 255
    18b4:	3f 4f       	sbci	r19, 0xFF	; 255
    18b6:	f1 cf       	rjmp	.-30     	; 0x189a <Endpoint_Write_Control_Stream_LE+0x60>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    18b8:	41 e0       	ldi	r20, 0x01	; 1
    18ba:	28 30       	cpi	r18, 0x08	; 8
    18bc:	31 05       	cpc	r19, r1
    18be:	09 f0       	breq	.+2      	; 0x18c2 <Endpoint_Write_Control_Stream_LE+0x88>
    18c0:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18c2:	20 91 e8 00 	lds	r18, 0x00E8
    18c6:	2e 77       	andi	r18, 0x7E	; 126
    18c8:	20 93 e8 00 	sts	0x00E8, r18
    18cc:	c8 cf       	rjmp	.-112    	; 0x185e <Endpoint_Write_Control_Stream_LE+0x24>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    18ce:	41 11       	cpse	r20, r1
    18d0:	c9 cf       	rjmp	.-110    	; 0x1864 <Endpoint_Write_Control_Stream_LE+0x2a>
    18d2:	0a c0       	rjmp	.+20     	; 0x18e8 <Endpoint_Write_Control_Stream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    18d4:	80 91 e1 01 	lds	r24, 0x01E1

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    18d8:	88 23       	and	r24, r24
    18da:	61 f0       	breq	.+24     	; 0x18f4 <Endpoint_Write_Control_Stream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    18dc:	85 30       	cpi	r24, 0x05	; 5
    18de:	61 f0       	breq	.+24     	; 0x18f8 <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    18e0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    18e4:	83 fd       	sbrc	r24, 3
    18e6:	0a c0       	rjmp	.+20     	; 0x18fc <Endpoint_Write_Control_Stream_LE+0xc2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    18e8:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    18ec:	82 ff       	sbrs	r24, 2
    18ee:	f2 cf       	rjmp	.-28     	; 0x18d4 <Endpoint_Write_Control_Stream_LE+0x9a>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    18f4:	82 e0       	ldi	r24, 0x02	; 2
    18f6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    18f8:	83 e0       	ldi	r24, 0x03	; 3
    18fa:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    18fc:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    18fe:	08 95       	ret

00001900 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1900:	20 91 e8 01 	lds	r18, 0x01E8
    1904:	30 91 e9 01 	lds	r19, 0x01E9
    1908:	26 17       	cp	r18, r22
    190a:	37 07       	cpc	r19, r23
    190c:	48 f0       	brcs	.+18     	; 0x1920 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    190e:	61 15       	cp	r22, r1
    1910:	71 05       	cpc	r23, r1
    1912:	39 f4       	brne	.+14     	; 0x1922 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1914:	20 91 e8 00 	lds	r18, 0x00E8
    1918:	2e 77       	andi	r18, 0x7E	; 126
    191a:	20 93 e8 00 	sts	0x00E8, r18
    191e:	01 c0       	rjmp	.+2      	; 0x1922 <Endpoint_Write_Control_PStream_LE+0x22>
    1920:	b9 01       	movw	r22, r18
    1922:	fc 01       	movw	r30, r24
    1924:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1926:	61 15       	cp	r22, r1
    1928:	71 05       	cpc	r23, r1
    192a:	91 f1       	breq	.+100    	; 0x1990 <Endpoint_Write_Control_PStream_LE+0x90>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    192c:	80 91 e1 01 	lds	r24, 0x01E1

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1930:	88 23       	and	r24, r24
    1932:	09 f4       	brne	.+2      	; 0x1936 <Endpoint_Write_Control_PStream_LE+0x36>
    1934:	40 c0       	rjmp	.+128    	; 0x19b6 <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1936:	85 30       	cpi	r24, 0x05	; 5
    1938:	09 f4       	brne	.+2      	; 0x193c <Endpoint_Write_Control_PStream_LE+0x3c>
    193a:	3f c0       	rjmp	.+126    	; 0x19ba <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    193c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1940:	83 fd       	sbrc	r24, 3
    1942:	3d c0       	rjmp	.+122    	; 0x19be <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1944:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1948:	82 fd       	sbrc	r24, 2
    194a:	2f c0       	rjmp	.+94     	; 0x19aa <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    194c:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1950:	80 ff       	sbrs	r24, 0
    1952:	e9 cf       	rjmp	.-46     	; 0x1926 <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1954:	20 91 f3 00 	lds	r18, 0x00F3
    1958:	80 91 f2 00 	lds	r24, 0x00F2
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1960:	61 15       	cp	r22, r1
    1962:	71 05       	cpc	r23, r1
    1964:	59 f0       	breq	.+22     	; 0x197c <Endpoint_Write_Control_PStream_LE+0x7c>
    1966:	88 30       	cpi	r24, 0x08	; 8
    1968:	91 05       	cpc	r25, r1
    196a:	40 f4       	brcc	.+16     	; 0x197c <Endpoint_Write_Control_PStream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    196c:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    196e:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1972:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1974:	61 50       	subi	r22, 0x01	; 1
    1976:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1978:	01 96       	adiw	r24, 0x01	; 1
    197a:	f2 cf       	rjmp	.-28     	; 0x1960 <Endpoint_Write_Control_PStream_LE+0x60>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    197c:	21 e0       	ldi	r18, 0x01	; 1
    197e:	08 97       	sbiw	r24, 0x08	; 8
    1980:	09 f0       	breq	.+2      	; 0x1984 <Endpoint_Write_Control_PStream_LE+0x84>
    1982:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1984:	80 91 e8 00 	lds	r24, 0x00E8
    1988:	8e 77       	andi	r24, 0x7E	; 126
    198a:	80 93 e8 00 	sts	0x00E8, r24
    198e:	cb cf       	rjmp	.-106    	; 0x1926 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1990:	21 11       	cpse	r18, r1
    1992:	cc cf       	rjmp	.-104    	; 0x192c <Endpoint_Write_Control_PStream_LE+0x2c>
    1994:	0a c0       	rjmp	.+20     	; 0x19aa <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1996:	80 91 e1 01 	lds	r24, 0x01E1

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    199a:	88 23       	and	r24, r24
    199c:	61 f0       	breq	.+24     	; 0x19b6 <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    199e:	85 30       	cpi	r24, 0x05	; 5
    19a0:	61 f0       	breq	.+24     	; 0x19ba <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    19a2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    19a6:	83 fd       	sbrc	r24, 3
    19a8:	0a c0       	rjmp	.+20     	; 0x19be <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19aa:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    19ae:	82 ff       	sbrs	r24, 2
    19b0:	f2 cf       	rjmp	.-28     	; 0x1996 <Endpoint_Write_Control_PStream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    19b6:	82 e0       	ldi	r24, 0x02	; 2
    19b8:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    19ba:	83 e0       	ldi	r24, 0x03	; 3
    19bc:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    19be:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    19c0:	08 95       	ret

000019c2 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    19c2:	98 2f       	mov	r25, r24
    19c4:	97 30       	cpi	r25, 0x07	; 7
    19c6:	58 f5       	brcc	.+86     	; 0x1a1e <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    19c8:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    19cc:	98 17       	cp	r25, r24
    19ce:	39 f0       	breq	.+14     	; 0x19de <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    19d0:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    19d4:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    19d8:	50 91 f0 00 	lds	r21, 0x00F0
    19dc:	03 c0       	rjmp	.+6      	; 0x19e4 <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    19de:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    19e0:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    19e2:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    19e4:	21 ff       	sbrs	r18, 1
    19e6:	19 c0       	rjmp	.+50     	; 0x1a1a <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    19e8:	30 91 eb 00 	lds	r19, 0x00EB
    19ec:	3e 7f       	andi	r19, 0xFE	; 254
    19ee:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    19f2:	30 91 ed 00 	lds	r19, 0x00ED
    19f6:	3d 7f       	andi	r19, 0xFD	; 253
    19f8:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    19fc:	30 91 eb 00 	lds	r19, 0x00EB
    1a00:	31 60       	ori	r19, 0x01	; 1
    1a02:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1a06:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1a0a:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    1a0e:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1a12:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1a16:	27 ff       	sbrs	r18, 7
    1a18:	07 c0       	rjmp	.+14     	; 0x1a28 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1a1a:	9f 5f       	subi	r25, 0xFF	; 255
    1a1c:	d3 cf       	rjmp	.-90     	; 0x19c4 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a1e:	8f 70       	andi	r24, 0x0F	; 15
    1a20:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1a28:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1a2a:	08 95       	ret

00001a2c <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1a2c:	80 91 e2 01 	lds	r24, 0x01E2
    1a30:	87 ff       	sbrs	r24, 7
    1a32:	11 c0       	rjmp	.+34     	; 0x1a56 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a34:	80 91 e8 00 	lds	r24, 0x00E8
	{
		while (!(Endpoint_IsOUTReceived()))
    1a38:	82 fd       	sbrc	r24, 2
    1a3a:	05 c0       	rjmp	.+10     	; 0x1a46 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1a3c:	80 91 e1 01 	lds	r24, 0x01E1
    1a40:	81 11       	cpse	r24, r1
    1a42:	f8 cf       	rjmp	.-16     	; 0x1a34 <Endpoint_ClearStatusStage+0x8>
    1a44:	11 c0       	rjmp	.+34     	; 0x1a68 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1a46:	80 91 e8 00 	lds	r24, 0x00E8
    1a4a:	8b 77       	andi	r24, 0x7B	; 123
    1a4c:	0b c0       	rjmp	.+22     	; 0x1a64 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1a4e:	80 91 e1 01 	lds	r24, 0x01E1
    1a52:	88 23       	and	r24, r24
    1a54:	49 f0       	breq	.+18     	; 0x1a68 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a56:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1a5a:	80 ff       	sbrs	r24, 0
    1a5c:	f8 cf       	rjmp	.-16     	; 0x1a4e <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a5e:	80 91 e8 00 	lds	r24, 0x00E8
    1a62:	8e 77       	andi	r24, 0x7E	; 126
    1a64:	80 93 e8 00 	sts	0x00E8, r24
    1a68:	08 95       	ret

00001a6a <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1a6a:	20 91 e4 00 	lds	r18, 0x00E4
    1a6e:	30 91 e5 00 	lds	r19, 0x00E5
    1a72:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1a74:	40 91 ec 00 	lds	r20, 0x00EC
    1a78:	84 2f       	mov	r24, r20
    1a7a:	81 70       	andi	r24, 0x01	; 1
    1a7c:	40 ff       	sbrs	r20, 0
    1a7e:	22 c0       	rjmp	.+68     	; 0x1ac4 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a80:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1a84:	80 fd       	sbrc	r24, 0
    1a86:	1c c0       	rjmp	.+56     	; 0x1ac0 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a88:	80 91 e1 01 	lds	r24, 0x01E1

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a8c:	88 23       	and	r24, r24
    1a8e:	91 f0       	breq	.+36     	; 0x1ab4 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a90:	85 30       	cpi	r24, 0x05	; 5
    1a92:	91 f0       	breq	.+36     	; 0x1ab8 <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1a94:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1a98:	85 fd       	sbrc	r24, 5
    1a9a:	10 c0       	rjmp	.+32     	; 0x1abc <Endpoint_WaitUntilReady+0x52>
    1a9c:	40 91 e4 00 	lds	r20, 0x00E4
    1aa0:	50 91 e5 00 	lds	r21, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1aa4:	42 17       	cp	r20, r18
    1aa6:	53 07       	cpc	r21, r19
    1aa8:	29 f3       	breq	.-54     	; 0x1a74 <Endpoint_WaitUntilReady+0xa>
    1aaa:	9a 01       	movw	r18, r20
    1aac:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1aae:	11 f7       	brne	.-60     	; 0x1a74 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1ab0:	84 e0       	ldi	r24, 0x04	; 4
    1ab2:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1ab4:	82 e0       	ldi	r24, 0x02	; 2
    1ab6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1ab8:	83 e0       	ldi	r24, 0x03	; 3
    1aba:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1ac4:	40 91 e8 00 	lds	r20, 0x00E8
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1ac8:	42 ff       	sbrs	r20, 2
    1aca:	de cf       	rjmp	.-68     	; 0x1a88 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1acc:	08 95       	ret

00001ace <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1ace:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1ad2:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1ad6:	e0 ee       	ldi	r30, 0xE0	; 224
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	81 60       	ori	r24, 0x01	; 1
    1ade:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1ae0:	e8 ed       	ldi	r30, 0xD8	; 216
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	8f 77       	andi	r24, 0x7F	; 127
    1ae8:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1aea:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1aec:	a7 ed       	ldi	r26, 0xD7	; 215
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	8c 91       	ld	r24, X
    1af2:	8e 7f       	andi	r24, 0xFE	; 254
    1af4:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1af6:	80 81       	ld	r24, Z
    1af8:	8f 7e       	andi	r24, 0xEF	; 239
    1afa:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1afc:	10 92 e0 01 	sts	0x01E0, r1
    1b00:	08 95       	ret

00001b02 <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    1b02:	0f 93       	push	r16
    1b04:	1f 93       	push	r17
    1b06:	cf 93       	push	r28
    1b08:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1b0a:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1b0e:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1b12:	c8 ed       	ldi	r28, 0xD8	; 216
    1b14:	d0 e0       	ldi	r29, 0x00	; 0
    1b16:	88 81       	ld	r24, Y
    1b18:	8f 77       	andi	r24, 0x7F	; 127
    1b1a:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1b1c:	88 81       	ld	r24, Y
    1b1e:	80 68       	ori	r24, 0x80	; 128
    1b20:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1b22:	88 81       	ld	r24, Y
    1b24:	8f 7d       	andi	r24, 0xDF	; 223
    1b26:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1b28:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1b2a:	10 92 e1 01 	sts	0x01E1, r1
	USB_Device_ConfigurationNumber  = 0;
    1b2e:	10 92 dd 01 	sts	0x01DD, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1b32:	10 92 df 01 	sts	0x01DF, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1b36:	10 92 de 01 	sts	0x01DE, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1b3a:	00 ee       	ldi	r16, 0xE0	; 224
    1b3c:	10 e0       	ldi	r17, 0x00	; 0
    1b3e:	f8 01       	movw	r30, r16
    1b40:	80 81       	ld	r24, Z
    1b42:	8b 7f       	andi	r24, 0xFB	; 251
    1b44:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1b46:	88 81       	ld	r24, Y
    1b48:	81 60       	ori	r24, 0x01	; 1
    1b4a:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1b4c:	42 e0       	ldi	r20, 0x02	; 2
    1b4e:	60 e0       	ldi	r22, 0x00	; 0
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1b56:	e1 ee       	ldi	r30, 0xE1	; 225
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
    1b5c:	8e 7f       	andi	r24, 0xFE	; 254
    1b5e:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1b60:	e2 ee       	ldi	r30, 0xE2	; 226
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	81 60       	ori	r24, 0x01	; 1
    1b68:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1b6a:	80 81       	ld	r24, Z
    1b6c:	88 60       	ori	r24, 0x08	; 8
    1b6e:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1b70:	f8 01       	movw	r30, r16
    1b72:	80 81       	ld	r24, Z
    1b74:	8e 7f       	andi	r24, 0xFE	; 254
    1b76:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1b78:	88 81       	ld	r24, Y
    1b7a:	80 61       	ori	r24, 0x10	; 16
    1b7c:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1b7e:	df 91       	pop	r29
    1b80:	cf 91       	pop	r28
    1b82:	1f 91       	pop	r17
    1b84:	0f 91       	pop	r16
    1b86:	08 95       	ret

00001b88 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1b88:	e8 ed       	ldi	r30, 0xD8	; 216
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	8f 7e       	andi	r24, 0xEF	; 239
    1b90:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1b92:	e7 ed       	ldi	r30, 0xD7	; 215
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	81 60       	ori	r24, 0x01	; 1
    1b9a:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1b9c:	84 e0       	ldi	r24, 0x04	; 4
    1b9e:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	80 93 e0 01 	sts	0x01E0, r24

	USB_ResetInterface();
    1ba6:	0c 94 81 0d 	jmp	0x1b02	; 0x1b02 <USB_ResetInterface>

00001baa <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1baa:	e8 ed       	ldi	r30, 0xD8	; 216
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	8e 7f       	andi	r24, 0xFE	; 254
    1bb2:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1bb4:	10 92 e2 00 	sts	0x00E2, r1
    1bb8:	08 95       	ret

00001bba <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1bba:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1bbe:	10 92 e1 00 	sts	0x00E1, r1
    1bc2:	08 95       	ret

00001bc4 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1bc4:	1f 92       	push	r1
    1bc6:	0f 92       	push	r0
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	0f 92       	push	r0
    1bcc:	11 24       	eor	r1, r1
    1bce:	2f 93       	push	r18
    1bd0:	3f 93       	push	r19
    1bd2:	4f 93       	push	r20
    1bd4:	5f 93       	push	r21
    1bd6:	6f 93       	push	r22
    1bd8:	7f 93       	push	r23
    1bda:	8f 93       	push	r24
    1bdc:	9f 93       	push	r25
    1bde:	af 93       	push	r26
    1be0:	bf 93       	push	r27
    1be2:	ef 93       	push	r30
    1be4:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1be6:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1bea:	82 ff       	sbrs	r24, 2
    1bec:	0b c0       	rjmp	.+22     	; 0x1c04 <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1bee:	80 91 e2 00 	lds	r24, 0x00E2
    1bf2:	82 ff       	sbrs	r24, 2
    1bf4:	07 c0       	rjmp	.+14     	; 0x1c04 <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1bf6:	80 91 e1 00 	lds	r24, 0x00E1
    1bfa:	8b 7f       	andi	r24, 0xFB	; 251
    1bfc:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1c00:	0e 94 00 0a 	call	0x1400	; 0x1400 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1c04:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1c08:	80 ff       	sbrs	r24, 0
    1c0a:	1f c0       	rjmp	.+62     	; 0x1c4a <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1c0c:	80 91 d8 00 	lds	r24, 0x00D8
    1c10:	80 ff       	sbrs	r24, 0
    1c12:	1b c0       	rjmp	.+54     	; 0x1c4a <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1c14:	80 91 da 00 	lds	r24, 0x00DA
    1c18:	8e 7f       	andi	r24, 0xFE	; 254
    1c1a:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1c1e:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1c22:	80 ff       	sbrs	r24, 0
    1c24:	0d c0       	rjmp	.+26     	; 0x1c40 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1c26:	80 e1       	ldi	r24, 0x10	; 16
    1c28:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1c2a:	82 e1       	ldi	r24, 0x12	; 18
    1c2c:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1c2e:	09 b4       	in	r0, 0x29	; 41
    1c30:	00 fe       	sbrs	r0, 0
    1c32:	fd cf       	rjmp	.-6      	; 0x1c2e <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	80 93 e1 01 	sts	0x01E1, r24
			EVENT_USB_Device_Connect();
    1c3a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <EVENT_USB_Device_Connect>
    1c3e:	05 c0       	rjmp	.+10     	; 0x1c4a <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1c40:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1c42:	10 92 e1 01 	sts	0x01E1, r1
			EVENT_USB_Device_Disconnect();
    1c46:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1c4a:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1c4e:	80 ff       	sbrs	r24, 0
    1c50:	19 c0       	rjmp	.+50     	; 0x1c84 <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1c52:	80 91 e2 00 	lds	r24, 0x00E2
    1c56:	80 ff       	sbrs	r24, 0
    1c58:	15 c0       	rjmp	.+42     	; 0x1c84 <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1c5a:	80 91 e2 00 	lds	r24, 0x00E2
    1c5e:	8e 7f       	andi	r24, 0xFE	; 254
    1c60:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1c64:	80 91 e2 00 	lds	r24, 0x00E2
    1c68:	80 61       	ori	r24, 0x10	; 16
    1c6a:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1c6e:	80 91 d8 00 	lds	r24, 0x00D8
    1c72:	80 62       	ori	r24, 0x20	; 32
    1c74:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1c78:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1c7a:	85 e0       	ldi	r24, 0x05	; 5
    1c7c:	80 93 e1 01 	sts	0x01E1, r24
		EVENT_USB_Device_Suspend();
    1c80:	0e 94 f6 09 	call	0x13ec	; 0x13ec <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1c84:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1c88:	84 ff       	sbrs	r24, 4
    1c8a:	30 c0       	rjmp	.+96     	; 0x1cec <__vector_10+0x128>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1c8c:	80 91 e2 00 	lds	r24, 0x00E2
    1c90:	84 ff       	sbrs	r24, 4
    1c92:	2c c0       	rjmp	.+88     	; 0x1cec <__vector_10+0x128>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1c94:	80 e1       	ldi	r24, 0x10	; 16
    1c96:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1c98:	82 e1       	ldi	r24, 0x12	; 18
    1c9a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1c9c:	09 b4       	in	r0, 0x29	; 41
    1c9e:	00 fe       	sbrs	r0, 0
    1ca0:	fd cf       	rjmp	.-6      	; 0x1c9c <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1ca2:	80 91 d8 00 	lds	r24, 0x00D8
    1ca6:	8f 7d       	andi	r24, 0xDF	; 223
    1ca8:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1cac:	80 91 e1 00 	lds	r24, 0x00E1
    1cb0:	8f 7e       	andi	r24, 0xEF	; 239
    1cb2:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1cb6:	80 91 e2 00 	lds	r24, 0x00E2
    1cba:	8f 7e       	andi	r24, 0xEF	; 239
    1cbc:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1cc0:	80 91 e2 00 	lds	r24, 0x00E2
    1cc4:	81 60       	ori	r24, 0x01	; 1
    1cc6:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1cca:	80 91 dd 01 	lds	r24, 0x01DD
    1cce:	88 23       	and	r24, r24
    1cd0:	11 f0       	breq	.+4      	; 0x1cd6 <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1cd2:	84 e0       	ldi	r24, 0x04	; 4
    1cd4:	07 c0       	rjmp	.+14     	; 0x1ce4 <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1cd6:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1cda:	87 fd       	sbrc	r24, 7
    1cdc:	02 c0       	rjmp	.+4      	; 0x1ce2 <__vector_10+0x11e>
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	01 c0       	rjmp	.+2      	; 0x1ce4 <__vector_10+0x120>
    1ce2:	83 e0       	ldi	r24, 0x03	; 3
    1ce4:	80 93 e1 01 	sts	0x01E1, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1ce8:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1cec:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1cf0:	83 ff       	sbrs	r24, 3
    1cf2:	24 c0       	rjmp	.+72     	; 0x1d3c <__vector_10+0x178>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1cf4:	80 91 e2 00 	lds	r24, 0x00E2
    1cf8:	83 ff       	sbrs	r24, 3
    1cfa:	20 c0       	rjmp	.+64     	; 0x1d3c <__vector_10+0x178>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1cfc:	80 91 e1 00 	lds	r24, 0x00E1
    1d00:	87 7f       	andi	r24, 0xF7	; 247
    1d02:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1d06:	82 e0       	ldi	r24, 0x02	; 2
    1d08:	80 93 e1 01 	sts	0x01E1, r24
		USB_Device_ConfigurationNumber = 0;
    1d0c:	10 92 dd 01 	sts	0x01DD, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1d10:	80 91 e1 00 	lds	r24, 0x00E1
    1d14:	8e 7f       	andi	r24, 0xFE	; 254
    1d16:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1d1a:	80 91 e2 00 	lds	r24, 0x00E2
    1d1e:	8e 7f       	andi	r24, 0xFE	; 254
    1d20:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1d24:	80 91 e2 00 	lds	r24, 0x00E2
    1d28:	80 61       	ori	r24, 0x10	; 16
    1d2a:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1d2e:	42 e0       	ldi	r20, 0x02	; 2
    1d30:	60 e0       	ldi	r22, 0x00	; 0
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1d38:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1d3c:	ff 91       	pop	r31
    1d3e:	ef 91       	pop	r30
    1d40:	bf 91       	pop	r27
    1d42:	af 91       	pop	r26
    1d44:	9f 91       	pop	r25
    1d46:	8f 91       	pop	r24
    1d48:	7f 91       	pop	r23
    1d4a:	6f 91       	pop	r22
    1d4c:	5f 91       	pop	r21
    1d4e:	4f 91       	pop	r20
    1d50:	3f 91       	pop	r19
    1d52:	2f 91       	pop	r18
    1d54:	0f 90       	pop	r0
    1d56:	0f be       	out	0x3f, r0	; 63
    1d58:	0f 90       	pop	r0
    1d5a:	1f 90       	pop	r1
    1d5c:	18 95       	reti

00001d5e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1d5e:	1f 93       	push	r17
    1d60:	cf 93       	push	r28
    1d62:	df 93       	push	r29
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
    1d68:	aa 97       	sbiw	r28, 0x2a	; 42
    1d6a:	0f b6       	in	r0, 0x3f	; 63
    1d6c:	f8 94       	cli
    1d6e:	de bf       	out	0x3e, r29	; 62
    1d70:	0f be       	out	0x3f, r0	; 63
    1d72:	cd bf       	out	0x3d, r28	; 61
    1d74:	e2 ee       	ldi	r30, 0xE2	; 226
    1d76:	f1 e0       	ldi	r31, 0x01	; 1
    1d78:	88 e0       	ldi	r24, 0x08	; 8
    1d7a:	8e 0f       	add	r24, r30
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1d7c:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1d80:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1d82:	8e 13       	cpse	r24, r30
    1d84:	fb cf       	rjmp	.-10     	; 0x1d7c <USB_Device_ProcessControlRequest+0x1e>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1d86:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1d8a:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1d8e:	83 ff       	sbrs	r24, 3
    1d90:	1f c1       	rjmp	.+574    	; 0x1fd0 <USB_Device_ProcessControlRequest+0x272>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1d92:	80 91 e2 01 	lds	r24, 0x01E2

		switch (USB_ControlRequest.bRequest)
    1d96:	90 91 e3 01 	lds	r25, 0x01E3
    1d9a:	49 2f       	mov	r20, r25
    1d9c:	50 e0       	ldi	r21, 0x00	; 0
    1d9e:	4a 30       	cpi	r20, 0x0A	; 10
    1da0:	51 05       	cpc	r21, r1
    1da2:	08 f0       	brcs	.+2      	; 0x1da6 <USB_Device_ProcessControlRequest+0x48>
    1da4:	15 c1       	rjmp	.+554    	; 0x1fd0 <USB_Device_ProcessControlRequest+0x272>
    1da6:	fa 01       	movw	r30, r20
    1da8:	ea 5a       	subi	r30, 0xAA	; 170
    1daa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dac:	0c 94 89 29 	jmp	0x5312	; 0x5312 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1db0:	80 38       	cpi	r24, 0x80	; 128
    1db2:	81 f0       	breq	.+32     	; 0x1dd4 <USB_Device_ProcessControlRequest+0x76>
    1db4:	82 38       	cpi	r24, 0x82	; 130
    1db6:	09 f0       	breq	.+2      	; 0x1dba <USB_Device_ProcessControlRequest+0x5c>
    1db8:	0b c1       	rjmp	.+534    	; 0x1fd0 <USB_Device_ProcessControlRequest+0x272>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1dba:	80 91 e6 01 	lds	r24, 0x01E6
    1dbe:	8f 70       	andi	r24, 0x0F	; 15
    1dc0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1dc4:	80 91 eb 00 	lds	r24, 0x00EB
    1dc8:	85 fb       	bst	r24, 5
    1dca:	88 27       	eor	r24, r24
    1dcc:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1dce:	10 92 e9 00 	sts	0x00E9, r1
    1dd2:	06 c0       	rjmp	.+12     	; 0x1de0 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1dd4:	80 91 de 01 	lds	r24, 0x01DE
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1dd8:	90 91 df 01 	lds	r25, 0x01DF
    1ddc:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1dde:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1de0:	90 91 e8 00 	lds	r25, 0x00E8
    1de4:	97 7f       	andi	r25, 0xF7	; 247
    1de6:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1dea:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1dee:	10 92 f1 00 	sts	0x00F1, r1
    1df2:	c8 c0       	rjmp	.+400    	; 0x1f84 <USB_Device_ProcessControlRequest+0x226>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1df4:	28 2f       	mov	r18, r24
    1df6:	2d 7f       	andi	r18, 0xFD	; 253
    1df8:	09 f0       	breq	.+2      	; 0x1dfc <USB_Device_ProcessControlRequest+0x9e>
    1dfa:	ea c0       	rjmp	.+468    	; 0x1fd0 <USB_Device_ProcessControlRequest+0x272>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1dfc:	88 23       	and	r24, r24
    1dfe:	19 f0       	breq	.+6      	; 0x1e06 <USB_Device_ProcessControlRequest+0xa8>
    1e00:	82 30       	cpi	r24, 0x02	; 2
    1e02:	61 f0       	breq	.+24     	; 0x1e1c <USB_Device_ProcessControlRequest+0xbe>
    1e04:	e5 c0       	rjmp	.+458    	; 0x1fd0 <USB_Device_ProcessControlRequest+0x272>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1e06:	80 91 e4 01 	lds	r24, 0x01E4
    1e0a:	81 30       	cpi	r24, 0x01	; 1
    1e0c:	09 f0       	breq	.+2      	; 0x1e10 <USB_Device_ProcessControlRequest+0xb2>
    1e0e:	e0 c0       	rjmp	.+448    	; 0x1fd0 <USB_Device_ProcessControlRequest+0x272>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1e10:	93 30       	cpi	r25, 0x03	; 3
    1e12:	09 f0       	breq	.+2      	; 0x1e16 <USB_Device_ProcessControlRequest+0xb8>
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	80 93 df 01 	sts	0x01DF, r24
    1e1a:	2b c0       	rjmp	.+86     	; 0x1e72 <USB_Device_ProcessControlRequest+0x114>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1e1c:	80 91 e4 01 	lds	r24, 0x01E4
    1e20:	81 11       	cpse	r24, r1
    1e22:	27 c0       	rjmp	.+78     	; 0x1e72 <USB_Device_ProcessControlRequest+0x114>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1e24:	80 91 e6 01 	lds	r24, 0x01E6
    1e28:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1e2a:	09 f4       	brne	.+2      	; 0x1e2e <USB_Device_ProcessControlRequest+0xd0>
    1e2c:	d1 c0       	rjmp	.+418    	; 0x1fd0 <USB_Device_ProcessControlRequest+0x272>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e2e:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1e32:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1e36:	20 ff       	sbrs	r18, 0
    1e38:	1c c0       	rjmp	.+56     	; 0x1e72 <USB_Device_ProcessControlRequest+0x114>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1e3a:	93 30       	cpi	r25, 0x03	; 3
    1e3c:	21 f4       	brne	.+8      	; 0x1e46 <USB_Device_ProcessControlRequest+0xe8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1e3e:	80 91 eb 00 	lds	r24, 0x00EB
    1e42:	80 62       	ori	r24, 0x20	; 32
    1e44:	14 c0       	rjmp	.+40     	; 0x1e6e <USB_Device_ProcessControlRequest+0x110>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1e46:	90 91 eb 00 	lds	r25, 0x00EB
    1e4a:	90 61       	ori	r25, 0x10	; 16
    1e4c:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1e50:	21 e0       	ldi	r18, 0x01	; 1
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	a9 01       	movw	r20, r18
    1e56:	02 c0       	rjmp	.+4      	; 0x1e5c <USB_Device_ProcessControlRequest+0xfe>
    1e58:	44 0f       	add	r20, r20
    1e5a:	55 1f       	adc	r21, r21
    1e5c:	8a 95       	dec	r24
    1e5e:	e2 f7       	brpl	.-8      	; 0x1e58 <USB_Device_ProcessControlRequest+0xfa>
    1e60:	40 93 ea 00 	sts	0x00EA, r20
				UERST = 0;
    1e64:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1e68:	80 91 eb 00 	lds	r24, 0x00EB
    1e6c:	88 60       	ori	r24, 0x08	; 8
    1e6e:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e72:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e76:	80 91 e8 00 	lds	r24, 0x00E8
    1e7a:	87 7f       	andi	r24, 0xF7	; 247
    1e7c:	86 c0       	rjmp	.+268    	; 0x1f8a <USB_Device_ProcessControlRequest+0x22c>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1e7e:	81 11       	cpse	r24, r1
    1e80:	a7 c0       	rjmp	.+334    	; 0x1fd0 <USB_Device_ProcessControlRequest+0x272>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1e82:	10 91 e4 01 	lds	r17, 0x01E4
    1e86:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1e88:	80 91 e3 00 	lds	r24, 0x00E3
    1e8c:	80 78       	andi	r24, 0x80	; 128
    1e8e:	81 2b       	or	r24, r17
    1e90:	80 93 e3 00 	sts	0x00E3, r24
    1e94:	80 91 e8 00 	lds	r24, 0x00E8
    1e98:	87 7f       	andi	r24, 0xF7	; 247
    1e9a:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1e9e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1ea2:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    1ea6:	80 ff       	sbrs	r24, 0
    1ea8:	fc cf       	rjmp	.-8      	; 0x1ea2 <USB_Device_ProcessControlRequest+0x144>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1eaa:	80 91 e3 00 	lds	r24, 0x00E3
    1eae:	80 68       	ori	r24, 0x80	; 128
    1eb0:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1eb4:	11 11       	cpse	r17, r1
    1eb6:	02 c0       	rjmp	.+4      	; 0x1ebc <USB_Device_ProcessControlRequest+0x15e>
    1eb8:	82 e0       	ldi	r24, 0x02	; 2
    1eba:	01 c0       	rjmp	.+2      	; 0x1ebe <USB_Device_ProcessControlRequest+0x160>
    1ebc:	83 e0       	ldi	r24, 0x03	; 3
    1ebe:	80 93 e1 01 	sts	0x01E1, r24
    1ec2:	86 c0       	rjmp	.+268    	; 0x1fd0 <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1ec4:	80 58       	subi	r24, 0x80	; 128
    1ec6:	82 30       	cpi	r24, 0x02	; 2
    1ec8:	08 f0       	brcs	.+2      	; 0x1ecc <USB_Device_ProcessControlRequest+0x16e>
    1eca:	82 c0       	rjmp	.+260    	; 0x1fd0 <USB_Device_ProcessControlRequest+0x272>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1ecc:	80 91 e4 01 	lds	r24, 0x01E4
    1ed0:	90 91 e5 01 	lds	r25, 0x01E5
    1ed4:	8c 3d       	cpi	r24, 0xDC	; 220
    1ed6:	53 e0       	ldi	r21, 0x03	; 3
    1ed8:	95 07       	cpc	r25, r21
    1eda:	79 f5       	brne	.+94     	; 0x1f3a <USB_Device_ProcessControlRequest+0x1dc>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1edc:	83 e0       	ldi	r24, 0x03	; 3
    1ede:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1ee0:	8a e2       	ldi	r24, 0x2A	; 42
    1ee2:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1ee4:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1ee6:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1ee8:	de 01       	movw	r26, r28
    1eea:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1eec:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1eee:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1ef0:	51 e2       	ldi	r21, 0x21	; 33
    1ef2:	e3 2f       	mov	r30, r19
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	50 93 57 00 	sts	0x0057, r21
    1efa:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1efc:	20 ff       	sbrs	r18, 0
    1efe:	03 c0       	rjmp	.+6      	; 0x1f06 <USB_Device_ProcessControlRequest+0x1a8>
					{
						SerialByte >>= 4;
    1f00:	e2 95       	swap	r30
    1f02:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1f04:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1f06:	ef 70       	andi	r30, 0x0F	; 15
    1f08:	8e 2f       	mov	r24, r30
    1f0a:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1f0c:	ea 30       	cpi	r30, 0x0A	; 10
    1f0e:	10 f0       	brcs	.+4      	; 0x1f14 <USB_Device_ProcessControlRequest+0x1b6>
    1f10:	c7 96       	adiw	r24, 0x37	; 55
    1f12:	01 c0       	rjmp	.+2      	; 0x1f16 <USB_Device_ProcessControlRequest+0x1b8>
    1f14:	c0 96       	adiw	r24, 0x30	; 48
    1f16:	8d 93       	st	X+, r24
    1f18:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1f1a:	2f 5f       	subi	r18, 0xFF	; 255
    1f1c:	24 31       	cpi	r18, 0x14	; 20
    1f1e:	49 f7       	brne	.-46     	; 0x1ef2 <USB_Device_ProcessControlRequest+0x194>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1f20:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f22:	80 91 e8 00 	lds	r24, 0x00E8
    1f26:	87 7f       	andi	r24, 0xF7	; 247
    1f28:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1f2c:	6a e2       	ldi	r22, 0x2A	; 42
    1f2e:	70 e0       	ldi	r23, 0x00	; 0
    1f30:	ce 01       	movw	r24, r28
    1f32:	01 96       	adiw	r24, 0x01	; 1
    1f34:	0e 94 1d 0c 	call	0x183a	; 0x183a <Endpoint_Write_Control_Stream_LE>
    1f38:	14 c0       	rjmp	.+40     	; 0x1f62 <USB_Device_ProcessControlRequest+0x204>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1f3a:	ae 01       	movw	r20, r28
    1f3c:	4f 5f       	subi	r20, 0xFF	; 255
    1f3e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f40:	60 91 e6 01 	lds	r22, 0x01E6
    1f44:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <CALLBACK_USB_GetDescriptor>
    1f48:	bc 01       	movw	r22, r24
    1f4a:	89 2b       	or	r24, r25
    1f4c:	09 f4       	brne	.+2      	; 0x1f50 <USB_Device_ProcessControlRequest+0x1f2>
    1f4e:	40 c0       	rjmp	.+128    	; 0x1fd0 <USB_Device_ProcessControlRequest+0x272>
    1f50:	90 91 e8 00 	lds	r25, 0x00E8
    1f54:	97 7f       	andi	r25, 0xF7	; 247
    1f56:	90 93 e8 00 	sts	0x00E8, r25
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5e:	0e 94 80 0c 	call	0x1900	; 0x1900 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1f62:	80 91 e8 00 	lds	r24, 0x00E8
    1f66:	8b 77       	andi	r24, 0x7B	; 123
    1f68:	80 93 e8 00 	sts	0x00E8, r24
    1f6c:	31 c0       	rjmp	.+98     	; 0x1fd0 <USB_Device_ProcessControlRequest+0x272>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1f6e:	80 38       	cpi	r24, 0x80	; 128
    1f70:	79 f5       	brne	.+94     	; 0x1fd0 <USB_Device_ProcessControlRequest+0x272>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f72:	80 91 e8 00 	lds	r24, 0x00E8
    1f76:	87 7f       	andi	r24, 0xF7	; 247
    1f78:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1f7c:	80 91 dd 01 	lds	r24, 0x01DD
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1f80:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f84:	80 91 e8 00 	lds	r24, 0x00E8
    1f88:	8e 77       	andi	r24, 0x7E	; 126
    1f8a:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1f8e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <Endpoint_ClearStatusStage>
    1f92:	1e c0       	rjmp	.+60     	; 0x1fd0 <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1f94:	81 11       	cpse	r24, r1
    1f96:	1c c0       	rjmp	.+56     	; 0x1fd0 <USB_Device_ProcessControlRequest+0x272>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1f98:	90 91 e4 01 	lds	r25, 0x01E4
    1f9c:	92 30       	cpi	r25, 0x02	; 2
    1f9e:	c0 f4       	brcc	.+48     	; 0x1fd0 <USB_Device_ProcessControlRequest+0x272>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1fa0:	80 91 e8 00 	lds	r24, 0x00E8
    1fa4:	87 7f       	andi	r24, 0xF7	; 247
    1fa6:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1faa:	90 93 dd 01 	sts	0x01DD, r25

	Endpoint_ClearStatusStage();
    1fae:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1fb2:	80 91 dd 01 	lds	r24, 0x01DD
    1fb6:	81 11       	cpse	r24, r1
    1fb8:	06 c0       	rjmp	.+12     	; 0x1fc6 <USB_Device_ProcessControlRequest+0x268>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1fba:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1fbe:	87 fd       	sbrc	r24, 7
    1fc0:	02 c0       	rjmp	.+4      	; 0x1fc6 <USB_Device_ProcessControlRequest+0x268>
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	01 c0       	rjmp	.+2      	; 0x1fc8 <USB_Device_ProcessControlRequest+0x26a>
    1fc6:	84 e0       	ldi	r24, 0x04	; 4
    1fc8:	80 93 e1 01 	sts	0x01E1, r24

	EVENT_USB_Device_ConfigurationChanged();
    1fcc:	0e 94 41 0a 	call	0x1482	; 0x1482 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1fd0:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1fd4:	83 ff       	sbrs	r24, 3
    1fd6:	0a c0       	rjmp	.+20     	; 0x1fec <USB_Device_ProcessControlRequest+0x28e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1fd8:	80 91 e8 00 	lds	r24, 0x00E8
    1fdc:	87 7f       	andi	r24, 0xF7	; 247
    1fde:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1fe2:	80 91 eb 00 	lds	r24, 0x00EB
    1fe6:	80 62       	ori	r24, 0x20	; 32
    1fe8:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1fec:	aa 96       	adiw	r28, 0x2a	; 42
    1fee:	0f b6       	in	r0, 0x3f	; 63
    1ff0:	f8 94       	cli
    1ff2:	de bf       	out	0x3e, r29	; 62
    1ff4:	0f be       	out	0x3f, r0	; 63
    1ff6:	cd bf       	out	0x3d, r28	; 61
    1ff8:	df 91       	pop	r29
    1ffa:	cf 91       	pop	r28
    1ffc:	1f 91       	pop	r17
    1ffe:	08 95       	ret

00002000 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    2000:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    2002:	80 91 e1 01 	lds	r24, 0x01E1
    2006:	88 23       	and	r24, r24
    2008:	a1 f0       	breq	.+40     	; 0x2032 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    200a:	c0 91 e9 00 	lds	r28, 0x00E9
    200e:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2010:	90 91 ec 00 	lds	r25, 0x00EC
    2014:	89 2f       	mov	r24, r25
    2016:	81 70       	andi	r24, 0x01	; 1
    2018:	90 fd       	sbrc	r25, 0
    201a:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    201c:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    201e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2022:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    2026:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    2028:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    202c:	cf 70       	andi	r28, 0x0F	; 15
    202e:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    2032:	cf 91       	pop	r28
    2034:	08 95       	ret

00002036 <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    2036:	90 93 6c 01 	sts	0x016C, r25
    203a:	80 93 6b 01 	sts	0x016B, r24
    203e:	08 95       	ret

00002040 <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    2040:	e0 91 6b 01 	lds	r30, 0x016B
    2044:	f0 91 6c 01 	lds	r31, 0x016C
    2048:	30 97       	sbiw	r30, 0x00	; 0
    204a:	21 f0       	breq	.+8      	; 0x2054 <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    204c:	01 90       	ld	r0, Z+
    204e:	f0 81       	ld	r31, Z
    2050:	e0 2d       	mov	r30, r0
    2052:	09 94       	ijmp
}
    2054:	80 e0       	ldi	r24, 0x00	; 0
    2056:	08 95       	ret

00002058 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    2058:	ef 92       	push	r14
    205a:	ff 92       	push	r15
    205c:	0f 93       	push	r16
    205e:	1f 93       	push	r17
    2060:	cf 93       	push	r28
    2062:	df 93       	push	r29
    if (!driver) return;
    2064:	e0 91 6b 01 	lds	r30, 0x016B
    2068:	f0 91 6c 01 	lds	r31, 0x016C
    206c:	30 97       	sbiw	r30, 0x00	; 0
    206e:	b1 f1       	breq	.+108    	; 0x20dc <host_keyboard_send+0x84>
    2070:	8c 01       	movw	r16, r24
    (*driver->send_keyboard)(report);
    2072:	02 80       	ldd	r0, Z+2	; 0x02
    2074:	f3 81       	ldd	r31, Z+3	; 0x03
    2076:	e0 2d       	mov	r30, r0
    2078:	09 95       	icall

    if (debug_keyboard) {
    207a:	80 91 cb 01 	lds	r24, 0x01CB
    207e:	82 ff       	sbrs	r24, 2
    2080:	2d c0       	rjmp	.+90     	; 0x20dc <host_keyboard_send+0x84>
        dprint("keyboard_report: ");
    2082:	80 ff       	sbrs	r24, 0
    2084:	04 c0       	rjmp	.+8      	; 0x208e <host_keyboard_send+0x36>
    2086:	8b e4       	ldi	r24, 0x4B	; 75
    2088:	94 e0       	ldi	r25, 0x04	; 4
    208a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    208e:	e8 01       	movw	r28, r16
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    2090:	10 e1       	ldi	r17, 0x10	; 16
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    2092:	85 e4       	ldi	r24, 0x45	; 69
    2094:	e8 2e       	mov	r14, r24
    2096:	84 e0       	ldi	r24, 0x04	; 4
    2098:	f8 2e       	mov	r15, r24
    209a:	80 91 cb 01 	lds	r24, 0x01CB
    209e:	80 ff       	sbrs	r24, 0
    20a0:	0b c0       	rjmp	.+22     	; 0x20b8 <host_keyboard_send+0x60>
    20a2:	88 81       	ld	r24, Y
    20a4:	1f 92       	push	r1
    20a6:	8f 93       	push	r24
    20a8:	ff 92       	push	r15
    20aa:	ef 92       	push	r14
    20ac:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    20b0:	0f 90       	pop	r0
    20b2:	0f 90       	pop	r0
    20b4:	0f 90       	pop	r0
    20b6:	0f 90       	pop	r0
    20b8:	11 50       	subi	r17, 0x01	; 1
    20ba:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    20bc:	11 11       	cpse	r17, r1
    20be:	ed cf       	rjmp	.-38     	; 0x209a <host_keyboard_send+0x42>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    20c0:	80 91 cb 01 	lds	r24, 0x01CB
    20c4:	80 ff       	sbrs	r24, 0
    20c6:	0a c0       	rjmp	.+20     	; 0x20dc <host_keyboard_send+0x84>
    20c8:	83 e4       	ldi	r24, 0x43	; 67
    20ca:	94 e0       	ldi	r25, 0x04	; 4
    }
}
    20cc:	df 91       	pop	r29
    20ce:	cf 91       	pop	r28
    20d0:	1f 91       	pop	r17
    20d2:	0f 91       	pop	r16
    20d4:	ff 90       	pop	r15
    20d6:	ef 90       	pop	r14
    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    20d8:	0c 94 8e 06 	jmp	0xd1c	; 0xd1c <xputs>
    }
}
    20dc:	df 91       	pop	r29
    20de:	cf 91       	pop	r28
    20e0:	1f 91       	pop	r17
    20e2:	0f 91       	pop	r16
    20e4:	ff 90       	pop	r15
    20e6:	ef 90       	pop	r14
    20e8:	08 95       	ret

000020ea <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    20ea:	e0 91 6b 01 	lds	r30, 0x016B
    20ee:	f0 91 6c 01 	lds	r31, 0x016C
    20f2:	30 97       	sbiw	r30, 0x00	; 0
    20f4:	21 f0       	breq	.+8      	; 0x20fe <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    20f6:	04 80       	ldd	r0, Z+4	; 0x04
    20f8:	f5 81       	ldd	r31, Z+5	; 0x05
    20fa:	e0 2d       	mov	r30, r0
    20fc:	09 94       	ijmp
    20fe:	08 95       	ret

00002100 <host_system_send>:
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    2100:	20 91 69 01 	lds	r18, 0x0169
    2104:	30 91 6a 01 	lds	r19, 0x016A
    2108:	82 17       	cp	r24, r18
    210a:	93 07       	cpc	r25, r19
    210c:	71 f0       	breq	.+28     	; 0x212a <host_system_send+0x2a>
    last_system_report = report;
    210e:	90 93 6a 01 	sts	0x016A, r25
    2112:	80 93 69 01 	sts	0x0169, r24

    if (!driver) return;
    2116:	e0 91 6b 01 	lds	r30, 0x016B
    211a:	f0 91 6c 01 	lds	r31, 0x016C
    211e:	30 97       	sbiw	r30, 0x00	; 0
    2120:	21 f0       	breq	.+8      	; 0x212a <host_system_send+0x2a>
    (*driver->send_system)(report);
    2122:	06 80       	ldd	r0, Z+6	; 0x06
    2124:	f7 81       	ldd	r31, Z+7	; 0x07
    2126:	e0 2d       	mov	r30, r0
    2128:	09 94       	ijmp
    212a:	08 95       	ret

0000212c <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    212c:	20 91 67 01 	lds	r18, 0x0167
    2130:	30 91 68 01 	lds	r19, 0x0168
    2134:	82 17       	cp	r24, r18
    2136:	93 07       	cpc	r25, r19
    2138:	71 f0       	breq	.+28     	; 0x2156 <host_consumer_send+0x2a>
    last_consumer_report = report;
    213a:	90 93 68 01 	sts	0x0168, r25
    213e:	80 93 67 01 	sts	0x0167, r24

    if (!driver) return;
    2142:	e0 91 6b 01 	lds	r30, 0x016B
    2146:	f0 91 6c 01 	lds	r31, 0x016C
    214a:	30 97       	sbiw	r30, 0x00	; 0
    214c:	21 f0       	breq	.+8      	; 0x2156 <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    214e:	00 84       	ldd	r0, Z+8	; 0x08
    2150:	f1 85       	ldd	r31, Z+9	; 0x09
    2152:	e0 2d       	mov	r30, r0
    2154:	09 94       	ijmp
    2156:	08 95       	ret

00002158 <matrix_setup>:
    return false;
}
#endif


__attribute__ ((weak)) void matrix_setup(void) {}
    2158:	08 95       	ret

0000215a <keyboard_setup>:
void keyboard_setup(void)
{
    matrix_setup();
    215a:	0c 94 ac 10 	jmp	0x2158	; 0x2158 <matrix_setup>

0000215e <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    215e:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <timer_init>
    matrix_init();
    2162:	0e 94 6a 07 	call	0xed4	; 0xed4 <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    2166:	0c 94 ec 1e 	jmp	0x3dd8	; 0x3dd8 <bootmagic>

0000216a <keyboard_set_leds>:
        keyboard_set_leds(led_status);
    }
}

void keyboard_set_leds(uint8_t leds)
{
    216a:	cf 93       	push	r28
    216c:	c8 2f       	mov	r28, r24
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    216e:	80 91 cb 01 	lds	r24, 0x01CB
    2172:	82 ff       	sbrs	r24, 2
    2174:	1e c0       	rjmp	.+60     	; 0x21b2 <keyboard_set_leds+0x48>
    2176:	80 ff       	sbrs	r24, 0
    2178:	04 c0       	rjmp	.+8      	; 0x2182 <keyboard_set_leds+0x18>
    217a:	84 e6       	ldi	r24, 0x64	; 100
    217c:	94 e0       	ldi	r25, 0x04	; 4
    217e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    2182:	80 91 cb 01 	lds	r24, 0x01CB
    2186:	80 ff       	sbrs	r24, 0
    2188:	0c c0       	rjmp	.+24     	; 0x21a2 <keyboard_set_leds+0x38>
    218a:	1f 92       	push	r1
    218c:	cf 93       	push	r28
    218e:	8f e5       	ldi	r24, 0x5F	; 95
    2190:	94 e0       	ldi	r25, 0x04	; 4
    2192:	9f 93       	push	r25
    2194:	8f 93       	push	r24
    2196:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    219a:	0f 90       	pop	r0
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	0f 90       	pop	r0
    21a2:	80 91 cb 01 	lds	r24, 0x01CB
    21a6:	80 ff       	sbrs	r24, 0
    21a8:	04 c0       	rjmp	.+8      	; 0x21b2 <keyboard_set_leds+0x48>
    21aa:	8d e5       	ldi	r24, 0x5D	; 93
    21ac:	94 e0       	ldi	r25, 0x04	; 4
    21ae:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    led_set(leds);
    21b2:	8c 2f       	mov	r24, r28
}
    21b4:	cf 91       	pop	r28
}

void keyboard_set_leds(uint8_t leds)
{
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    led_set(leds);
    21b6:	0c 94 8f 08 	jmp	0x111e	; 0x111e <led_set>

000021ba <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    21ba:	cf 92       	push	r12
    21bc:	df 92       	push	r13
    21be:	ef 92       	push	r14
    21c0:	ff 92       	push	r15
    21c2:	0f 93       	push	r16
    21c4:	1f 93       	push	r17
    21c6:	cf 93       	push	r28
    21c8:	df 93       	push	r29
    21ca:	cd b7       	in	r28, 0x3d	; 61
    21cc:	de b7       	in	r29, 0x3e	; 62
    21ce:	2b 97       	sbiw	r28, 0x0b	; 11
    21d0:	0f b6       	in	r0, 0x3f	; 63
    21d2:	f8 94       	cli
    21d4:	de bf       	out	0x3e, r29	; 62
    21d6:	0f be       	out	0x3f, r0	; 63
    21d8:	cd bf       	out	0x3d, r28	; 61
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    21da:	0e 94 8e 07 	call	0xf1c	; 0xf1c <matrix_scan>
    21de:	8e e6       	ldi	r24, 0x6E	; 110
    21e0:	c8 2e       	mov	r12, r24
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	d8 2e       	mov	r13, r24
    21e6:	00 e0       	ldi	r16, 0x00	; 0
    21e8:	10 e0       	ldi	r17, 0x00	; 0
    21ea:	e0 2e       	mov	r14, r16
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    21ec:	80 2f       	mov	r24, r16
    21ee:	0e 94 58 08 	call	0x10b0	; 0x10b0 <matrix_get_row>
        matrix_change = matrix_row ^ matrix_prev[r];
    21f2:	f6 01       	movw	r30, r12
    21f4:	41 91       	ld	r20, Z+
    21f6:	6f 01       	movw	r12, r30
    21f8:	f4 2e       	mov	r15, r20
    21fa:	f8 26       	eor	r15, r24
        if (matrix_change) {
    21fc:	b1 f4       	brne	.+44     	; 0x222a <keyboard_task+0x70>
    21fe:	0f 5f       	subi	r16, 0xFF	; 255
    2200:	1f 4f       	sbci	r17, 0xFF	; 255
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2202:	08 30       	cpi	r16, 0x08	; 8
    2204:	11 05       	cpc	r17, r1
    2206:	89 f7       	brne	.-30     	; 0x21ea <keyboard_task+0x30>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    2208:	8f ef       	ldi	r24, 0xFF	; 255
    220a:	89 83       	std	Y+1, r24	; 0x01
    220c:	8a 83       	std	Y+2, r24	; 0x02
    220e:	1b 82       	std	Y+3, r1	; 0x03
    2210:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <timer_read>
    2214:	81 60       	ori	r24, 0x01	; 1
    2216:	78 2f       	mov	r23, r24
    2218:	9d 83       	std	Y+5, r25	; 0x05
    221a:	8c 83       	std	Y+4, r24	; 0x04
    221c:	49 81       	ldd	r20, Y+1	; 0x01
    221e:	5a 81       	ldd	r21, Y+2	; 0x02
    2220:	6b 81       	ldd	r22, Y+3	; 0x03
    2222:	8d 81       	ldd	r24, Y+5	; 0x05
    2224:	0e 94 80 11 	call	0x2300	; 0x2300 <action_exec>
    2228:	40 c0       	rjmp	.+128    	; 0x22aa <keyboard_task+0xf0>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    222a:	90 91 cb 01 	lds	r25, 0x01CB
    222e:	91 ff       	sbrs	r25, 1
    2230:	04 c0       	rjmp	.+8      	; 0x223a <keyboard_task+0x80>
    2232:	8b 87       	std	Y+11, r24	; 0x0b
    2234:	0e 94 61 08 	call	0x10c2	; 0x10c2 <matrix_print>
    2238:	8b 85       	ldd	r24, Y+11	; 0x0b
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	30 e0       	ldi	r19, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    223e:	4f 2d       	mov	r20, r15
    2240:	50 e0       	ldi	r21, 0x00	; 0
    2242:	92 2f       	mov	r25, r18
    2244:	ba 01       	movw	r22, r20
    2246:	02 2e       	mov	r0, r18
    2248:	02 c0       	rjmp	.+4      	; 0x224e <keyboard_task+0x94>
    224a:	75 95       	asr	r23
    224c:	67 95       	ror	r22
    224e:	0a 94       	dec	r0
    2250:	e2 f7       	brpl	.-8      	; 0x224a <keyboard_task+0x90>
    2252:	60 ff       	sbrs	r22, 0
    2254:	24 c0       	rjmp	.+72     	; 0x229e <keyboard_task+0xe4>
                    action_exec((keyevent_t){
    2256:	2e 83       	std	Y+6, r18	; 0x06
    2258:	ef 82       	std	Y+7, r14	; 0x07
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    225a:	21 e0       	ldi	r18, 0x01	; 1
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	69 01       	movw	r12, r18
    2260:	02 c0       	rjmp	.+4      	; 0x2266 <keyboard_task+0xac>
    2262:	cc 0c       	add	r12, r12
    2264:	dd 1c       	adc	r13, r13
    2266:	9a 95       	dec	r25
    2268:	e2 f7       	brpl	.-8      	; 0x2262 <keyboard_task+0xa8>
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	8c 21       	and	r24, r12
    226e:	9d 21       	and	r25, r13
    2270:	89 2b       	or	r24, r25
    2272:	09 f4       	brne	.+2      	; 0x2276 <keyboard_task+0xbc>
    2274:	20 e0       	ldi	r18, 0x00	; 0
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    2276:	28 87       	std	Y+8, r18	; 0x08
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    2278:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <timer_read>
    227c:	81 60       	ori	r24, 0x01	; 1
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    227e:	78 2f       	mov	r23, r24
    2280:	9a 87       	std	Y+10, r25	; 0x0a
    2282:	89 87       	std	Y+9, r24	; 0x09
    2284:	4e 81       	ldd	r20, Y+6	; 0x06
    2286:	5f 81       	ldd	r21, Y+7	; 0x07
    2288:	68 85       	ldd	r22, Y+8	; 0x08
    228a:	8a 85       	ldd	r24, Y+10	; 0x0a
    228c:	0e 94 80 11 	call	0x2300	; 0x2300 <action_exec>
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    2290:	f8 01       	movw	r30, r16
    2292:	e2 59       	subi	r30, 0x92	; 146
    2294:	fe 4f       	sbci	r31, 0xFE	; 254
    2296:	80 81       	ld	r24, Z
    2298:	c8 26       	eor	r12, r24
    229a:	c0 82       	st	Z, r12
                    // process a key per task call
                    goto MATRIX_LOOP_END;
    229c:	06 c0       	rjmp	.+12     	; 0x22aa <keyboard_task+0xf0>
    229e:	2f 5f       	subi	r18, 0xFF	; 255
    22a0:	3f 4f       	sbci	r19, 0xFF	; 255
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    22a2:	28 30       	cpi	r18, 0x08	; 8
    22a4:	31 05       	cpc	r19, r1
    22a6:	69 f6       	brne	.-102    	; 0x2242 <keyboard_task+0x88>
    22a8:	aa cf       	rjmp	.-172    	; 0x21fe <keyboard_task+0x44>

MATRIX_LOOP_END:

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    22aa:	0e 94 5d 22 	call	0x44ba	; 0x44ba <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    22ae:	10 91 6d 01 	lds	r17, 0x016D
    22b2:	0e 94 20 10 	call	0x2040	; 0x2040 <host_keyboard_leds>
    22b6:	18 17       	cp	r17, r24
    22b8:	a1 f0       	breq	.+40     	; 0x22e2 <keyboard_task+0x128>
        led_status = host_keyboard_leds();
    22ba:	0e 94 20 10 	call	0x2040	; 0x2040 <host_keyboard_leds>
    22be:	80 93 6d 01 	sts	0x016D, r24
        keyboard_set_leds(led_status);
    }
}
    22c2:	2b 96       	adiw	r28, 0x0b	; 11
    22c4:	0f b6       	in	r0, 0x3f	; 63
    22c6:	f8 94       	cli
    22c8:	de bf       	out	0x3e, r29	; 62
    22ca:	0f be       	out	0x3f, r0	; 63
    22cc:	cd bf       	out	0x3d, r28	; 61
    22ce:	df 91       	pop	r29
    22d0:	cf 91       	pop	r28
    22d2:	1f 91       	pop	r17
    22d4:	0f 91       	pop	r16
    22d6:	ff 90       	pop	r15
    22d8:	ef 90       	pop	r14
    22da:	df 90       	pop	r13
    22dc:	cf 90       	pop	r12
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        keyboard_set_leds(led_status);
    22de:	0c 94 b5 10 	jmp	0x216a	; 0x216a <keyboard_set_leds>
    }
}
    22e2:	2b 96       	adiw	r28, 0x0b	; 11
    22e4:	0f b6       	in	r0, 0x3f	; 63
    22e6:	f8 94       	cli
    22e8:	de bf       	out	0x3e, r29	; 62
    22ea:	0f be       	out	0x3f, r0	; 63
    22ec:	cd bf       	out	0x3d, r28	; 61
    22ee:	df 91       	pop	r29
    22f0:	cf 91       	pop	r28
    22f2:	1f 91       	pop	r17
    22f4:	0f 91       	pop	r16
    22f6:	ff 90       	pop	r15
    22f8:	ef 90       	pop	r14
    22fa:	df 90       	pop	r13
    22fc:	cf 90       	pop	r12
    22fe:	08 95       	ret

00002300 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    2300:	cf 93       	push	r28
    2302:	df 93       	push	r29
    2304:	cd b7       	in	r28, 0x3d	; 61
    2306:	de b7       	in	r29, 0x3e	; 62
    2308:	2b 97       	sbiw	r28, 0x0b	; 11
    230a:	0f b6       	in	r0, 0x3f	; 63
    230c:	f8 94       	cli
    230e:	de bf       	out	0x3e, r29	; 62
    2310:	0f be       	out	0x3f, r0	; 63
    2312:	cd bf       	out	0x3d, r28	; 61
    2314:	4f 83       	std	Y+7, r20	; 0x07
    2316:	58 87       	std	Y+8, r21	; 0x08
    2318:	69 87       	std	Y+9, r22	; 0x09
    231a:	7a 87       	std	Y+10, r23	; 0x0a
    231c:	8b 87       	std	Y+11, r24	; 0x0b
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
    }

    keyrecord_t record = { .event = event };
    231e:	de 01       	movw	r26, r28
    2320:	11 96       	adiw	r26, 0x01	; 1
    2322:	86 e0       	ldi	r24, 0x06	; 6
    2324:	fd 01       	movw	r30, r26
    2326:	11 92       	st	Z+, r1
    2328:	8a 95       	dec	r24
    232a:	e9 f7       	brne	.-6      	; 0x2326 <action_exec+0x26>
    232c:	85 e0       	ldi	r24, 0x05	; 5
    232e:	fe 01       	movw	r30, r28
    2330:	37 96       	adiw	r30, 0x07	; 7
    2332:	01 90       	ld	r0, Z+
    2334:	0d 92       	st	X+, r0
    2336:	8a 95       	dec	r24
    2338:	e1 f7       	brne	.-8      	; 0x2332 <action_exec+0x32>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    233a:	49 81       	ldd	r20, Y+1	; 0x01
    233c:	5a 81       	ldd	r21, Y+2	; 0x02
    233e:	6b 81       	ldd	r22, Y+3	; 0x03
    2340:	7c 81       	ldd	r23, Y+4	; 0x04
    2342:	8d 81       	ldd	r24, Y+5	; 0x05
    2344:	9e 81       	ldd	r25, Y+6	; 0x06
    2346:	0e 94 56 18 	call	0x30ac	; 0x30ac <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    234a:	2b 96       	adiw	r28, 0x0b	; 11
    234c:	0f b6       	in	r0, 0x3f	; 63
    234e:	f8 94       	cli
    2350:	de bf       	out	0x3e, r29	; 62
    2352:	0f be       	out	0x3f, r0	; 63
    2354:	cd bf       	out	0x3d, r28	; 61
    2356:	df 91       	pop	r29
    2358:	cf 91       	pop	r28
    235a:	08 95       	ret

0000235c <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    235c:	cf 93       	push	r28
    if (code == KC_NO) {
    235e:	88 23       	and	r24, r24
    2360:	09 f4       	brne	.+2      	; 0x2364 <register_code+0x8>
    2362:	99 c0       	rjmp	.+306    	; 0x2496 <register_code+0x13a>
    2364:	c8 2f       	mov	r28, r24
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2366:	8c ef       	ldi	r24, 0xFC	; 252
    2368:	8c 0f       	add	r24, r28
    236a:	81 3a       	cpi	r24, 0xA1	; 161
    236c:	48 f4       	brcc	.+18     	; 0x2380 <register_code+0x24>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    236e:	8c 2f       	mov	r24, r28
    2370:	0e 94 e3 26 	call	0x4dc6	; 0x4dc6 <command_proc>
    2374:	81 11       	cpse	r24, r1
    2376:	8f c0       	rjmp	.+286    	; 0x2496 <register_code+0x13a>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    2378:	8c 2f       	mov	r24, r28
    237a:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <add_key>
    237e:	0c c0       	rjmp	.+24     	; 0x2398 <register_code+0x3c>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    2380:	80 e2       	ldi	r24, 0x20	; 32
    2382:	8c 0f       	add	r24, r28
    2384:	88 30       	cpi	r24, 0x08	; 8
    2386:	58 f4       	brcc	.+22     	; 0x239e <register_code+0x42>
        add_mods(MOD_BIT(code));
    2388:	c7 70       	andi	r28, 0x07	; 7
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	01 c0       	rjmp	.+2      	; 0x2390 <register_code+0x34>
    238e:	88 0f       	add	r24, r24
    2390:	ca 95       	dec	r28
    2392:	ea f7       	brpl	.-6      	; 0x238e <register_code+0x32>
    2394:	0e 94 9a 1b 	call	0x3734	; 0x3734 <add_mods>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2398:	cf 91       	pop	r28
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    239a:	0c 94 db 1b 	jmp	0x37b6	; 0x37b6 <send_keyboard_report>
    }
    else if IS_SYSTEM(code) {
    239e:	8b e5       	ldi	r24, 0x5B	; 91
    23a0:	8c 0f       	add	r24, r28
    23a2:	83 30       	cpi	r24, 0x03	; 3
    23a4:	78 f4       	brcc	.+30     	; 0x23c4 <register_code+0x68>
        host_system_send(KEYCODE2SYSTEM(code));
    23a6:	c5 3a       	cpi	r28, 0xA5	; 165
    23a8:	29 f0       	breq	.+10     	; 0x23b4 <register_code+0x58>
    23aa:	c6 3a       	cpi	r28, 0xA6	; 166
    23ac:	31 f0       	breq	.+12     	; 0x23ba <register_code+0x5e>
    23ae:	83 e8       	ldi	r24, 0x83	; 131
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	05 c0       	rjmp	.+10     	; 0x23be <register_code+0x62>
    23b4:	81 e8       	ldi	r24, 0x81	; 129
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	02 c0       	rjmp	.+4      	; 0x23be <register_code+0x62>
    23ba:	82 e8       	ldi	r24, 0x82	; 130
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    23be:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    23c0:	0c 94 80 10 	jmp	0x2100	; 0x2100 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    23c4:	88 e5       	ldi	r24, 0x58	; 88
    23c6:	8c 0f       	add	r24, r28
    23c8:	83 31       	cpi	r24, 0x13	; 19
    23ca:	08 f0       	brcs	.+2      	; 0x23ce <register_code+0x72>
    23cc:	64 c0       	rjmp	.+200    	; 0x2496 <register_code+0x13a>
        host_consumer_send(KEYCODE2CONSUMER(code));
    23ce:	c8 3a       	cpi	r28, 0xA8	; 168
    23d0:	39 f1       	breq	.+78     	; 0x2420 <register_code+0xc4>
    23d2:	c9 3a       	cpi	r28, 0xA9	; 169
    23d4:	41 f1       	breq	.+80     	; 0x2426 <register_code+0xca>
    23d6:	ca 3a       	cpi	r28, 0xAA	; 170
    23d8:	49 f1       	breq	.+82     	; 0x242c <register_code+0xd0>
    23da:	cb 3a       	cpi	r28, 0xAB	; 171
    23dc:	51 f1       	breq	.+84     	; 0x2432 <register_code+0xd6>
    23de:	cc 3a       	cpi	r28, 0xAC	; 172
    23e0:	59 f1       	breq	.+86     	; 0x2438 <register_code+0xdc>
    23e2:	cd 3a       	cpi	r28, 0xAD	; 173
    23e4:	61 f1       	breq	.+88     	; 0x243e <register_code+0xe2>
    23e6:	c0 3b       	cpi	r28, 0xB0	; 176
    23e8:	69 f1       	breq	.+90     	; 0x2444 <register_code+0xe8>
    23ea:	ce 3a       	cpi	r28, 0xAE	; 174
    23ec:	71 f1       	breq	.+92     	; 0x244a <register_code+0xee>
    23ee:	cf 3a       	cpi	r28, 0xAF	; 175
    23f0:	79 f1       	breq	.+94     	; 0x2450 <register_code+0xf4>
    23f2:	c1 3b       	cpi	r28, 0xB1	; 177
    23f4:	81 f1       	breq	.+96     	; 0x2456 <register_code+0xfa>
    23f6:	c2 3b       	cpi	r28, 0xB2	; 178
    23f8:	89 f1       	breq	.+98     	; 0x245c <register_code+0x100>
    23fa:	c3 3b       	cpi	r28, 0xB3	; 179
    23fc:	91 f1       	breq	.+100    	; 0x2462 <register_code+0x106>
    23fe:	c4 3b       	cpi	r28, 0xB4	; 180
    2400:	99 f1       	breq	.+102    	; 0x2468 <register_code+0x10c>
    2402:	c5 3b       	cpi	r28, 0xB5	; 181
    2404:	a1 f1       	breq	.+104    	; 0x246e <register_code+0x112>
    2406:	c6 3b       	cpi	r28, 0xB6	; 182
    2408:	a9 f1       	breq	.+106    	; 0x2474 <register_code+0x118>
    240a:	c7 3b       	cpi	r28, 0xB7	; 183
    240c:	b1 f1       	breq	.+108    	; 0x247a <register_code+0x11e>
    240e:	c8 3b       	cpi	r28, 0xB8	; 184
    2410:	b9 f1       	breq	.+110    	; 0x2480 <register_code+0x124>
    2412:	c9 3b       	cpi	r28, 0xB9	; 185
    2414:	c1 f1       	breq	.+112    	; 0x2486 <register_code+0x12a>
    2416:	ca 3b       	cpi	r28, 0xBA	; 186
    2418:	c9 f1       	breq	.+114    	; 0x248c <register_code+0x130>
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	38 c0       	rjmp	.+112    	; 0x2490 <register_code+0x134>
    2420:	82 ee       	ldi	r24, 0xE2	; 226
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	35 c0       	rjmp	.+106    	; 0x2490 <register_code+0x134>
    2426:	89 ee       	ldi	r24, 0xE9	; 233
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	32 c0       	rjmp	.+100    	; 0x2490 <register_code+0x134>
    242c:	8a ee       	ldi	r24, 0xEA	; 234
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	2f c0       	rjmp	.+94     	; 0x2490 <register_code+0x134>
    2432:	85 eb       	ldi	r24, 0xB5	; 181
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	2c c0       	rjmp	.+88     	; 0x2490 <register_code+0x134>
    2438:	86 eb       	ldi	r24, 0xB6	; 182
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	29 c0       	rjmp	.+82     	; 0x2490 <register_code+0x134>
    243e:	87 eb       	ldi	r24, 0xB7	; 183
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	26 c0       	rjmp	.+76     	; 0x2490 <register_code+0x134>
    2444:	8c ec       	ldi	r24, 0xCC	; 204
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	23 c0       	rjmp	.+70     	; 0x2490 <register_code+0x134>
    244a:	8d ec       	ldi	r24, 0xCD	; 205
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	20 c0       	rjmp	.+64     	; 0x2490 <register_code+0x134>
    2450:	83 e8       	ldi	r24, 0x83	; 131
    2452:	91 e0       	ldi	r25, 0x01	; 1
    2454:	1d c0       	rjmp	.+58     	; 0x2490 <register_code+0x134>
    2456:	8a e8       	ldi	r24, 0x8A	; 138
    2458:	91 e0       	ldi	r25, 0x01	; 1
    245a:	1a c0       	rjmp	.+52     	; 0x2490 <register_code+0x134>
    245c:	82 e9       	ldi	r24, 0x92	; 146
    245e:	91 e0       	ldi	r25, 0x01	; 1
    2460:	17 c0       	rjmp	.+46     	; 0x2490 <register_code+0x134>
    2462:	84 e9       	ldi	r24, 0x94	; 148
    2464:	91 e0       	ldi	r25, 0x01	; 1
    2466:	14 c0       	rjmp	.+40     	; 0x2490 <register_code+0x134>
    2468:	81 e2       	ldi	r24, 0x21	; 33
    246a:	92 e0       	ldi	r25, 0x02	; 2
    246c:	11 c0       	rjmp	.+34     	; 0x2490 <register_code+0x134>
    246e:	83 e2       	ldi	r24, 0x23	; 35
    2470:	92 e0       	ldi	r25, 0x02	; 2
    2472:	0e c0       	rjmp	.+28     	; 0x2490 <register_code+0x134>
    2474:	84 e2       	ldi	r24, 0x24	; 36
    2476:	92 e0       	ldi	r25, 0x02	; 2
    2478:	0b c0       	rjmp	.+22     	; 0x2490 <register_code+0x134>
    247a:	85 e2       	ldi	r24, 0x25	; 37
    247c:	92 e0       	ldi	r25, 0x02	; 2
    247e:	08 c0       	rjmp	.+16     	; 0x2490 <register_code+0x134>
    2480:	86 e2       	ldi	r24, 0x26	; 38
    2482:	92 e0       	ldi	r25, 0x02	; 2
    2484:	05 c0       	rjmp	.+10     	; 0x2490 <register_code+0x134>
    2486:	87 e2       	ldi	r24, 0x27	; 39
    2488:	92 e0       	ldi	r25, 0x02	; 2
    248a:	02 c0       	rjmp	.+4      	; 0x2490 <register_code+0x134>
    248c:	8a e2       	ldi	r24, 0x2A	; 42
    248e:	92 e0       	ldi	r25, 0x02	; 2
    }
}
    2490:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    2492:	0c 94 96 10 	jmp	0x212c	; 0x212c <host_consumer_send>
    }
}
    2496:	cf 91       	pop	r28
    2498:	08 95       	ret

0000249a <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    249a:	88 23       	and	r24, r24
    249c:	29 f1       	breq	.+74     	; 0x24e8 <unregister_code+0x4e>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    249e:	9c ef       	ldi	r25, 0xFC	; 252
    24a0:	98 0f       	add	r25, r24
    24a2:	91 3a       	cpi	r25, 0xA1	; 161
    24a4:	18 f4       	brcc	.+6      	; 0x24ac <unregister_code+0x12>
        del_key(code);
    24a6:	0e 94 45 1b 	call	0x368a	; 0x368a <del_key>
    24aa:	0d c0       	rjmp	.+26     	; 0x24c6 <unregister_code+0x2c>
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    24ac:	90 e2       	ldi	r25, 0x20	; 32
    24ae:	98 0f       	add	r25, r24
    24b0:	98 30       	cpi	r25, 0x08	; 8
    24b2:	58 f4       	brcc	.+22     	; 0x24ca <unregister_code+0x30>
        del_mods(MOD_BIT(code));
    24b4:	87 70       	andi	r24, 0x07	; 7
    24b6:	91 e0       	ldi	r25, 0x01	; 1
    24b8:	01 c0       	rjmp	.+2      	; 0x24bc <unregister_code+0x22>
    24ba:	99 0f       	add	r25, r25
    24bc:	8a 95       	dec	r24
    24be:	ea f7       	brpl	.-6      	; 0x24ba <unregister_code+0x20>
    24c0:	89 2f       	mov	r24, r25
    24c2:	0e 94 a0 1b 	call	0x3740	; 0x3740 <del_mods>
        send_keyboard_report();
    24c6:	0c 94 db 1b 	jmp	0x37b6	; 0x37b6 <send_keyboard_report>
    }
    else if IS_SYSTEM(code) {
    24ca:	9b e5       	ldi	r25, 0x5B	; 91
    24cc:	98 0f       	add	r25, r24
    24ce:	93 30       	cpi	r25, 0x03	; 3
    24d0:	20 f4       	brcc	.+8      	; 0x24da <unregister_code+0x40>
        host_system_send(0);
    24d2:	80 e0       	ldi	r24, 0x00	; 0
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	0c 94 80 10 	jmp	0x2100	; 0x2100 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    24da:	88 5a       	subi	r24, 0xA8	; 168
    24dc:	83 31       	cpi	r24, 0x13	; 19
    24de:	20 f4       	brcc	.+8      	; 0x24e8 <unregister_code+0x4e>
        host_consumer_send(0);
    24e0:	80 e0       	ldi	r24, 0x00	; 0
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	0c 94 96 10 	jmp	0x212c	; 0x212c <host_consumer_send>
    24e8:	08 95       	ret

000024ea <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    24ea:	88 23       	and	r24, r24
    24ec:	21 f0       	breq	.+8      	; 0x24f6 <register_mods+0xc>
        add_mods(mods);
    24ee:	0e 94 9a 1b 	call	0x3734	; 0x3734 <add_mods>
        send_keyboard_report();
    24f2:	0c 94 db 1b 	jmp	0x37b6	; 0x37b6 <send_keyboard_report>
    24f6:	08 95       	ret

000024f8 <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    24f8:	88 23       	and	r24, r24
    24fa:	21 f0       	breq	.+8      	; 0x2504 <unregister_mods+0xc>
        del_mods(mods);
    24fc:	0e 94 a0 1b 	call	0x3740	; 0x3740 <del_mods>
        send_keyboard_report();
    2500:	0c 94 db 1b 	jmp	0x37b6	; 0x37b6 <send_keyboard_report>
    2504:	08 95       	ret

00002506 <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    2506:	bf 92       	push	r11
    2508:	cf 92       	push	r12
    250a:	df 92       	push	r13
    250c:	ef 92       	push	r14
    250e:	ff 92       	push	r15
    2510:	0f 93       	push	r16
    2512:	1f 93       	push	r17
    2514:	cf 93       	push	r28
    2516:	df 93       	push	r29
    2518:	00 d0       	rcall	.+0      	; 0x251a <process_action+0x14>
    251a:	00 d0       	rcall	.+0      	; 0x251c <process_action+0x16>
    251c:	00 d0       	rcall	.+0      	; 0x251e <process_action+0x18>
    251e:	cd b7       	in	r28, 0x3d	; 61
    2520:	de b7       	in	r29, 0x3e	; 62
    keyevent_t event = record->event;
    2522:	25 e0       	ldi	r18, 0x05	; 5
    2524:	fc 01       	movw	r30, r24
    2526:	de 01       	movw	r26, r28
    2528:	11 96       	adiw	r26, 0x01	; 1
    252a:	01 90       	ld	r0, Z+
    252c:	0d 92       	st	X+, r0
    252e:	2a 95       	dec	r18
    2530:	e1 f7       	brne	.-8      	; 0x252a <process_action+0x24>
    2532:	fc 01       	movw	r30, r24
    2534:	40 81       	ld	r20, Z
    2536:	31 81       	ldd	r19, Z+1	; 0x01
    2538:	02 81       	ldd	r16, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    253a:	25 81       	ldd	r18, Z+5	; 0x05
    253c:	22 95       	swap	r18
    253e:	2f 70       	andi	r18, 0x0F	; 15

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2540:	63 81       	ldd	r22, Z+3	; 0x03
    2542:	74 81       	ldd	r23, Z+4	; 0x04
    2544:	67 2b       	or	r22, r23
    2546:	09 f4       	brne	.+2      	; 0x254a <process_action+0x44>
    2548:	ec c2       	rjmp	.+1496   	; 0x2b22 <process_action+0x61c>
    254a:	3f 3f       	cpi	r19, 0xFF	; 255
    254c:	19 f4       	brne	.+6      	; 0x2554 <process_action+0x4e>
#endif

    if (IS_NOEVENT(event)) { return; }
    254e:	4f 3f       	cpi	r20, 0xFF	; 255
    2550:	09 f4       	brne	.+2      	; 0x2554 <process_action+0x4e>
    2552:	e7 c2       	rjmp	.+1486   	; 0x2b22 <process_action+0x61c>
    2554:	7c 01       	movw	r14, r24

    action_t action = layer_switch_get_action(event.key);
    2556:	49 83       	std	Y+1, r20	; 0x01
    2558:	3a 83       	std	Y+2, r19	; 0x02
    255a:	89 81       	ldd	r24, Y+1	; 0x01
    255c:	9a 81       	ldd	r25, Y+2	; 0x02
    255e:	2e 83       	std	Y+6, r18	; 0x06
    2560:	0e 94 b1 1a 	call	0x3562	; 0x3562 <layer_switch_get_action>
    2564:	18 2f       	mov	r17, r24
    2566:	b9 2e       	mov	r11, r25
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    2568:	0e 94 b0 1a 	call	0x3560	; 0x3560 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    256c:	0e 94 77 19 	call	0x32ee	; 0x32ee <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    2570:	eb 2d       	mov	r30, r11
    2572:	e2 95       	swap	r30
    2574:	ef 70       	andi	r30, 0x0F	; 15
    2576:	f0 e0       	ldi	r31, 0x00	; 0
    2578:	e0 5a       	subi	r30, 0xA0	; 160
    257a:	ff 4f       	sbci	r31, 0xFF	; 255
    257c:	2e 81       	ldd	r18, Y+6	; 0x06
    257e:	0c 94 89 29 	jmp	0x5312	; 0x5312 <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    2582:	8b 2d       	mov	r24, r11
    2584:	80 7f       	andi	r24, 0xF0	; 240
    2586:	9b 2d       	mov	r25, r11
    2588:	9f 70       	andi	r25, 0x0F	; 15
    258a:	f9 2e       	mov	r15, r25
    258c:	88 23       	and	r24, r24
    258e:	19 f0       	breq	.+6      	; 0x2596 <process_action+0x90>
    2590:	f2 94       	swap	r15
    2592:	80 ef       	ldi	r24, 0xF0	; 240
    2594:	f8 22       	and	r15, r24
                                                                action.key.mods<<4;
                if (event.pressed) {
    2596:	00 23       	and	r16, r16
    2598:	49 f0       	breq	.+18     	; 0x25ac <process_action+0xa6>
                    if (mods) {
    259a:	ff 20       	and	r15, r15
    259c:	09 f4       	brne	.+2      	; 0x25a0 <process_action+0x9a>
    259e:	6e c2       	rjmp	.+1244   	; 0x2a7c <process_action+0x576>
                        add_weak_mods(mods);
    25a0:	8f 2d       	mov	r24, r15
    25a2:	0e 94 aa 1b 	call	0x3754	; 0x3754 <add_weak_mods>
                        send_keyboard_report();
    25a6:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <send_keyboard_report>
    25aa:	68 c2       	rjmp	.+1232   	; 0x2a7c <process_action+0x576>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    25ac:	81 2f       	mov	r24, r17
    25ae:	0e 94 4d 12 	call	0x249a	; 0x249a <unregister_code>
                    if (mods) {
    25b2:	ff 20       	and	r15, r15
    25b4:	09 f4       	brne	.+2      	; 0x25b8 <process_action+0xb2>
    25b6:	b5 c2       	rjmp	.+1386   	; 0x2b22 <process_action+0x61c>
                        del_weak_mods(mods);
    25b8:	8f 2d       	mov	r24, r15
    25ba:	0e 94 b0 1b 	call	0x3760	; 0x3760 <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    25be:	26 96       	adiw	r28, 0x06	; 6
    25c0:	0f b6       	in	r0, 0x3f	; 63
    25c2:	f8 94       	cli
    25c4:	de bf       	out	0x3e, r29	; 62
    25c6:	0f be       	out	0x3f, r0	; 63
    25c8:	cd bf       	out	0x3d, r28	; 61
    25ca:	df 91       	pop	r29
    25cc:	cf 91       	pop	r28
    25ce:	1f 91       	pop	r17
    25d0:	0f 91       	pop	r16
    25d2:	ff 90       	pop	r15
    25d4:	ef 90       	pop	r14
    25d6:	df 90       	pop	r13
    25d8:	cf 90       	pop	r12
    25da:	bf 90       	pop	r11
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    25dc:	0c 94 db 1b 	jmp	0x37b6	; 0x37b6 <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    25e0:	8b 2d       	mov	r24, r11
    25e2:	80 7f       	andi	r24, 0xF0	; 240
    25e4:	9b 2d       	mov	r25, r11
    25e6:	9f 70       	andi	r25, 0x0F	; 15
    25e8:	80 32       	cpi	r24, 0x20	; 32
    25ea:	11 f4       	brne	.+4      	; 0x25f0 <process_action+0xea>
    25ec:	89 2f       	mov	r24, r25
    25ee:	03 c0       	rjmp	.+6      	; 0x25f6 <process_action+0xf0>
    25f0:	89 2f       	mov	r24, r25
    25f2:	82 95       	swap	r24
    25f4:	80 7f       	andi	r24, 0xF0	; 240
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    25f6:	11 23       	and	r17, r17
    25f8:	19 f0       	breq	.+6      	; 0x2600 <process_action+0xfa>
    25fa:	11 30       	cpi	r17, 0x01	; 1
    25fc:	11 f1       	breq	.+68     	; 0x2642 <process_action+0x13c>
    25fe:	2b c0       	rjmp	.+86     	; 0x2656 <process_action+0x150>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    2600:	00 23       	and	r16, r16
    2602:	a9 f0       	breq	.+42     	; 0x262e <process_action+0x128>
                            if (tap_count == 0) {
    2604:	22 23       	and	r18, r18
    2606:	89 f1       	breq	.+98     	; 0x266a <process_action+0x164>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    2608:	21 30       	cpi	r18, 0x01	; 1
    260a:	79 f5       	brne	.+94     	; 0x266a <process_action+0x164>
            break;
#endif
        default:
            break;
    }
}
    260c:	26 96       	adiw	r28, 0x06	; 6
    260e:	0f b6       	in	r0, 0x3f	; 63
    2610:	f8 94       	cli
    2612:	de bf       	out	0x3e, r29	; 62
    2614:	0f be       	out	0x3f, r0	; 63
    2616:	cd bf       	out	0x3d, r28	; 61
    2618:	df 91       	pop	r29
    261a:	cf 91       	pop	r28
    261c:	1f 91       	pop	r17
    261e:	0f 91       	pop	r16
    2620:	ff 90       	pop	r15
    2622:	ef 90       	pop	r14
    2624:	df 90       	pop	r13
    2626:	cf 90       	pop	r12
    2628:	bf 90       	pop	r11
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    262a:	0c 94 ba 1b 	jmp	0x3774	; 0x3774 <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    262e:	22 23       	and	r18, r18
    2630:	19 f0       	breq	.+6      	; 0x2638 <process_action+0x132>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    2632:	21 30       	cpi	r18, 0x01	; 1
    2634:	09 f4       	brne	.+2      	; 0x2638 <process_action+0x132>
    2636:	75 c2       	rjmp	.+1258   	; 0x2b22 <process_action+0x61c>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    2638:	8e 83       	std	Y+6, r24	; 0x06
    263a:	0e 94 c3 1b 	call	0x3786	; 0x3786 <clear_oneshot_mods>
                                unregister_mods(mods);
    263e:	8e 81       	ldd	r24, Y+6	; 0x06
    2640:	9b c1       	rjmp	.+822    	; 0x2978 <process_action+0x472>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    2642:	00 23       	and	r16, r16
    2644:	21 f0       	breq	.+8      	; 0x264e <process_action+0x148>
                            if (tap_count <= TAPPING_TOGGLE) {
    2646:	26 30       	cpi	r18, 0x06	; 6
    2648:	08 f0       	brcs	.+2      	; 0x264c <process_action+0x146>
    264a:	6b c2       	rjmp	.+1238   	; 0x2b22 <process_action+0x61c>
    264c:	0e c0       	rjmp	.+28     	; 0x266a <process_action+0x164>
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    264e:	25 30       	cpi	r18, 0x05	; 5
    2650:	08 f0       	brcs	.+2      	; 0x2654 <process_action+0x14e>
    2652:	67 c2       	rjmp	.+1230   	; 0x2b22 <process_action+0x61c>
    2654:	91 c1       	rjmp	.+802    	; 0x2978 <process_action+0x472>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    2656:	00 23       	and	r16, r16
    2658:	c9 f0       	breq	.+50     	; 0x268c <process_action+0x186>
                            if (tap_count > 0) {
    265a:	22 23       	and	r18, r18
    265c:	31 f0       	breq	.+12     	; 0x266a <process_action+0x164>
                                if (record->tap.interrupted) {
    265e:	f7 01       	movw	r30, r14
    2660:	95 81       	ldd	r25, Z+5	; 0x05
    2662:	90 ff       	sbrs	r25, 0
    2664:	0b c2       	rjmp	.+1046   	; 0x2a7c <process_action+0x576>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    2666:	9f 70       	andi	r25, 0x0F	; 15
    2668:	95 83       	std	Z+5, r25	; 0x05
            break;
#endif
        default:
            break;
    }
}
    266a:	26 96       	adiw	r28, 0x06	; 6
    266c:	0f b6       	in	r0, 0x3f	; 63
    266e:	f8 94       	cli
    2670:	de bf       	out	0x3e, r29	; 62
    2672:	0f be       	out	0x3f, r0	; 63
    2674:	cd bf       	out	0x3d, r28	; 61
    2676:	df 91       	pop	r29
    2678:	cf 91       	pop	r28
    267a:	1f 91       	pop	r17
    267c:	0f 91       	pop	r16
    267e:	ff 90       	pop	r15
    2680:	ef 90       	pop	r14
    2682:	df 90       	pop	r13
    2684:	cf 90       	pop	r12
    2686:	bf 90       	pop	r11
                            if (tap_count > 0) {
                                if (record->tap.interrupted) {
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
                                    register_mods(mods);
    2688:	0c 94 75 12 	jmp	0x24ea	; 0x24ea <register_mods>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    268c:	22 23       	and	r18, r18
    268e:	09 f4       	brne	.+2      	; 0x2692 <process_action+0x18c>
    2690:	73 c1       	rjmp	.+742    	; 0x2978 <process_action+0x472>
    2692:	09 c2       	rjmp	.+1042   	; 0x2aa6 <process_action+0x5a0>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    2694:	2b 2d       	mov	r18, r11
    2696:	26 95       	lsr	r18
    2698:	26 95       	lsr	r18
    269a:	23 70       	andi	r18, 0x03	; 3
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	21 15       	cp	r18, r1
    26a0:	31 05       	cpc	r19, r1
    26a2:	21 f0       	breq	.+8      	; 0x26ac <process_action+0x1a6>
    26a4:	21 30       	cpi	r18, 0x01	; 1
    26a6:	31 05       	cpc	r19, r1
    26a8:	d1 f0       	breq	.+52     	; 0x26de <process_action+0x1d8>
    26aa:	3b c2       	rjmp	.+1142   	; 0x2b22 <process_action+0x61c>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    26ac:	00 23       	and	r16, r16
    26ae:	21 f0       	breq	.+8      	; 0x26b8 <process_action+0x1b2>
                        host_system_send(action.usage.code);
    26b0:	81 2f       	mov	r24, r17
    26b2:	9b 2d       	mov	r25, r11
    26b4:	93 70       	andi	r25, 0x03	; 3
    26b6:	02 c0       	rjmp	.+4      	; 0x26bc <process_action+0x1b6>
                    } else {
                        host_system_send(0);
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    26bc:	26 96       	adiw	r28, 0x06	; 6
    26be:	0f b6       	in	r0, 0x3f	; 63
    26c0:	f8 94       	cli
    26c2:	de bf       	out	0x3e, r29	; 62
    26c4:	0f be       	out	0x3f, r0	; 63
    26c6:	cd bf       	out	0x3d, r28	; 61
    26c8:	df 91       	pop	r29
    26ca:	cf 91       	pop	r28
    26cc:	1f 91       	pop	r17
    26ce:	0f 91       	pop	r16
    26d0:	ff 90       	pop	r15
    26d2:	ef 90       	pop	r14
    26d4:	df 90       	pop	r13
    26d6:	cf 90       	pop	r12
    26d8:	bf 90       	pop	r11
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    26da:	0c 94 80 10 	jmp	0x2100	; 0x2100 <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    26de:	00 23       	and	r16, r16
    26e0:	21 f0       	breq	.+8      	; 0x26ea <process_action+0x1e4>
                        host_consumer_send(action.usage.code);
    26e2:	81 2f       	mov	r24, r17
    26e4:	9b 2d       	mov	r25, r11
    26e6:	93 70       	andi	r25, 0x03	; 3
    26e8:	02 c0       	rjmp	.+4      	; 0x26ee <process_action+0x1e8>
                    } else {
                        host_consumer_send(0);
    26ea:	80 e0       	ldi	r24, 0x00	; 0
    26ec:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    26ee:	26 96       	adiw	r28, 0x06	; 6
    26f0:	0f b6       	in	r0, 0x3f	; 63
    26f2:	f8 94       	cli
    26f4:	de bf       	out	0x3e, r29	; 62
    26f6:	0f be       	out	0x3f, r0	; 63
    26f8:	cd bf       	out	0x3d, r28	; 61
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	1f 91       	pop	r17
    2700:	0f 91       	pop	r16
    2702:	ff 90       	pop	r15
    2704:	ef 90       	pop	r14
    2706:	df 90       	pop	r13
    2708:	cf 90       	pop	r12
    270a:	bf 90       	pop	r11
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    270c:	0c 94 96 10 	jmp	0x212c	; 0x212c <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    2710:	81 2f       	mov	r24, r17
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    2712:	00 23       	and	r16, r16
    2714:	19 f0       	breq	.+6      	; 0x271c <process_action+0x216>
                mousekey_on(action.key.code);
    2716:	0e 94 e3 20 	call	0x41c6	; 0x41c6 <mousekey_on>
    271a:	02 c0       	rjmp	.+4      	; 0x2720 <process_action+0x21a>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    271c:	0e 94 4b 21 	call	0x4296	; 0x4296 <mousekey_off>
            break;
#endif
        default:
            break;
    }
}
    2720:	26 96       	adiw	r28, 0x06	; 6
    2722:	0f b6       	in	r0, 0x3f	; 63
    2724:	f8 94       	cli
    2726:	de bf       	out	0x3e, r29	; 62
    2728:	0f be       	out	0x3f, r0	; 63
    272a:	cd bf       	out	0x3d, r28	; 61
    272c:	df 91       	pop	r29
    272e:	cf 91       	pop	r28
    2730:	1f 91       	pop	r17
    2732:	0f 91       	pop	r16
    2734:	ff 90       	pop	r15
    2736:	ef 90       	pop	r14
    2738:	df 90       	pop	r13
    273a:	cf 90       	pop	r12
    273c:	bf 90       	pop	r11
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
                mousekey_send();
    273e:	0c 94 d0 21 	jmp	0x43a0	; 0x43a0 <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    2742:	8b 2d       	mov	r24, r11
    2744:	83 70       	andi	r24, 0x03	; 3
    2746:	09 f0       	breq	.+2      	; 0x274a <process_action+0x244>
    2748:	7b c0       	rjmp	.+246    	; 0x2840 <process_action+0x33a>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    274a:	01 11       	cpse	r16, r1
    274c:	ea c1       	rjmp	.+980    	; 0x2b22 <process_action+0x61c>
                    uint8_t shift = action.layer_bitop.part*4;
    274e:	81 2f       	mov	r24, r17
    2750:	82 95       	swap	r24
    2752:	86 95       	lsr	r24
    2754:	87 70       	andi	r24, 0x07	; 7
    2756:	88 0f       	add	r24, r24
    2758:	88 0f       	add	r24, r24
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    275a:	91 2f       	mov	r25, r17
    275c:	9f 70       	andi	r25, 0x0F	; 15
    275e:	c9 2e       	mov	r12, r25
    2760:	d1 2c       	mov	r13, r1
    2762:	e1 2c       	mov	r14, r1
    2764:	f1 2c       	mov	r15, r1
    2766:	08 2e       	mov	r0, r24
    2768:	04 c0       	rjmp	.+8      	; 0x2772 <process_action+0x26c>
    276a:	cc 0c       	add	r12, r12
    276c:	dd 1c       	adc	r13, r13
    276e:	ee 1c       	adc	r14, r14
    2770:	ff 1c       	adc	r15, r15
    2772:	0a 94       	dec	r0
    2774:	d2 f7       	brpl	.-12     	; 0x276a <process_action+0x264>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2776:	14 ff       	sbrs	r17, 4
    2778:	12 c0       	rjmp	.+36     	; 0x279e <process_action+0x298>
    277a:	4f e0       	ldi	r20, 0x0F	; 15
    277c:	50 e0       	ldi	r21, 0x00	; 0
    277e:	60 e0       	ldi	r22, 0x00	; 0
    2780:	70 e0       	ldi	r23, 0x00	; 0
    2782:	04 c0       	rjmp	.+8      	; 0x278c <process_action+0x286>
    2784:	44 0f       	add	r20, r20
    2786:	55 1f       	adc	r21, r21
    2788:	66 1f       	adc	r22, r22
    278a:	77 1f       	adc	r23, r23
    278c:	8a 95       	dec	r24
    278e:	d2 f7       	brpl	.-12     	; 0x2784 <process_action+0x27e>
    2790:	cb 01       	movw	r24, r22
    2792:	ba 01       	movw	r22, r20
    2794:	60 95       	com	r22
    2796:	70 95       	com	r23
    2798:	80 95       	com	r24
    279a:	90 95       	com	r25
    279c:	03 c0       	rjmp	.+6      	; 0x27a4 <process_action+0x29e>
    279e:	60 e0       	ldi	r22, 0x00	; 0
    27a0:	70 e0       	ldi	r23, 0x00	; 0
    27a2:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    27a4:	2b 2d       	mov	r18, r11
    27a6:	26 95       	lsr	r18
    27a8:	26 95       	lsr	r18
    27aa:	23 70       	andi	r18, 0x03	; 3
    27ac:	42 2f       	mov	r20, r18
    27ae:	50 e0       	ldi	r21, 0x00	; 0
    27b0:	42 30       	cpi	r20, 0x02	; 2
    27b2:	51 05       	cpc	r21, r1
    27b4:	d9 f0       	breq	.+54     	; 0x27ec <process_action+0x2e6>
    27b6:	43 30       	cpi	r20, 0x03	; 3
    27b8:	51 05       	cpc	r21, r1
    27ba:	69 f1       	breq	.+90     	; 0x2816 <process_action+0x310>
    27bc:	6c 29       	or	r22, r12
    27be:	7d 29       	or	r23, r13
    27c0:	8e 29       	or	r24, r14
    27c2:	9f 29       	or	r25, r15
    27c4:	41 30       	cpi	r20, 0x01	; 1
    27c6:	51 05       	cpc	r21, r1
    27c8:	51 f1       	breq	.+84     	; 0x281e <process_action+0x318>
            break;
#endif
        default:
            break;
    }
}
    27ca:	26 96       	adiw	r28, 0x06	; 6
    27cc:	0f b6       	in	r0, 0x3f	; 63
    27ce:	f8 94       	cli
    27d0:	de bf       	out	0x3e, r29	; 62
    27d2:	0f be       	out	0x3f, r0	; 63
    27d4:	cd bf       	out	0x3d, r28	; 61
    27d6:	df 91       	pop	r29
    27d8:	cf 91       	pop	r28
    27da:	1f 91       	pop	r17
    27dc:	0f 91       	pop	r16
    27de:	ff 90       	pop	r15
    27e0:	ef 90       	pop	r14
    27e2:	df 90       	pop	r13
    27e4:	cf 90       	pop	r12
    27e6:	bf 90       	pop	r11
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    27e8:	0c 94 9e 19 	jmp	0x333c	; 0x333c <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    27ec:	6c 29       	or	r22, r12
    27ee:	7d 29       	or	r23, r13
    27f0:	8e 29       	or	r24, r14
    27f2:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    27f4:	26 96       	adiw	r28, 0x06	; 6
    27f6:	0f b6       	in	r0, 0x3f	; 63
    27f8:	f8 94       	cli
    27fa:	de bf       	out	0x3e, r29	; 62
    27fc:	0f be       	out	0x3f, r0	; 63
    27fe:	cd bf       	out	0x3d, r28	; 61
    2800:	df 91       	pop	r29
    2802:	cf 91       	pop	r28
    2804:	1f 91       	pop	r17
    2806:	0f 91       	pop	r16
    2808:	ff 90       	pop	r15
    280a:	ef 90       	pop	r14
    280c:	df 90       	pop	r13
    280e:	cf 90       	pop	r12
    2810:	bf 90       	pop	r11
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2812:	0c 94 ba 19 	jmp	0x3374	; 0x3374 <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2816:	0e 94 9e 19 	call	0x333c	; 0x333c <default_layer_and>
    281a:	c7 01       	movw	r24, r14
    281c:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    281e:	26 96       	adiw	r28, 0x06	; 6
    2820:	0f b6       	in	r0, 0x3f	; 63
    2822:	f8 94       	cli
    2824:	de bf       	out	0x3e, r29	; 62
    2826:	0f be       	out	0x3f, r0	; 63
    2828:	cd bf       	out	0x3d, r28	; 61
    282a:	df 91       	pop	r29
    282c:	cf 91       	pop	r28
    282e:	1f 91       	pop	r17
    2830:	0f 91       	pop	r16
    2832:	ff 90       	pop	r15
    2834:	ef 90       	pop	r14
    2836:	df 90       	pop	r13
    2838:	cf 90       	pop	r12
    283a:	bf 90       	pop	r11
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    283c:	0c 94 82 19 	jmp	0x3304	; 0x3304 <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2840:	00 23       	and	r16, r16
    2842:	19 f0       	breq	.+6      	; 0x284a <process_action+0x344>
    2844:	8b 2d       	mov	r24, r11
    2846:	81 70       	andi	r24, 0x01	; 1
    2848:	01 c0       	rjmp	.+2      	; 0x284c <process_action+0x346>
    284a:	86 95       	lsr	r24
    284c:	88 23       	and	r24, r24
    284e:	09 f4       	brne	.+2      	; 0x2852 <process_action+0x34c>
    2850:	68 c1       	rjmp	.+720    	; 0x2b22 <process_action+0x61c>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    2852:	81 2f       	mov	r24, r17
    2854:	82 95       	swap	r24
    2856:	86 95       	lsr	r24
    2858:	87 70       	andi	r24, 0x07	; 7
    285a:	88 0f       	add	r24, r24
    285c:	88 0f       	add	r24, r24
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    285e:	91 2f       	mov	r25, r17
    2860:	9f 70       	andi	r25, 0x0F	; 15
    2862:	c9 2e       	mov	r12, r25
    2864:	d1 2c       	mov	r13, r1
    2866:	e1 2c       	mov	r14, r1
    2868:	f1 2c       	mov	r15, r1
    286a:	08 2e       	mov	r0, r24
    286c:	04 c0       	rjmp	.+8      	; 0x2876 <process_action+0x370>
    286e:	cc 0c       	add	r12, r12
    2870:	dd 1c       	adc	r13, r13
    2872:	ee 1c       	adc	r14, r14
    2874:	ff 1c       	adc	r15, r15
    2876:	0a 94       	dec	r0
    2878:	d2 f7       	brpl	.-12     	; 0x286e <process_action+0x368>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    287a:	14 ff       	sbrs	r17, 4
    287c:	12 c0       	rjmp	.+36     	; 0x28a2 <process_action+0x39c>
    287e:	4f e0       	ldi	r20, 0x0F	; 15
    2880:	50 e0       	ldi	r21, 0x00	; 0
    2882:	60 e0       	ldi	r22, 0x00	; 0
    2884:	70 e0       	ldi	r23, 0x00	; 0
    2886:	04 c0       	rjmp	.+8      	; 0x2890 <process_action+0x38a>
    2888:	44 0f       	add	r20, r20
    288a:	55 1f       	adc	r21, r21
    288c:	66 1f       	adc	r22, r22
    288e:	77 1f       	adc	r23, r23
    2890:	8a 95       	dec	r24
    2892:	d2 f7       	brpl	.-12     	; 0x2888 <process_action+0x382>
    2894:	cb 01       	movw	r24, r22
    2896:	ba 01       	movw	r22, r20
    2898:	60 95       	com	r22
    289a:	70 95       	com	r23
    289c:	80 95       	com	r24
    289e:	90 95       	com	r25
    28a0:	03 c0       	rjmp	.+6      	; 0x28a8 <process_action+0x3a2>
    28a2:	60 e0       	ldi	r22, 0x00	; 0
    28a4:	70 e0       	ldi	r23, 0x00	; 0
    28a6:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    28a8:	2b 2d       	mov	r18, r11
    28aa:	26 95       	lsr	r18
    28ac:	26 95       	lsr	r18
    28ae:	23 70       	andi	r18, 0x03	; 3
    28b0:	42 2f       	mov	r20, r18
    28b2:	50 e0       	ldi	r21, 0x00	; 0
    28b4:	42 30       	cpi	r20, 0x02	; 2
    28b6:	51 05       	cpc	r21, r1
    28b8:	d9 f0       	breq	.+54     	; 0x28f0 <process_action+0x3ea>
    28ba:	43 30       	cpi	r20, 0x03	; 3
    28bc:	51 05       	cpc	r21, r1
    28be:	69 f1       	breq	.+90     	; 0x291a <process_action+0x414>
    28c0:	6c 29       	or	r22, r12
    28c2:	7d 29       	or	r23, r13
    28c4:	8e 29       	or	r24, r14
    28c6:	9f 29       	or	r25, r15
    28c8:	41 30       	cpi	r20, 0x01	; 1
    28ca:	51 05       	cpc	r21, r1
    28cc:	51 f1       	breq	.+84     	; 0x2922 <process_action+0x41c>
            break;
#endif
        default:
            break;
    }
}
    28ce:	26 96       	adiw	r28, 0x06	; 6
    28d0:	0f b6       	in	r0, 0x3f	; 63
    28d2:	f8 94       	cli
    28d4:	de bf       	out	0x3e, r29	; 62
    28d6:	0f be       	out	0x3f, r0	; 63
    28d8:	cd bf       	out	0x3d, r28	; 61
    28da:	df 91       	pop	r29
    28dc:	cf 91       	pop	r28
    28de:	1f 91       	pop	r17
    28e0:	0f 91       	pop	r16
    28e2:	ff 90       	pop	r15
    28e4:	ef 90       	pop	r14
    28e6:	df 90       	pop	r13
    28e8:	cf 90       	pop	r12
    28ea:	bf 90       	pop	r11
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    28ec:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    28f0:	6c 29       	or	r22, r12
    28f2:	7d 29       	or	r23, r13
    28f4:	8e 29       	or	r24, r14
    28f6:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    28f8:	26 96       	adiw	r28, 0x06	; 6
    28fa:	0f b6       	in	r0, 0x3f	; 63
    28fc:	f8 94       	cli
    28fe:	de bf       	out	0x3e, r29	; 62
    2900:	0f be       	out	0x3f, r0	; 63
    2902:	cd bf       	out	0x3d, r28	; 61
    2904:	df 91       	pop	r29
    2906:	cf 91       	pop	r28
    2908:	1f 91       	pop	r17
    290a:	0f 91       	pop	r16
    290c:	ff 90       	pop	r15
    290e:	ef 90       	pop	r14
    2910:	df 90       	pop	r13
    2912:	cf 90       	pop	r12
    2914:	bf 90       	pop	r11
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2916:	0c 94 94 1a 	jmp	0x3528	; 0x3528 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    291a:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <layer_and>
    291e:	c7 01       	movw	r24, r14
    2920:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2922:	26 96       	adiw	r28, 0x06	; 6
    2924:	0f b6       	in	r0, 0x3f	; 63
    2926:	f8 94       	cli
    2928:	de bf       	out	0x3e, r29	; 62
    292a:	0f be       	out	0x3f, r0	; 63
    292c:	cd bf       	out	0x3d, r28	; 61
    292e:	df 91       	pop	r29
    2930:	cf 91       	pop	r28
    2932:	1f 91       	pop	r17
    2934:	0f 91       	pop	r16
    2936:	ff 90       	pop	r15
    2938:	ef 90       	pop	r14
    293a:	df 90       	pop	r13
    293c:	cf 90       	pop	r12
    293e:	bf 90       	pop	r11
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2940:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2944:	10 3f       	cpi	r17, 0xF0	; 240
    2946:	49 f1       	breq	.+82     	; 0x299a <process_action+0x494>
    2948:	18 f4       	brcc	.+6      	; 0x2950 <process_action+0x44a>
    294a:	10 3e       	cpi	r17, 0xE0	; 224
    294c:	48 f4       	brcc	.+18     	; 0x2960 <process_action+0x45a>
    294e:	91 c0       	rjmp	.+290    	; 0x2a72 <process_action+0x56c>
    2950:	12 3f       	cpi	r17, 0xF2	; 242
    2952:	09 f4       	brne	.+2      	; 0x2956 <process_action+0x450>
    2954:	53 c0       	rjmp	.+166    	; 0x29fc <process_action+0x4f6>
    2956:	e8 f1       	brcs	.+122    	; 0x29d2 <process_action+0x4cc>
    2958:	13 3f       	cpi	r17, 0xF3	; 243
    295a:	09 f4       	brne	.+2      	; 0x295e <process_action+0x458>
    295c:	64 c0       	rjmp	.+200    	; 0x2a26 <process_action+0x520>
    295e:	89 c0       	rjmp	.+274    	; 0x2a72 <process_action+0x56c>
    2960:	1f 70       	andi	r17, 0x0F	; 15
    2962:	8b 2d       	mov	r24, r11
    2964:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    2966:	00 23       	and	r16, r16
    2968:	21 f0       	breq	.+8      	; 0x2972 <process_action+0x46c>
                        layer_on(action.layer_tap.val);
    296a:	0e 94 f5 19 	call	0x33ea	; 0x33ea <layer_on>
                        register_mods(action.layer_tap.code & 0x0f);
    296e:	81 2f       	mov	r24, r17
    2970:	7c ce       	rjmp	.-776    	; 0x266a <process_action+0x164>
                    } else {
                        layer_off(action.layer_tap.val);
    2972:	0e 94 16 1a 	call	0x342c	; 0x342c <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    2976:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2978:	26 96       	adiw	r28, 0x06	; 6
    297a:	0f b6       	in	r0, 0x3f	; 63
    297c:	f8 94       	cli
    297e:	de bf       	out	0x3e, r29	; 62
    2980:	0f be       	out	0x3f, r0	; 63
    2982:	cd bf       	out	0x3d, r28	; 61
    2984:	df 91       	pop	r29
    2986:	cf 91       	pop	r28
    2988:	1f 91       	pop	r17
    298a:	0f 91       	pop	r16
    298c:	ff 90       	pop	r15
    298e:	ef 90       	pop	r14
    2990:	df 90       	pop	r13
    2992:	cf 90       	pop	r12
    2994:	bf 90       	pop	r11
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods(action.layer_tap.code & 0x0f);
    2996:	0c 94 7c 12 	jmp	0x24f8	; 0x24f8 <unregister_mods>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    299a:	00 23       	and	r16, r16
    299c:	b1 f0       	breq	.+44     	; 0x29ca <process_action+0x4c4>
                        if (tap_count < TAPPING_TOGGLE) {
    299e:	25 30       	cpi	r18, 0x05	; 5
    29a0:	08 f0       	brcs	.+2      	; 0x29a4 <process_action+0x49e>
    29a2:	bf c0       	rjmp	.+382    	; 0x2b22 <process_action+0x61c>
                            layer_invert(action.layer_tap.val);
    29a4:	8b 2d       	mov	r24, r11
    29a6:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    29a8:	26 96       	adiw	r28, 0x06	; 6
    29aa:	0f b6       	in	r0, 0x3f	; 63
    29ac:	f8 94       	cli
    29ae:	de bf       	out	0x3e, r29	; 62
    29b0:	0f be       	out	0x3f, r0	; 63
    29b2:	cd bf       	out	0x3d, r28	; 61
    29b4:	df 91       	pop	r29
    29b6:	cf 91       	pop	r28
    29b8:	1f 91       	pop	r17
    29ba:	0f 91       	pop	r16
    29bc:	ff 90       	pop	r15
    29be:	ef 90       	pop	r14
    29c0:	df 90       	pop	r13
    29c2:	cf 90       	pop	r12
    29c4:	bf 90       	pop	r11
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    29c6:	0c 94 3b 1a 	jmp	0x3476	; 0x3476 <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    29ca:	26 30       	cpi	r18, 0x06	; 6
    29cc:	08 f0       	brcs	.+2      	; 0x29d0 <process_action+0x4ca>
    29ce:	a9 c0       	rjmp	.+338    	; 0x2b22 <process_action+0x61c>
    29d0:	e9 cf       	rjmp	.-46     	; 0x29a4 <process_action+0x49e>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    29d2:	00 23       	and	r16, r16
    29d4:	a9 f0       	breq	.+42     	; 0x2a00 <process_action+0x4fa>
    29d6:	8b 2d       	mov	r24, r11
    29d8:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    29da:	26 96       	adiw	r28, 0x06	; 6
    29dc:	0f b6       	in	r0, 0x3f	; 63
    29de:	f8 94       	cli
    29e0:	de bf       	out	0x3e, r29	; 62
    29e2:	0f be       	out	0x3f, r0	; 63
    29e4:	cd bf       	out	0x3d, r28	; 61
    29e6:	df 91       	pop	r29
    29e8:	cf 91       	pop	r28
    29ea:	1f 91       	pop	r17
    29ec:	0f 91       	pop	r16
    29ee:	ff 90       	pop	r15
    29f0:	ef 90       	pop	r14
    29f2:	df 90       	pop	r13
    29f4:	cf 90       	pop	r12
    29f6:	bf 90       	pop	r11
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    29f8:	0c 94 f5 19 	jmp	0x33ea	; 0x33ea <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    29fc:	00 23       	and	r16, r16
    29fe:	59 f3       	breq	.-42     	; 0x29d6 <process_action+0x4d0>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2a00:	8b 2d       	mov	r24, r11
    2a02:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2a04:	26 96       	adiw	r28, 0x06	; 6
    2a06:	0f b6       	in	r0, 0x3f	; 63
    2a08:	f8 94       	cli
    2a0a:	de bf       	out	0x3e, r29	; 62
    2a0c:	0f be       	out	0x3f, r0	; 63
    2a0e:	cd bf       	out	0x3d, r28	; 61
    2a10:	df 91       	pop	r29
    2a12:	cf 91       	pop	r28
    2a14:	1f 91       	pop	r17
    2a16:	0f 91       	pop	r16
    2a18:	ff 90       	pop	r15
    2a1a:	ef 90       	pop	r14
    2a1c:	df 90       	pop	r13
    2a1e:	cf 90       	pop	r12
    2a20:	bf 90       	pop	r11
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2a22:	0c 94 16 1a 	jmp	0x342c	; 0x342c <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2a26:	00 23       	and	r16, r16
    2a28:	99 f0       	breq	.+38     	; 0x2a50 <process_action+0x54a>
    2a2a:	8b 2d       	mov	r24, r11
    2a2c:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2a2e:	26 96       	adiw	r28, 0x06	; 6
    2a30:	0f b6       	in	r0, 0x3f	; 63
    2a32:	f8 94       	cli
    2a34:	de bf       	out	0x3e, r29	; 62
    2a36:	0f be       	out	0x3f, r0	; 63
    2a38:	cd bf       	out	0x3d, r28	; 61
    2a3a:	df 91       	pop	r29
    2a3c:	cf 91       	pop	r28
    2a3e:	1f 91       	pop	r17
    2a40:	0f 91       	pop	r16
    2a42:	ff 90       	pop	r15
    2a44:	ef 90       	pop	r14
    2a46:	df 90       	pop	r13
    2a48:	cf 90       	pop	r12
    2a4a:	bf 90       	pop	r11
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2a4c:	0c 94 e0 19 	jmp	0x33c0	; 0x33c0 <layer_move>
            break;
#endif
        default:
            break;
    }
}
    2a50:	26 96       	adiw	r28, 0x06	; 6
    2a52:	0f b6       	in	r0, 0x3f	; 63
    2a54:	f8 94       	cli
    2a56:	de bf       	out	0x3e, r29	; 62
    2a58:	0f be       	out	0x3f, r0	; 63
    2a5a:	cd bf       	out	0x3d, r28	; 61
    2a5c:	df 91       	pop	r29
    2a5e:	cf 91       	pop	r28
    2a60:	1f 91       	pop	r17
    2a62:	0f 91       	pop	r16
    2a64:	ff 90       	pop	r15
    2a66:	ef 90       	pop	r14
    2a68:	df 90       	pop	r13
    2a6a:	cf 90       	pop	r12
    2a6c:	bf 90       	pop	r11
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    2a6e:	0c 94 d6 19 	jmp	0x33ac	; 0x33ac <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    2a72:	00 23       	and	r16, r16
    2a74:	a9 f0       	breq	.+42     	; 0x2aa0 <process_action+0x59a>
                        if (tap_count > 0) {
    2a76:	22 23       	and	r18, r18
    2a78:	09 f4       	brne	.+2      	; 0x2a7c <process_action+0x576>
    2a7a:	ad cf       	rjmp	.-166    	; 0x29d6 <process_action+0x4d0>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2a7c:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2a7e:	26 96       	adiw	r28, 0x06	; 6
    2a80:	0f b6       	in	r0, 0x3f	; 63
    2a82:	f8 94       	cli
    2a84:	de bf       	out	0x3e, r29	; 62
    2a86:	0f be       	out	0x3f, r0	; 63
    2a88:	cd bf       	out	0x3d, r28	; 61
    2a8a:	df 91       	pop	r29
    2a8c:	cf 91       	pop	r28
    2a8e:	1f 91       	pop	r17
    2a90:	0f 91       	pop	r16
    2a92:	ff 90       	pop	r15
    2a94:	ef 90       	pop	r14
    2a96:	df 90       	pop	r13
    2a98:	cf 90       	pop	r12
    2a9a:	bf 90       	pop	r11
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2a9c:	0c 94 ae 11 	jmp	0x235c	; 0x235c <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    2aa0:	22 23       	and	r18, r18
    2aa2:	09 f4       	brne	.+2      	; 0x2aa6 <process_action+0x5a0>
    2aa4:	ad cf       	rjmp	.-166    	; 0x2a00 <process_action+0x4fa>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2aa6:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2aa8:	26 96       	adiw	r28, 0x06	; 6
    2aaa:	0f b6       	in	r0, 0x3f	; 63
    2aac:	f8 94       	cli
    2aae:	de bf       	out	0x3e, r29	; 62
    2ab0:	0f be       	out	0x3f, r0	; 63
    2ab2:	cd bf       	out	0x3d, r28	; 61
    2ab4:	df 91       	pop	r29
    2ab6:	cf 91       	pop	r28
    2ab8:	1f 91       	pop	r17
    2aba:	0f 91       	pop	r16
    2abc:	ff 90       	pop	r15
    2abe:	ef 90       	pop	r14
    2ac0:	df 90       	pop	r13
    2ac2:	cf 90       	pop	r12
    2ac4:	bf 90       	pop	r11
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2ac6:	0c 94 4d 12 	jmp	0x249a	; 0x249a <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2aca:	4b 2d       	mov	r20, r11
    2acc:	4f 70       	andi	r20, 0x0F	; 15
    2ace:	61 2f       	mov	r22, r17
    2ad0:	c7 01       	movw	r24, r14
    2ad2:	0e 94 30 07 	call	0xe60	; 0xe60 <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    2ad6:	26 96       	adiw	r28, 0x06	; 6
    2ad8:	0f b6       	in	r0, 0x3f	; 63
    2ada:	f8 94       	cli
    2adc:	de bf       	out	0x3e, r29	; 62
    2ade:	0f be       	out	0x3f, r0	; 63
    2ae0:	cd bf       	out	0x3d, r28	; 61
    2ae2:	df 91       	pop	r29
    2ae4:	cf 91       	pop	r28
    2ae6:	1f 91       	pop	r17
    2ae8:	0f 91       	pop	r16
    2aea:	ff 90       	pop	r15
    2aec:	ef 90       	pop	r14
    2aee:	df 90       	pop	r13
    2af0:	cf 90       	pop	r12
    2af2:	bf 90       	pop	r11
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2af4:	0c 94 fa 18 	jmp	0x31f4	; 0x31f4 <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2af8:	4b 2d       	mov	r20, r11
    2afa:	4f 70       	andi	r20, 0x0F	; 15
    2afc:	61 2f       	mov	r22, r17
    2afe:	c7 01       	movw	r24, r14
            break;
#endif
        default:
            break;
    }
}
    2b00:	26 96       	adiw	r28, 0x06	; 6
    2b02:	0f b6       	in	r0, 0x3f	; 63
    2b04:	f8 94       	cli
    2b06:	de bf       	out	0x3e, r29	; 62
    2b08:	0f be       	out	0x3f, r0	; 63
    2b0a:	cd bf       	out	0x3d, r28	; 61
    2b0c:	df 91       	pop	r29
    2b0e:	cf 91       	pop	r28
    2b10:	1f 91       	pop	r17
    2b12:	0f 91       	pop	r16
    2b14:	ff 90       	pop	r15
    2b16:	ef 90       	pop	r14
    2b18:	df 90       	pop	r13
    2b1a:	cf 90       	pop	r12
    2b1c:	bf 90       	pop	r11
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2b1e:	0c 94 6a 1d 	jmp	0x3ad4	; 0x3ad4 <action_function>
            break;
#endif
        default:
            break;
    }
}
    2b22:	26 96       	adiw	r28, 0x06	; 6
    2b24:	0f b6       	in	r0, 0x3f	; 63
    2b26:	f8 94       	cli
    2b28:	de bf       	out	0x3e, r29	; 62
    2b2a:	0f be       	out	0x3f, r0	; 63
    2b2c:	cd bf       	out	0x3d, r28	; 61
    2b2e:	df 91       	pop	r29
    2b30:	cf 91       	pop	r28
    2b32:	1f 91       	pop	r17
    2b34:	0f 91       	pop	r16
    2b36:	ff 90       	pop	r15
    2b38:	ef 90       	pop	r14
    2b3a:	df 90       	pop	r13
    2b3c:	cf 90       	pop	r12
    2b3e:	bf 90       	pop	r11
    2b40:	08 95       	ret

00002b42 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2b42:	0e 94 b7 1b 	call	0x376e	; 0x376e <clear_weak_mods>
    clear_keys();
    2b46:	0e 94 8c 1b 	call	0x3718	; 0x3718 <clear_keys>
    send_keyboard_report();
    2b4a:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    2b4e:	0e 94 02 23 	call	0x4604	; 0x4604 <mousekey_clear>
    mousekey_send();
    2b52:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    2b56:	80 e0       	ldi	r24, 0x00	; 0
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	0e 94 80 10 	call	0x2100	; 0x2100 <host_system_send>
    host_consumer_send(0);
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	0c 94 96 10 	jmp	0x212c	; 0x212c <host_consumer_send>

00002b66 <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    2b66:	0e 94 a7 1b 	call	0x374e	; 0x374e <clear_mods>
    clear_keyboard_but_mods();
    2b6a:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <clear_keyboard_but_mods>

00002b6e <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    2b6e:	0e 94 b1 1a 	call	0x3562	; 0x3562 <layer_switch_get_action>

    switch (action.kind.id) {
    2b72:	29 2f       	mov	r18, r25
    2b74:	22 95       	swap	r18
    2b76:	2f 70       	andi	r18, 0x0F	; 15
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	2c 30       	cpi	r18, 0x0C	; 12
    2b7c:	31 05       	cpc	r19, r1
    2b7e:	4c f4       	brge	.+18     	; 0x2b92 <is_tap_key+0x24>
    2b80:	2a 30       	cpi	r18, 0x0A	; 10
    2b82:	31 05       	cpc	r19, r1
    2b84:	6c f4       	brge	.+26     	; 0x2ba0 <is_tap_key+0x32>
    2b86:	22 50       	subi	r18, 0x02	; 2
    2b88:	31 09       	sbc	r19, r1
    2b8a:	22 30       	cpi	r18, 0x02	; 2
    2b8c:	31 05       	cpc	r19, r1
    2b8e:	88 f4       	brcc	.+34     	; 0x2bb2 <is_tap_key+0x44>
    2b90:	07 c0       	rjmp	.+14     	; 0x2ba0 <is_tap_key+0x32>
    2b92:	2c 30       	cpi	r18, 0x0C	; 12
    2b94:	31 05       	cpc	r19, r1
    2b96:	49 f0       	breq	.+18     	; 0x2baa <is_tap_key+0x3c>
    2b98:	2f 30       	cpi	r18, 0x0F	; 15
    2b9a:	31 05       	cpc	r19, r1
    2b9c:	31 f0       	breq	.+12     	; 0x2baa <is_tap_key+0x3c>
    2b9e:	09 c0       	rjmp	.+18     	; 0x2bb2 <is_tap_key+0x44>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2ba0:	80 3e       	cpi	r24, 0xE0	; 224
    2ba2:	48 f0       	brcs	.+18     	; 0x2bb6 <is_tap_key+0x48>
    2ba4:	80 3f       	cpi	r24, 0xF0	; 240
    2ba6:	29 f4       	brne	.+10     	; 0x2bb2 <is_tap_key+0x44>
    2ba8:	06 c0       	rjmp	.+12     	; 0x2bb6 <is_tap_key+0x48>
                    return true;
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    2baa:	93 fb       	bst	r25, 3
    2bac:	88 27       	eor	r24, r24
    2bae:	80 f9       	bld	r24, 0
    2bb0:	08 95       	ret
            return false;
    }
    return false;
    2bb2:	80 e0       	ldi	r24, 0x00	; 0
    2bb4:	08 95       	ret
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    2bb8:	08 95       	ret

00002bba <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2bba:	cf 93       	push	r28
    2bbc:	df 93       	push	r29
    2bbe:	00 d0       	rcall	.+0      	; 0x2bc0 <debug_event+0x6>
    2bc0:	00 d0       	rcall	.+0      	; 0x2bc2 <debug_event+0x8>
    2bc2:	1f 92       	push	r1
    2bc4:	cd b7       	in	r28, 0x3d	; 61
    2bc6:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2bc8:	0f 90       	pop	r0
    2bca:	0f 90       	pop	r0
    2bcc:	0f 90       	pop	r0
    2bce:	0f 90       	pop	r0
    2bd0:	0f 90       	pop	r0
    2bd2:	df 91       	pop	r29
    2bd4:	cf 91       	pop	r28
    2bd6:	08 95       	ret

00002bd8 <debug_record>:

void debug_record(keyrecord_t record)
{
    2bd8:	cf 93       	push	r28
    2bda:	df 93       	push	r29
    2bdc:	00 d0       	rcall	.+0      	; 0x2bde <debug_record+0x6>
    2bde:	00 d0       	rcall	.+0      	; 0x2be0 <debug_record+0x8>
    2be0:	00 d0       	rcall	.+0      	; 0x2be2 <debug_record+0xa>
    2be2:	cd b7       	in	r28, 0x3d	; 61
    2be4:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    2be6:	26 96       	adiw	r28, 0x06	; 6
    2be8:	0f b6       	in	r0, 0x3f	; 63
    2bea:	f8 94       	cli
    2bec:	de bf       	out	0x3e, r29	; 62
    2bee:	0f be       	out	0x3f, r0	; 63
    2bf0:	cd bf       	out	0x3d, r28	; 61
    2bf2:	df 91       	pop	r29
    2bf4:	cf 91       	pop	r28
    2bf6:	08 95       	ret

00002bf8 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2bf8:	1f 93       	push	r17
    2bfa:	cf 93       	push	r28
    2bfc:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2bfe:	c0 91 76 01 	lds	r28, 0x0176
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2c02:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2c04:	80 91 77 01 	lds	r24, 0x0177
    2c08:	c8 17       	cp	r28, r24
    2c0a:	99 f0       	breq	.+38     	; 0x2c32 <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2c0c:	d0 e0       	ldi	r29, 0x00	; 0
    2c0e:	1c 9f       	mul	r17, r28
    2c10:	f0 01       	movw	r30, r0
    2c12:	1d 9f       	mul	r17, r29
    2c14:	f0 0d       	add	r31, r0
    2c16:	11 24       	eor	r1, r1
    2c18:	e8 58       	subi	r30, 0x88	; 136
    2c1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c1c:	40 81       	ld	r20, Z
    2c1e:	51 81       	ldd	r21, Z+1	; 0x01
    2c20:	62 81       	ldd	r22, Z+2	; 0x02
    2c22:	73 81       	ldd	r23, Z+3	; 0x03
    2c24:	84 81       	ldd	r24, Z+4	; 0x04
    2c26:	95 81       	ldd	r25, Z+5	; 0x05
    2c28:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2c2c:	21 96       	adiw	r28, 0x01	; 1
    2c2e:	c7 70       	andi	r28, 0x07	; 7
    2c30:	e9 cf       	rjmp	.-46     	; 0x2c04 <debug_waiting_buffer+0xc>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    2c32:	df 91       	pop	r29
    2c34:	cf 91       	pop	r28
    2c36:	1f 91       	pop	r17
    2c38:	08 95       	ret

00002c3a <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2c3a:	40 91 a8 01 	lds	r20, 0x01A8
    2c3e:	50 91 a9 01 	lds	r21, 0x01A9
    2c42:	60 91 aa 01 	lds	r22, 0x01AA
    2c46:	70 91 ab 01 	lds	r23, 0x01AB
    2c4a:	80 91 ac 01 	lds	r24, 0x01AC
    2c4e:	90 91 ad 01 	lds	r25, 0x01AD
    2c52:	0c 94 ec 15 	jmp	0x2bd8	; 0x2bd8 <debug_record>

00002c56 <waiting_buffer_scan_tap>:

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    2c56:	80 91 ad 01 	lds	r24, 0x01AD
    2c5a:	82 95       	swap	r24
    2c5c:	8f 70       	andi	r24, 0x0F	; 15
    2c5e:	09 f0       	breq	.+2      	; 0x2c62 <waiting_buffer_scan_tap+0xc>
    2c60:	54 c0       	rjmp	.+168    	; 0x2d0a <waiting_buffer_scan_tap+0xb4>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    2c62:	80 91 aa 01 	lds	r24, 0x01AA
    2c66:	88 23       	and	r24, r24
    2c68:	09 f4       	brne	.+2      	; 0x2c6c <waiting_buffer_scan_tap+0x16>
    2c6a:	4f c0       	rjmp	.+158    	; 0x2d0a <waiting_buffer_scan_tap+0xb4>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2c6c:	80 91 76 01 	lds	r24, 0x0176
    2c70:	a0 91 77 01 	lds	r26, 0x0177
    2c74:	60 91 a8 01 	lds	r22, 0x01A8
    2c78:	70 91 a9 01 	lds	r23, 0x01A9
    2c7c:	40 91 ab 01 	lds	r20, 0x01AB
    2c80:	50 91 ac 01 	lds	r21, 0x01AC
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2c84:	b6 e0       	ldi	r27, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2c86:	8a 17       	cp	r24, r26
    2c88:	09 f4       	brne	.+2      	; 0x2c8c <waiting_buffer_scan_tap+0x36>
    2c8a:	3f c0       	rjmp	.+126    	; 0x2d0a <waiting_buffer_scan_tap+0xb4>
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	41 15       	cp	r20, r1
    2c90:	51 05       	cpc	r21, r1
    2c92:	c1 f1       	breq	.+112    	; 0x2d04 <waiting_buffer_scan_tap+0xae>
    2c94:	7f 3f       	cpi	r23, 0xFF	; 255
    2c96:	11 f4       	brne	.+4      	; 0x2c9c <waiting_buffer_scan_tap+0x46>
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2c98:	6f 3f       	cpi	r22, 0xFF	; 255
    2c9a:	a1 f1       	breq	.+104    	; 0x2d04 <waiting_buffer_scan_tap+0xae>
    2c9c:	b8 9f       	mul	r27, r24
    2c9e:	f0 01       	movw	r30, r0
    2ca0:	b9 9f       	mul	r27, r25
    2ca2:	f0 0d       	add	r31, r0
    2ca4:	11 24       	eor	r1, r1
    2ca6:	e8 58       	subi	r30, 0x88	; 136
    2ca8:	fe 4f       	sbci	r31, 0xFE	; 254
    2caa:	21 81       	ldd	r18, Z+1	; 0x01
    2cac:	72 13       	cpse	r23, r18
    2cae:	2a c0       	rjmp	.+84     	; 0x2d04 <waiting_buffer_scan_tap+0xae>
    2cb0:	20 81       	ld	r18, Z
    2cb2:	62 13       	cpse	r22, r18
    2cb4:	27 c0       	rjmp	.+78     	; 0x2d04 <waiting_buffer_scan_tap+0xae>
    2cb6:	22 81       	ldd	r18, Z+2	; 0x02
    2cb8:	21 11       	cpse	r18, r1
    2cba:	24 c0       	rjmp	.+72     	; 0x2d04 <waiting_buffer_scan_tap+0xae>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2cbc:	23 81       	ldd	r18, Z+3	; 0x03
    2cbe:	34 81       	ldd	r19, Z+4	; 0x04
    2cc0:	24 17       	cp	r18, r20
    2cc2:	35 07       	cpc	r19, r21
    2cc4:	10 f4       	brcc	.+4      	; 0x2cca <waiting_buffer_scan_tap+0x74>
    2cc6:	21 50       	subi	r18, 0x01	; 1
    2cc8:	31 09       	sbc	r19, r1
    2cca:	24 1b       	sub	r18, r20
    2ccc:	35 0b       	sbc	r19, r21
    2cce:	2c 32       	cpi	r18, 0x2C	; 44
    2cd0:	31 40       	sbci	r19, 0x01	; 1
    2cd2:	c0 f4       	brcc	.+48     	; 0x2d04 <waiting_buffer_scan_tap+0xae>
            tapping_key.tap.count = 1;
    2cd4:	20 91 ad 01 	lds	r18, 0x01AD
    2cd8:	2f 70       	andi	r18, 0x0F	; 15
    2cda:	20 61       	ori	r18, 0x10	; 16
    2cdc:	20 93 ad 01 	sts	0x01AD, r18
            waiting_buffer[i].tap.count = 1;
    2ce0:	26 e0       	ldi	r18, 0x06	; 6
    2ce2:	28 9f       	mul	r18, r24
    2ce4:	f0 01       	movw	r30, r0
    2ce6:	29 9f       	mul	r18, r25
    2ce8:	f0 0d       	add	r31, r0
    2cea:	11 24       	eor	r1, r1
    2cec:	e3 58       	subi	r30, 0x83	; 131
    2cee:	fe 4f       	sbci	r31, 0xFE	; 254
    2cf0:	80 81       	ld	r24, Z
    2cf2:	8f 70       	andi	r24, 0x0F	; 15
    2cf4:	80 61       	ori	r24, 0x10	; 16
    2cf6:	80 83       	st	Z, r24
            process_action(&tapping_key);
    2cf8:	88 ea       	ldi	r24, 0xA8	; 168
    2cfa:	91 e0       	ldi	r25, 0x01	; 1
    2cfc:	0e 94 83 12 	call	0x2506	; 0x2506 <process_action>

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    2d00:	0c 94 fc 15 	jmp	0x2bf8	; 0x2bf8 <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2d04:	01 96       	adiw	r24, 0x01	; 1
    2d06:	87 70       	andi	r24, 0x07	; 7
    2d08:	be cf       	rjmp	.-132    	; 0x2c86 <waiting_buffer_scan_tap+0x30>
    2d0a:	08 95       	ret

00002d0c <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    2d0c:	cf 92       	push	r12
    2d0e:	df 92       	push	r13
    2d10:	ef 92       	push	r14
    2d12:	ff 92       	push	r15
    2d14:	0f 93       	push	r16
    2d16:	1f 93       	push	r17
    2d18:	cf 93       	push	r28
    2d1a:	df 93       	push	r29
    2d1c:	cd b7       	in	r28, 0x3d	; 61
    2d1e:	de b7       	in	r29, 0x3e	; 62
    2d20:	62 97       	sbiw	r28, 0x12	; 18
    2d22:	0f b6       	in	r0, 0x3f	; 63
    2d24:	f8 94       	cli
    2d26:	de bf       	out	0x3e, r29	; 62
    2d28:	0f be       	out	0x3f, r0	; 63
    2d2a:	cd bf       	out	0x3d, r28	; 61
    2d2c:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    2d2e:	85 e0       	ldi	r24, 0x05	; 5
    2d30:	f8 01       	movw	r30, r16
    2d32:	de 01       	movw	r26, r28
    2d34:	1d 96       	adiw	r26, 0x0d	; 13
    2d36:	01 90       	ld	r0, Z+
    2d38:	0d 92       	st	X+, r0
    2d3a:	8a 95       	dec	r24
    2d3c:	e1 f7       	brne	.-8      	; 0x2d36 <process_tapping+0x2a>
    2d3e:	d8 01       	movw	r26, r16
    2d40:	4c 91       	ld	r20, X
    2d42:	11 96       	adiw	r26, 0x01	; 1
    2d44:	5c 91       	ld	r21, X
    2d46:	11 97       	sbiw	r26, 0x01	; 1
    2d48:	12 96       	adiw	r26, 0x02	; 2
    2d4a:	6c 91       	ld	r22, X
    2d4c:	12 97       	sbiw	r26, 0x02	; 2
    2d4e:	13 96       	adiw	r26, 0x03	; 3
    2d50:	cd 90       	ld	r12, X+
    2d52:	dc 90       	ld	r13, X
    2d54:	14 97       	sbiw	r26, 0x04	; 4
    2d56:	30 91 a8 01 	lds	r19, 0x01A8
    2d5a:	70 91 a9 01 	lds	r23, 0x01A9
    2d5e:	80 91 ab 01 	lds	r24, 0x01AB
    2d62:	90 91 ac 01 	lds	r25, 0x01AC
    2d66:	00 97       	sbiw	r24, 0x00	; 0
    2d68:	09 f4       	brne	.+2      	; 0x2d6c <process_tapping+0x60>
    2d6a:	73 c1       	rjmp	.+742    	; 0x3052 <process_tapping+0x346>
    2d6c:	7f 3f       	cpi	r23, 0xFF	; 255
    2d6e:	19 f4       	brne	.+6      	; 0x2d76 <process_tapping+0x6a>

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    2d70:	3f 3f       	cpi	r19, 0xFF	; 255
    2d72:	09 f4       	brne	.+2      	; 0x2d76 <process_tapping+0x6a>
    2d74:	6e c1       	rjmp	.+732    	; 0x3052 <process_tapping+0x346>
    2d76:	e0 90 aa 01 	lds	r14, 0x01AA
    2d7a:	ee 20       	and	r14, r14
    2d7c:	09 f4       	brne	.+2      	; 0x2d80 <process_tapping+0x74>
    2d7e:	c5 c0       	rjmp	.+394    	; 0x2f0a <process_tapping+0x1fe>
    2d80:	20 91 ad 01 	lds	r18, 0x01AD
        if (WITHIN_TAPPING_TERM(event)) {
    2d84:	c8 16       	cp	r12, r24
    2d86:	d9 06       	cpc	r13, r25
    2d88:	50 f0       	brcs	.+20     	; 0x2d9e <process_tapping+0x92>
    2d8a:	f6 01       	movw	r30, r12
    2d8c:	e8 1b       	sub	r30, r24
    2d8e:	f9 0b       	sbc	r31, r25
    2d90:	cf 01       	movw	r24, r30
    2d92:	ff 24       	eor	r15, r15
    2d94:	f3 94       	inc	r15
    2d96:	8c 32       	cpi	r24, 0x2C	; 44
    2d98:	91 40       	sbci	r25, 0x01	; 1
    2d9a:	c8 f0       	brcs	.+50     	; 0x2dce <process_tapping+0xc2>
    2d9c:	09 c0       	rjmp	.+18     	; 0x2db0 <process_tapping+0xa4>
    2d9e:	80 95       	com	r24
    2da0:	90 95       	com	r25
    2da2:	8c 0d       	add	r24, r12
    2da4:	9d 1d       	adc	r25, r13
    2da6:	ff 24       	eor	r15, r15
    2da8:	f3 94       	inc	r15
    2daa:	8c 32       	cpi	r24, 0x2C	; 44
    2dac:	91 40       	sbci	r25, 0x01	; 1
    2dae:	78 f0       	brcs	.+30     	; 0x2dce <process_tapping+0xc2>
    2db0:	f1 2c       	mov	r15, r1
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    2db2:	20 7f       	andi	r18, 0xF0	; 240
    2db4:	09 f0       	breq	.+2      	; 0x2db8 <process_tapping+0xac>
    2db6:	c6 c0       	rjmp	.+396    	; 0x2f44 <process_tapping+0x238>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    2db8:	7c 2d       	mov	r23, r12
    2dba:	d9 8a       	std	Y+17, r13	; 0x11
    2dbc:	c8 8a       	std	Y+16, r12	; 0x10
    2dbe:	89 89       	ldd	r24, Y+17	; 0x11
    2dc0:	0e 94 dd 15 	call	0x2bba	; 0x2bba <debug_event>
                process_action(&tapping_key);
    2dc4:	88 ea       	ldi	r24, 0xA8	; 168
    2dc6:	91 e0       	ldi	r25, 0x01	; 1
    2dc8:	0e 94 83 12 	call	0x2506	; 0x2506 <process_action>
    2dcc:	b1 c0       	rjmp	.+354    	; 0x2f30 <process_tapping+0x224>
    keyevent_t event = keyp->event;

    // if tapping
    if (IS_TAPPING_PRESSED()) {
        if (WITHIN_TAPPING_TERM(event)) {
            if (tapping_key.tap.count == 0) {
    2dce:	82 2f       	mov	r24, r18
    2dd0:	80 7f       	andi	r24, 0xF0	; 240
    2dd2:	09 f0       	breq	.+2      	; 0x2dd6 <process_tapping+0xca>
    2dd4:	45 c0       	rjmp	.+138    	; 0x2e60 <process_tapping+0x154>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2dd6:	75 13       	cpse	r23, r21
    2dd8:	13 c0       	rjmp	.+38     	; 0x2e00 <process_tapping+0xf4>
    2dda:	34 13       	cpse	r19, r20
    2ddc:	11 c0       	rjmp	.+34     	; 0x2e00 <process_tapping+0xf4>
    2dde:	61 11       	cpse	r22, r1
    2de0:	0f c0       	rjmp	.+30     	; 0x2e00 <process_tapping+0xf4>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    2de2:	2f 70       	andi	r18, 0x0F	; 15
    2de4:	20 61       	ori	r18, 0x10	; 16
    2de6:	20 93 ad 01 	sts	0x01AD, r18
                    debug_tapping_key();
    2dea:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <debug_tapping_key>
                    process_action(&tapping_key);
    2dee:	88 ea       	ldi	r24, 0xA8	; 168
    2df0:	91 e0       	ldi	r25, 0x01	; 1
    2df2:	0e 94 83 12 	call	0x2506	; 0x2506 <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    2df6:	80 91 ad 01 	lds	r24, 0x01AD
    2dfa:	f8 01       	movw	r30, r16
    2dfc:	85 83       	std	Z+5, r24	; 0x05
    2dfe:	2e c0       	rjmp	.+92     	; 0x2e5c <process_tapping+0x150>
    2e00:	cd 28       	or	r12, r13
    2e02:	19 f1       	breq	.+70     	; 0x2e4a <process_tapping+0x13e>
    2e04:	5f 3f       	cpi	r21, 0xFF	; 255
    2e06:	11 f4       	brne	.+4      	; 0x2e0c <process_tapping+0x100>
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    2e08:	4f 3f       	cpi	r20, 0xFF	; 255
    2e0a:	f9 f0       	breq	.+62     	; 0x2e4a <process_tapping+0x13e>
    2e0c:	f6 2e       	mov	r15, r22
    2e0e:	61 11       	cpse	r22, r1
    2e10:	1c c0       	rjmp	.+56     	; 0x2e4a <process_tapping+0x13e>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e12:	80 91 76 01 	lds	r24, 0x0176
    2e16:	20 91 77 01 	lds	r18, 0x0177
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2e1a:	36 e0       	ldi	r19, 0x06	; 6
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e1c:	82 17       	cp	r24, r18
    2e1e:	09 f4       	brne	.+2      	; 0x2e22 <process_tapping+0x116>
    2e20:	5b c0       	rjmp	.+182    	; 0x2ed8 <process_tapping+0x1cc>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	38 9f       	mul	r19, r24
    2e26:	f0 01       	movw	r30, r0
    2e28:	39 9f       	mul	r19, r25
    2e2a:	f0 0d       	add	r31, r0
    2e2c:	11 24       	eor	r1, r1
    2e2e:	e8 58       	subi	r30, 0x88	; 136
    2e30:	fe 4f       	sbci	r31, 0xFE	; 254
    2e32:	71 81       	ldd	r23, Z+1	; 0x01
    2e34:	57 13       	cpse	r21, r23
    2e36:	06 c0       	rjmp	.+12     	; 0x2e44 <process_tapping+0x138>
    2e38:	70 81       	ld	r23, Z
    2e3a:	47 13       	cpse	r20, r23
    2e3c:	03 c0       	rjmp	.+6      	; 0x2e44 <process_tapping+0x138>
    2e3e:	72 81       	ldd	r23, Z+2	; 0x02
    2e40:	71 11       	cpse	r23, r1
    2e42:	03 c0       	rjmp	.+6      	; 0x2e4a <process_tapping+0x13e>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e44:	01 96       	adiw	r24, 0x01	; 1
    2e46:	87 70       	andi	r24, 0x07	; 7
    2e48:	e9 cf       	rjmp	.-46     	; 0x2e1c <process_tapping+0x110>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    2e4a:	f6 2e       	mov	r15, r22
    2e4c:	66 23       	and	r22, r22
    2e4e:	09 f4       	brne	.+2      	; 0x2e52 <process_tapping+0x146>
    2e50:	1d c1       	rjmp	.+570    	; 0x308c <process_tapping+0x380>
                        tapping_key.tap.interrupted = true;
    2e52:	80 91 ad 01 	lds	r24, 0x01AD
    2e56:	81 60       	ori	r24, 0x01	; 1
    2e58:	80 93 ad 01 	sts	0x01AD, r24
                    }
                    // enqueue 
                    return false;
    2e5c:	f1 2c       	mov	r15, r1
    2e5e:	16 c1       	rjmp	.+556    	; 0x308c <process_tapping+0x380>
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2e60:	75 13       	cpse	r23, r21
    2e62:	09 c0       	rjmp	.+18     	; 0x2e76 <process_tapping+0x16a>
    2e64:	34 13       	cpse	r19, r20
    2e66:	07 c0       	rjmp	.+14     	; 0x2e76 <process_tapping+0x16a>
    2e68:	61 11       	cpse	r22, r1
    2e6a:	05 c0       	rjmp	.+10     	; 0x2e76 <process_tapping+0x16a>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    2e6c:	80 91 ad 01 	lds	r24, 0x01AD
    2e70:	f8 01       	movw	r30, r16
    2e72:	85 83       	std	Z+5, r24	; 0x05
    2e74:	c8 c0       	rjmp	.+400    	; 0x3006 <process_tapping+0x2fa>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    2e76:	4d 87       	std	Y+13, r20	; 0x0d
    2e78:	5e 87       	std	Y+14, r21	; 0x0e
    2e7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e7e:	6a 8b       	std	Y+18, r22	; 0x12
    2e80:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <is_tap_key>
    2e84:	6a 89       	ldd	r22, Y+18	; 0x12
    2e86:	88 23       	and	r24, r24
    2e88:	e1 f1       	breq	.+120    	; 0x2f02 <process_tapping+0x1f6>
    2e8a:	66 23       	and	r22, r22
    2e8c:	d1 f1       	breq	.+116    	; 0x2f02 <process_tapping+0x1f6>
                    if (tapping_key.tap.count > 1) {
    2e8e:	20 91 ad 01 	lds	r18, 0x01AD
    2e92:	82 2f       	mov	r24, r18
    2e94:	82 95       	swap	r24
    2e96:	8f 70       	andi	r24, 0x0F	; 15
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	02 97       	sbiw	r24, 0x02	; 2
    2e9c:	74 f0       	brlt	.+28     	; 0x2eba <process_tapping+0x1ae>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    2e9e:	80 91 a8 01 	lds	r24, 0x01A8
    2ea2:	90 91 a9 01 	lds	r25, 0x01A9
    2ea6:	98 87       	std	Y+8, r25	; 0x08
    2ea8:	8f 83       	std	Y+7, r24	; 0x07
    2eaa:	19 86       	std	Y+9, r1	; 0x09
    2eac:	db 86       	std	Y+11, r13	; 0x0b
    2eae:	ca 86       	std	Y+10, r12	; 0x0a
    2eb0:	2c 87       	std	Y+12, r18	; 0x0c
    2eb2:	ce 01       	movw	r24, r28
    2eb4:	07 96       	adiw	r24, 0x07	; 7
    2eb6:	0e 94 83 12 	call	0x2506	; 0x2506 <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last tap(1).\n");
                    }
                    tapping_key = *keyp;
    2eba:	86 e0       	ldi	r24, 0x06	; 6
    2ebc:	f8 01       	movw	r30, r16
    2ebe:	a8 ea       	ldi	r26, 0xA8	; 168
    2ec0:	b1 e0       	ldi	r27, 0x01	; 1
    2ec2:	01 90       	ld	r0, Z+
    2ec4:	0d 92       	st	X+, r0
    2ec6:	8a 95       	dec	r24
    2ec8:	e1 f7       	brne	.-8      	; 0x2ec2 <process_tapping+0x1b6>
                    waiting_buffer_scan_tap();
    2eca:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <waiting_buffer_scan_tap>
                    debug_tapping_key();
    2ece:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <debug_tapping_key>
                    return true;
    2ed2:	ff 24       	eor	r15, r15
    2ed4:	f3 94       	inc	r15
    2ed6:	da c0       	rjmp	.+436    	; 0x308c <process_tapping+0x380>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    2ed8:	4d 87       	std	Y+13, r20	; 0x0d
    2eda:	5e 87       	std	Y+14, r21	; 0x0e
    2edc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ede:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ee0:	0e 94 b1 1a 	call	0x3562	; 0x3562 <layer_switch_get_action>
                    switch (action.kind.id) {
    2ee4:	29 2f       	mov	r18, r25
    2ee6:	22 95       	swap	r18
    2ee8:	2f 70       	andi	r18, 0x0F	; 15
    2eea:	30 e0       	ldi	r19, 0x00	; 0
    2eec:	22 30       	cpi	r18, 0x02	; 2
    2eee:	31 05       	cpc	r19, r1
    2ef0:	0c f0       	brlt	.+2      	; 0x2ef4 <process_tapping+0x1e8>
    2ef2:	bf c0       	rjmp	.+382    	; 0x3072 <process_tapping+0x366>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    2ef4:	9f 70       	andi	r25, 0x0F	; 15
    2ef6:	09 f0       	breq	.+2      	; 0x2efa <process_tapping+0x1ee>
    2ef8:	b9 c0       	rjmp	.+370    	; 0x306c <process_tapping+0x360>
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
                            if (IS_MOD(action.key.code)) return false;
    2efa:	80 5e       	subi	r24, 0xE0	; 224
    2efc:	88 30       	cpi	r24, 0x08	; 8
    2efe:	08 f4       	brcc	.+2      	; 0x2f02 <process_tapping+0x1f6>
    2f00:	c5 c0       	rjmp	.+394    	; 0x308c <process_tapping+0x380>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    2f02:	c8 01       	movw	r24, r16
    2f04:	0e 94 83 12 	call	0x2506	; 0x2506 <process_action>
    2f08:	e4 cf       	rjmp	.-56     	; 0x2ed2 <process_tapping+0x1c6>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    2f0a:	c8 16       	cp	r12, r24
    2f0c:	d9 06       	cpc	r13, r25
    2f0e:	08 f4       	brcc	.+2      	; 0x2f12 <process_tapping+0x206>
    2f10:	53 c0       	rjmp	.+166    	; 0x2fb8 <process_tapping+0x2ac>
    2f12:	f6 01       	movw	r30, r12
    2f14:	e8 1b       	sub	r30, r24
    2f16:	f9 0b       	sbc	r31, r25
    2f18:	cf 01       	movw	r24, r30
    2f1a:	8c 32       	cpi	r24, 0x2C	; 44
    2f1c:	91 40       	sbci	r25, 0x01	; 1
    2f1e:	08 f4       	brcc	.+2      	; 0x2f22 <process_tapping+0x216>
    2f20:	53 c0       	rjmp	.+166    	; 0x2fc8 <process_tapping+0x2bc>
    2f22:	f1 2c       	mov	r15, r1
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    2f24:	7c 2d       	mov	r23, r12
    2f26:	d9 8a       	std	Y+17, r13	; 0x11
    2f28:	c8 8a       	std	Y+16, r12	; 0x10
    2f2a:	89 89       	ldd	r24, Y+17	; 0x11
    2f2c:	0e 94 dd 15 	call	0x2bba	; 0x2bba <debug_event>
        else {
            if (tapping_key.tap.count == 0) {
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
    2f30:	e8 ea       	ldi	r30, 0xA8	; 168
    2f32:	f1 e0       	ldi	r31, 0x01	; 1
    2f34:	86 e0       	ldi	r24, 0x06	; 6
    2f36:	df 01       	movw	r26, r30
    2f38:	1d 92       	st	X+, r1
    2f3a:	8a 95       	dec	r24
    2f3c:	e9 f7       	brne	.-6      	; 0x2f38 <process_tapping+0x22c>
                debug_tapping_key();
    2f3e:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <debug_tapping_key>
                return false;
    2f42:	a4 c0       	rjmp	.+328    	; 0x308c <process_tapping+0x380>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2f44:	75 13       	cpse	r23, r21
    2f46:	14 c0       	rjmp	.+40     	; 0x2f70 <process_tapping+0x264>
    2f48:	34 13       	cpse	r19, r20
    2f4a:	12 c0       	rjmp	.+36     	; 0x2f70 <process_tapping+0x264>
    2f4c:	61 11       	cpse	r22, r1
    2f4e:	10 c0       	rjmp	.+32     	; 0x2f70 <process_tapping+0x264>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    2f50:	80 91 ad 01 	lds	r24, 0x01AD
    2f54:	f8 01       	movw	r30, r16
    2f56:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    2f58:	c8 01       	movw	r24, r16
    2f5a:	0e 94 83 12 	call	0x2506	; 0x2506 <process_action>
                    tapping_key = (keyrecord_t){};
    2f5e:	86 e0       	ldi	r24, 0x06	; 6
    2f60:	e8 ea       	ldi	r30, 0xA8	; 168
    2f62:	f1 e0       	ldi	r31, 0x01	; 1
    2f64:	df 01       	movw	r26, r30
    2f66:	1d 92       	st	X+, r1
    2f68:	8a 95       	dec	r24
    2f6a:	e9 f7       	brne	.-6      	; 0x2f66 <process_tapping+0x25a>
                    return true;
    2f6c:	fe 2c       	mov	r15, r14
    2f6e:	8e c0       	rjmp	.+284    	; 0x308c <process_tapping+0x380>
                }
                else if (is_tap_key(event.key) && event.pressed) {
    2f70:	4d 87       	std	Y+13, r20	; 0x0d
    2f72:	5e 87       	std	Y+14, r21	; 0x0e
    2f74:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f76:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f78:	6a 8b       	std	Y+18, r22	; 0x12
    2f7a:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <is_tap_key>
    2f7e:	6a 89       	ldd	r22, Y+18	; 0x12
    2f80:	88 23       	and	r24, r24
    2f82:	09 f4       	brne	.+2      	; 0x2f86 <process_tapping+0x27a>
    2f84:	be cf       	rjmp	.-132    	; 0x2f02 <process_tapping+0x1f6>
    2f86:	66 23       	and	r22, r22
    2f88:	09 f4       	brne	.+2      	; 0x2f8c <process_tapping+0x280>
    2f8a:	bb cf       	rjmp	.-138    	; 0x2f02 <process_tapping+0x1f6>
                    if (tapping_key.tap.count > 1) {
    2f8c:	20 91 ad 01 	lds	r18, 0x01AD
    2f90:	82 2f       	mov	r24, r18
    2f92:	82 95       	swap	r24
    2f94:	8f 70       	andi	r24, 0x0F	; 15
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	02 97       	sbiw	r24, 0x02	; 2
    2f9a:	0c f4       	brge	.+2      	; 0x2f9e <process_tapping+0x292>
    2f9c:	8e cf       	rjmp	.-228    	; 0x2eba <process_tapping+0x1ae>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    2f9e:	80 91 a8 01 	lds	r24, 0x01A8
    2fa2:	90 91 a9 01 	lds	r25, 0x01A9
    2fa6:	9a 83       	std	Y+2, r25	; 0x02
    2fa8:	89 83       	std	Y+1, r24	; 0x01
    2faa:	1b 82       	std	Y+3, r1	; 0x03
    2fac:	dd 82       	std	Y+5, r13	; 0x05
    2fae:	cc 82       	std	Y+4, r12	; 0x04
    2fb0:	2e 83       	std	Y+6, r18	; 0x06
    2fb2:	ce 01       	movw	r24, r28
    2fb4:	01 96       	adiw	r24, 0x01	; 1
    2fb6:	7f cf       	rjmp	.-258    	; 0x2eb6 <process_tapping+0x1aa>
    2fb8:	80 95       	com	r24
    2fba:	90 95       	com	r25
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    2fbc:	8c 0d       	add	r24, r12
    2fbe:	9d 1d       	adc	r25, r13
    2fc0:	8c 32       	cpi	r24, 0x2C	; 44
    2fc2:	91 40       	sbci	r25, 0x01	; 1
    2fc4:	08 f0       	brcs	.+2      	; 0x2fc8 <process_tapping+0x2bc>
    2fc6:	ad cf       	rjmp	.-166    	; 0x2f22 <process_tapping+0x216>
            if (event.pressed) {
    2fc8:	f6 2e       	mov	r15, r22
    2fca:	66 23       	and	r22, r22
    2fcc:	09 f4       	brne	.+2      	; 0x2fd0 <process_tapping+0x2c4>
    2fce:	99 cf       	rjmp	.-206    	; 0x2f02 <process_tapping+0x1f6>
                if (IS_TAPPING_KEY(event.key)) {
    2fd0:	75 13       	cpse	r23, r21
    2fd2:	2e c0       	rjmp	.+92     	; 0x3030 <process_tapping+0x324>
    2fd4:	34 13       	cpse	r19, r20
    2fd6:	2c c0       	rjmp	.+88     	; 0x3030 <process_tapping+0x324>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    2fd8:	20 91 ad 01 	lds	r18, 0x01AD
    2fdc:	20 fd       	sbrc	r18, 0
    2fde:	1f c0       	rjmp	.+62     	; 0x301e <process_tapping+0x312>
    2fe0:	82 2f       	mov	r24, r18
    2fe2:	82 95       	swap	r24
    2fe4:	8f 70       	andi	r24, 0x0F	; 15
    2fe6:	d9 f0       	breq	.+54     	; 0x301e <process_tapping+0x312>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    2fe8:	d8 01       	movw	r26, r16
    2fea:	15 96       	adiw	r26, 0x05	; 5
    2fec:	2c 93       	st	X, r18
    2fee:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    2ff0:	8f 30       	cpi	r24, 0x0F	; 15
    2ff2:	49 f0       	breq	.+18     	; 0x3006 <process_tapping+0x2fa>
    2ff4:	8f 5f       	subi	r24, 0xFF	; 255
    2ff6:	98 2f       	mov	r25, r24
    2ff8:	92 95       	swap	r25
    2ffa:	90 7f       	andi	r25, 0xF0	; 240
    2ffc:	82 2f       	mov	r24, r18
    2ffe:	8f 70       	andi	r24, 0x0F	; 15
    3000:	89 2b       	or	r24, r25
    3002:	15 96       	adiw	r26, 0x05	; 5
    3004:	8c 93       	st	X, r24
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    3006:	c8 01       	movw	r24, r16
    3008:	0e 94 83 12 	call	0x2506	; 0x2506 <process_action>
                        tapping_key = *keyp;
    300c:	86 e0       	ldi	r24, 0x06	; 6
    300e:	f8 01       	movw	r30, r16
    3010:	a8 ea       	ldi	r26, 0xA8	; 168
    3012:	b1 e0       	ldi	r27, 0x01	; 1
    3014:	01 90       	ld	r0, Z+
    3016:	0d 92       	st	X+, r0
    3018:	8a 95       	dec	r24
    301a:	e1 f7       	brne	.-8      	; 0x3014 <process_tapping+0x308>
    301c:	90 cf       	rjmp	.-224    	; 0x2f3e <process_tapping+0x232>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    301e:	86 e0       	ldi	r24, 0x06	; 6
    3020:	f8 01       	movw	r30, r16
    3022:	a8 ea       	ldi	r26, 0xA8	; 168
    3024:	b1 e0       	ldi	r27, 0x01	; 1
    3026:	01 90       	ld	r0, Z+
    3028:	0d 92       	st	X+, r0
    302a:	8a 95       	dec	r24
    302c:	e1 f7       	brne	.-8      	; 0x3026 <process_tapping+0x31a>
                        return true;
    302e:	2e c0       	rjmp	.+92     	; 0x308c <process_tapping+0x380>
                    }
                } else if (is_tap_key(event.key)) {
    3030:	4d 87       	std	Y+13, r20	; 0x0d
    3032:	5e 87       	std	Y+14, r21	; 0x0e
    3034:	8d 85       	ldd	r24, Y+13	; 0x0d
    3036:	9e 85       	ldd	r25, Y+14	; 0x0e
    3038:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <is_tap_key>
    303c:	81 11       	cpse	r24, r1
    303e:	3d cf       	rjmp	.-390    	; 0x2eba <process_tapping+0x1ae>
                    debug_tapping_key();
                    return true;
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    3040:	80 91 ad 01 	lds	r24, 0x01AD
    3044:	81 60       	ori	r24, 0x01	; 1
    3046:	80 93 ad 01 	sts	0x01AD, r24
                    process_action(keyp);
    304a:	c8 01       	movw	r24, r16
    304c:	0e 94 83 12 	call	0x2506	; 0x2506 <process_action>
                    return true;
    3050:	1d c0       	rjmp	.+58     	; 0x308c <process_tapping+0x380>
            return false;
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    3052:	66 23       	and	r22, r22
    3054:	09 f4       	brne	.+2      	; 0x3058 <process_tapping+0x34c>
    3056:	55 cf       	rjmp	.-342    	; 0x2f02 <process_tapping+0x1f6>
    3058:	4d 87       	std	Y+13, r20	; 0x0d
    305a:	5e 87       	std	Y+14, r21	; 0x0e
    305c:	8d 85       	ldd	r24, Y+13	; 0x0d
    305e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3060:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <is_tap_key>
    3064:	88 23       	and	r24, r24
    3066:	09 f4       	brne	.+2      	; 0x306a <process_tapping+0x35e>
    3068:	4c cf       	rjmp	.-360    	; 0x2f02 <process_tapping+0x1f6>
    306a:	27 cf       	rjmp	.-434    	; 0x2eba <process_tapping+0x1ae>
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    306c:	81 11       	cpse	r24, r1
    306e:	45 cf       	rjmp	.-374    	; 0x2efa <process_tapping+0x1ee>
    3070:	0d c0       	rjmp	.+26     	; 0x308c <process_tapping+0x380>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
    3072:	24 30       	cpi	r18, 0x04	; 4
    3074:	31 05       	cpc	r19, r1
    3076:	0c f0       	brlt	.+2      	; 0x307a <process_tapping+0x36e>
    3078:	44 cf       	rjmp	.-376    	; 0x2f02 <process_tapping+0x1f6>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    307a:	9f 70       	andi	r25, 0x0F	; 15
    307c:	09 f4       	brne	.+2      	; 0x3080 <process_tapping+0x374>
    307e:	3d cf       	rjmp	.-390    	; 0x2efa <process_tapping+0x1ee>
    3080:	d8 01       	movw	r26, r16
    3082:	15 96       	adiw	r26, 0x05	; 5
    3084:	9c 91       	ld	r25, X
    3086:	90 7f       	andi	r25, 0xF0	; 240
    3088:	09 f0       	breq	.+2      	; 0x308c <process_tapping+0x380>
    308a:	37 cf       	rjmp	.-402    	; 0x2efa <process_tapping+0x1ee>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    308c:	8f 2d       	mov	r24, r15
    308e:	62 96       	adiw	r28, 0x12	; 18
    3090:	0f b6       	in	r0, 0x3f	; 63
    3092:	f8 94       	cli
    3094:	de bf       	out	0x3e, r29	; 62
    3096:	0f be       	out	0x3f, r0	; 63
    3098:	cd bf       	out	0x3d, r28	; 61
    309a:	df 91       	pop	r29
    309c:	cf 91       	pop	r28
    309e:	1f 91       	pop	r17
    30a0:	0f 91       	pop	r16
    30a2:	ff 90       	pop	r15
    30a4:	ef 90       	pop	r14
    30a6:	df 90       	pop	r13
    30a8:	cf 90       	pop	r12
    30aa:	08 95       	ret

000030ac <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    30ac:	1f 93       	push	r17
    30ae:	cf 93       	push	r28
    30b0:	df 93       	push	r29
    30b2:	cd b7       	in	r28, 0x3d	; 61
    30b4:	de b7       	in	r29, 0x3e	; 62
    30b6:	2c 97       	sbiw	r28, 0x0c	; 12
    30b8:	0f b6       	in	r0, 0x3f	; 63
    30ba:	f8 94       	cli
    30bc:	de bf       	out	0x3e, r29	; 62
    30be:	0f be       	out	0x3f, r0	; 63
    30c0:	cd bf       	out	0x3d, r28	; 61
    30c2:	4f 83       	std	Y+7, r20	; 0x07
    30c4:	58 87       	std	Y+8, r21	; 0x08
    30c6:	69 87       	std	Y+9, r22	; 0x09
    30c8:	7a 87       	std	Y+10, r23	; 0x0a
    30ca:	8b 87       	std	Y+11, r24	; 0x0b
    30cc:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    30ce:	ce 01       	movw	r24, r28
    30d0:	07 96       	adiw	r24, 0x07	; 7
    30d2:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <process_tapping>
    30d6:	88 23       	and	r24, r24
    30d8:	69 f0       	breq	.+26     	; 0x30f4 <action_tapping_process+0x48>
    30da:	8f 81       	ldd	r24, Y+7	; 0x07
    30dc:	98 85       	ldd	r25, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    30de:	2a 85       	ldd	r18, Y+10	; 0x0a
    30e0:	3b 85       	ldd	r19, Y+11	; 0x0b
    30e2:	23 2b       	or	r18, r19
    30e4:	f1 f1       	breq	.+124    	; 0x3162 <action_tapping_process+0xb6>
    30e6:	9f 3f       	cpi	r25, 0xFF	; 255
    30e8:	09 f0       	breq	.+2      	; 0x30ec <action_tapping_process+0x40>
    30ea:	63 c0       	rjmp	.+198    	; 0x31b2 <action_tapping_process+0x106>
    30ec:	8f 3f       	cpi	r24, 0xFF	; 255
    30ee:	09 f0       	breq	.+2      	; 0x30f2 <action_tapping_process+0x46>
    30f0:	60 c0       	rjmp	.+192    	; 0x31b2 <action_tapping_process+0x106>
    30f2:	37 c0       	rjmp	.+110    	; 0x3162 <action_tapping_process+0xb6>
    30f4:	86 e0       	ldi	r24, 0x06	; 6
    30f6:	fe 01       	movw	r30, r28
    30f8:	37 96       	adiw	r30, 0x07	; 7
    30fa:	de 01       	movw	r26, r28
    30fc:	11 96       	adiw	r26, 0x01	; 1
    30fe:	01 90       	ld	r0, Z+
    3100:	0d 92       	st	X+, r0
    3102:	8a 95       	dec	r24
    3104:	e1 f7       	brne	.-8      	; 0x30fe <action_tapping_process+0x52>
    3106:	6f 81       	ldd	r22, Y+7	; 0x07
    3108:	78 85       	ldd	r23, Y+8	; 0x08
    310a:	ea 85       	ldd	r30, Y+10	; 0x0a
    310c:	fb 85       	ldd	r31, Y+11	; 0x0b
    310e:	30 97       	sbiw	r30, 0x00	; 0
    3110:	41 f1       	breq	.+80     	; 0x3162 <action_tapping_process+0xb6>
    3112:	7f 3f       	cpi	r23, 0xFF	; 255
    3114:	11 f4       	brne	.+4      	; 0x311a <action_tapping_process+0x6e>
    3116:	6f 3f       	cpi	r22, 0xFF	; 255
    3118:	21 f1       	breq	.+72     	; 0x3162 <action_tapping_process+0xb6>
{
    if (IS_NOEVENT(record.event)) {
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    311a:	20 91 77 01 	lds	r18, 0x0177
    311e:	30 e0       	ldi	r19, 0x00	; 0
    3120:	c9 01       	movw	r24, r18
    3122:	01 96       	adiw	r24, 0x01	; 1
    3124:	87 70       	andi	r24, 0x07	; 7
    3126:	99 27       	eor	r25, r25
    3128:	40 91 76 01 	lds	r20, 0x0176
    312c:	50 e0       	ldi	r21, 0x00	; 0
    312e:	84 17       	cp	r24, r20
    3130:	95 07       	cpc	r25, r21
    3132:	09 f4       	brne	.+2      	; 0x3136 <action_tapping_process+0x8a>
    3134:	47 c0       	rjmp	.+142    	; 0x31c4 <action_tapping_process+0x118>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    3136:	69 83       	std	Y+1, r22	; 0x01
    3138:	7a 83       	std	Y+2, r23	; 0x02
    313a:	fd 83       	std	Y+5, r31	; 0x05
    313c:	ec 83       	std	Y+4, r30	; 0x04
    313e:	96 e0       	ldi	r25, 0x06	; 6
    3140:	92 9f       	mul	r25, r18
    3142:	d0 01       	movw	r26, r0
    3144:	93 9f       	mul	r25, r19
    3146:	b0 0d       	add	r27, r0
    3148:	11 24       	eor	r1, r1
    314a:	a8 58       	subi	r26, 0x88	; 136
    314c:	be 4f       	sbci	r27, 0xFE	; 254
    314e:	fe 01       	movw	r30, r28
    3150:	31 96       	adiw	r30, 0x01	; 1
    3152:	01 90       	ld	r0, Z+
    3154:	0d 92       	st	X+, r0
    3156:	9a 95       	dec	r25
    3158:	e1 f7       	brne	.-8      	; 0x3152 <action_tapping_process+0xa6>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    315a:	80 93 77 01 	sts	0x0177, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    315e:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <debug_waiting_buffer>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3162:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3164:	80 91 76 01 	lds	r24, 0x0176
    3168:	90 91 77 01 	lds	r25, 0x0177
    316c:	89 17       	cp	r24, r25
    316e:	c1 f1       	breq	.+112    	; 0x31e0 <action_tapping_process+0x134>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3170:	18 9f       	mul	r17, r24
    3172:	c0 01       	movw	r24, r0
    3174:	11 24       	eor	r1, r1
    3176:	88 58       	subi	r24, 0x88	; 136
    3178:	9e 4f       	sbci	r25, 0xFE	; 254
    317a:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <process_tapping>
    317e:	88 23       	and	r24, r24
    3180:	79 f1       	breq	.+94     	; 0x31e0 <action_tapping_process+0x134>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    3182:	e0 91 76 01 	lds	r30, 0x0176
    3186:	1e 9f       	mul	r17, r30
    3188:	f0 01       	movw	r30, r0
    318a:	11 24       	eor	r1, r1
    318c:	e8 58       	subi	r30, 0x88	; 136
    318e:	fe 4f       	sbci	r31, 0xFE	; 254
    3190:	40 81       	ld	r20, Z
    3192:	51 81       	ldd	r21, Z+1	; 0x01
    3194:	62 81       	ldd	r22, Z+2	; 0x02
    3196:	73 81       	ldd	r23, Z+3	; 0x03
    3198:	84 81       	ldd	r24, Z+4	; 0x04
    319a:	95 81       	ldd	r25, Z+5	; 0x05
    319c:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    31a0:	80 91 76 01 	lds	r24, 0x0176
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	01 96       	adiw	r24, 0x01	; 1
    31a8:	87 70       	andi	r24, 0x07	; 7
    31aa:	99 27       	eor	r25, r25
    31ac:	80 93 76 01 	sts	0x0176, r24
    31b0:	d9 cf       	rjmp	.-78     	; 0x3164 <action_tapping_process+0xb8>

void action_tapping_process(keyrecord_t record)
{
    if (process_tapping(&record)) {
        if (!IS_NOEVENT(record.event)) {
            debug("processed: "); debug_record(record); debug("\n");
    31b2:	4f 81       	ldd	r20, Y+7	; 0x07
    31b4:	58 85       	ldd	r21, Y+8	; 0x08
    31b6:	69 85       	ldd	r22, Y+9	; 0x09
    31b8:	7a 85       	ldd	r23, Y+10	; 0x0a
    31ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    31bc:	9c 85       	ldd	r25, Y+12	; 0x0c
    31be:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <debug_record>
    31c2:	cf cf       	rjmp	.-98     	; 0x3162 <action_tapping_process+0xb6>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    31c4:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    31c8:	10 92 77 01 	sts	0x0177, r1
    waiting_buffer_tail = 0;
    31cc:	10 92 76 01 	sts	0x0176, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    31d0:	e8 ea       	ldi	r30, 0xA8	; 168
    31d2:	f1 e0       	ldi	r31, 0x01	; 1
    31d4:	86 e0       	ldi	r24, 0x06	; 6
    31d6:	df 01       	movw	r26, r30
    31d8:	1d 92       	st	X+, r1
    31da:	8a 95       	dec	r24
    31dc:	e9 f7       	brne	.-6      	; 0x31d8 <action_tapping_process+0x12c>
    31de:	c1 cf       	rjmp	.-126    	; 0x3162 <action_tapping_process+0xb6>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    31e0:	2c 96       	adiw	r28, 0x0c	; 12
    31e2:	0f b6       	in	r0, 0x3f	; 63
    31e4:	f8 94       	cli
    31e6:	de bf       	out	0x3e, r29	; 62
    31e8:	0f be       	out	0x3f, r0	; 63
    31ea:	cd bf       	out	0x3d, r28	; 61
    31ec:	df 91       	pop	r29
    31ee:	cf 91       	pop	r28
    31f0:	1f 91       	pop	r17
    31f2:	08 95       	ret

000031f4 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    31f4:	ef 92       	push	r14
    31f6:	ff 92       	push	r15
    31f8:	0f 93       	push	r16
    31fa:	1f 93       	push	r17
    31fc:	cf 93       	push	r28
    31fe:	df 93       	push	r29
    3200:	8c 01       	movw	r16, r24
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    3202:	89 2b       	or	r24, r25
    3204:	09 f4       	brne	.+2      	; 0x3208 <action_macro_play+0x14>
    3206:	6c c0       	rjmp	.+216    	; 0x32e0 <action_macro_play+0xec>
    3208:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    320a:	ee 24       	eor	r14, r14
    320c:	e3 94       	inc	r14
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    320e:	e8 01       	movw	r28, r16
    3210:	21 96       	adiw	r28, 0x01	; 1
    3212:	f8 01       	movw	r30, r16
    3214:	84 91       	lpm	r24, Z
    3216:	84 37       	cpi	r24, 0x74	; 116
    3218:	40 f4       	brcc	.+16     	; 0x322a <action_macro_play+0x36>
    321a:	84 30       	cpi	r24, 0x04	; 4
    321c:	08 f0       	brcs	.+2      	; 0x3220 <action_macro_play+0x2c>
    321e:	51 c0       	rjmp	.+162    	; 0x32c2 <action_macro_play+0xce>
    3220:	81 30       	cpi	r24, 0x01	; 1
    3222:	81 f0       	breq	.+32     	; 0x3244 <action_macro_play+0x50>
    3224:	82 30       	cpi	r24, 0x02	; 2
    3226:	19 f1       	breq	.+70     	; 0x326e <action_macro_play+0x7a>
    3228:	5b c0       	rjmp	.+182    	; 0x32e0 <action_macro_play+0xec>
    322a:	85 37       	cpi	r24, 0x75	; 117
    322c:	09 f4       	brne	.+2      	; 0x3230 <action_macro_play+0x3c>
    322e:	44 c0       	rjmp	.+136    	; 0x32b8 <action_macro_play+0xc4>
    3230:	a8 f1       	brcs	.+106    	; 0x329c <action_macro_play+0xa8>
    3232:	9c e7       	ldi	r25, 0x7C	; 124
    3234:	98 0f       	add	r25, r24
    3236:	90 37       	cpi	r25, 0x70	; 112
    3238:	08 f0       	brcs	.+2      	; 0x323c <action_macro_play+0x48>
    323a:	52 c0       	rjmp	.+164    	; 0x32e0 <action_macro_play+0xec>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    323c:	8f 77       	andi	r24, 0x7F	; 127
    323e:	0e 94 4d 12 	call	0x249a	; 0x249a <unregister_code>
    3242:	41 c0       	rjmp	.+130    	; 0x32c6 <action_macro_play+0xd2>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    3244:	0e 5f       	subi	r16, 0xFE	; 254
    3246:	1f 4f       	sbci	r17, 0xFF	; 255
    3248:	fe 01       	movw	r30, r28
    324a:	c4 91       	lpm	r28, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    324c:	80 e2       	ldi	r24, 0x20	; 32
    324e:	8c 0f       	add	r24, r28
    3250:	88 30       	cpi	r24, 0x08	; 8
    3252:	48 f4       	brcc	.+18     	; 0x3266 <action_macro_play+0x72>
                    add_weak_mods(MOD_BIT(macro));
    3254:	c7 70       	andi	r28, 0x07	; 7
    3256:	8e 2d       	mov	r24, r14
    3258:	01 c0       	rjmp	.+2      	; 0x325c <action_macro_play+0x68>
    325a:	88 0f       	add	r24, r24
    325c:	ca 95       	dec	r28
    325e:	ea f7       	brpl	.-6      	; 0x325a <action_macro_play+0x66>
    3260:	0e 94 aa 1b 	call	0x3754	; 0x3754 <add_weak_mods>
    3264:	14 c0       	rjmp	.+40     	; 0x328e <action_macro_play+0x9a>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    3266:	8c 2f       	mov	r24, r28
    3268:	0e 94 ae 11 	call	0x235c	; 0x235c <register_code>
    326c:	2d c0       	rjmp	.+90     	; 0x32c8 <action_macro_play+0xd4>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    326e:	0e 5f       	subi	r16, 0xFE	; 254
    3270:	1f 4f       	sbci	r17, 0xFF	; 255
    3272:	fe 01       	movw	r30, r28
    3274:	c4 91       	lpm	r28, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    3276:	80 e2       	ldi	r24, 0x20	; 32
    3278:	8c 0f       	add	r24, r28
    327a:	88 30       	cpi	r24, 0x08	; 8
    327c:	58 f4       	brcc	.+22     	; 0x3294 <action_macro_play+0xa0>
                    del_weak_mods(MOD_BIT(macro));
    327e:	c7 70       	andi	r28, 0x07	; 7
    3280:	8e 2d       	mov	r24, r14
    3282:	01 c0       	rjmp	.+2      	; 0x3286 <action_macro_play+0x92>
    3284:	88 0f       	add	r24, r24
    3286:	ca 95       	dec	r28
    3288:	ea f7       	brpl	.-6      	; 0x3284 <action_macro_play+0x90>
    328a:	0e 94 b0 1b 	call	0x3760	; 0x3760 <del_weak_mods>
                    send_keyboard_report();
    328e:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <send_keyboard_report>
    3292:	1a c0       	rjmp	.+52     	; 0x32c8 <action_macro_play+0xd4>
                } else {
                    unregister_code(macro);
    3294:	8c 2f       	mov	r24, r28
    3296:	0e 94 4d 12 	call	0x249a	; 0x249a <unregister_code>
    329a:	16 c0       	rjmp	.+44     	; 0x32c8 <action_macro_play+0xd4>
                }
                break;
            case WAIT:
                MACRO_READ();
    329c:	0e 5f       	subi	r16, 0xFE	; 254
    329e:	1f 4f       	sbci	r17, 0xFF	; 255
    32a0:	fe 01       	movw	r30, r28
    32a2:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    32a4:	cc 23       	and	r28, r28
    32a6:	81 f0       	breq	.+32     	; 0x32c8 <action_macro_play+0xd4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    32a8:	8f e9       	ldi	r24, 0x9F	; 159
    32aa:	9f e0       	ldi	r25, 0x0F	; 15
    32ac:	01 97       	sbiw	r24, 0x01	; 1
    32ae:	f1 f7       	brne	.-4      	; 0x32ac <action_macro_play+0xb8>
    32b0:	00 c0       	rjmp	.+0      	; 0x32b2 <action_macro_play+0xbe>
    32b2:	00 00       	nop
    32b4:	c1 50       	subi	r28, 0x01	; 1
    32b6:	f6 cf       	rjmp	.-20     	; 0x32a4 <action_macro_play+0xb0>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    32b8:	0e 5f       	subi	r16, 0xFE	; 254
    32ba:	1f 4f       	sbci	r17, 0xFF	; 255
    32bc:	fe 01       	movw	r30, r28
    32be:	f4 90       	lpm	r15, Z
                dprintf("INTERVAL(%u)\n", interval);
                break;
    32c0:	03 c0       	rjmp	.+6      	; 0x32c8 <action_macro_play+0xd4>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    32c2:	0e 94 ae 11 	call	0x235c	; 0x235c <register_code>
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    32c6:	8e 01       	movw	r16, r28
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    32c8:	8f 2d       	mov	r24, r15
    32ca:	88 23       	and	r24, r24
    32cc:	09 f4       	brne	.+2      	; 0x32d0 <action_macro_play+0xdc>
    32ce:	9f cf       	rjmp	.-194    	; 0x320e <action_macro_play+0x1a>
    32d0:	ef e9       	ldi	r30, 0x9F	; 159
    32d2:	ff e0       	ldi	r31, 0x0F	; 15
    32d4:	31 97       	sbiw	r30, 0x01	; 1
    32d6:	f1 f7       	brne	.-4      	; 0x32d4 <action_macro_play+0xe0>
    32d8:	00 c0       	rjmp	.+0      	; 0x32da <action_macro_play+0xe6>
    32da:	00 00       	nop
    32dc:	81 50       	subi	r24, 0x01	; 1
    32de:	f5 cf       	rjmp	.-22     	; 0x32ca <action_macro_play+0xd6>
    }
}
    32e0:	df 91       	pop	r29
    32e2:	cf 91       	pop	r28
    32e4:	1f 91       	pop	r17
    32e6:	0f 91       	pop	r16
    32e8:	ff 90       	pop	r15
    32ea:	ef 90       	pop	r14
    32ec:	08 95       	ret

000032ee <default_layer_debug>:
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void default_layer_debug(void)
{
    32ee:	08 95       	ret

000032f0 <default_layer_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    32f0:	60 93 b2 01 	sts	0x01B2, r22
    32f4:	70 93 b3 01 	sts	0x01B3, r23
    32f8:	80 93 b4 01 	sts	0x01B4, r24
    32fc:	90 93 b5 01 	sts	0x01B5, r25
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3300:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <clear_keyboard_but_mods>

00003304 <default_layer_or>:
    default_layer_state_set(state);
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    3304:	0f 93       	push	r16
    3306:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    3308:	00 91 b2 01 	lds	r16, 0x01B2
    330c:	10 91 b3 01 	lds	r17, 0x01B3
    3310:	20 91 b4 01 	lds	r18, 0x01B4
    3314:	30 91 b5 01 	lds	r19, 0x01B5
    3318:	dc 01       	movw	r26, r24
    331a:	cb 01       	movw	r24, r22
    331c:	80 2b       	or	r24, r16
    331e:	91 2b       	or	r25, r17
    3320:	a2 2b       	or	r26, r18
    3322:	b3 2b       	or	r27, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3324:	80 93 b2 01 	sts	0x01B2, r24
    3328:	90 93 b3 01 	sts	0x01B3, r25
    332c:	a0 93 b4 01 	sts	0x01B4, r26
    3330:	b0 93 b5 01 	sts	0x01B5, r27

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
    3334:	1f 91       	pop	r17
    3336:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3338:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <clear_keyboard_but_mods>

0000333c <default_layer_and>:
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    333c:	0f 93       	push	r16
    333e:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    3340:	00 91 b2 01 	lds	r16, 0x01B2
    3344:	10 91 b3 01 	lds	r17, 0x01B3
    3348:	20 91 b4 01 	lds	r18, 0x01B4
    334c:	30 91 b5 01 	lds	r19, 0x01B5
    3350:	dc 01       	movw	r26, r24
    3352:	cb 01       	movw	r24, r22
    3354:	80 23       	and	r24, r16
    3356:	91 23       	and	r25, r17
    3358:	a2 23       	and	r26, r18
    335a:	b3 23       	and	r27, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    335c:	80 93 b2 01 	sts	0x01B2, r24
    3360:	90 93 b3 01 	sts	0x01B3, r25
    3364:	a0 93 b4 01 	sts	0x01B4, r26
    3368:	b0 93 b5 01 	sts	0x01B5, r27
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
    336c:	1f 91       	pop	r17
    336e:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3370:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <clear_keyboard_but_mods>

00003374 <default_layer_xor>:
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    3374:	0f 93       	push	r16
    3376:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    3378:	00 91 b2 01 	lds	r16, 0x01B2
    337c:	10 91 b3 01 	lds	r17, 0x01B3
    3380:	20 91 b4 01 	lds	r18, 0x01B4
    3384:	30 91 b5 01 	lds	r19, 0x01B5
    3388:	dc 01       	movw	r26, r24
    338a:	cb 01       	movw	r24, r22
    338c:	80 27       	eor	r24, r16
    338e:	91 27       	eor	r25, r17
    3390:	a2 27       	eor	r26, r18
    3392:	b3 27       	eor	r27, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3394:	80 93 b2 01 	sts	0x01B2, r24
    3398:	90 93 b3 01 	sts	0x01B3, r25
    339c:	a0 93 b4 01 	sts	0x01B4, r26
    33a0:	b0 93 b5 01 	sts	0x01B5, r27
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
}
    33a4:	1f 91       	pop	r17
    33a6:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    33a8:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <clear_keyboard_but_mods>

000033ac <layer_clear>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    33ac:	10 92 ae 01 	sts	0x01AE, r1
    33b0:	10 92 af 01 	sts	0x01AF, r1
    33b4:	10 92 b0 01 	sts	0x01B0, r1
    33b8:	10 92 b1 01 	sts	0x01B1, r1
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    33bc:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <clear_keyboard_but_mods>

000033c0 <layer_move>:
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    33c0:	41 e0       	ldi	r20, 0x01	; 1
    33c2:	50 e0       	ldi	r21, 0x00	; 0
    33c4:	60 e0       	ldi	r22, 0x00	; 0
    33c6:	70 e0       	ldi	r23, 0x00	; 0
    33c8:	04 c0       	rjmp	.+8      	; 0x33d2 <layer_move+0x12>
    33ca:	44 0f       	add	r20, r20
    33cc:	55 1f       	adc	r21, r21
    33ce:	66 1f       	adc	r22, r22
    33d0:	77 1f       	adc	r23, r23
    33d2:	8a 95       	dec	r24
    33d4:	d2 f7       	brpl	.-12     	; 0x33ca <layer_move+0xa>

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    33d6:	40 93 ae 01 	sts	0x01AE, r20
    33da:	50 93 af 01 	sts	0x01AF, r21
    33de:	60 93 b0 01 	sts	0x01B0, r22
    33e2:	70 93 b1 01 	sts	0x01B1, r23
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    33e6:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <clear_keyboard_but_mods>

000033ea <layer_on>:
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    33ea:	41 e0       	ldi	r20, 0x01	; 1
    33ec:	50 e0       	ldi	r21, 0x00	; 0
    33ee:	60 e0       	ldi	r22, 0x00	; 0
    33f0:	70 e0       	ldi	r23, 0x00	; 0
    33f2:	04 c0       	rjmp	.+8      	; 0x33fc <layer_on+0x12>
    33f4:	44 0f       	add	r20, r20
    33f6:	55 1f       	adc	r21, r21
    33f8:	66 1f       	adc	r22, r22
    33fa:	77 1f       	adc	r23, r23
    33fc:	8a 95       	dec	r24
    33fe:	d2 f7       	brpl	.-12     	; 0x33f4 <layer_on+0xa>
    3400:	80 91 ae 01 	lds	r24, 0x01AE
    3404:	90 91 af 01 	lds	r25, 0x01AF
    3408:	a0 91 b0 01 	lds	r26, 0x01B0
    340c:	b0 91 b1 01 	lds	r27, 0x01B1
    3410:	48 2b       	or	r20, r24
    3412:	59 2b       	or	r21, r25
    3414:	6a 2b       	or	r22, r26
    3416:	7b 2b       	or	r23, r27

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3418:	40 93 ae 01 	sts	0x01AE, r20
    341c:	50 93 af 01 	sts	0x01AF, r21
    3420:	60 93 b0 01 	sts	0x01B0, r22
    3424:	70 93 b1 01 	sts	0x01B1, r23
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3428:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <clear_keyboard_but_mods>

0000342c <layer_off>:
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    342c:	41 e0       	ldi	r20, 0x01	; 1
    342e:	50 e0       	ldi	r21, 0x00	; 0
    3430:	60 e0       	ldi	r22, 0x00	; 0
    3432:	70 e0       	ldi	r23, 0x00	; 0
    3434:	04 c0       	rjmp	.+8      	; 0x343e <layer_off+0x12>
    3436:	44 0f       	add	r20, r20
    3438:	55 1f       	adc	r21, r21
    343a:	66 1f       	adc	r22, r22
    343c:	77 1f       	adc	r23, r23
    343e:	8a 95       	dec	r24
    3440:	d2 f7       	brpl	.-12     	; 0x3436 <layer_off+0xa>
    3442:	40 95       	com	r20
    3444:	50 95       	com	r21
    3446:	60 95       	com	r22
    3448:	70 95       	com	r23
    344a:	80 91 ae 01 	lds	r24, 0x01AE
    344e:	90 91 af 01 	lds	r25, 0x01AF
    3452:	a0 91 b0 01 	lds	r26, 0x01B0
    3456:	b0 91 b1 01 	lds	r27, 0x01B1
    345a:	48 23       	and	r20, r24
    345c:	59 23       	and	r21, r25
    345e:	6a 23       	and	r22, r26
    3460:	7b 23       	and	r23, r27

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3462:	40 93 ae 01 	sts	0x01AE, r20
    3466:	50 93 af 01 	sts	0x01AF, r21
    346a:	60 93 b0 01 	sts	0x01B0, r22
    346e:	70 93 b1 01 	sts	0x01B1, r23
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3472:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <clear_keyboard_but_mods>

00003476 <layer_invert>:
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    3476:	41 e0       	ldi	r20, 0x01	; 1
    3478:	50 e0       	ldi	r21, 0x00	; 0
    347a:	60 e0       	ldi	r22, 0x00	; 0
    347c:	70 e0       	ldi	r23, 0x00	; 0
    347e:	04 c0       	rjmp	.+8      	; 0x3488 <layer_invert+0x12>
    3480:	44 0f       	add	r20, r20
    3482:	55 1f       	adc	r21, r21
    3484:	66 1f       	adc	r22, r22
    3486:	77 1f       	adc	r23, r23
    3488:	8a 95       	dec	r24
    348a:	d2 f7       	brpl	.-12     	; 0x3480 <layer_invert+0xa>
    348c:	80 91 ae 01 	lds	r24, 0x01AE
    3490:	90 91 af 01 	lds	r25, 0x01AF
    3494:	a0 91 b0 01 	lds	r26, 0x01B0
    3498:	b0 91 b1 01 	lds	r27, 0x01B1
    349c:	48 27       	eor	r20, r24
    349e:	59 27       	eor	r21, r25
    34a0:	6a 27       	eor	r22, r26
    34a2:	7b 27       	eor	r23, r27

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    34a4:	40 93 ae 01 	sts	0x01AE, r20
    34a8:	50 93 af 01 	sts	0x01AF, r21
    34ac:	60 93 b0 01 	sts	0x01B0, r22
    34b0:	70 93 b1 01 	sts	0x01B1, r23
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    34b4:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <clear_keyboard_but_mods>

000034b8 <layer_or>:
{
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    34b8:	0f 93       	push	r16
    34ba:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    34bc:	00 91 ae 01 	lds	r16, 0x01AE
    34c0:	10 91 af 01 	lds	r17, 0x01AF
    34c4:	20 91 b0 01 	lds	r18, 0x01B0
    34c8:	30 91 b1 01 	lds	r19, 0x01B1
    34cc:	dc 01       	movw	r26, r24
    34ce:	cb 01       	movw	r24, r22
    34d0:	80 2b       	or	r24, r16
    34d2:	91 2b       	or	r25, r17
    34d4:	a2 2b       	or	r26, r18
    34d6:	b3 2b       	or	r27, r19

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    34d8:	80 93 ae 01 	sts	0x01AE, r24
    34dc:	90 93 af 01 	sts	0x01AF, r25
    34e0:	a0 93 b0 01 	sts	0x01B0, r26
    34e4:	b0 93 b1 01 	sts	0x01B1, r27
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
    34e8:	1f 91       	pop	r17
    34ea:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    34ec:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <clear_keyboard_but_mods>

000034f0 <layer_and>:
void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    34f0:	0f 93       	push	r16
    34f2:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    34f4:	00 91 ae 01 	lds	r16, 0x01AE
    34f8:	10 91 af 01 	lds	r17, 0x01AF
    34fc:	20 91 b0 01 	lds	r18, 0x01B0
    3500:	30 91 b1 01 	lds	r19, 0x01B1
    3504:	dc 01       	movw	r26, r24
    3506:	cb 01       	movw	r24, r22
    3508:	80 23       	and	r24, r16
    350a:	91 23       	and	r25, r17
    350c:	a2 23       	and	r26, r18
    350e:	b3 23       	and	r27, r19

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3510:	80 93 ae 01 	sts	0x01AE, r24
    3514:	90 93 af 01 	sts	0x01AF, r25
    3518:	a0 93 b0 01 	sts	0x01B0, r26
    351c:	b0 93 b1 01 	sts	0x01B1, r27
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
    3520:	1f 91       	pop	r17
    3522:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3524:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <clear_keyboard_but_mods>

00003528 <layer_xor>:
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    3528:	0f 93       	push	r16
    352a:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    352c:	00 91 ae 01 	lds	r16, 0x01AE
    3530:	10 91 af 01 	lds	r17, 0x01AF
    3534:	20 91 b0 01 	lds	r18, 0x01B0
    3538:	30 91 b1 01 	lds	r19, 0x01B1
    353c:	dc 01       	movw	r26, r24
    353e:	cb 01       	movw	r24, r22
    3540:	80 27       	eor	r24, r16
    3542:	91 27       	eor	r25, r17
    3544:	a2 27       	eor	r26, r18
    3546:	b3 27       	eor	r27, r19

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3548:	80 93 ae 01 	sts	0x01AE, r24
    354c:	90 93 af 01 	sts	0x01AF, r25
    3550:	a0 93 b0 01 	sts	0x01B0, r26
    3554:	b0 93 b1 01 	sts	0x01B1, r27
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
}
    3558:	1f 91       	pop	r17
    355a:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    355c:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <clear_keyboard_but_mods>

00003560 <layer_debug>:
{
    layer_state_set(layer_state ^ state);
}

void layer_debug(void)
{
    3560:	08 95       	ret

00003562 <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    3562:	cf 92       	push	r12
    3564:	df 92       	push	r13
    3566:	ef 92       	push	r14
    3568:	ff 92       	push	r15
    356a:	0f 93       	push	r16
    356c:	1f 93       	push	r17
    356e:	cf 93       	push	r28
    3570:	df 93       	push	r29
    3572:	8c 01       	movw	r16, r24
    action_t action;
    action.code = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    3574:	c0 90 b2 01 	lds	r12, 0x01B2
    3578:	d0 90 b3 01 	lds	r13, 0x01B3
    357c:	e0 90 b4 01 	lds	r14, 0x01B4
    3580:	f0 90 b5 01 	lds	r15, 0x01B5
    3584:	40 91 ae 01 	lds	r20, 0x01AE
    3588:	50 91 af 01 	lds	r21, 0x01AF
    358c:	60 91 b0 01 	lds	r22, 0x01B0
    3590:	70 91 b1 01 	lds	r23, 0x01B1
    3594:	c4 2a       	or	r12, r20
    3596:	d5 2a       	or	r13, r21
    3598:	e6 2a       	or	r14, r22
    359a:	f7 2a       	or	r15, r23
    359c:	cf e1       	ldi	r28, 0x1F	; 31
    359e:	d0 e0       	ldi	r29, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    35a0:	d7 01       	movw	r26, r14
    35a2:	c6 01       	movw	r24, r12
    35a4:	0c 2e       	mov	r0, r28
    35a6:	04 c0       	rjmp	.+8      	; 0x35b0 <layer_switch_get_action+0x4e>
    35a8:	b6 95       	lsr	r27
    35aa:	a7 95       	ror	r26
    35ac:	97 95       	ror	r25
    35ae:	87 95       	ror	r24
    35b0:	0a 94       	dec	r0
    35b2:	d2 f7       	brpl	.-12     	; 0x35a8 <layer_switch_get_action+0x46>
    35b4:	80 ff       	sbrs	r24, 0
    35b6:	07 c0       	rjmp	.+14     	; 0x35c6 <layer_switch_get_action+0x64>
            action = action_for_key(i, key);
    35b8:	b8 01       	movw	r22, r16
    35ba:	8c 2f       	mov	r24, r28
    35bc:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <action_for_key>
            if (action.code != ACTION_TRANSPARENT) {
    35c0:	81 30       	cpi	r24, 0x01	; 1
    35c2:	91 05       	cpc	r25, r1
    35c4:	31 f4       	brne	.+12     	; 0x35d2 <layer_switch_get_action+0x70>
    35c6:	21 97       	sbiw	r28, 0x01	; 1
    35c8:	58 f7       	brcc	.-42     	; 0x35a0 <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    35ca:	b8 01       	movw	r22, r16
    35cc:	80 e0       	ldi	r24, 0x00	; 0
    35ce:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    35d2:	df 91       	pop	r29
    35d4:	cf 91       	pop	r28
    35d6:	1f 91       	pop	r17
    35d8:	0f 91       	pop	r16
    35da:	ff 90       	pop	r15
    35dc:	ef 90       	pop	r14
    35de:	df 90       	pop	r13
    35e0:	cf 90       	pop	r12
    35e2:	08 95       	ret

000035e4 <add_key>:

/* key */
void add_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    35e4:	90 91 0a 01 	lds	r25, 0x010A
    35e8:	99 23       	and	r25, r25
    35ea:	21 f0       	breq	.+8      	; 0x35f4 <add_key+0x10>
    35ec:	90 91 0b 01 	lds	r25, 0x010B
    35f0:	91 11       	cpse	r25, r1
    35f2:	09 c0       	rjmp	.+18     	; 0x3606 <add_key+0x22>
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    35f4:	20 91 0c 01 	lds	r18, 0x010C
    35f8:	30 91 0d 01 	lds	r19, 0x010D
    35fc:	f9 01       	movw	r30, r18
    35fe:	32 96       	adiw	r30, 0x02	; 2
    3600:	9f ef       	ldi	r25, 0xFF	; 255
    3602:	40 e0       	ldi	r20, 0x00	; 0
    3604:	30 c0       	rjmp	.+96     	; 0x3666 <add_key+0x82>
}

#ifdef NKRO_ENABLE
static inline void add_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    3606:	98 2f       	mov	r25, r24
    3608:	96 95       	lsr	r25
    360a:	96 95       	lsr	r25
    360c:	96 95       	lsr	r25
    360e:	9f 30       	cpi	r25, 0x0F	; 15
    3610:	a0 f4       	brcc	.+40     	; 0x363a <add_key+0x56>
        keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
    3612:	e0 91 0c 01 	lds	r30, 0x010C
    3616:	f0 91 0d 01 	lds	r31, 0x010D
    361a:	e9 0f       	add	r30, r25
    361c:	f1 1d       	adc	r31, r1
    361e:	87 70       	andi	r24, 0x07	; 7
    3620:	21 e0       	ldi	r18, 0x01	; 1
    3622:	30 e0       	ldi	r19, 0x00	; 0
    3624:	a9 01       	movw	r20, r18
    3626:	02 c0       	rjmp	.+4      	; 0x362c <add_key+0x48>
    3628:	44 0f       	add	r20, r20
    362a:	55 1f       	adc	r21, r21
    362c:	8a 95       	dec	r24
    362e:	e2 f7       	brpl	.-8      	; 0x3628 <add_key+0x44>
    3630:	ca 01       	movw	r24, r20
    3632:	91 81       	ldd	r25, Z+1	; 0x01
    3634:	89 2b       	or	r24, r25
    3636:	81 83       	std	Z+1, r24	; 0x01
    3638:	08 95       	ret
    } else {
        dprintf("add_key_bit: can't add: %02X\n", code);
    363a:	90 91 cb 01 	lds	r25, 0x01CB
    363e:	90 ff       	sbrs	r25, 0
    3640:	23 c0       	rjmp	.+70     	; 0x3688 <add_key+0xa4>
    3642:	1f 92       	push	r1
    3644:	8f 93       	push	r24
    3646:	85 e9       	ldi	r24, 0x95	; 149
    3648:	94 e0       	ldi	r25, 0x04	; 4
    364a:	9f 93       	push	r25
    364c:	8f 93       	push	r24
    364e:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    3652:	0f 90       	pop	r0
    3654:	0f 90       	pop	r0
    3656:	0f 90       	pop	r0
    3658:	0f 90       	pop	r0
    365a:	08 95       	ret
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    365c:	9f 3f       	cpi	r25, 0xFF	; 255
    365e:	39 f0       	breq	.+14     	; 0x366e <add_key+0x8a>
    3660:	4f 5f       	subi	r20, 0xFF	; 255
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    3662:	4e 30       	cpi	r20, 0x0E	; 14
    3664:	41 f0       	breq	.+16     	; 0x3676 <add_key+0x92>
        if (keyboard_report->keys[i] == code) {
    3666:	51 91       	ld	r21, Z+
    3668:	58 13       	cpse	r21, r24
    366a:	f8 cf       	rjmp	.-16     	; 0x365c <add_key+0x78>
    366c:	0d c0       	rjmp	.+26     	; 0x3688 <add_key+0xa4>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    366e:	51 11       	cpse	r21, r1
    3670:	f7 cf       	rjmp	.-18     	; 0x3660 <add_key+0x7c>
    3672:	94 2f       	mov	r25, r20
    3674:	f5 cf       	rjmp	.-22     	; 0x3660 <add_key+0x7c>
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    3676:	9f 3f       	cpi	r25, 0xFF	; 255
    3678:	39 f0       	breq	.+14     	; 0x3688 <add_key+0xa4>
            keyboard_report->keys[empty] = code;
    367a:	f9 01       	movw	r30, r18
    367c:	e9 0f       	add	r30, r25
    367e:	f1 1d       	adc	r31, r1
    3680:	97 fd       	sbrc	r25, 7
    3682:	fa 95       	dec	r31
    3684:	82 83       	std	Z+2, r24	; 0x02
    3686:	08 95       	ret
    3688:	08 95       	ret

0000368a <del_key>:
}

void del_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    368a:	90 91 0a 01 	lds	r25, 0x010A
    368e:	99 23       	and	r25, r25
    3690:	21 f0       	breq	.+8      	; 0x369a <del_key+0x10>
    3692:	90 91 0b 01 	lds	r25, 0x010B
    3696:	91 11       	cpse	r25, r1
    3698:	09 c0       	rjmp	.+18     	; 0x36ac <del_key+0x22>
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    369a:	20 91 0c 01 	lds	r18, 0x010C
    369e:	30 91 0d 01 	lds	r19, 0x010D
    36a2:	f9 01       	movw	r30, r18
    36a4:	32 96       	adiw	r30, 0x02	; 2
    36a6:	20 5f       	subi	r18, 0xF0	; 240
    36a8:	3f 4f       	sbci	r19, 0xFF	; 255
    36aa:	30 c0       	rjmp	.+96     	; 0x370c <del_key+0x82>
    }
}

static inline void del_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    36ac:	98 2f       	mov	r25, r24
    36ae:	96 95       	lsr	r25
    36b0:	96 95       	lsr	r25
    36b2:	96 95       	lsr	r25
    36b4:	9f 30       	cpi	r25, 0x0F	; 15
    36b6:	a8 f4       	brcc	.+42     	; 0x36e2 <del_key+0x58>
        keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
    36b8:	e0 91 0c 01 	lds	r30, 0x010C
    36bc:	f0 91 0d 01 	lds	r31, 0x010D
    36c0:	e9 0f       	add	r30, r25
    36c2:	f1 1d       	adc	r31, r1
    36c4:	87 70       	andi	r24, 0x07	; 7
    36c6:	21 e0       	ldi	r18, 0x01	; 1
    36c8:	30 e0       	ldi	r19, 0x00	; 0
    36ca:	a9 01       	movw	r20, r18
    36cc:	02 c0       	rjmp	.+4      	; 0x36d2 <del_key+0x48>
    36ce:	44 0f       	add	r20, r20
    36d0:	55 1f       	adc	r21, r21
    36d2:	8a 95       	dec	r24
    36d4:	e2 f7       	brpl	.-8      	; 0x36ce <del_key+0x44>
    36d6:	ca 01       	movw	r24, r20
    36d8:	80 95       	com	r24
    36da:	91 81       	ldd	r25, Z+1	; 0x01
    36dc:	89 23       	and	r24, r25
    36de:	81 83       	std	Z+1, r24	; 0x01
    36e0:	08 95       	ret
    } else {
        dprintf("del_key_bit: can't del: %02X\n", code);
    36e2:	90 91 cb 01 	lds	r25, 0x01CB
    36e6:	90 ff       	sbrs	r25, 0
    36e8:	16 c0       	rjmp	.+44     	; 0x3716 <del_key+0x8c>
    36ea:	1f 92       	push	r1
    36ec:	8f 93       	push	r24
    36ee:	87 e7       	ldi	r24, 0x77	; 119
    36f0:	94 e0       	ldi	r25, 0x04	; 4
    36f2:	9f 93       	push	r25
    36f4:	8f 93       	push	r24
    36f6:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    36fa:	0f 90       	pop	r0
    36fc:	0f 90       	pop	r0
    36fe:	0f 90       	pop	r0
    3700:	0f 90       	pop	r0
    3702:	08 95       	ret
    3704:	31 96       	adiw	r30, 0x01	; 1
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    3706:	e2 17       	cp	r30, r18
    3708:	f3 07       	cpc	r31, r19
    370a:	29 f0       	breq	.+10     	; 0x3716 <del_key+0x8c>
        if (keyboard_report->keys[i] == code) {
    370c:	90 81       	ld	r25, Z
    370e:	98 13       	cpse	r25, r24
    3710:	f9 cf       	rjmp	.-14     	; 0x3704 <del_key+0x7a>
            keyboard_report->keys[i] = 0;
    3712:	10 82       	st	Z, r1
    3714:	f7 cf       	rjmp	.-18     	; 0x3704 <del_key+0x7a>
    3716:	08 95       	ret

00003718 <clear_keys>:
#endif
    del_key_byte(key);
}

void clear_keys(void)
{
    3718:	81 e0       	ldi	r24, 0x01	; 1
    371a:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    371c:	e0 91 0c 01 	lds	r30, 0x010C
    3720:	f0 91 0d 01 	lds	r31, 0x010D
    3724:	e8 0f       	add	r30, r24
    3726:	f9 1f       	adc	r31, r25
    3728:	10 82       	st	Z, r1
    372a:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    372c:	80 31       	cpi	r24, 0x10	; 16
    372e:	91 05       	cpc	r25, r1
    3730:	a9 f7       	brne	.-22     	; 0x371c <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    3732:	08 95       	ret

00003734 <add_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
void add_mods(uint8_t mods) { real_mods |= mods; }
    3734:	90 91 ca 01 	lds	r25, 0x01CA
    3738:	89 2b       	or	r24, r25
    373a:	80 93 ca 01 	sts	0x01CA, r24
    373e:	08 95       	ret

00003740 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    3740:	80 95       	com	r24
    3742:	90 91 ca 01 	lds	r25, 0x01CA
    3746:	89 23       	and	r24, r25
    3748:	80 93 ca 01 	sts	0x01CA, r24
    374c:	08 95       	ret

0000374e <clear_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
void clear_mods(void) { real_mods = 0; }
    374e:	10 92 ca 01 	sts	0x01CA, r1
    3752:	08 95       	ret

00003754 <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    3754:	90 91 c9 01 	lds	r25, 0x01C9
    3758:	89 2b       	or	r24, r25
    375a:	80 93 c9 01 	sts	0x01C9, r24
    375e:	08 95       	ret

00003760 <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    3760:	80 95       	com	r24
    3762:	90 91 c9 01 	lds	r25, 0x01C9
    3766:	89 23       	and	r24, r25
    3768:	80 93 c9 01 	sts	0x01C9, r24
    376c:	08 95       	ret

0000376e <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    376e:	10 92 c9 01 	sts	0x01C9, r1
    3772:	08 95       	ret

00003774 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    3774:	80 93 b8 01 	sts	0x01B8, r24
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_time = timer_read();
    3778:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <timer_read>
    377c:	90 93 b7 01 	sts	0x01B7, r25
    3780:	80 93 b6 01 	sts	0x01B6, r24
    3784:	08 95       	ret

00003786 <clear_oneshot_mods>:
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3786:	10 92 b8 01 	sts	0x01B8, r1
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_time = 0;
    378a:	10 92 b7 01 	sts	0x01B7, r1
    378e:	10 92 b6 01 	sts	0x01B6, r1
    3792:	08 95       	ret

00003794 <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3794:	80 91 0c 01 	lds	r24, 0x010C
    3798:	90 91 0d 01 	lds	r25, 0x010D
    379c:	fc 01       	movw	r30, r24
    379e:	31 96       	adiw	r30, 0x01	; 1
    37a0:	9c 01       	movw	r18, r24
    37a2:	20 5f       	subi	r18, 0xF0	; 240
    37a4:	3f 4f       	sbci	r19, 0xFF	; 255
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    37a6:	80 e0       	ldi	r24, 0x00	; 0
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    37a8:	91 91       	ld	r25, Z+
    37aa:	91 11       	cpse	r25, r1
            cnt++;
    37ac:	8f 5f       	subi	r24, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    37ae:	e2 17       	cp	r30, r18
    37b0:	f3 07       	cpc	r31, r19
    37b2:	d1 f7       	brne	.-12     	; 0x37a8 <has_anykey+0x14>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    37b4:	08 95       	ret

000037b6 <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    37b6:	e0 91 0c 01 	lds	r30, 0x010C
    37ba:	f0 91 0d 01 	lds	r31, 0x010D
    37be:	80 91 ca 01 	lds	r24, 0x01CA
    37c2:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    37c4:	e0 91 0c 01 	lds	r30, 0x010C
    37c8:	f0 91 0d 01 	lds	r31, 0x010D
    37cc:	90 81       	ld	r25, Z
    37ce:	80 91 c9 01 	lds	r24, 0x01C9
    37d2:	89 2b       	or	r24, r25
    37d4:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    37d6:	80 91 b8 01 	lds	r24, 0x01B8
    37da:	88 23       	and	r24, r24
    37dc:	d9 f1       	breq	.+118    	; 0x3854 <send_keyboard_report+0x9e>
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
    37de:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <timer_read>
    37e2:	20 91 b6 01 	lds	r18, 0x01B6
    37e6:	30 91 b7 01 	lds	r19, 0x01B7
    37ea:	82 17       	cp	r24, r18
    37ec:	93 07       	cpc	r25, r19
    37ee:	48 f0       	brcs	.+18     	; 0x3802 <send_keyboard_report+0x4c>
    37f0:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <timer_read>
    37f4:	20 91 b6 01 	lds	r18, 0x01B6
    37f8:	30 91 b7 01 	lds	r19, 0x01B7
    37fc:	82 1b       	sub	r24, r18
    37fe:	93 0b       	sbc	r25, r19
    3800:	0a c0       	rjmp	.+20     	; 0x3816 <send_keyboard_report+0x60>
    3802:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <timer_read>
    3806:	20 91 b6 01 	lds	r18, 0x01B6
    380a:	30 91 b7 01 	lds	r19, 0x01B7
    380e:	20 95       	com	r18
    3810:	30 95       	com	r19
    3812:	82 0f       	add	r24, r18
    3814:	93 1f       	adc	r25, r19
    3816:	8c 32       	cpi	r24, 0x2C	; 44
    3818:	91 40       	sbci	r25, 0x01	; 1
    381a:	70 f0       	brcs	.+28     	; 0x3838 <send_keyboard_report+0x82>
            dprintf("Oneshot: timeout\n");
    381c:	80 91 cb 01 	lds	r24, 0x01CB
    3820:	80 ff       	sbrs	r24, 0
    3822:	08 c0       	rjmp	.+16     	; 0x3834 <send_keyboard_report+0x7e>
    3824:	83 eb       	ldi	r24, 0xB3	; 179
    3826:	94 e0       	ldi	r25, 0x04	; 4
    3828:	9f 93       	push	r25
    382a:	8f 93       	push	r24
    382c:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    3830:	0f 90       	pop	r0
    3832:	0f 90       	pop	r0
            clear_oneshot_mods();
    3834:	0e 94 c3 1b 	call	0x3786	; 0x3786 <clear_oneshot_mods>
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    3838:	e0 91 0c 01 	lds	r30, 0x010C
    383c:	f0 91 0d 01 	lds	r31, 0x010D
    3840:	90 81       	ld	r25, Z
    3842:	80 91 b8 01 	lds	r24, 0x01B8
    3846:	89 2b       	or	r24, r25
    3848:	80 83       	st	Z, r24
        if (has_anykey()) {
    384a:	0e 94 ca 1b 	call	0x3794	; 0x3794 <has_anykey>
    384e:	81 11       	cpse	r24, r1
            clear_oneshot_mods();
    3850:	0e 94 c3 1b 	call	0x3786	; 0x3786 <clear_oneshot_mods>
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    3854:	80 91 0c 01 	lds	r24, 0x010C
    3858:	90 91 0d 01 	lds	r25, 0x010D
    385c:	0c 94 2c 10 	jmp	0x2058	; 0x2058 <host_keyboard_send>

00003860 <keycode_to_action>:



/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    3860:	cf 93       	push	r28
    3862:	df 93       	push	r29
    action_t action;
    switch (keycode) {
    3864:	8d 3b       	cpi	r24, 0xBD	; 189
    3866:	50 f4       	brcc	.+20     	; 0x387c <keycode_to_action+0x1c>
    3868:	88 3a       	cpi	r24, 0xA8	; 168
    386a:	10 f5       	brcc	.+68     	; 0x38b0 <keycode_to_action+0x50>
    386c:	85 3a       	cpi	r24, 0xA5	; 165
    386e:	b8 f4       	brcc	.+46     	; 0x389e <keycode_to_action+0x3e>
    3870:	84 30       	cpi	r24, 0x04	; 4
    3872:	90 f4       	brcc	.+36     	; 0x3898 <keycode_to_action+0x38>
    3874:	81 30       	cpi	r24, 0x01	; 1
    3876:	09 f4       	brne	.+2      	; 0x387a <keycode_to_action+0x1a>
    3878:	6f c0       	rjmp	.+222    	; 0x3958 <keycode_to_action+0xf8>
    387a:	0b c0       	rjmp	.+22     	; 0x3892 <keycode_to_action+0x32>
    387c:	88 3e       	cpi	r24, 0xE8	; 232
    387e:	30 f4       	brcc	.+12     	; 0x388c <keycode_to_action+0x2c>
    3880:	80 3e       	cpi	r24, 0xE0	; 224
    3882:	50 f4       	brcc	.+20     	; 0x3898 <keycode_to_action+0x38>
    3884:	8f 3b       	cpi	r24, 0xBF	; 191
    3886:	09 f4       	brne	.+2      	; 0x388a <keycode_to_action+0x2a>
    3888:	59 c0       	rjmp	.+178    	; 0x393c <keycode_to_action+0xdc>
    388a:	03 c0       	rjmp	.+6      	; 0x3892 <keycode_to_action+0x32>
    388c:	80 3f       	cpi	r24, 0xF0	; 240
    388e:	08 f0       	brcs	.+2      	; 0x3892 <keycode_to_action+0x32>
    3890:	51 c0       	rjmp	.+162    	; 0x3934 <keycode_to_action+0xd4>
            clear_keyboard();
            wait_ms(50);
            bootloader_jump(); // not return
            break;
        default:
            action.code = ACTION_NO;
    3892:	c0 e0       	ldi	r28, 0x00	; 0
    3894:	d0 e0       	ldi	r29, 0x00	; 0
    3896:	a7 c0       	rjmp	.+334    	; 0x39e6 <keycode_to_action+0x186>
{
    action_t action;
    switch (keycode) {
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
    3898:	c8 2f       	mov	r28, r24
    389a:	d0 e0       	ldi	r29, 0x00	; 0
            break;
    389c:	a4 c0       	rjmp	.+328    	; 0x39e6 <keycode_to_action+0x186>
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    389e:	85 3a       	cpi	r24, 0xA5	; 165
    38a0:	09 f4       	brne	.+2      	; 0x38a4 <keycode_to_action+0x44>
    38a2:	5d c0       	rjmp	.+186    	; 0x395e <keycode_to_action+0xfe>
    38a4:	86 3a       	cpi	r24, 0xA6	; 166
    38a6:	09 f4       	brne	.+2      	; 0x38aa <keycode_to_action+0x4a>
    38a8:	5d c0       	rjmp	.+186    	; 0x3964 <keycode_to_action+0x104>
    38aa:	c3 e8       	ldi	r28, 0x83	; 131
    38ac:	d0 e4       	ldi	r29, 0x40	; 64
    38ae:	9b c0       	rjmp	.+310    	; 0x39e6 <keycode_to_action+0x186>
            break;
        case KC_AUDIO_MUTE ... KC_MEDIA_REWIND:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    38b0:	88 3a       	cpi	r24, 0xA8	; 168
    38b2:	09 f4       	brne	.+2      	; 0x38b6 <keycode_to_action+0x56>
    38b4:	5a c0       	rjmp	.+180    	; 0x396a <keycode_to_action+0x10a>
    38b6:	89 3a       	cpi	r24, 0xA9	; 169
    38b8:	09 f4       	brne	.+2      	; 0x38bc <keycode_to_action+0x5c>
    38ba:	5a c0       	rjmp	.+180    	; 0x3970 <keycode_to_action+0x110>
    38bc:	8a 3a       	cpi	r24, 0xAA	; 170
    38be:	09 f4       	brne	.+2      	; 0x38c2 <keycode_to_action+0x62>
    38c0:	5a c0       	rjmp	.+180    	; 0x3976 <keycode_to_action+0x116>
    38c2:	8b 3a       	cpi	r24, 0xAB	; 171
    38c4:	09 f4       	brne	.+2      	; 0x38c8 <keycode_to_action+0x68>
    38c6:	5a c0       	rjmp	.+180    	; 0x397c <keycode_to_action+0x11c>
    38c8:	8c 3a       	cpi	r24, 0xAC	; 172
    38ca:	09 f4       	brne	.+2      	; 0x38ce <keycode_to_action+0x6e>
    38cc:	5a c0       	rjmp	.+180    	; 0x3982 <keycode_to_action+0x122>
    38ce:	8b 3b       	cpi	r24, 0xBB	; 187
    38d0:	09 f4       	brne	.+2      	; 0x38d4 <keycode_to_action+0x74>
    38d2:	5a c0       	rjmp	.+180    	; 0x3988 <keycode_to_action+0x128>
    38d4:	8c 3b       	cpi	r24, 0xBC	; 188
    38d6:	09 f4       	brne	.+2      	; 0x38da <keycode_to_action+0x7a>
    38d8:	5a c0       	rjmp	.+180    	; 0x398e <keycode_to_action+0x12e>
    38da:	8d 3a       	cpi	r24, 0xAD	; 173
    38dc:	09 f4       	brne	.+2      	; 0x38e0 <keycode_to_action+0x80>
    38de:	5a c0       	rjmp	.+180    	; 0x3994 <keycode_to_action+0x134>
    38e0:	80 3b       	cpi	r24, 0xB0	; 176
    38e2:	09 f4       	brne	.+2      	; 0x38e6 <keycode_to_action+0x86>
    38e4:	5a c0       	rjmp	.+180    	; 0x399a <keycode_to_action+0x13a>
    38e6:	8e 3a       	cpi	r24, 0xAE	; 174
    38e8:	09 f4       	brne	.+2      	; 0x38ec <keycode_to_action+0x8c>
    38ea:	5a c0       	rjmp	.+180    	; 0x39a0 <keycode_to_action+0x140>
    38ec:	8f 3a       	cpi	r24, 0xAF	; 175
    38ee:	09 f4       	brne	.+2      	; 0x38f2 <keycode_to_action+0x92>
    38f0:	5a c0       	rjmp	.+180    	; 0x39a6 <keycode_to_action+0x146>
    38f2:	81 3b       	cpi	r24, 0xB1	; 177
    38f4:	09 f4       	brne	.+2      	; 0x38f8 <keycode_to_action+0x98>
    38f6:	5a c0       	rjmp	.+180    	; 0x39ac <keycode_to_action+0x14c>
    38f8:	82 3b       	cpi	r24, 0xB2	; 178
    38fa:	09 f4       	brne	.+2      	; 0x38fe <keycode_to_action+0x9e>
    38fc:	5a c0       	rjmp	.+180    	; 0x39b2 <keycode_to_action+0x152>
    38fe:	83 3b       	cpi	r24, 0xB3	; 179
    3900:	09 f4       	brne	.+2      	; 0x3904 <keycode_to_action+0xa4>
    3902:	5a c0       	rjmp	.+180    	; 0x39b8 <keycode_to_action+0x158>
    3904:	84 3b       	cpi	r24, 0xB4	; 180
    3906:	09 f4       	brne	.+2      	; 0x390a <keycode_to_action+0xaa>
    3908:	5a c0       	rjmp	.+180    	; 0x39be <keycode_to_action+0x15e>
    390a:	85 3b       	cpi	r24, 0xB5	; 181
    390c:	09 f4       	brne	.+2      	; 0x3910 <keycode_to_action+0xb0>
    390e:	5a c0       	rjmp	.+180    	; 0x39c4 <keycode_to_action+0x164>
    3910:	86 3b       	cpi	r24, 0xB6	; 182
    3912:	09 f4       	brne	.+2      	; 0x3916 <keycode_to_action+0xb6>
    3914:	5a c0       	rjmp	.+180    	; 0x39ca <keycode_to_action+0x16a>
    3916:	87 3b       	cpi	r24, 0xB7	; 183
    3918:	09 f4       	brne	.+2      	; 0x391c <keycode_to_action+0xbc>
    391a:	5a c0       	rjmp	.+180    	; 0x39d0 <keycode_to_action+0x170>
    391c:	88 3b       	cpi	r24, 0xB8	; 184
    391e:	09 f4       	brne	.+2      	; 0x3922 <keycode_to_action+0xc2>
    3920:	5a c0       	rjmp	.+180    	; 0x39d6 <keycode_to_action+0x176>
    3922:	89 3b       	cpi	r24, 0xB9	; 185
    3924:	09 f4       	brne	.+2      	; 0x3928 <keycode_to_action+0xc8>
    3926:	5a c0       	rjmp	.+180    	; 0x39dc <keycode_to_action+0x17c>
    3928:	8a 3b       	cpi	r24, 0xBA	; 186
    392a:	09 f4       	brne	.+2      	; 0x392e <keycode_to_action+0xce>
    392c:	5a c0       	rjmp	.+180    	; 0x39e2 <keycode_to_action+0x182>
    392e:	c0 e0       	ldi	r28, 0x00	; 0
    3930:	d4 e4       	ldi	r29, 0x44	; 68
    3932:	59 c0       	rjmp	.+178    	; 0x39e6 <keycode_to_action+0x186>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
    3934:	c8 2f       	mov	r28, r24
    3936:	d0 e0       	ldi	r29, 0x00	; 0
    3938:	d0 65       	ori	r29, 0x50	; 80
            break;
    393a:	55 c0       	rjmp	.+170    	; 0x39e6 <keycode_to_action+0x186>
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
    393c:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <clear_keyboard>
    3940:	2f ef       	ldi	r18, 0xFF	; 255
    3942:	80 e7       	ldi	r24, 0x70	; 112
    3944:	92 e0       	ldi	r25, 0x02	; 2
    3946:	21 50       	subi	r18, 0x01	; 1
    3948:	80 40       	sbci	r24, 0x00	; 0
    394a:	90 40       	sbci	r25, 0x00	; 0
    394c:	e1 f7       	brne	.-8      	; 0x3946 <keycode_to_action+0xe6>
    394e:	00 c0       	rjmp	.+0      	; 0x3950 <keycode_to_action+0xf0>
    3950:	00 00       	nop
            wait_ms(50);
            bootloader_jump(); // not return
    3952:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <bootloader_jump>
            break;
    3956:	47 c0       	rjmp	.+142    	; 0x39e6 <keycode_to_action+0x186>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
    3958:	c1 e0       	ldi	r28, 0x01	; 1
    395a:	d0 e0       	ldi	r29, 0x00	; 0
    395c:	44 c0       	rjmp	.+136    	; 0x39e6 <keycode_to_action+0x186>
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    395e:	c1 e8       	ldi	r28, 0x81	; 129
    3960:	d0 e4       	ldi	r29, 0x40	; 64
    3962:	41 c0       	rjmp	.+130    	; 0x39e6 <keycode_to_action+0x186>
    3964:	c2 e8       	ldi	r28, 0x82	; 130
    3966:	d0 e4       	ldi	r29, 0x40	; 64
    3968:	3e c0       	rjmp	.+124    	; 0x39e6 <keycode_to_action+0x186>
            break;
        case KC_AUDIO_MUTE ... KC_MEDIA_REWIND:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    396a:	c2 ee       	ldi	r28, 0xE2	; 226
    396c:	d4 e4       	ldi	r29, 0x44	; 68
    396e:	3b c0       	rjmp	.+118    	; 0x39e6 <keycode_to_action+0x186>
    3970:	c9 ee       	ldi	r28, 0xE9	; 233
    3972:	d4 e4       	ldi	r29, 0x44	; 68
    3974:	38 c0       	rjmp	.+112    	; 0x39e6 <keycode_to_action+0x186>
    3976:	ca ee       	ldi	r28, 0xEA	; 234
    3978:	d4 e4       	ldi	r29, 0x44	; 68
    397a:	35 c0       	rjmp	.+106    	; 0x39e6 <keycode_to_action+0x186>
    397c:	c5 eb       	ldi	r28, 0xB5	; 181
    397e:	d4 e4       	ldi	r29, 0x44	; 68
    3980:	32 c0       	rjmp	.+100    	; 0x39e6 <keycode_to_action+0x186>
    3982:	c6 eb       	ldi	r28, 0xB6	; 182
    3984:	d4 e4       	ldi	r29, 0x44	; 68
    3986:	2f c0       	rjmp	.+94     	; 0x39e6 <keycode_to_action+0x186>
    3988:	c3 eb       	ldi	r28, 0xB3	; 179
    398a:	d4 e4       	ldi	r29, 0x44	; 68
    398c:	2c c0       	rjmp	.+88     	; 0x39e6 <keycode_to_action+0x186>
    398e:	c4 eb       	ldi	r28, 0xB4	; 180
    3990:	d4 e4       	ldi	r29, 0x44	; 68
    3992:	29 c0       	rjmp	.+82     	; 0x39e6 <keycode_to_action+0x186>
    3994:	c7 eb       	ldi	r28, 0xB7	; 183
    3996:	d4 e4       	ldi	r29, 0x44	; 68
    3998:	26 c0       	rjmp	.+76     	; 0x39e6 <keycode_to_action+0x186>
    399a:	cc ec       	ldi	r28, 0xCC	; 204
    399c:	d4 e4       	ldi	r29, 0x44	; 68
    399e:	23 c0       	rjmp	.+70     	; 0x39e6 <keycode_to_action+0x186>
    39a0:	cd ec       	ldi	r28, 0xCD	; 205
    39a2:	d4 e4       	ldi	r29, 0x44	; 68
    39a4:	20 c0       	rjmp	.+64     	; 0x39e6 <keycode_to_action+0x186>
    39a6:	c3 e8       	ldi	r28, 0x83	; 131
    39a8:	d5 e4       	ldi	r29, 0x45	; 69
    39aa:	1d c0       	rjmp	.+58     	; 0x39e6 <keycode_to_action+0x186>
    39ac:	ca e8       	ldi	r28, 0x8A	; 138
    39ae:	d5 e4       	ldi	r29, 0x45	; 69
    39b0:	1a c0       	rjmp	.+52     	; 0x39e6 <keycode_to_action+0x186>
    39b2:	c2 e9       	ldi	r28, 0x92	; 146
    39b4:	d5 e4       	ldi	r29, 0x45	; 69
    39b6:	17 c0       	rjmp	.+46     	; 0x39e6 <keycode_to_action+0x186>
    39b8:	c4 e9       	ldi	r28, 0x94	; 148
    39ba:	d5 e4       	ldi	r29, 0x45	; 69
    39bc:	14 c0       	rjmp	.+40     	; 0x39e6 <keycode_to_action+0x186>
    39be:	c1 e2       	ldi	r28, 0x21	; 33
    39c0:	d6 e4       	ldi	r29, 0x46	; 70
    39c2:	11 c0       	rjmp	.+34     	; 0x39e6 <keycode_to_action+0x186>
    39c4:	c3 e2       	ldi	r28, 0x23	; 35
    39c6:	d6 e4       	ldi	r29, 0x46	; 70
    39c8:	0e c0       	rjmp	.+28     	; 0x39e6 <keycode_to_action+0x186>
    39ca:	c4 e2       	ldi	r28, 0x24	; 36
    39cc:	d6 e4       	ldi	r29, 0x46	; 70
    39ce:	0b c0       	rjmp	.+22     	; 0x39e6 <keycode_to_action+0x186>
    39d0:	c5 e2       	ldi	r28, 0x25	; 37
    39d2:	d6 e4       	ldi	r29, 0x46	; 70
    39d4:	08 c0       	rjmp	.+16     	; 0x39e6 <keycode_to_action+0x186>
    39d6:	c6 e2       	ldi	r28, 0x26	; 38
    39d8:	d6 e4       	ldi	r29, 0x46	; 70
    39da:	05 c0       	rjmp	.+10     	; 0x39e6 <keycode_to_action+0x186>
    39dc:	c7 e2       	ldi	r28, 0x27	; 39
    39de:	d6 e4       	ldi	r29, 0x46	; 70
    39e0:	02 c0       	rjmp	.+4      	; 0x39e6 <keycode_to_action+0x186>
    39e2:	ca e2       	ldi	r28, 0x2A	; 42
    39e4:	d6 e4       	ldi	r29, 0x46	; 70
        default:
            action.code = ACTION_NO;
            break;
    }
    return action;
}
    39e6:	ce 01       	movw	r24, r28
    39e8:	df 91       	pop	r29
    39ea:	cf 91       	pop	r28
    39ec:	08 95       	ret

000039ee <action_for_key>:


/* converts key to action */
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    39ee:	0e 94 4f 07 	call	0xe9e	; 0xe9e <keymap_key_to_keycode>
    switch (keycode) {
    39f2:	80 3e       	cpi	r24, 0xE0	; 224
    39f4:	a8 f4       	brcc	.+42     	; 0x3a20 <action_for_key+0x32>
    39f6:	80 3c       	cpi	r24, 0xC0	; 192
    39f8:	00 f5       	brcc	.+64     	; 0x3a3a <action_for_key+0x4c>
    39fa:	81 33       	cpi	r24, 0x31	; 49
    39fc:	09 f4       	brne	.+2      	; 0x3a00 <action_for_key+0x12>
    39fe:	5c c0       	rjmp	.+184    	; 0x3ab8 <action_for_key+0xca>
    3a00:	38 f4       	brcc	.+14     	; 0x3a10 <action_for_key+0x22>
    3a02:	89 32       	cpi	r24, 0x29	; 41
    3a04:	09 f4       	brne	.+2      	; 0x3a08 <action_for_key+0x1a>
    3a06:	52 c0       	rjmp	.+164    	; 0x3aac <action_for_key+0xbe>
    3a08:	8a 32       	cpi	r24, 0x2A	; 42
    3a0a:	09 f4       	brne	.+2      	; 0x3a0e <action_for_key+0x20>
    3a0c:	5b c0       	rjmp	.+182    	; 0x3ac4 <action_for_key+0xd6>
    3a0e:	5f c0       	rjmp	.+190    	; 0x3ace <action_for_key+0xe0>
    3a10:	89 33       	cpi	r24, 0x39	; 57
    3a12:	b1 f0       	breq	.+44     	; 0x3a40 <action_for_key+0x52>
    3a14:	82 38       	cpi	r24, 0x82	; 130
    3a16:	a1 f0       	breq	.+40     	; 0x3a40 <action_for_key+0x52>
    3a18:	85 33       	cpi	r24, 0x35	; 53
    3a1a:	09 f4       	brne	.+2      	; 0x3a1e <action_for_key+0x30>
    3a1c:	41 c0       	rjmp	.+130    	; 0x3aa0 <action_for_key+0xb2>
    3a1e:	57 c0       	rjmp	.+174    	; 0x3ace <action_for_key+0xe0>
    3a20:	83 3e       	cpi	r24, 0xE3	; 227
    3a22:	41 f1       	breq	.+80     	; 0x3a74 <action_for_key+0x86>
    3a24:	28 f4       	brcc	.+10     	; 0x3a30 <action_for_key+0x42>
    3a26:	80 3e       	cpi	r24, 0xE0	; 224
    3a28:	99 f0       	breq	.+38     	; 0x3a50 <action_for_key+0x62>
    3a2a:	82 3e       	cpi	r24, 0xE2	; 226
    3a2c:	b9 f0       	breq	.+46     	; 0x3a5c <action_for_key+0x6e>
    3a2e:	4f c0       	rjmp	.+158    	; 0x3ace <action_for_key+0xe0>
    3a30:	86 3e       	cpi	r24, 0xE6	; 230
    3a32:	31 f1       	breq	.+76     	; 0x3a80 <action_for_key+0x92>
    3a34:	87 3e       	cpi	r24, 0xE7	; 231
    3a36:	71 f1       	breq	.+92     	; 0x3a94 <action_for_key+0xa6>
    3a38:	4a c0       	rjmp	.+148    	; 0x3ace <action_for_key+0xe0>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    3a3a:	0e 94 61 07 	call	0xec2	; 0xec2 <keymap_fn_to_action>
    3a3e:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    3a40:	90 91 dc 01 	lds	r25, 0x01DC
    3a44:	90 fd       	sbrc	r25, 0
    3a46:	02 c0       	rjmp	.+4      	; 0x3a4c <action_for_key+0x5e>
    3a48:	91 ff       	sbrs	r25, 1
    3a4a:	41 c0       	rjmp	.+130    	; 0x3ace <action_for_key+0xe0>
                return keycode_to_action(KC_LCTL);
    3a4c:	80 ee       	ldi	r24, 0xE0	; 224
    3a4e:	3f c0       	rjmp	.+126    	; 0x3ace <action_for_key+0xe0>
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    3a50:	80 91 dc 01 	lds	r24, 0x01DC
    3a54:	80 ff       	sbrs	r24, 0
    3a56:	fa cf       	rjmp	.-12     	; 0x3a4c <action_for_key+0x5e>
                return keycode_to_action(KC_CAPSLOCK);
    3a58:	89 e3       	ldi	r24, 0x39	; 57
    3a5a:	39 c0       	rjmp	.+114    	; 0x3ace <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LCTL);
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    3a5c:	80 91 dc 01 	lds	r24, 0x01DC
    3a60:	82 ff       	sbrs	r24, 2
    3a62:	0c c0       	rjmp	.+24     	; 0x3a7c <action_for_key+0x8e>
                if (keymap_config.no_gui) {
    3a64:	80 91 dc 01 	lds	r24, 0x01DC
    3a68:	84 ff       	sbrs	r24, 4
    3a6a:	02 c0       	rjmp	.+4      	; 0x3a70 <action_for_key+0x82>
                    return keycode_to_action(ACTION_NO);
    3a6c:	80 e0       	ldi	r24, 0x00	; 0
    3a6e:	2f c0       	rjmp	.+94     	; 0x3ace <action_for_key+0xe0>
                }
                return keycode_to_action(KC_LGUI);
    3a70:	83 ee       	ldi	r24, 0xE3	; 227
    3a72:	2d c0       	rjmp	.+90     	; 0x3ace <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LALT);
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    3a74:	80 91 dc 01 	lds	r24, 0x01DC
    3a78:	82 ff       	sbrs	r24, 2
    3a7a:	f4 cf       	rjmp	.-24     	; 0x3a64 <action_for_key+0x76>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_LGUI);
            }
            return keycode_to_action(KC_LALT);
    3a7c:	82 ee       	ldi	r24, 0xE2	; 226
    3a7e:	27 c0       	rjmp	.+78     	; 0x3ace <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_LGUI);
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    3a80:	80 91 dc 01 	lds	r24, 0x01DC
    3a84:	83 ff       	sbrs	r24, 3
    3a86:	0a c0       	rjmp	.+20     	; 0x3a9c <action_for_key+0xae>
                if (keymap_config.no_gui) {
    3a88:	80 91 dc 01 	lds	r24, 0x01DC
    3a8c:	84 fd       	sbrc	r24, 4
    3a8e:	ee cf       	rjmp	.-36     	; 0x3a6c <action_for_key+0x7e>
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
    3a90:	87 ee       	ldi	r24, 0xE7	; 231
    3a92:	1d c0       	rjmp	.+58     	; 0x3ace <action_for_key+0xe0>
            }
            return keycode_to_action(KC_RALT);
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    3a94:	80 91 dc 01 	lds	r24, 0x01DC
    3a98:	83 ff       	sbrs	r24, 3
    3a9a:	f6 cf       	rjmp	.-20     	; 0x3a88 <action_for_key+0x9a>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
            }
            return keycode_to_action(KC_RALT);
    3a9c:	86 ee       	ldi	r24, 0xE6	; 230
    3a9e:	17 c0       	rjmp	.+46     	; 0x3ace <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    3aa0:	80 91 dc 01 	lds	r24, 0x01DC
    3aa4:	85 ff       	sbrs	r24, 5
    3aa6:	06 c0       	rjmp	.+12     	; 0x3ab4 <action_for_key+0xc6>
                return keycode_to_action(KC_ESC);
    3aa8:	89 e2       	ldi	r24, 0x29	; 41
    3aaa:	11 c0       	rjmp	.+34     	; 0x3ace <action_for_key+0xe0>
            }
            return keycode_to_action(KC_GRAVE);
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    3aac:	80 91 dc 01 	lds	r24, 0x01DC
    3ab0:	85 ff       	sbrs	r24, 5
    3ab2:	fa cf       	rjmp	.-12     	; 0x3aa8 <action_for_key+0xba>
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_ESC);
            }
            return keycode_to_action(KC_GRAVE);
    3ab4:	85 e3       	ldi	r24, 0x35	; 53
    3ab6:	0b c0       	rjmp	.+22     	; 0x3ace <action_for_key+0xe0>
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_GRAVE);
            }
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    3ab8:	80 91 dc 01 	lds	r24, 0x01DC
    3abc:	86 ff       	sbrs	r24, 6
    3abe:	06 c0       	rjmp	.+12     	; 0x3acc <action_for_key+0xde>
                return keycode_to_action(KC_BSPACE);
    3ac0:	8a e2       	ldi	r24, 0x2A	; 42
    3ac2:	05 c0       	rjmp	.+10     	; 0x3ace <action_for_key+0xe0>
            }
            return keycode_to_action(KC_BSLASH);
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    3ac4:	80 91 dc 01 	lds	r24, 0x01DC
    3ac8:	86 ff       	sbrs	r24, 6
    3aca:	fa cf       	rjmp	.-12     	; 0x3ac0 <action_for_key+0xd2>
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
                return keycode_to_action(KC_BSPACE);
            }
            return keycode_to_action(KC_BSLASH);
    3acc:	81 e3       	ldi	r24, 0x31	; 49
                return keycode_to_action(KC_BSLASH);
            }
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    3ace:	0e 94 30 1c 	call	0x3860	; 0x3860 <keycode_to_action>
    }
}
    3ad2:	08 95       	ret

00003ad4 <action_function>:
}

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    3ad4:	08 95       	ret

00003ad6 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    3ad6:	90 93 39 01 	sts	0x0139, r25
    3ada:	80 93 38 01 	sts	0x0138, r24
    3ade:	08 95       	ret

00003ae0 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    3ae0:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    3ae2:	98 2f       	mov	r25, r24
    3ae4:	9c 7c       	andi	r25, 0xCC	; 204
    3ae6:	39 2f       	mov	r19, r25
    3ae8:	36 95       	lsr	r19
    3aea:	36 95       	lsr	r19
    3aec:	28 2f       	mov	r18, r24
    3aee:	23 73       	andi	r18, 0x33	; 51
    3af0:	44 e0       	ldi	r20, 0x04	; 4
    3af2:	24 9f       	mul	r18, r20
    3af4:	c0 01       	movw	r24, r0
    3af6:	11 24       	eor	r1, r1
    3af8:	93 2f       	mov	r25, r19
    3afa:	98 2b       	or	r25, r24
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    3afc:	29 2f       	mov	r18, r25
    3afe:	2a 7a       	andi	r18, 0xAA	; 170
    3b00:	26 95       	lsr	r18
    3b02:	89 2f       	mov	r24, r25
    3b04:	85 75       	andi	r24, 0x55	; 85
    3b06:	88 0f       	add	r24, r24
    return bits;
}
    3b08:	82 2b       	or	r24, r18
    3b0a:	08 95       	ret

00003b0c <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3b0c:	80 91 e1 01 	lds	r24, 0x01E1
    3b10:	84 30       	cpi	r24, 0x04	; 4
    3b12:	21 f1       	breq	.+72     	; 0x3b5c <suspend_power_down+0x50>
#endif
    wdt_timeout = wdto;
    3b14:	10 92 cc 01 	sts	0x01CC, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    3b18:	20 e4       	ldi	r18, 0x40	; 64
    3b1a:	88 e1       	ldi	r24, 0x18	; 24
    3b1c:	90 e0       	ldi	r25, 0x00	; 0
    3b1e:	0f b6       	in	r0, 0x3f	; 63
    3b20:	f8 94       	cli
    3b22:	a8 95       	wdr
    3b24:	80 93 60 00 	sts	0x0060, r24
    3b28:	0f be       	out	0x3f, r0	; 63
    3b2a:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3b2e:	83 b7       	in	r24, 0x33	; 51
    3b30:	81 7f       	andi	r24, 0xF1	; 241
    3b32:	84 60       	ori	r24, 0x04	; 4
    3b34:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    3b36:	83 b7       	in	r24, 0x33	; 51
    3b38:	81 60       	ori	r24, 0x01	; 1
    3b3a:	83 bf       	out	0x33, r24	; 51
    sei();
    3b3c:	78 94       	sei
    sleep_cpu();
    3b3e:	88 95       	sleep
    sleep_disable();
    3b40:	83 b7       	in	r24, 0x33	; 51
    3b42:	8e 7f       	andi	r24, 0xFE	; 254
    3b44:	83 bf       	out	0x33, r24	; 51
    3b46:	0f b6       	in	r0, 0x3f	; 63
    3b48:	f8 94       	cli
    3b4a:	a8 95       	wdr
    3b4c:	80 91 60 00 	lds	r24, 0x0060
    3b50:	88 61       	ori	r24, 0x18	; 24
    3b52:	80 93 60 00 	sts	0x0060, r24
    3b56:	10 92 60 00 	sts	0x0060, r1
    3b5a:	0f be       	out	0x3f, r0	; 63
    3b5c:	08 95       	ret

00003b5e <suspend_wakeup_condition>:
}

__attribute__ ((weak)) void matrix_power_up(void) {}
__attribute__ ((weak)) void matrix_power_down(void) {}
bool suspend_wakeup_condition(void)
{
    3b5e:	cf 93       	push	r28
    matrix_power_up();
    3b60:	0e 94 8d 08 	call	0x111a	; 0x111a <matrix_power_up>
    matrix_scan();
    3b64:	0e 94 8e 07 	call	0xf1c	; 0xf1c <matrix_scan>
    matrix_power_down();
    3b68:	0e 94 8e 08 	call	0x111c	; 0x111c <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3b6c:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    3b6e:	8c 2f       	mov	r24, r28
    3b70:	0e 94 58 08 	call	0x10b0	; 0x10b0 <matrix_get_row>
    3b74:	81 11       	cpse	r24, r1
    3b76:	04 c0       	rjmp	.+8      	; 0x3b80 <suspend_wakeup_condition+0x22>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3b78:	cf 5f       	subi	r28, 0xFF	; 255
    3b7a:	c8 30       	cpi	r28, 0x08	; 8
    3b7c:	c1 f7       	brne	.-16     	; 0x3b6e <suspend_wakeup_condition+0x10>
    3b7e:	01 c0       	rjmp	.+2      	; 0x3b82 <suspend_wakeup_condition+0x24>
        if (matrix_get_row(r)) return true;
    3b80:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    3b82:	cf 91       	pop	r28
    3b84:	08 95       	ret

00003b86 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    3b86:	0c 94 b3 15 	jmp	0x2b66	; 0x2b66 <clear_keyboard>

00003b8a <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    3b8a:	1f 92       	push	r1
    3b8c:	0f 92       	push	r0
    3b8e:	0f b6       	in	r0, 0x3f	; 63
    3b90:	0f 92       	push	r0
    3b92:	11 24       	eor	r1, r1
    3b94:	8f 93       	push	r24
    3b96:	9f 93       	push	r25
    3b98:	af 93       	push	r26
    3b9a:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    3b9c:	80 91 cc 01 	lds	r24, 0x01CC
    3ba0:	81 11       	cpse	r24, r1
    3ba2:	13 c0       	rjmp	.+38     	; 0x3bca <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    3ba4:	80 91 cd 01 	lds	r24, 0x01CD
    3ba8:	90 91 ce 01 	lds	r25, 0x01CE
    3bac:	a0 91 cf 01 	lds	r26, 0x01CF
    3bb0:	b0 91 d0 01 	lds	r27, 0x01D0
    3bb4:	41 96       	adiw	r24, 0x11	; 17
    3bb6:	a1 1d       	adc	r26, r1
    3bb8:	b1 1d       	adc	r27, r1
    3bba:	80 93 cd 01 	sts	0x01CD, r24
    3bbe:	90 93 ce 01 	sts	0x01CE, r25
    3bc2:	a0 93 cf 01 	sts	0x01CF, r26
    3bc6:	b0 93 d0 01 	sts	0x01D0, r27
            break;
        default:
            ;
    }
}
    3bca:	bf 91       	pop	r27
    3bcc:	af 91       	pop	r26
    3bce:	9f 91       	pop	r25
    3bd0:	8f 91       	pop	r24
    3bd2:	0f 90       	pop	r0
    3bd4:	0f be       	out	0x3f, r0	; 63
    3bd6:	0f 90       	pop	r0
    3bd8:	1f 90       	pop	r1
    3bda:	18 95       	reti

00003bdc <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    3bdc:	82 e0       	ldi	r24, 0x02	; 2
    3bde:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    3be0:	93 e0       	ldi	r25, 0x03	; 3
    3be2:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    3be4:	9a ef       	ldi	r25, 0xFA	; 250
    3be6:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    3be8:	80 93 6e 00 	sts	0x006E, r24
    3bec:	08 95       	ret

00003bee <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3bee:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3bf0:	f8 94       	cli
    t = timer_count;
    3bf2:	80 91 cd 01 	lds	r24, 0x01CD
    3bf6:	90 91 ce 01 	lds	r25, 0x01CE
    3bfa:	a0 91 cf 01 	lds	r26, 0x01CF
    3bfe:	b0 91 d0 01 	lds	r27, 0x01D0
    SREG = sreg;
    3c02:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    3c04:	08 95       	ret

00003c06 <timer_read32>:
inline
uint32_t timer_read32(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3c06:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3c08:	f8 94       	cli
    t = timer_count;
    3c0a:	60 91 cd 01 	lds	r22, 0x01CD
    3c0e:	70 91 ce 01 	lds	r23, 0x01CE
    3c12:	80 91 cf 01 	lds	r24, 0x01CF
    3c16:	90 91 d0 01 	lds	r25, 0x01D0
    SREG = sreg;
    3c1a:	2f bf       	out	0x3f, r18	; 63

    return t;
}
    3c1c:	08 95       	ret

00003c1e <timer_elapsed>:

inline
uint16_t timer_elapsed(uint16_t last)
{
    3c1e:	cf 92       	push	r12
    3c20:	df 92       	push	r13
    3c22:	ef 92       	push	r14
    3c24:	ff 92       	push	r15
    3c26:	0f 93       	push	r16
    3c28:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    3c2a:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3c2c:	f8 94       	cli
    t = timer_count;
    3c2e:	40 91 cd 01 	lds	r20, 0x01CD
    3c32:	50 91 ce 01 	lds	r21, 0x01CE
    3c36:	60 91 cf 01 	lds	r22, 0x01CF
    3c3a:	70 91 d0 01 	lds	r23, 0x01D0
    SREG = sreg;
    3c3e:	2f bf       	out	0x3f, r18	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    3c40:	6a 01       	movw	r12, r20
    3c42:	7b 01       	movw	r14, r22
    3c44:	ee 24       	eor	r14, r14
    3c46:	ff 24       	eor	r15, r15
    3c48:	8c 01       	movw	r16, r24
    3c4a:	20 e0       	ldi	r18, 0x00	; 0
    3c4c:	30 e0       	ldi	r19, 0x00	; 0
    3c4e:	c0 16       	cp	r12, r16
    3c50:	d1 06       	cpc	r13, r17
    3c52:	e2 06       	cpc	r14, r18
    3c54:	f3 06       	cpc	r15, r19
    3c56:	10 f4       	brcc	.+4      	; 0x3c5c <timer_elapsed+0x3e>
    3c58:	41 50       	subi	r20, 0x01	; 1
    3c5a:	51 09       	sbc	r21, r1
    3c5c:	9a 01       	movw	r18, r20
    3c5e:	28 1b       	sub	r18, r24
    3c60:	39 0b       	sbc	r19, r25
    3c62:	c9 01       	movw	r24, r18
}
    3c64:	1f 91       	pop	r17
    3c66:	0f 91       	pop	r16
    3c68:	ff 90       	pop	r15
    3c6a:	ef 90       	pop	r14
    3c6c:	df 90       	pop	r13
    3c6e:	cf 90       	pop	r12
    3c70:	08 95       	ret

00003c72 <timer_elapsed32>:

inline
uint32_t timer_elapsed32(uint32_t last)
{
    3c72:	cf 92       	push	r12
    3c74:	df 92       	push	r13
    3c76:	ef 92       	push	r14
    3c78:	ff 92       	push	r15
    3c7a:	0f 93       	push	r16
    3c7c:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    3c7e:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3c80:	f8 94       	cli
    t = timer_count;
    3c82:	c0 90 cd 01 	lds	r12, 0x01CD
    3c86:	d0 90 ce 01 	lds	r13, 0x01CE
    3c8a:	e0 90 cf 01 	lds	r14, 0x01CF
    3c8e:	f0 90 d0 01 	lds	r15, 0x01D0
    SREG = sreg;
    3c92:	2f bf       	out	0x3f, r18	; 63
    3c94:	97 01       	movw	r18, r14
    3c96:	86 01       	movw	r16, r12
    3c98:	06 1b       	sub	r16, r22
    3c9a:	17 0b       	sbc	r17, r23
    3c9c:	28 0b       	sbc	r18, r24
    3c9e:	39 0b       	sbc	r19, r25

    return TIMER_DIFF_32(t, last);
    3ca0:	c6 16       	cp	r12, r22
    3ca2:	d7 06       	cpc	r13, r23
    3ca4:	e8 06       	cpc	r14, r24
    3ca6:	f9 06       	cpc	r15, r25
    3ca8:	18 f0       	brcs	.+6      	; 0x3cb0 <timer_elapsed32+0x3e>
    3caa:	c9 01       	movw	r24, r18
    3cac:	b8 01       	movw	r22, r16
    3cae:	06 c0       	rjmp	.+12     	; 0x3cbc <timer_elapsed32+0x4a>
    3cb0:	c9 01       	movw	r24, r18
    3cb2:	b8 01       	movw	r22, r16
    3cb4:	61 50       	subi	r22, 0x01	; 1
    3cb6:	71 09       	sbc	r23, r1
    3cb8:	81 09       	sbc	r24, r1
    3cba:	91 09       	sbc	r25, r1
}
    3cbc:	1f 91       	pop	r17
    3cbe:	0f 91       	pop	r16
    3cc0:	ff 90       	pop	r15
    3cc2:	ef 90       	pop	r14
    3cc4:	df 90       	pop	r13
    3cc6:	cf 90       	pop	r12
    3cc8:	08 95       	ret

00003cca <__vector_21>:

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    3cca:	1f 92       	push	r1
    3ccc:	0f 92       	push	r0
    3cce:	0f b6       	in	r0, 0x3f	; 63
    3cd0:	0f 92       	push	r0
    3cd2:	11 24       	eor	r1, r1
    3cd4:	8f 93       	push	r24
    3cd6:	9f 93       	push	r25
    3cd8:	af 93       	push	r26
    3cda:	bf 93       	push	r27
    timer_count++;
    3cdc:	80 91 cd 01 	lds	r24, 0x01CD
    3ce0:	90 91 ce 01 	lds	r25, 0x01CE
    3ce4:	a0 91 cf 01 	lds	r26, 0x01CF
    3ce8:	b0 91 d0 01 	lds	r27, 0x01D0
    3cec:	01 96       	adiw	r24, 0x01	; 1
    3cee:	a1 1d       	adc	r26, r1
    3cf0:	b1 1d       	adc	r27, r1
    3cf2:	80 93 cd 01 	sts	0x01CD, r24
    3cf6:	90 93 ce 01 	sts	0x01CE, r25
    3cfa:	a0 93 cf 01 	sts	0x01CF, r26
    3cfe:	b0 93 d0 01 	sts	0x01D0, r27
}
    3d02:	bf 91       	pop	r27
    3d04:	af 91       	pop	r26
    3d06:	9f 91       	pop	r25
    3d08:	8f 91       	pop	r24
    3d0a:	0f 90       	pop	r0
    3d0c:	0f be       	out	0x3f, r0	; 63
    3d0e:	0f 90       	pop	r0
    3d10:	1f 90       	pop	r1
    3d12:	18 95       	reti

00003d14 <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    3d14:	0e 94 67 0d 	call	0x1ace	; 0x1ace <USB_Disable>
    cli();
    3d18:	f8 94       	cli
    3d1a:	2f ef       	ldi	r18, 0xFF	; 255
    3d1c:	87 ea       	ldi	r24, 0xA7	; 167
    3d1e:	91 e6       	ldi	r25, 0x61	; 97
    3d20:	21 50       	subi	r18, 0x01	; 1
    3d22:	80 40       	sbci	r24, 0x00	; 0
    3d24:	90 40       	sbci	r25, 0x00	; 0
    3d26:	e1 f7       	brne	.-8      	; 0x3d20 <bootloader_jump+0xc>
    3d28:	00 c0       	rjmp	.+0      	; 0x3d2a <bootloader_jump+0x16>
    3d2a:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    3d2c:	87 e0       	ldi	r24, 0x07	; 7
    3d2e:	90 eb       	ldi	r25, 0xB0	; 176
    3d30:	dc 01       	movw	r26, r24
    3d32:	80 93 ea 01 	sts	0x01EA, r24
    3d36:	90 93 eb 01 	sts	0x01EB, r25
    3d3a:	a0 93 ec 01 	sts	0x01EC, r26
    3d3e:	b0 93 ed 01 	sts	0x01ED, r27
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    3d42:	9c e0       	ldi	r25, 0x0C	; 12
    3d44:	88 e1       	ldi	r24, 0x18	; 24
    3d46:	0f b6       	in	r0, 0x3f	; 63
    3d48:	f8 94       	cli
    3d4a:	a8 95       	wdr
    3d4c:	80 93 60 00 	sts	0x0060, r24
    3d50:	0f be       	out	0x3f, r0	; 63
    3d52:	90 93 60 00 	sts	0x0060, r25
    wdt_enable(WDTO_250MS);
    for (;;);
    3d56:	ff cf       	rjmp	.-2      	; 0x3d56 <bootloader_jump+0x42>

00003d58 <scan_keycode>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_keycode(uint8_t keycode)
{
    3d58:	ef 92       	push	r14
    3d5a:	ff 92       	push	r15
    3d5c:	0f 93       	push	r16
    3d5e:	1f 93       	push	r17
    3d60:	cf 93       	push	r28
    3d62:	df 93       	push	r29
    3d64:	d8 2f       	mov	r29, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3d66:	c0 e0       	ldi	r28, 0x00	; 0
        matrix_row_t matrix_row = matrix_get_row(r);
    3d68:	8c 2f       	mov	r24, r28
    3d6a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <matrix_get_row>
    3d6e:	00 e0       	ldi	r16, 0x00	; 0
    3d70:	10 e0       	ldi	r17, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3d72:	e8 2e       	mov	r14, r24
    3d74:	f1 2c       	mov	r15, r1
    3d76:	c7 01       	movw	r24, r14
    3d78:	00 2e       	mov	r0, r16
    3d7a:	02 c0       	rjmp	.+4      	; 0x3d80 <scan_keycode+0x28>
    3d7c:	95 95       	asr	r25
    3d7e:	87 95       	ror	r24
    3d80:	0a 94       	dec	r0
    3d82:	e2 f7       	brpl	.-8      	; 0x3d7c <scan_keycode+0x24>
    3d84:	80 fd       	sbrc	r24, 0
    3d86:	06 c0       	rjmp	.+12     	; 0x3d94 <scan_keycode+0x3c>
    3d88:	0f 5f       	subi	r16, 0xFF	; 255
    3d8a:	1f 4f       	sbci	r17, 0xFF	; 255

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    3d8c:	08 30       	cpi	r16, 0x08	; 8
    3d8e:	11 05       	cpc	r17, r1
    3d90:	91 f7       	brne	.-28     	; 0x3d76 <scan_keycode+0x1e>
    3d92:	09 c0       	rjmp	.+18     	; 0x3da6 <scan_keycode+0x4e>
            if (matrix_row & ((matrix_row_t)1<<c)) {
                if (keycode == keymap_key_to_keycode(0, (keypos_t){ .row = r, .col = c })) {
    3d94:	60 2f       	mov	r22, r16
    3d96:	7c 2f       	mov	r23, r28
    3d98:	80 e0       	ldi	r24, 0x00	; 0
    3d9a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <keymap_key_to_keycode>
    3d9e:	d8 13       	cpse	r29, r24
    3da0:	f3 cf       	rjmp	.-26     	; 0x3d88 <scan_keycode+0x30>
                    return true;
    3da2:	81 e0       	ldi	r24, 0x01	; 1
    3da4:	04 c0       	rjmp	.+8      	; 0x3dae <scan_keycode+0x56>
    }
}

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3da6:	cf 5f       	subi	r28, 0xFF	; 255
    3da8:	c8 30       	cpi	r28, 0x08	; 8
    3daa:	f1 f6       	brne	.-68     	; 0x3d68 <scan_keycode+0x10>
                    return true;
                }
            }
        }
    }
    return false;
    3dac:	80 e0       	ldi	r24, 0x00	; 0
}
    3dae:	df 91       	pop	r29
    3db0:	cf 91       	pop	r28
    3db2:	1f 91       	pop	r17
    3db4:	0f 91       	pop	r16
    3db6:	ff 90       	pop	r15
    3db8:	ef 90       	pop	r14
    3dba:	08 95       	ret

00003dbc <bootmagic_scan_keycode>:

bool bootmagic_scan_keycode(uint8_t keycode)
{
    3dbc:	cf 93       	push	r28
    3dbe:	c8 2f       	mov	r28, r24
    if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;
    3dc0:	8c e2       	ldi	r24, 0x2C	; 44
    3dc2:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <scan_keycode>
    3dc6:	88 23       	and	r24, r24
    3dc8:	21 f0       	breq	.+8      	; 0x3dd2 <bootmagic_scan_keycode+0x16>

    return scan_keycode(keycode);
    3dca:	8c 2f       	mov	r24, r28
}
    3dcc:	cf 91       	pop	r28

bool bootmagic_scan_keycode(uint8_t keycode)
{
    if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;

    return scan_keycode(keycode);
    3dce:	0c 94 ac 1e 	jmp	0x3d58	; 0x3d58 <scan_keycode>
}
    3dd2:	80 e0       	ldi	r24, 0x00	; 0
    3dd4:	cf 91       	pop	r28
    3dd6:	08 95       	ret

00003dd8 <bootmagic>:
#include "eeconfig.h"
#include "bootmagic.h"


void bootmagic(void)
{
    3dd8:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    3dda:	0e 94 3b 20 	call	0x4076	; 0x4076 <eeconfig_is_enabled>
    3dde:	81 11       	cpse	r24, r1
    3de0:	02 c0       	rjmp	.+4      	; 0x3de6 <bootmagic+0xe>
        eeconfig_init();
    3de2:	0e 94 21 20 	call	0x4042	; 0x4042 <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("boogmagic scan: ... ");
    3de6:	8c ec       	ldi	r24, 0xCC	; 204
    3de8:	94 e0       	ldi	r25, 0x04	; 4
    3dea:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); _delay_ms(10); }
    3dee:	c5 e6       	ldi	r28, 0x65	; 101
    3df0:	c1 50       	subi	r28, 0x01	; 1
    3df2:	49 f0       	breq	.+18     	; 0x3e06 <bootmagic+0x2e>
    3df4:	0e 94 8e 07 	call	0xf1c	; 0xf1c <matrix_scan>
    3df8:	8f e3       	ldi	r24, 0x3F	; 63
    3dfa:	9c e9       	ldi	r25, 0x9C	; 156
    3dfc:	01 97       	sbiw	r24, 0x01	; 1
    3dfe:	f1 f7       	brne	.-4      	; 0x3dfc <bootmagic+0x24>
    3e00:	00 c0       	rjmp	.+0      	; 0x3e02 <bootmagic+0x2a>
    3e02:	00 00       	nop
    3e04:	f5 cf       	rjmp	.-22     	; 0x3df0 <bootmagic+0x18>
    print("done.\n");
    3e06:	85 ec       	ldi	r24, 0xC5	; 197
    3e08:	94 e0       	ldi	r25, 0x04	; 4
    3e0a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SKIP)) {
    3e0e:	89 e2       	ldi	r24, 0x29	; 41
    3e10:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <bootmagic_scan_keycode>
    3e14:	81 11       	cpse	r24, r1
    3e16:	13 c1       	rjmp	.+550    	; 0x403e <bootmagic+0x266>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    3e18:	8a e2       	ldi	r24, 0x2A	; 42
    3e1a:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <bootmagic_scan_keycode>
    3e1e:	81 11       	cpse	r24, r1
        eeconfig_init();
    3e20:	0e 94 21 20 	call	0x4042	; 0x4042 <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_BOOTLOADER)) {
    3e24:	85 e0       	ldi	r24, 0x05	; 5
    3e26:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <bootmagic_scan_keycode>
    3e2a:	81 11       	cpse	r24, r1
        bootloader_jump();
    3e2c:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <bootloader_jump>
    }

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    3e30:	0e 94 46 20 	call	0x408c	; 0x408c <eeconfig_read_debug>
    3e34:	80 93 cb 01 	sts	0x01CB, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    3e38:	87 e0       	ldi	r24, 0x07	; 7
    3e3a:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <bootmagic_scan_keycode>
    3e3e:	88 23       	and	r24, r24
    3e40:	a9 f1       	breq	.+106    	; 0x3eac <bootmagic+0xd4>
        if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    3e42:	8b e1       	ldi	r24, 0x1B	; 27
    3e44:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <bootmagic_scan_keycode>
    3e48:	88 23       	and	r24, r24
    3e4a:	51 f0       	breq	.+20     	; 0x3e60 <bootmagic+0x88>
            debug_config.matrix = !debug_config.matrix;
    3e4c:	80 91 cb 01 	lds	r24, 0x01CB
    3e50:	81 fb       	bst	r24, 1
    3e52:	22 27       	eor	r18, r18
    3e54:	20 f9       	bld	r18, 0
    3e56:	91 e0       	ldi	r25, 0x01	; 1
    3e58:	92 27       	eor	r25, r18
    3e5a:	90 fb       	bst	r25, 0
    3e5c:	81 f9       	bld	r24, 1
    3e5e:	0e c0       	rjmp	.+28     	; 0x3e7c <bootmagic+0xa4>
        } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    3e60:	8e e0       	ldi	r24, 0x0E	; 14
    3e62:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <bootmagic_scan_keycode>
    3e66:	88 23       	and	r24, r24
    3e68:	61 f0       	breq	.+24     	; 0x3e82 <bootmagic+0xaa>
            debug_config.keyboard = !debug_config.keyboard;
    3e6a:	80 91 cb 01 	lds	r24, 0x01CB
    3e6e:	82 fb       	bst	r24, 2
    3e70:	22 27       	eor	r18, r18
    3e72:	20 f9       	bld	r18, 0
    3e74:	91 e0       	ldi	r25, 0x01	; 1
    3e76:	92 27       	eor	r25, r18
    3e78:	90 fb       	bst	r25, 0
    3e7a:	82 f9       	bld	r24, 2
    3e7c:	80 93 cb 01 	sts	0x01CB, r24
    3e80:	15 c0       	rjmp	.+42     	; 0x3eac <bootmagic+0xd4>
        } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    3e82:	80 e1       	ldi	r24, 0x10	; 16
    3e84:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <bootmagic_scan_keycode>
    3e88:	90 91 cb 01 	lds	r25, 0x01CB
    3e8c:	88 23       	and	r24, r24
    3e8e:	41 f0       	breq	.+16     	; 0x3ea0 <bootmagic+0xc8>
            debug_config.mouse = !debug_config.mouse;
    3e90:	93 fb       	bst	r25, 3
    3e92:	22 27       	eor	r18, r18
    3e94:	20 f9       	bld	r18, 0
    3e96:	81 e0       	ldi	r24, 0x01	; 1
    3e98:	82 27       	eor	r24, r18
    3e9a:	80 fb       	bst	r24, 0
    3e9c:	93 f9       	bld	r25, 3
    3e9e:	04 c0       	rjmp	.+8      	; 0x3ea8 <bootmagic+0xd0>
        } else {
            debug_config.enable = !debug_config.enable;
    3ea0:	89 2f       	mov	r24, r25
    3ea2:	80 95       	com	r24
    3ea4:	80 fb       	bst	r24, 0
    3ea6:	90 f9       	bld	r25, 0
    3ea8:	90 93 cb 01 	sts	0x01CB, r25
        }
    }
    eeconfig_write_debug(debug_config.raw);
    3eac:	80 91 cb 01 	lds	r24, 0x01CB
    3eb0:	0e 94 4a 20 	call	0x4094	; 0x4094 <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    3eb4:	0e 94 58 20 	call	0x40b0	; 0x40b0 <eeconfig_read_keymap>
    3eb8:	80 93 dc 01 	sts	0x01DC, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    3ebc:	80 ee       	ldi	r24, 0xE0	; 224
    3ebe:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <bootmagic_scan_keycode>
    3ec2:	88 23       	and	r24, r24
    3ec4:	41 f0       	breq	.+16     	; 0x3ed6 <bootmagic+0xfe>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    3ec6:	80 91 dc 01 	lds	r24, 0x01DC
    3eca:	98 2f       	mov	r25, r24
    3ecc:	90 95       	com	r25
    3ece:	90 fb       	bst	r25, 0
    3ed0:	80 f9       	bld	r24, 0
    3ed2:	80 93 dc 01 	sts	0x01DC, r24
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    3ed6:	89 e3       	ldi	r24, 0x39	; 57
    3ed8:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <bootmagic_scan_keycode>
    3edc:	88 23       	and	r24, r24
    3ede:	59 f0       	breq	.+22     	; 0x3ef6 <bootmagic+0x11e>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    3ee0:	80 91 dc 01 	lds	r24, 0x01DC
    3ee4:	81 fb       	bst	r24, 1
    3ee6:	22 27       	eor	r18, r18
    3ee8:	20 f9       	bld	r18, 0
    3eea:	91 e0       	ldi	r25, 0x01	; 1
    3eec:	92 27       	eor	r25, r18
    3eee:	90 fb       	bst	r25, 0
    3ef0:	81 f9       	bld	r24, 1
    3ef2:	80 93 dc 01 	sts	0x01DC, r24
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    3ef6:	82 ee       	ldi	r24, 0xE2	; 226
    3ef8:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <bootmagic_scan_keycode>
    3efc:	88 23       	and	r24, r24
    3efe:	59 f0       	breq	.+22     	; 0x3f16 <bootmagic+0x13e>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    3f00:	80 91 dc 01 	lds	r24, 0x01DC
    3f04:	82 fb       	bst	r24, 2
    3f06:	22 27       	eor	r18, r18
    3f08:	20 f9       	bld	r18, 0
    3f0a:	91 e0       	ldi	r25, 0x01	; 1
    3f0c:	92 27       	eor	r25, r18
    3f0e:	90 fb       	bst	r25, 0
    3f10:	82 f9       	bld	r24, 2
    3f12:	80 93 dc 01 	sts	0x01DC, r24
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    3f16:	86 ee       	ldi	r24, 0xE6	; 230
    3f18:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <bootmagic_scan_keycode>
    3f1c:	88 23       	and	r24, r24
    3f1e:	59 f0       	breq	.+22     	; 0x3f36 <bootmagic+0x15e>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    3f20:	80 91 dc 01 	lds	r24, 0x01DC
    3f24:	83 fb       	bst	r24, 3
    3f26:	22 27       	eor	r18, r18
    3f28:	20 f9       	bld	r18, 0
    3f2a:	91 e0       	ldi	r25, 0x01	; 1
    3f2c:	92 27       	eor	r25, r18
    3f2e:	90 fb       	bst	r25, 0
    3f30:	83 f9       	bld	r24, 3
    3f32:	80 93 dc 01 	sts	0x01DC, r24
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_NO_GUI)) {
    3f36:	83 ee       	ldi	r24, 0xE3	; 227
    3f38:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <bootmagic_scan_keycode>
    3f3c:	88 23       	and	r24, r24
    3f3e:	59 f0       	breq	.+22     	; 0x3f56 <bootmagic+0x17e>
        keymap_config.no_gui = !keymap_config.no_gui;
    3f40:	80 91 dc 01 	lds	r24, 0x01DC
    3f44:	84 fb       	bst	r24, 4
    3f46:	22 27       	eor	r18, r18
    3f48:	20 f9       	bld	r18, 0
    3f4a:	91 e0       	ldi	r25, 0x01	; 1
    3f4c:	92 27       	eor	r25, r18
    3f4e:	90 fb       	bst	r25, 0
    3f50:	84 f9       	bld	r24, 4
    3f52:	80 93 dc 01 	sts	0x01DC, r24
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    3f56:	85 e3       	ldi	r24, 0x35	; 53
    3f58:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <bootmagic_scan_keycode>
    3f5c:	88 23       	and	r24, r24
    3f5e:	59 f0       	breq	.+22     	; 0x3f76 <bootmagic+0x19e>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    3f60:	80 91 dc 01 	lds	r24, 0x01DC
    3f64:	85 fb       	bst	r24, 5
    3f66:	22 27       	eor	r18, r18
    3f68:	20 f9       	bld	r18, 0
    3f6a:	91 e0       	ldi	r25, 0x01	; 1
    3f6c:	92 27       	eor	r25, r18
    3f6e:	90 fb       	bst	r25, 0
    3f70:	85 f9       	bld	r24, 5
    3f72:	80 93 dc 01 	sts	0x01DC, r24
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    3f76:	81 e3       	ldi	r24, 0x31	; 49
    3f78:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <bootmagic_scan_keycode>
    3f7c:	88 23       	and	r24, r24
    3f7e:	59 f0       	breq	.+22     	; 0x3f96 <bootmagic+0x1be>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    3f80:	80 91 dc 01 	lds	r24, 0x01DC
    3f84:	86 fb       	bst	r24, 6
    3f86:	22 27       	eor	r18, r18
    3f88:	20 f9       	bld	r18, 0
    3f8a:	91 e0       	ldi	r25, 0x01	; 1
    3f8c:	92 27       	eor	r25, r18
    3f8e:	90 fb       	bst	r25, 0
    3f90:	86 f9       	bld	r24, 6
    3f92:	80 93 dc 01 	sts	0x01DC, r24
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_HOST_NKRO)) {
    3f96:	81 e1       	ldi	r24, 0x11	; 17
    3f98:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <bootmagic_scan_keycode>
    3f9c:	88 23       	and	r24, r24
    3f9e:	59 f0       	breq	.+22     	; 0x3fb6 <bootmagic+0x1de>
        keymap_config.nkro = !keymap_config.nkro;
    3fa0:	80 91 dc 01 	lds	r24, 0x01DC
    3fa4:	87 fb       	bst	r24, 7
    3fa6:	22 27       	eor	r18, r18
    3fa8:	20 f9       	bld	r18, 0
    3faa:	91 e0       	ldi	r25, 0x01	; 1
    3fac:	92 27       	eor	r25, r18
    3fae:	90 fb       	bst	r25, 0
    3fb0:	87 f9       	bld	r24, 7
    3fb2:	80 93 dc 01 	sts	0x01DC, r24
    }
    eeconfig_write_keymap(keymap_config.raw);
    3fb6:	80 91 dc 01 	lds	r24, 0x01DC
    3fba:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <eeconfig_write_keymap>

#ifdef NKRO_ENABLE
    keyboard_nkro = keymap_config.nkro;
    3fbe:	80 91 dc 01 	lds	r24, 0x01DC
    3fc2:	87 fb       	bst	r24, 7
    3fc4:	88 27       	eor	r24, r24
    3fc6:	80 f9       	bld	r24, 0
    3fc8:	80 93 0b 01 	sts	0x010B, r24
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    3fcc:	87 e2       	ldi	r24, 0x27	; 39
    3fce:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <bootmagic_scan_keycode>
    3fd2:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    3fd4:	8e e1       	ldi	r24, 0x1E	; 30
    3fd6:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <bootmagic_scan_keycode>
    3fda:	81 11       	cpse	r24, r1
    3fdc:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    3fde:	8f e1       	ldi	r24, 0x1F	; 31
    3fe0:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <bootmagic_scan_keycode>
    3fe4:	81 11       	cpse	r24, r1
    3fe6:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    3fe8:	80 e2       	ldi	r24, 0x20	; 32
    3fea:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <bootmagic_scan_keycode>
    3fee:	81 11       	cpse	r24, r1
    3ff0:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    3ff2:	81 e2       	ldi	r24, 0x21	; 33
    3ff4:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <bootmagic_scan_keycode>
    3ff8:	81 11       	cpse	r24, r1
    3ffa:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    3ffc:	82 e2       	ldi	r24, 0x22	; 34
    3ffe:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <bootmagic_scan_keycode>
    4002:	81 11       	cpse	r24, r1
    4004:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    4006:	83 e2       	ldi	r24, 0x23	; 35
    4008:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <bootmagic_scan_keycode>
    400c:	81 11       	cpse	r24, r1
    400e:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    4010:	84 e2       	ldi	r24, 0x24	; 36
    4012:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <bootmagic_scan_keycode>
    4016:	88 23       	and	r24, r24
    4018:	11 f0       	breq	.+4      	; 0x401e <bootmagic+0x246>
    401a:	c0 68       	ori	r28, 0x80	; 128
    401c:	02 c0       	rjmp	.+4      	; 0x4022 <bootmagic+0x24a>
    if (default_layer) {
    401e:	cc 23       	and	r28, r28
    4020:	29 f0       	breq	.+10     	; 0x402c <bootmagic+0x254>
        eeconfig_write_default_layer(default_layer);
    4022:	8c 2f       	mov	r24, r28
    4024:	0e 94 53 20 	call	0x40a6	; 0x40a6 <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    4028:	6c 2f       	mov	r22, r28
    402a:	03 c0       	rjmp	.+6      	; 0x4032 <bootmagic+0x25a>
    } else {
        default_layer = eeconfig_read_default_layer();
    402c:	0e 94 4f 20 	call	0x409e	; 0x409e <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    4030:	68 2f       	mov	r22, r24
    4032:	70 e0       	ldi	r23, 0x00	; 0
    4034:	80 e0       	ldi	r24, 0x00	; 0
    4036:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    4038:	cf 91       	pop	r28
    if (default_layer) {
        eeconfig_write_default_layer(default_layer);
        default_layer_set((uint32_t)default_layer);
    } else {
        default_layer = eeconfig_read_default_layer();
        default_layer_set((uint32_t)default_layer);
    403a:	0c 94 78 19 	jmp	0x32f0	; 0x32f0 <default_layer_set>
    }
}
    403e:	cf 91       	pop	r28
    4040:	08 95       	ret

00004042 <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    4042:	6d ee       	ldi	r22, 0xED	; 237
    4044:	7e ef       	ldi	r23, 0xFE	; 254
    4046:	80 e0       	ldi	r24, 0x00	; 0
    4048:	90 e0       	ldi	r25, 0x00	; 0
    404a:	0e 94 bf 29 	call	0x537e	; 0x537e <eeprom_write_word>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    404e:	60 e0       	ldi	r22, 0x00	; 0
    4050:	82 e0       	ldi	r24, 0x02	; 2
    4052:	90 e0       	ldi	r25, 0x00	; 0
    4054:	0e 94 b1 29 	call	0x5362	; 0x5362 <eeprom_write_byte>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    4058:	60 e0       	ldi	r22, 0x00	; 0
    405a:	83 e0       	ldi	r24, 0x03	; 3
    405c:	90 e0       	ldi	r25, 0x00	; 0
    405e:	0e 94 b1 29 	call	0x5362	; 0x5362 <eeprom_write_byte>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    4062:	60 e0       	ldi	r22, 0x00	; 0
    4064:	84 e0       	ldi	r24, 0x04	; 4
    4066:	90 e0       	ldi	r25, 0x00	; 0
    4068:	0e 94 b1 29 	call	0x5362	; 0x5362 <eeprom_write_byte>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    406c:	60 e0       	ldi	r22, 0x00	; 0
    406e:	85 e0       	ldi	r24, 0x05	; 5
    4070:	90 e0       	ldi	r25, 0x00	; 0
    4072:	0c 94 b1 29 	jmp	0x5362	; 0x5362 <eeprom_write_byte>

00004076 <eeconfig_is_enabled>:
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    4076:	80 e0       	ldi	r24, 0x00	; 0
    4078:	90 e0       	ldi	r25, 0x00	; 0
    407a:	0e 94 ab 29 	call	0x5356	; 0x5356 <eeprom_read_word>
    407e:	21 e0       	ldi	r18, 0x01	; 1
    4080:	8d 3e       	cpi	r24, 0xED	; 237
    4082:	9e 4f       	sbci	r25, 0xFE	; 254
    4084:	09 f0       	breq	.+2      	; 0x4088 <eeconfig_is_enabled+0x12>
    4086:	20 e0       	ldi	r18, 0x00	; 0
}
    4088:	82 2f       	mov	r24, r18
    408a:	08 95       	ret

0000408c <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    408c:	82 e0       	ldi	r24, 0x02	; 2
    408e:	90 e0       	ldi	r25, 0x00	; 0
    4090:	0c 94 a3 29 	jmp	0x5346	; 0x5346 <eeprom_read_byte>

00004094 <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    4094:	68 2f       	mov	r22, r24
    4096:	82 e0       	ldi	r24, 0x02	; 2
    4098:	90 e0       	ldi	r25, 0x00	; 0
    409a:	0c 94 b1 29 	jmp	0x5362	; 0x5362 <eeprom_write_byte>

0000409e <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    409e:	83 e0       	ldi	r24, 0x03	; 3
    40a0:	90 e0       	ldi	r25, 0x00	; 0
    40a2:	0c 94 a3 29 	jmp	0x5346	; 0x5346 <eeprom_read_byte>

000040a6 <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    40a6:	68 2f       	mov	r22, r24
    40a8:	83 e0       	ldi	r24, 0x03	; 3
    40aa:	90 e0       	ldi	r25, 0x00	; 0
    40ac:	0c 94 b1 29 	jmp	0x5362	; 0x5362 <eeprom_write_byte>

000040b0 <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    40b0:	84 e0       	ldi	r24, 0x04	; 4
    40b2:	90 e0       	ldi	r25, 0x00	; 0
    40b4:	0c 94 a3 29 	jmp	0x5346	; 0x5346 <eeprom_read_byte>

000040b8 <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    40b8:	68 2f       	mov	r22, r24
    40ba:	84 e0       	ldi	r24, 0x04	; 4
    40bc:	90 e0       	ldi	r25, 0x00	; 0
    40be:	0c 94 b1 29 	jmp	0x5362	; 0x5362 <eeprom_write_byte>

000040c2 <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    40c2:	80 91 d3 01 	lds	r24, 0x01D3
    40c6:	80 ff       	sbrs	r24, 0
    40c8:	0b c0       	rjmp	.+22     	; 0x40e0 <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    40ca:	60 91 11 01 	lds	r22, 0x0111
    40ce:	85 e0       	ldi	r24, 0x05	; 5
    40d0:	68 9f       	mul	r22, r24
    40d2:	b0 01       	movw	r22, r0
    40d4:	11 24       	eor	r1, r1
    40d6:	75 95       	asr	r23
    40d8:	67 95       	ror	r22
    40da:	75 95       	asr	r23
    40dc:	67 95       	ror	r22
    40de:	2b c0       	rjmp	.+86     	; 0x4136 <move_unit+0x74>
    } else if (mousekey_accel & (1<<1)) {
    40e0:	81 ff       	sbrs	r24, 1
    40e2:	09 c0       	rjmp	.+18     	; 0x40f6 <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    40e4:	60 91 11 01 	lds	r22, 0x0111
    40e8:	85 e0       	ldi	r24, 0x05	; 5
    40ea:	68 9f       	mul	r22, r24
    40ec:	b0 01       	movw	r22, r0
    40ee:	11 24       	eor	r1, r1
    40f0:	75 95       	asr	r23
    40f2:	67 95       	ror	r22
    40f4:	20 c0       	rjmp	.+64     	; 0x4136 <move_unit+0x74>
    } else if (mousekey_accel & (1<<2)) {
    40f6:	82 ff       	sbrs	r24, 2
    40f8:	07 c0       	rjmp	.+14     	; 0x4108 <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    40fa:	60 91 11 01 	lds	r22, 0x0111
    40fe:	85 e0       	ldi	r24, 0x05	; 5
    4100:	68 9f       	mul	r22, r24
    4102:	b0 01       	movw	r22, r0
    4104:	11 24       	eor	r1, r1
    4106:	17 c0       	rjmp	.+46     	; 0x4136 <move_unit+0x74>
    } else if (mousekey_repeat == 0) {
    4108:	90 91 d4 01 	lds	r25, 0x01D4
    410c:	99 23       	and	r25, r25
    410e:	d1 f0       	breq	.+52     	; 0x4144 <move_unit+0x82>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    4110:	60 91 10 01 	lds	r22, 0x0110
    4114:	96 17       	cp	r25, r22
    4116:	88 f7       	brcc	.-30     	; 0x40fa <move_unit+0x38>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    4118:	20 91 11 01 	lds	r18, 0x0111
    411c:	85 e0       	ldi	r24, 0x05	; 5
    411e:	28 9f       	mul	r18, r24
    4120:	90 01       	movw	r18, r0
    4122:	11 24       	eor	r1, r1
    4124:	92 9f       	mul	r25, r18
    4126:	a0 01       	movw	r20, r0
    4128:	93 9f       	mul	r25, r19
    412a:	50 0d       	add	r21, r0
    412c:	11 24       	eor	r1, r1
    412e:	70 e0       	ldi	r23, 0x00	; 0
    4130:	ca 01       	movw	r24, r20
    4132:	0e 94 75 29 	call	0x52ea	; 0x52ea <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4136:	60 38       	cpi	r22, 0x80	; 128
    4138:	71 05       	cpc	r23, r1
    413a:	40 f4       	brcc	.+16     	; 0x414c <move_unit+0x8a>
    413c:	61 15       	cp	r22, r1
    413e:	71 05       	cpc	r23, r1
    4140:	39 f0       	breq	.+14     	; 0x4150 <move_unit+0x8e>
    4142:	02 c0       	rjmp	.+4      	; 0x4148 <move_unit+0x86>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    4144:	65 e0       	ldi	r22, 0x05	; 5
    4146:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4148:	86 2f       	mov	r24, r22
    414a:	08 95       	ret
    414c:	8f e7       	ldi	r24, 0x7F	; 127
    414e:	08 95       	ret
    4150:	81 e0       	ldi	r24, 0x01	; 1
}
    4152:	08 95       	ret

00004154 <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4154:	80 91 d3 01 	lds	r24, 0x01D3
    4158:	80 ff       	sbrs	r24, 0
    415a:	08 c0       	rjmp	.+16     	; 0x416c <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    415c:	60 91 0f 01 	lds	r22, 0x010F
    4160:	70 e0       	ldi	r23, 0x00	; 0
    4162:	75 95       	asr	r23
    4164:	67 95       	ror	r22
    4166:	75 95       	asr	r23
    4168:	67 95       	ror	r22
    416a:	21 c0       	rjmp	.+66     	; 0x41ae <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<1)) {
    416c:	81 ff       	sbrs	r24, 1
    416e:	06 c0       	rjmp	.+12     	; 0x417c <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    4170:	60 91 0f 01 	lds	r22, 0x010F
    4174:	70 e0       	ldi	r23, 0x00	; 0
    4176:	75 95       	asr	r23
    4178:	67 95       	ror	r22
    417a:	19 c0       	rjmp	.+50     	; 0x41ae <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<2)) {
    417c:	82 ff       	sbrs	r24, 2
    417e:	04 c0       	rjmp	.+8      	; 0x4188 <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    4180:	60 91 0f 01 	lds	r22, 0x010F
    4184:	70 e0       	ldi	r23, 0x00	; 0
    4186:	10 c0       	rjmp	.+32     	; 0x41a8 <wheel_unit+0x54>
    } else if (mousekey_repeat == 0) {
    4188:	90 91 d4 01 	lds	r25, 0x01D4
    418c:	99 23       	and	r25, r25
    418e:	c1 f0       	breq	.+48     	; 0x41c0 <wheel_unit+0x6c>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    4190:	60 91 0e 01 	lds	r22, 0x010E
    4194:	96 17       	cp	r25, r22
    4196:	a0 f7       	brcc	.-24     	; 0x4180 <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    4198:	80 91 0f 01 	lds	r24, 0x010F
    419c:	89 9f       	mul	r24, r25
    419e:	c0 01       	movw	r24, r0
    41a0:	11 24       	eor	r1, r1
    41a2:	70 e0       	ldi	r23, 0x00	; 0
    41a4:	0e 94 75 29 	call	0x52ea	; 0x52ea <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    41a8:	60 38       	cpi	r22, 0x80	; 128
    41aa:	71 05       	cpc	r23, r1
    41ac:	28 f4       	brcc	.+10     	; 0x41b8 <wheel_unit+0x64>
    41ae:	61 15       	cp	r22, r1
    41b0:	71 05       	cpc	r23, r1
    41b2:	21 f0       	breq	.+8      	; 0x41bc <wheel_unit+0x68>
    41b4:	86 2f       	mov	r24, r22
    41b6:	08 95       	ret
    41b8:	8f e7       	ldi	r24, 0x7F	; 127
    41ba:	08 95       	ret
    41bc:	81 e0       	ldi	r24, 0x01	; 1
    41be:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    41c0:	61 e0       	ldi	r22, 0x01	; 1
    41c2:	70 e0       	ldi	r23, 0x00	; 0
    41c4:	f4 cf       	rjmp	.-24     	; 0x41ae <wheel_unit+0x5a>

000041c6 <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    41c6:	80 3f       	cpi	r24, 0xF0	; 240
    41c8:	21 f4       	brne	.+8      	; 0x41d2 <mousekey_on+0xc>
    41ca:	0e 94 61 20 	call	0x40c2	; 0x40c2 <move_unit>
    41ce:	81 95       	neg	r24
    41d0:	04 c0       	rjmp	.+8      	; 0x41da <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    41d2:	81 3f       	cpi	r24, 0xF1	; 241
    41d4:	29 f4       	brne	.+10     	; 0x41e0 <mousekey_on+0x1a>
    41d6:	0e 94 61 20 	call	0x40c2	; 0x40c2 <move_unit>
    41da:	80 93 d7 01 	sts	0x01D7, r24
    41de:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    41e0:	82 3f       	cpi	r24, 0xF2	; 242
    41e2:	21 f4       	brne	.+8      	; 0x41ec <mousekey_on+0x26>
    41e4:	0e 94 61 20 	call	0x40c2	; 0x40c2 <move_unit>
    41e8:	81 95       	neg	r24
    41ea:	04 c0       	rjmp	.+8      	; 0x41f4 <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    41ec:	83 3f       	cpi	r24, 0xF3	; 243
    41ee:	29 f4       	brne	.+10     	; 0x41fa <mousekey_on+0x34>
    41f0:	0e 94 61 20 	call	0x40c2	; 0x40c2 <move_unit>
    41f4:	80 93 d6 01 	sts	0x01D6, r24
    41f8:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    41fa:	89 3f       	cpi	r24, 0xF9	; 249
    41fc:	19 f4       	brne	.+6      	; 0x4204 <mousekey_on+0x3e>
    41fe:	0e 94 aa 20 	call	0x4154	; 0x4154 <wheel_unit>
    4202:	05 c0       	rjmp	.+10     	; 0x420e <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    4204:	8a 3f       	cpi	r24, 0xFA	; 250
    4206:	31 f4       	brne	.+12     	; 0x4214 <mousekey_on+0x4e>
    4208:	0e 94 aa 20 	call	0x4154	; 0x4154 <wheel_unit>
    420c:	81 95       	neg	r24
    420e:	80 93 d8 01 	sts	0x01D8, r24
    4212:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    4214:	8b 3f       	cpi	r24, 0xFB	; 251
    4216:	21 f4       	brne	.+8      	; 0x4220 <mousekey_on+0x5a>
    4218:	0e 94 aa 20 	call	0x4154	; 0x4154 <wheel_unit>
    421c:	81 95       	neg	r24
    421e:	04 c0       	rjmp	.+8      	; 0x4228 <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    4220:	8c 3f       	cpi	r24, 0xFC	; 252
    4222:	29 f4       	brne	.+10     	; 0x422e <mousekey_on+0x68>
    4224:	0e 94 aa 20 	call	0x4154	; 0x4154 <wheel_unit>
    4228:	80 93 d9 01 	sts	0x01D9, r24
    422c:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    422e:	84 3f       	cpi	r24, 0xF4	; 244
    4230:	21 f4       	brne	.+8      	; 0x423a <mousekey_on+0x74>
    4232:	80 91 d5 01 	lds	r24, 0x01D5
    4236:	81 60       	ori	r24, 0x01	; 1
    4238:	17 c0       	rjmp	.+46     	; 0x4268 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    423a:	85 3f       	cpi	r24, 0xF5	; 245
    423c:	21 f4       	brne	.+8      	; 0x4246 <mousekey_on+0x80>
    423e:	80 91 d5 01 	lds	r24, 0x01D5
    4242:	82 60       	ori	r24, 0x02	; 2
    4244:	11 c0       	rjmp	.+34     	; 0x4268 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    4246:	86 3f       	cpi	r24, 0xF6	; 246
    4248:	21 f4       	brne	.+8      	; 0x4252 <mousekey_on+0x8c>
    424a:	80 91 d5 01 	lds	r24, 0x01D5
    424e:	84 60       	ori	r24, 0x04	; 4
    4250:	0b c0       	rjmp	.+22     	; 0x4268 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    4252:	87 3f       	cpi	r24, 0xF7	; 247
    4254:	21 f4       	brne	.+8      	; 0x425e <mousekey_on+0x98>
    4256:	80 91 d5 01 	lds	r24, 0x01D5
    425a:	88 60       	ori	r24, 0x08	; 8
    425c:	05 c0       	rjmp	.+10     	; 0x4268 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    425e:	88 3f       	cpi	r24, 0xF8	; 248
    4260:	31 f4       	brne	.+12     	; 0x426e <mousekey_on+0xa8>
    4262:	80 91 d5 01 	lds	r24, 0x01D5
    4266:	80 61       	ori	r24, 0x10	; 16
    4268:	80 93 d5 01 	sts	0x01D5, r24
    426c:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    426e:	8d 3f       	cpi	r24, 0xFD	; 253
    4270:	21 f4       	brne	.+8      	; 0x427a <mousekey_on+0xb4>
    4272:	80 91 d3 01 	lds	r24, 0x01D3
    4276:	81 60       	ori	r24, 0x01	; 1
    4278:	0b c0       	rjmp	.+22     	; 0x4290 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    427a:	8e 3f       	cpi	r24, 0xFE	; 254
    427c:	21 f4       	brne	.+8      	; 0x4286 <mousekey_on+0xc0>
    427e:	80 91 d3 01 	lds	r24, 0x01D3
    4282:	82 60       	ori	r24, 0x02	; 2
    4284:	05 c0       	rjmp	.+10     	; 0x4290 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    4286:	8f 3f       	cpi	r24, 0xFF	; 255
    4288:	29 f4       	brne	.+10     	; 0x4294 <mousekey_on+0xce>
    428a:	80 91 d3 01 	lds	r24, 0x01D3
    428e:	84 60       	ori	r24, 0x04	; 4
    4290:	80 93 d3 01 	sts	0x01D3, r24
    4294:	08 95       	ret

00004296 <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    4296:	80 3f       	cpi	r24, 0xF0	; 240
    4298:	39 f4       	brne	.+14     	; 0x42a8 <mousekey_off+0x12>
    429a:	80 91 d7 01 	lds	r24, 0x01D7
    429e:	87 ff       	sbrs	r24, 7
    42a0:	6c c0       	rjmp	.+216    	; 0x437a <mousekey_off+0xe4>
    42a2:	10 92 d7 01 	sts	0x01D7, r1
    42a6:	69 c0       	rjmp	.+210    	; 0x437a <mousekey_off+0xe4>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    42a8:	81 3f       	cpi	r24, 0xF1	; 241
    42aa:	29 f4       	brne	.+10     	; 0x42b6 <mousekey_off+0x20>
    42ac:	80 91 d7 01 	lds	r24, 0x01D7
    42b0:	18 16       	cp	r1, r24
    42b2:	bc f3       	brlt	.-18     	; 0x42a2 <mousekey_off+0xc>
    42b4:	62 c0       	rjmp	.+196    	; 0x437a <mousekey_off+0xe4>
    42b6:	90 91 d6 01 	lds	r25, 0x01D6
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    42ba:	82 3f       	cpi	r24, 0xF2	; 242
    42bc:	29 f4       	brne	.+10     	; 0x42c8 <mousekey_off+0x32>
    42be:	97 ff       	sbrs	r25, 7
    42c0:	5c c0       	rjmp	.+184    	; 0x437a <mousekey_off+0xe4>
    42c2:	10 92 d6 01 	sts	0x01D6, r1
    42c6:	59 c0       	rjmp	.+178    	; 0x437a <mousekey_off+0xe4>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    42c8:	83 3f       	cpi	r24, 0xF3	; 243
    42ca:	19 f4       	brne	.+6      	; 0x42d2 <mousekey_off+0x3c>
    42cc:	19 16       	cp	r1, r25
    42ce:	cc f3       	brlt	.-14     	; 0x42c2 <mousekey_off+0x2c>
    42d0:	54 c0       	rjmp	.+168    	; 0x437a <mousekey_off+0xe4>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    42d2:	89 3f       	cpi	r24, 0xF9	; 249
    42d4:	41 f4       	brne	.+16     	; 0x42e6 <mousekey_off+0x50>
    42d6:	80 91 d8 01 	lds	r24, 0x01D8
    42da:	18 16       	cp	r1, r24
    42dc:	0c f0       	brlt	.+2      	; 0x42e0 <mousekey_off+0x4a>
    42de:	4d c0       	rjmp	.+154    	; 0x437a <mousekey_off+0xe4>
    42e0:	10 92 d8 01 	sts	0x01D8, r1
    42e4:	4a c0       	rjmp	.+148    	; 0x437a <mousekey_off+0xe4>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    42e6:	8a 3f       	cpi	r24, 0xFA	; 250
    42e8:	29 f4       	brne	.+10     	; 0x42f4 <mousekey_off+0x5e>
    42ea:	80 91 d8 01 	lds	r24, 0x01D8
    42ee:	87 ff       	sbrs	r24, 7
    42f0:	44 c0       	rjmp	.+136    	; 0x437a <mousekey_off+0xe4>
    42f2:	f6 cf       	rjmp	.-20     	; 0x42e0 <mousekey_off+0x4a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    42f4:	8b 3f       	cpi	r24, 0xFB	; 251
    42f6:	39 f4       	brne	.+14     	; 0x4306 <mousekey_off+0x70>
    42f8:	80 91 d9 01 	lds	r24, 0x01D9
    42fc:	87 ff       	sbrs	r24, 7
    42fe:	3d c0       	rjmp	.+122    	; 0x437a <mousekey_off+0xe4>
    4300:	10 92 d9 01 	sts	0x01D9, r1
    4304:	3a c0       	rjmp	.+116    	; 0x437a <mousekey_off+0xe4>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    4306:	8c 3f       	cpi	r24, 0xFC	; 252
    4308:	29 f4       	brne	.+10     	; 0x4314 <mousekey_off+0x7e>
    430a:	80 91 d9 01 	lds	r24, 0x01D9
    430e:	18 16       	cp	r1, r24
    4310:	bc f3       	brlt	.-18     	; 0x4300 <mousekey_off+0x6a>
    4312:	33 c0       	rjmp	.+102    	; 0x437a <mousekey_off+0xe4>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    4314:	84 3f       	cpi	r24, 0xF4	; 244
    4316:	21 f4       	brne	.+8      	; 0x4320 <mousekey_off+0x8a>
    4318:	80 91 d5 01 	lds	r24, 0x01D5
    431c:	8e 7f       	andi	r24, 0xFE	; 254
    431e:	17 c0       	rjmp	.+46     	; 0x434e <mousekey_off+0xb8>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    4320:	85 3f       	cpi	r24, 0xF5	; 245
    4322:	21 f4       	brne	.+8      	; 0x432c <mousekey_off+0x96>
    4324:	80 91 d5 01 	lds	r24, 0x01D5
    4328:	8d 7f       	andi	r24, 0xFD	; 253
    432a:	11 c0       	rjmp	.+34     	; 0x434e <mousekey_off+0xb8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    432c:	86 3f       	cpi	r24, 0xF6	; 246
    432e:	21 f4       	brne	.+8      	; 0x4338 <mousekey_off+0xa2>
    4330:	80 91 d5 01 	lds	r24, 0x01D5
    4334:	8b 7f       	andi	r24, 0xFB	; 251
    4336:	0b c0       	rjmp	.+22     	; 0x434e <mousekey_off+0xb8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    4338:	87 3f       	cpi	r24, 0xF7	; 247
    433a:	21 f4       	brne	.+8      	; 0x4344 <mousekey_off+0xae>
    433c:	80 91 d5 01 	lds	r24, 0x01D5
    4340:	87 7f       	andi	r24, 0xF7	; 247
    4342:	05 c0       	rjmp	.+10     	; 0x434e <mousekey_off+0xb8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    4344:	88 3f       	cpi	r24, 0xF8	; 248
    4346:	31 f4       	brne	.+12     	; 0x4354 <mousekey_off+0xbe>
    4348:	80 91 d5 01 	lds	r24, 0x01D5
    434c:	8f 7e       	andi	r24, 0xEF	; 239
    434e:	80 93 d5 01 	sts	0x01D5, r24
    4352:	13 c0       	rjmp	.+38     	; 0x437a <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    4354:	8d 3f       	cpi	r24, 0xFD	; 253
    4356:	21 f4       	brne	.+8      	; 0x4360 <mousekey_off+0xca>
    4358:	80 91 d3 01 	lds	r24, 0x01D3
    435c:	8e 7f       	andi	r24, 0xFE	; 254
    435e:	0b c0       	rjmp	.+22     	; 0x4376 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    4360:	8e 3f       	cpi	r24, 0xFE	; 254
    4362:	21 f4       	brne	.+8      	; 0x436c <mousekey_off+0xd6>
    4364:	80 91 d3 01 	lds	r24, 0x01D3
    4368:	8d 7f       	andi	r24, 0xFD	; 253
    436a:	05 c0       	rjmp	.+10     	; 0x4376 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    436c:	8f 3f       	cpi	r24, 0xFF	; 255
    436e:	29 f4       	brne	.+10     	; 0x437a <mousekey_off+0xe4>
    4370:	80 91 d3 01 	lds	r24, 0x01D3
    4374:	8b 7f       	andi	r24, 0xFB	; 251
    4376:	80 93 d3 01 	sts	0x01D3, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    437a:	80 91 d6 01 	lds	r24, 0x01D6
    437e:	81 11       	cpse	r24, r1
    4380:	0e c0       	rjmp	.+28     	; 0x439e <mousekey_off+0x108>
    4382:	80 91 d7 01 	lds	r24, 0x01D7
    4386:	81 11       	cpse	r24, r1
    4388:	0a c0       	rjmp	.+20     	; 0x439e <mousekey_off+0x108>
    438a:	80 91 d8 01 	lds	r24, 0x01D8
    438e:	81 11       	cpse	r24, r1
    4390:	06 c0       	rjmp	.+12     	; 0x439e <mousekey_off+0x108>
    4392:	80 91 d9 01 	lds	r24, 0x01D9
    4396:	81 11       	cpse	r24, r1
    4398:	02 c0       	rjmp	.+4      	; 0x439e <mousekey_off+0x108>
        mousekey_repeat = 0;
    439a:	10 92 d4 01 	sts	0x01D4, r1
    439e:	08 95       	ret

000043a0 <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    43a0:	80 91 cb 01 	lds	r24, 0x01CB
    43a4:	83 ff       	sbrs	r24, 3
    43a6:	7e c0       	rjmp	.+252    	; 0x44a4 <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    43a8:	88 e0       	ldi	r24, 0x08	; 8
    43aa:	95 e0       	ldi	r25, 0x05	; 5
    43ac:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    phex(mouse_report.buttons); print("|");
    43b0:	80 91 d5 01 	lds	r24, 0x01D5
    43b4:	1f 92       	push	r1
    43b6:	8f 93       	push	r24
    43b8:	83 e0       	ldi	r24, 0x03	; 3
    43ba:	95 e0       	ldi	r25, 0x05	; 5
    43bc:	9f 93       	push	r25
    43be:	8f 93       	push	r24
    43c0:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    43c4:	81 e0       	ldi	r24, 0x01	; 1
    43c6:	95 e0       	ldi	r25, 0x05	; 5
    43c8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    print_decs(mouse_report.x); print(" ");
    43cc:	80 91 d6 01 	lds	r24, 0x01D6
    43d0:	28 2f       	mov	r18, r24
    43d2:	08 2e       	mov	r0, r24
    43d4:	00 0c       	add	r0, r0
    43d6:	33 0b       	sbc	r19, r19
    43d8:	3f 93       	push	r19
    43da:	8f 93       	push	r24
    43dc:	8e ef       	ldi	r24, 0xFE	; 254
    43de:	94 e0       	ldi	r25, 0x04	; 4
    43e0:	9f 93       	push	r25
    43e2:	8f 93       	push	r24
    43e4:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    43e8:	8c ef       	ldi	r24, 0xFC	; 252
    43ea:	94 e0       	ldi	r25, 0x04	; 4
    43ec:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    print_decs(mouse_report.y); print(" ");
    43f0:	80 91 d7 01 	lds	r24, 0x01D7
    43f4:	28 2f       	mov	r18, r24
    43f6:	08 2e       	mov	r0, r24
    43f8:	00 0c       	add	r0, r0
    43fa:	33 0b       	sbc	r19, r19
    43fc:	3f 93       	push	r19
    43fe:	8f 93       	push	r24
    4400:	89 ef       	ldi	r24, 0xF9	; 249
    4402:	94 e0       	ldi	r25, 0x04	; 4
    4404:	9f 93       	push	r25
    4406:	8f 93       	push	r24
    4408:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    440c:	87 ef       	ldi	r24, 0xF7	; 247
    440e:	94 e0       	ldi	r25, 0x04	; 4
    4410:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    print_decs(mouse_report.v); print(" ");
    4414:	80 91 d8 01 	lds	r24, 0x01D8
    4418:	28 2f       	mov	r18, r24
    441a:	08 2e       	mov	r0, r24
    441c:	00 0c       	add	r0, r0
    441e:	33 0b       	sbc	r19, r19
    4420:	3f 93       	push	r19
    4422:	8f 93       	push	r24
    4424:	84 ef       	ldi	r24, 0xF4	; 244
    4426:	94 e0       	ldi	r25, 0x04	; 4
    4428:	9f 93       	push	r25
    442a:	8f 93       	push	r24
    442c:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    4430:	82 ef       	ldi	r24, 0xF2	; 242
    4432:	94 e0       	ldi	r25, 0x04	; 4
    4434:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    print_decs(mouse_report.h); print("](");
    4438:	80 91 d9 01 	lds	r24, 0x01D9
    443c:	28 2f       	mov	r18, r24
    443e:	08 2e       	mov	r0, r24
    4440:	00 0c       	add	r0, r0
    4442:	33 0b       	sbc	r19, r19
    4444:	3f 93       	push	r19
    4446:	8f 93       	push	r24
    4448:	8f ee       	ldi	r24, 0xEF	; 239
    444a:	94 e0       	ldi	r25, 0x04	; 4
    444c:	9f 93       	push	r25
    444e:	8f 93       	push	r24
    4450:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    4454:	8c ee       	ldi	r24, 0xEC	; 236
    4456:	94 e0       	ldi	r25, 0x04	; 4
    4458:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    print_dec(mousekey_repeat); print("/");
    445c:	80 91 d4 01 	lds	r24, 0x01D4
    4460:	1f 92       	push	r1
    4462:	8f 93       	push	r24
    4464:	89 ee       	ldi	r24, 0xE9	; 233
    4466:	94 e0       	ldi	r25, 0x04	; 4
    4468:	9f 93       	push	r25
    446a:	8f 93       	push	r24
    446c:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    4470:	87 ee       	ldi	r24, 0xE7	; 231
    4472:	94 e0       	ldi	r25, 0x04	; 4
    4474:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    print_dec(mousekey_accel); print(")\n");
    4478:	80 91 d3 01 	lds	r24, 0x01D3
    447c:	1f 92       	push	r1
    447e:	8f 93       	push	r24
    4480:	84 ee       	ldi	r24, 0xE4	; 228
    4482:	94 e0       	ldi	r25, 0x04	; 4
    4484:	9f 93       	push	r25
    4486:	8f 93       	push	r24
    4488:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    448c:	81 ee       	ldi	r24, 0xE1	; 225
    448e:	94 e0       	ldi	r25, 0x04	; 4
    4490:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    4494:	8d b7       	in	r24, 0x3d	; 61
    4496:	9e b7       	in	r25, 0x3e	; 62
    4498:	4c 96       	adiw	r24, 0x1c	; 28
    449a:	0f b6       	in	r0, 0x3f	; 63
    449c:	f8 94       	cli
    449e:	9e bf       	out	0x3e, r25	; 62
    44a0:	0f be       	out	0x3f, r0	; 63
    44a2:	8d bf       	out	0x3d, r24	; 61
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    44a4:	85 ed       	ldi	r24, 0xD5	; 213
    44a6:	91 e0       	ldi	r25, 0x01	; 1
    44a8:	0e 94 75 10 	call	0x20ea	; 0x20ea <host_mouse_send>
    last_timer = timer_read();
    44ac:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <timer_read>
    44b0:	90 93 d2 01 	sts	0x01D2, r25
    44b4:	80 93 d1 01 	sts	0x01D1, r24
    44b8:	08 95       	ret

000044ba <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    44ba:	1f 93       	push	r17
    44bc:	cf 93       	push	r28
    44be:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    44c0:	80 91 d1 01 	lds	r24, 0x01D1
    44c4:	90 91 d2 01 	lds	r25, 0x01D2
    44c8:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <timer_elapsed>
    44cc:	ac 01       	movw	r20, r24
    44ce:	90 91 d4 01 	lds	r25, 0x01D4
    44d2:	99 23       	and	r25, r25
    44d4:	21 f0       	breq	.+8      	; 0x44de <mousekey_task+0x24>
    44d6:	20 91 12 01 	lds	r18, 0x0112
    44da:	30 e0       	ldi	r19, 0x00	; 0
    44dc:	06 c0       	rjmp	.+12     	; 0x44ea <mousekey_task+0x30>
    44de:	20 91 13 01 	lds	r18, 0x0113
    44e2:	8a e0       	ldi	r24, 0x0A	; 10
    44e4:	28 9f       	mul	r18, r24
    44e6:	90 01       	movw	r18, r0
    44e8:	11 24       	eor	r1, r1
    44ea:	42 17       	cp	r20, r18
    44ec:	53 07       	cpc	r21, r19
    44ee:	08 f4       	brcc	.+2      	; 0x44f2 <mousekey_task+0x38>
    44f0:	85 c0       	rjmp	.+266    	; 0x45fc <mousekey_task+0x142>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    44f2:	80 91 d6 01 	lds	r24, 0x01D6
    44f6:	c0 91 d7 01 	lds	r28, 0x01D7
    44fa:	d0 91 d8 01 	lds	r29, 0x01D8
    44fe:	10 91 d9 01 	lds	r17, 0x01D9
    4502:	81 11       	cpse	r24, r1
    4504:	07 c0       	rjmp	.+14     	; 0x4514 <mousekey_task+0x5a>
    4506:	c1 11       	cpse	r28, r1
    4508:	75 c0       	rjmp	.+234    	; 0x45f4 <mousekey_task+0x13a>
    450a:	d1 11       	cpse	r29, r1
    450c:	73 c0       	rjmp	.+230    	; 0x45f4 <mousekey_task+0x13a>
    450e:	11 11       	cpse	r17, r1
    4510:	71 c0       	rjmp	.+226    	; 0x45f4 <mousekey_task+0x13a>
    4512:	74 c0       	rjmp	.+232    	; 0x45fc <mousekey_task+0x142>
        return;

    if (mousekey_repeat != UINT8_MAX)
    4514:	9f 3f       	cpi	r25, 0xFF	; 255
    4516:	19 f0       	breq	.+6      	; 0x451e <mousekey_task+0x64>
        mousekey_repeat++;
    4518:	9f 5f       	subi	r25, 0xFF	; 255
    451a:	90 93 d4 01 	sts	0x01D4, r25


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    451e:	18 16       	cp	r1, r24
    4520:	24 f4       	brge	.+8      	; 0x452a <mousekey_task+0x70>
    4522:	0e 94 61 20 	call	0x40c2	; 0x40c2 <move_unit>
    4526:	80 93 d6 01 	sts	0x01D6, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    452a:	80 91 d6 01 	lds	r24, 0x01D6
    452e:	87 ff       	sbrs	r24, 7
    4530:	05 c0       	rjmp	.+10     	; 0x453c <mousekey_task+0x82>
    4532:	0e 94 61 20 	call	0x40c2	; 0x40c2 <move_unit>
    4536:	81 95       	neg	r24
    4538:	80 93 d6 01 	sts	0x01D6, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    453c:	1c 16       	cp	r1, r28
    453e:	24 f4       	brge	.+8      	; 0x4548 <mousekey_task+0x8e>
    4540:	0e 94 61 20 	call	0x40c2	; 0x40c2 <move_unit>
    4544:	80 93 d7 01 	sts	0x01D7, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    4548:	80 91 d7 01 	lds	r24, 0x01D7
    454c:	87 ff       	sbrs	r24, 7
    454e:	05 c0       	rjmp	.+10     	; 0x455a <mousekey_task+0xa0>
    4550:	0e 94 61 20 	call	0x40c2	; 0x40c2 <move_unit>
    4554:	81 95       	neg	r24
    4556:	80 93 d7 01 	sts	0x01D7, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    455a:	60 91 d6 01 	lds	r22, 0x01D6
    455e:	66 23       	and	r22, r22
    4560:	31 f1       	breq	.+76     	; 0x45ae <mousekey_task+0xf4>
    4562:	c0 91 d7 01 	lds	r28, 0x01D7
    4566:	cc 23       	and	r28, r28
    4568:	11 f1       	breq	.+68     	; 0x45ae <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    456a:	06 2e       	mov	r0, r22
    456c:	00 0c       	add	r0, r0
    456e:	77 0b       	sbc	r23, r23
    4570:	88 0b       	sbc	r24, r24
    4572:	99 0b       	sbc	r25, r25
    4574:	0e 94 70 28 	call	0x50e0	; 0x50e0 <__floatsisf>
    4578:	23 e3       	ldi	r18, 0x33	; 51
    457a:	33 e3       	ldi	r19, 0x33	; 51
    457c:	43 e3       	ldi	r20, 0x33	; 51
    457e:	5f e3       	ldi	r21, 0x3F	; 63
    4580:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <__mulsf3>
    4584:	0e 94 38 28 	call	0x5070	; 0x5070 <__fixsfsi>
    4588:	60 93 d6 01 	sts	0x01D6, r22
        mouse_report.y *= 0.7;
    458c:	6c 2f       	mov	r22, r28
    458e:	cc 0f       	add	r28, r28
    4590:	77 0b       	sbc	r23, r23
    4592:	88 0b       	sbc	r24, r24
    4594:	99 0b       	sbc	r25, r25
    4596:	0e 94 70 28 	call	0x50e0	; 0x50e0 <__floatsisf>
    459a:	23 e3       	ldi	r18, 0x33	; 51
    459c:	33 e3       	ldi	r19, 0x33	; 51
    459e:	43 e3       	ldi	r20, 0x33	; 51
    45a0:	5f e3       	ldi	r21, 0x3F	; 63
    45a2:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <__mulsf3>
    45a6:	0e 94 38 28 	call	0x5070	; 0x5070 <__fixsfsi>
    45aa:	60 93 d7 01 	sts	0x01D7, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    45ae:	1d 16       	cp	r1, r29
    45b0:	24 f4       	brge	.+8      	; 0x45ba <mousekey_task+0x100>
    45b2:	0e 94 aa 20 	call	0x4154	; 0x4154 <wheel_unit>
    45b6:	80 93 d8 01 	sts	0x01D8, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    45ba:	80 91 d8 01 	lds	r24, 0x01D8
    45be:	87 ff       	sbrs	r24, 7
    45c0:	05 c0       	rjmp	.+10     	; 0x45cc <mousekey_task+0x112>
    45c2:	0e 94 aa 20 	call	0x4154	; 0x4154 <wheel_unit>
    45c6:	81 95       	neg	r24
    45c8:	80 93 d8 01 	sts	0x01D8, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    45cc:	11 16       	cp	r1, r17
    45ce:	24 f4       	brge	.+8      	; 0x45d8 <mousekey_task+0x11e>
    45d0:	0e 94 aa 20 	call	0x4154	; 0x4154 <wheel_unit>
    45d4:	80 93 d9 01 	sts	0x01D9, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    45d8:	80 91 d9 01 	lds	r24, 0x01D9
    45dc:	87 ff       	sbrs	r24, 7
    45de:	05 c0       	rjmp	.+10     	; 0x45ea <mousekey_task+0x130>
    45e0:	0e 94 aa 20 	call	0x4154	; 0x4154 <wheel_unit>
    45e4:	81 95       	neg	r24
    45e6:	80 93 d9 01 	sts	0x01D9, r24

    mousekey_send();
}
    45ea:	df 91       	pop	r29
    45ec:	cf 91       	pop	r28
    45ee:	1f 91       	pop	r17
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    45f0:	0c 94 d0 21 	jmp	0x43a0	; 0x43a0 <mousekey_send>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
        return;

    if (mousekey_repeat != UINT8_MAX)
    45f4:	9f 3f       	cpi	r25, 0xFF	; 255
    45f6:	09 f0       	breq	.+2      	; 0x45fa <mousekey_task+0x140>
    45f8:	8f cf       	rjmp	.-226    	; 0x4518 <mousekey_task+0x5e>
    45fa:	97 cf       	rjmp	.-210    	; 0x452a <mousekey_task+0x70>
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
}
    45fc:	df 91       	pop	r29
    45fe:	cf 91       	pop	r28
    4600:	1f 91       	pop	r17
    4602:	08 95       	ret

00004604 <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    4604:	e5 ed       	ldi	r30, 0xD5	; 213
    4606:	f1 e0       	ldi	r31, 0x01	; 1
    4608:	85 e0       	ldi	r24, 0x05	; 5
    460a:	df 01       	movw	r26, r30
    460c:	1d 92       	st	X+, r1
    460e:	8a 95       	dec	r24
    4610:	e9 f7       	brne	.-6      	; 0x460c <mousekey_clear+0x8>
    mousekey_repeat = 0;
    4612:	10 92 d4 01 	sts	0x01D4, r1
    mousekey_accel = 0;
    4616:	10 92 d3 01 	sts	0x01D3, r1
    461a:	08 95       	ret

0000461c <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    461c:	8b e2       	ldi	r24, 0x2B	; 43
    461e:	97 e0       	ldi	r25, 0x07	; 7
    4620:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    4624:	1f 92       	push	r1
    4626:	81 e0       	ldi	r24, 0x01	; 1
    4628:	8f 93       	push	r24
    462a:	1f 92       	push	r1
    462c:	85 e0       	ldi	r24, 0x05	; 5
    462e:	8f 93       	push	r24
    4630:	8d ed       	ldi	r24, 0xDD	; 221
    4632:	96 e0       	ldi	r25, 0x06	; 6
    4634:	9f 93       	push	r25
    4636:	8f 93       	push	r24
    4638:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    463c:	0f 90       	pop	r0
    463e:	0f 90       	pop	r0
    4640:	0f 90       	pop	r0
    4642:	0f 90       	pop	r0
    4644:	0f 90       	pop	r0
    4646:	0f 90       	pop	r0
    4648:	08 95       	ret

0000464a <mousekey_param_inc>:

//#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    464a:	83 30       	cpi	r24, 0x03	; 3
    464c:	e9 f1       	breq	.+122    	; 0x46c8 <mousekey_param_inc+0x7e>
    464e:	28 f4       	brcc	.+10     	; 0x465a <mousekey_param_inc+0x10>
    4650:	81 30       	cpi	r24, 0x01	; 1
    4652:	61 f0       	breq	.+24     	; 0x466c <mousekey_param_inc+0x22>
    4654:	82 30       	cpi	r24, 0x02	; 2
    4656:	09 f1       	breq	.+66     	; 0x469a <mousekey_param_inc+0x50>
    4658:	08 95       	ret
    465a:	85 30       	cpi	r24, 0x05	; 5
    465c:	09 f4       	brne	.+2      	; 0x4660 <mousekey_param_inc+0x16>
    465e:	62 c0       	rjmp	.+196    	; 0x4724 <mousekey_param_inc+0xda>
    4660:	08 f4       	brcc	.+2      	; 0x4664 <mousekey_param_inc+0x1a>
    4662:	49 c0       	rjmp	.+146    	; 0x46f6 <mousekey_param_inc+0xac>
    4664:	86 30       	cpi	r24, 0x06	; 6
    4666:	09 f4       	brne	.+2      	; 0x466a <mousekey_param_inc+0x20>
    4668:	74 c0       	rjmp	.+232    	; 0x4752 <mousekey_param_inc+0x108>
    466a:	08 95       	ret
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    466c:	80 91 13 01 	lds	r24, 0x0113
    4670:	26 2f       	mov	r18, r22
    4672:	30 e0       	ldi	r19, 0x00	; 0
    4674:	28 0f       	add	r18, r24
    4676:	31 1d       	adc	r19, r1
    4678:	2f 3f       	cpi	r18, 0xFF	; 255
    467a:	31 05       	cpc	r19, r1
    467c:	24 f4       	brge	.+8      	; 0x4686 <mousekey_param_inc+0x3c>
                mk_delay += inc;
    467e:	68 0f       	add	r22, r24
    4680:	60 93 13 01 	sts	0x0113, r22
    4684:	03 c0       	rjmp	.+6      	; 0x468c <mousekey_param_inc+0x42>
            else
                mk_delay = UINT8_MAX;
    4686:	8f ef       	ldi	r24, 0xFF	; 255
    4688:	80 93 13 01 	sts	0x0113, r24
            PRINT_SET_VAL(mk_delay);
    468c:	80 91 13 01 	lds	r24, 0x0113
    4690:	1f 92       	push	r1
    4692:	8f 93       	push	r24
    4694:	86 e1       	ldi	r24, 0x16	; 22
    4696:	96 e0       	ldi	r25, 0x06	; 6
    4698:	72 c0       	rjmp	.+228    	; 0x477e <mousekey_param_inc+0x134>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    469a:	80 91 12 01 	lds	r24, 0x0112
    469e:	26 2f       	mov	r18, r22
    46a0:	30 e0       	ldi	r19, 0x00	; 0
    46a2:	28 0f       	add	r18, r24
    46a4:	31 1d       	adc	r19, r1
    46a6:	2f 3f       	cpi	r18, 0xFF	; 255
    46a8:	31 05       	cpc	r19, r1
    46aa:	24 f4       	brge	.+8      	; 0x46b4 <mousekey_param_inc+0x6a>
                mk_interval += inc;
    46ac:	68 0f       	add	r22, r24
    46ae:	60 93 12 01 	sts	0x0112, r22
    46b2:	03 c0       	rjmp	.+6      	; 0x46ba <mousekey_param_inc+0x70>
            else
                mk_interval = UINT8_MAX;
    46b4:	8f ef       	ldi	r24, 0xFF	; 255
    46b6:	80 93 12 01 	sts	0x0112, r24
            PRINT_SET_VAL(mk_interval);
    46ba:	80 91 12 01 	lds	r24, 0x0112
    46be:	1f 92       	push	r1
    46c0:	8f 93       	push	r24
    46c2:	84 e0       	ldi	r24, 0x04	; 4
    46c4:	96 e0       	ldi	r25, 0x06	; 6
    46c6:	5b c0       	rjmp	.+182    	; 0x477e <mousekey_param_inc+0x134>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    46c8:	80 91 11 01 	lds	r24, 0x0111
    46cc:	26 2f       	mov	r18, r22
    46ce:	30 e0       	ldi	r19, 0x00	; 0
    46d0:	28 0f       	add	r18, r24
    46d2:	31 1d       	adc	r19, r1
    46d4:	2f 3f       	cpi	r18, 0xFF	; 255
    46d6:	31 05       	cpc	r19, r1
    46d8:	24 f4       	brge	.+8      	; 0x46e2 <mousekey_param_inc+0x98>
                mk_max_speed += inc;
    46da:	68 0f       	add	r22, r24
    46dc:	60 93 11 01 	sts	0x0111, r22
    46e0:	03 c0       	rjmp	.+6      	; 0x46e8 <mousekey_param_inc+0x9e>
            else
                mk_max_speed = UINT8_MAX;
    46e2:	8f ef       	ldi	r24, 0xFF	; 255
    46e4:	80 93 11 01 	sts	0x0111, r24
            PRINT_SET_VAL(mk_max_speed);
    46e8:	80 91 11 01 	lds	r24, 0x0111
    46ec:	1f 92       	push	r1
    46ee:	8f 93       	push	r24
    46f0:	81 ef       	ldi	r24, 0xF1	; 241
    46f2:	95 e0       	ldi	r25, 0x05	; 5
    46f4:	44 c0       	rjmp	.+136    	; 0x477e <mousekey_param_inc+0x134>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    46f6:	80 91 10 01 	lds	r24, 0x0110
    46fa:	26 2f       	mov	r18, r22
    46fc:	30 e0       	ldi	r19, 0x00	; 0
    46fe:	28 0f       	add	r18, r24
    4700:	31 1d       	adc	r19, r1
    4702:	2f 3f       	cpi	r18, 0xFF	; 255
    4704:	31 05       	cpc	r19, r1
    4706:	24 f4       	brge	.+8      	; 0x4710 <mousekey_param_inc+0xc6>
                mk_time_to_max += inc;
    4708:	68 0f       	add	r22, r24
    470a:	60 93 10 01 	sts	0x0110, r22
    470e:	03 c0       	rjmp	.+6      	; 0x4716 <mousekey_param_inc+0xcc>
            else
                mk_time_to_max = UINT8_MAX;
    4710:	8f ef       	ldi	r24, 0xFF	; 255
    4712:	80 93 10 01 	sts	0x0110, r24
            PRINT_SET_VAL(mk_time_to_max);
    4716:	80 91 10 01 	lds	r24, 0x0110
    471a:	1f 92       	push	r1
    471c:	8f 93       	push	r24
    471e:	8c ed       	ldi	r24, 0xDC	; 220
    4720:	95 e0       	ldi	r25, 0x05	; 5
    4722:	2d c0       	rjmp	.+90     	; 0x477e <mousekey_param_inc+0x134>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    4724:	80 91 0f 01 	lds	r24, 0x010F
    4728:	26 2f       	mov	r18, r22
    472a:	30 e0       	ldi	r19, 0x00	; 0
    472c:	28 0f       	add	r18, r24
    472e:	31 1d       	adc	r19, r1
    4730:	2f 3f       	cpi	r18, 0xFF	; 255
    4732:	31 05       	cpc	r19, r1
    4734:	24 f4       	brge	.+8      	; 0x473e <mousekey_param_inc+0xf4>
                mk_wheel_max_speed += inc;
    4736:	68 0f       	add	r22, r24
    4738:	60 93 0f 01 	sts	0x010F, r22
    473c:	03 c0       	rjmp	.+6      	; 0x4744 <mousekey_param_inc+0xfa>
            else
                mk_wheel_max_speed = UINT8_MAX;
    473e:	8f ef       	ldi	r24, 0xFF	; 255
    4740:	80 93 0f 01 	sts	0x010F, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    4744:	80 91 0f 01 	lds	r24, 0x010F
    4748:	1f 92       	push	r1
    474a:	8f 93       	push	r24
    474c:	83 ec       	ldi	r24, 0xC3	; 195
    474e:	95 e0       	ldi	r25, 0x05	; 5
    4750:	16 c0       	rjmp	.+44     	; 0x477e <mousekey_param_inc+0x134>
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    4752:	80 91 0e 01 	lds	r24, 0x010E
    4756:	26 2f       	mov	r18, r22
    4758:	30 e0       	ldi	r19, 0x00	; 0
    475a:	28 0f       	add	r18, r24
    475c:	31 1d       	adc	r19, r1
    475e:	2f 3f       	cpi	r18, 0xFF	; 255
    4760:	31 05       	cpc	r19, r1
    4762:	24 f4       	brge	.+8      	; 0x476c <mousekey_param_inc+0x122>
                mk_wheel_time_to_max += inc;
    4764:	68 0f       	add	r22, r24
    4766:	60 93 0e 01 	sts	0x010E, r22
    476a:	03 c0       	rjmp	.+6      	; 0x4772 <mousekey_param_inc+0x128>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    476c:	8f ef       	ldi	r24, 0xFF	; 255
    476e:	80 93 0e 01 	sts	0x010E, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4772:	80 91 0e 01 	lds	r24, 0x010E
    4776:	1f 92       	push	r1
    4778:	8f 93       	push	r24
    477a:	88 ea       	ldi	r24, 0xA8	; 168
    477c:	95 e0       	ldi	r25, 0x05	; 5
    477e:	9f 93       	push	r25
    4780:	8f 93       	push	r24
    4782:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
            break;
    4786:	0f 90       	pop	r0
    4788:	0f 90       	pop	r0
    478a:	0f 90       	pop	r0
    478c:	0f 90       	pop	r0
    478e:	08 95       	ret

00004790 <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    4790:	83 30       	cpi	r24, 0x03	; 3
    4792:	81 f1       	breq	.+96     	; 0x47f4 <mousekey_param_dec+0x64>
    4794:	28 f4       	brcc	.+10     	; 0x47a0 <mousekey_param_dec+0x10>
    4796:	81 30       	cpi	r24, 0x01	; 1
    4798:	59 f0       	breq	.+22     	; 0x47b0 <mousekey_param_dec+0x20>
    479a:	82 30       	cpi	r24, 0x02	; 2
    479c:	d1 f0       	breq	.+52     	; 0x47d2 <mousekey_param_dec+0x42>
    479e:	08 95       	ret
    47a0:	85 30       	cpi	r24, 0x05	; 5
    47a2:	09 f4       	brne	.+2      	; 0x47a6 <mousekey_param_dec+0x16>
    47a4:	49 c0       	rjmp	.+146    	; 0x4838 <mousekey_param_dec+0xa8>
    47a6:	b8 f1       	brcs	.+110    	; 0x4816 <mousekey_param_dec+0x86>
    47a8:	86 30       	cpi	r24, 0x06	; 6
    47aa:	09 f4       	brne	.+2      	; 0x47ae <mousekey_param_dec+0x1e>
    47ac:	56 c0       	rjmp	.+172    	; 0x485a <mousekey_param_dec+0xca>
    47ae:	08 95       	ret
        case 1:
            if (mk_delay > dec)
    47b0:	80 91 13 01 	lds	r24, 0x0113
    47b4:	68 17       	cp	r22, r24
    47b6:	20 f4       	brcc	.+8      	; 0x47c0 <mousekey_param_dec+0x30>
                mk_delay -= dec;
    47b8:	86 1b       	sub	r24, r22
    47ba:	80 93 13 01 	sts	0x0113, r24
    47be:	02 c0       	rjmp	.+4      	; 0x47c4 <mousekey_param_dec+0x34>
            else
                mk_delay = 0;
    47c0:	10 92 13 01 	sts	0x0113, r1
            PRINT_SET_VAL(mk_delay);
    47c4:	80 91 13 01 	lds	r24, 0x0113
    47c8:	1f 92       	push	r1
    47ca:	8f 93       	push	r24
    47cc:	89 e9       	ldi	r24, 0x99	; 153
    47ce:	95 e0       	ldi	r25, 0x05	; 5
    47d0:	54 c0       	rjmp	.+168    	; 0x487a <mousekey_param_dec+0xea>
            break;
        case 2:
            if (mk_interval > dec)
    47d2:	80 91 12 01 	lds	r24, 0x0112
    47d6:	68 17       	cp	r22, r24
    47d8:	20 f4       	brcc	.+8      	; 0x47e2 <mousekey_param_dec+0x52>
                mk_interval -= dec;
    47da:	86 1b       	sub	r24, r22
    47dc:	80 93 12 01 	sts	0x0112, r24
    47e0:	02 c0       	rjmp	.+4      	; 0x47e6 <mousekey_param_dec+0x56>
            else
                mk_interval = 0;
    47e2:	10 92 12 01 	sts	0x0112, r1
            PRINT_SET_VAL(mk_interval);
    47e6:	80 91 12 01 	lds	r24, 0x0112
    47ea:	1f 92       	push	r1
    47ec:	8f 93       	push	r24
    47ee:	87 e8       	ldi	r24, 0x87	; 135
    47f0:	95 e0       	ldi	r25, 0x05	; 5
    47f2:	43 c0       	rjmp	.+134    	; 0x487a <mousekey_param_dec+0xea>
            break;
        case 3:
            if (mk_max_speed > dec)
    47f4:	80 91 11 01 	lds	r24, 0x0111
    47f8:	68 17       	cp	r22, r24
    47fa:	20 f4       	brcc	.+8      	; 0x4804 <mousekey_param_dec+0x74>
                mk_max_speed -= dec;
    47fc:	86 1b       	sub	r24, r22
    47fe:	80 93 11 01 	sts	0x0111, r24
    4802:	02 c0       	rjmp	.+4      	; 0x4808 <mousekey_param_dec+0x78>
            else
                mk_max_speed = 0;
    4804:	10 92 11 01 	sts	0x0111, r1
            PRINT_SET_VAL(mk_max_speed);
    4808:	80 91 11 01 	lds	r24, 0x0111
    480c:	1f 92       	push	r1
    480e:	8f 93       	push	r24
    4810:	84 e7       	ldi	r24, 0x74	; 116
    4812:	95 e0       	ldi	r25, 0x05	; 5
    4814:	32 c0       	rjmp	.+100    	; 0x487a <mousekey_param_dec+0xea>
            break;
        case 4:
            if (mk_time_to_max > dec)
    4816:	80 91 10 01 	lds	r24, 0x0110
    481a:	68 17       	cp	r22, r24
    481c:	20 f4       	brcc	.+8      	; 0x4826 <mousekey_param_dec+0x96>
                mk_time_to_max -= dec;
    481e:	86 1b       	sub	r24, r22
    4820:	80 93 10 01 	sts	0x0110, r24
    4824:	02 c0       	rjmp	.+4      	; 0x482a <mousekey_param_dec+0x9a>
            else
                mk_time_to_max = 0;
    4826:	10 92 10 01 	sts	0x0110, r1
            PRINT_SET_VAL(mk_time_to_max);
    482a:	80 91 10 01 	lds	r24, 0x0110
    482e:	1f 92       	push	r1
    4830:	8f 93       	push	r24
    4832:	8f e5       	ldi	r24, 0x5F	; 95
    4834:	95 e0       	ldi	r25, 0x05	; 5
    4836:	21 c0       	rjmp	.+66     	; 0x487a <mousekey_param_dec+0xea>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    4838:	80 91 0f 01 	lds	r24, 0x010F
    483c:	68 17       	cp	r22, r24
    483e:	20 f4       	brcc	.+8      	; 0x4848 <mousekey_param_dec+0xb8>
                mk_wheel_max_speed -= dec;
    4840:	86 1b       	sub	r24, r22
    4842:	80 93 0f 01 	sts	0x010F, r24
    4846:	02 c0       	rjmp	.+4      	; 0x484c <mousekey_param_dec+0xbc>
            else
                mk_wheel_max_speed = 0;
    4848:	10 92 0f 01 	sts	0x010F, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    484c:	80 91 0f 01 	lds	r24, 0x010F
    4850:	1f 92       	push	r1
    4852:	8f 93       	push	r24
    4854:	86 e4       	ldi	r24, 0x46	; 70
    4856:	95 e0       	ldi	r25, 0x05	; 5
    4858:	10 c0       	rjmp	.+32     	; 0x487a <mousekey_param_dec+0xea>
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    485a:	80 91 0e 01 	lds	r24, 0x010E
    485e:	68 17       	cp	r22, r24
    4860:	20 f4       	brcc	.+8      	; 0x486a <mousekey_param_dec+0xda>
                mk_wheel_time_to_max -= dec;
    4862:	86 1b       	sub	r24, r22
    4864:	80 93 0e 01 	sts	0x010E, r24
    4868:	02 c0       	rjmp	.+4      	; 0x486e <mousekey_param_dec+0xde>
            else
                mk_wheel_time_to_max = 0;
    486a:	10 92 0e 01 	sts	0x010E, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    486e:	80 91 0e 01 	lds	r24, 0x010E
    4872:	1f 92       	push	r1
    4874:	8f 93       	push	r24
    4876:	8b e2       	ldi	r24, 0x2B	; 43
    4878:	95 e0       	ldi	r25, 0x05	; 5
    487a:	9f 93       	push	r25
    487c:	8f 93       	push	r24
    487e:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
            break;
    4882:	0f 90       	pop	r0
    4884:	0f 90       	pop	r0
    4886:	0f 90       	pop	r0
    4888:	0f 90       	pop	r0
    488a:	08 95       	ret

0000488c <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    488c:	cf 93       	push	r28
    488e:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    4890:	1f 92       	push	r1
    4892:	8f 93       	push	r24
    4894:	80 e3       	ldi	r24, 0x30	; 48
    4896:	98 e0       	ldi	r25, 0x08	; 8
    4898:	9f 93       	push	r25
    489a:	8f 93       	push	r24
    489c:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    default_layer_set(1UL<<layer);
    48a0:	81 e0       	ldi	r24, 0x01	; 1
    48a2:	90 e0       	ldi	r25, 0x00	; 0
    48a4:	a0 e0       	ldi	r26, 0x00	; 0
    48a6:	b0 e0       	ldi	r27, 0x00	; 0
    48a8:	bc 01       	movw	r22, r24
    48aa:	cd 01       	movw	r24, r26
    48ac:	04 c0       	rjmp	.+8      	; 0x48b6 <switch_default_layer+0x2a>
    48ae:	66 0f       	add	r22, r22
    48b0:	77 1f       	adc	r23, r23
    48b2:	88 1f       	adc	r24, r24
    48b4:	99 1f       	adc	r25, r25
    48b6:	ca 95       	dec	r28
    48b8:	d2 f7       	brpl	.-12     	; 0x48ae <switch_default_layer+0x22>
    48ba:	0e 94 78 19 	call	0x32f0	; 0x32f0 <default_layer_set>
    clear_keyboard();
    48be:	0f 90       	pop	r0
    48c0:	0f 90       	pop	r0
    48c2:	0f 90       	pop	r0
    48c4:	0f 90       	pop	r0
}
    48c6:	cf 91       	pop	r28

static void switch_default_layer(uint8_t layer)
{
    xprintf("L%d\n", layer);
    default_layer_set(1UL<<layer);
    clear_keyboard();
    48c8:	0c 94 b3 15 	jmp	0x2b66	; 0x2b66 <clear_keyboard>

000048cc <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    48cc:	cf 93       	push	r28
    static host_driver_t *host_driver = 0;
    switch (code) {
    48ce:	8b 31       	cpi	r24, 0x1B	; 27
    48d0:	09 f4       	brne	.+2      	; 0x48d4 <command_common+0x8>
    48d2:	cb c1       	rjmp	.+918    	; 0x4c6a <command_common+0x39e>
    48d4:	08 f0       	brcs	.+2      	; 0x48d8 <command_common+0xc>
    48d6:	49 c0       	rjmp	.+146    	; 0x496a <command_common+0x9e>
    48d8:	8e 30       	cpi	r24, 0x0E	; 14
    48da:	09 f4       	brne	.+2      	; 0x48de <command_common+0x12>
    48dc:	da c1       	rjmp	.+948    	; 0x4c92 <command_common+0x3c6>
    48de:	00 f5       	brcc	.+64     	; 0x4920 <command_common+0x54>
    48e0:	87 30       	cpi	r24, 0x07	; 7
    48e2:	09 f4       	brne	.+2      	; 0x48e6 <command_common+0x1a>
    48e4:	a9 c1       	rjmp	.+850    	; 0x4c38 <command_common+0x36c>
    48e6:	a8 f4       	brcc	.+42     	; 0x4912 <command_common+0x46>
    48e8:	86 30       	cpi	r24, 0x06	; 6
    48ea:	09 f0       	breq	.+2      	; 0x48ee <command_common+0x22>
    48ec:	60 c2       	rjmp	.+1216   	; 0x4dae <command_common+0x4e2>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    48ee:	80 91 cb 01 	lds	r24, 0x01CB
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    48f2:	81 7f       	andi	r24, 0xF1	; 241
    48f4:	8e 7f       	andi	r24, 0xFE	; 254
    48f6:	80 93 cb 01 	sts	0x01CB, r24
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    48fa:	85 e3       	ldi	r24, 0x35	; 53
    48fc:	98 e0       	ldi	r25, 0x08	; 8
    48fe:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
            debug_matrix   = false;
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
            command_console_help();
            print("C> ");
    4902:	83 e6       	ldi	r24, 0x63	; 99
    4904:	9c e0       	ldi	r25, 0x0C	; 12
    4906:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
            command_state = CONSOLE;
    490a:	81 e0       	ldi	r24, 0x01	; 1
    490c:	80 93 db 01 	sts	0x01DB, r24
    4910:	91 c1       	rjmp	.+802    	; 0x4c34 <command_common+0x368>
#endif

static bool command_common(uint8_t code)
{
    static host_driver_t *host_driver = 0;
    switch (code) {
    4912:	88 30       	cpi	r24, 0x08	; 8
    4914:	09 f4       	brne	.+2      	; 0x4918 <command_common+0x4c>
    4916:	5b c0       	rjmp	.+182    	; 0x49ce <command_common+0x102>
    4918:	8b 30       	cpi	r24, 0x0B	; 11
    491a:	09 f4       	brne	.+2      	; 0x491e <command_common+0x52>
    491c:	87 c1       	rjmp	.+782    	; 0x4c2c <command_common+0x360>
    491e:	47 c2       	rjmp	.+1166   	; 0x4dae <command_common+0x4e2>
    4920:	81 31       	cpi	r24, 0x11	; 17
    4922:	09 f4       	brne	.+2      	; 0x4926 <command_common+0x5a>
    4924:	2c c2       	rjmp	.+1112   	; 0x4d7e <command_common+0x4b2>
    4926:	20 f4       	brcc	.+8      	; 0x4930 <command_common+0x64>
    4928:	80 31       	cpi	r24, 0x10	; 16
    492a:	09 f4       	brne	.+2      	; 0x492e <command_common+0x62>
    492c:	c6 c1       	rjmp	.+908    	; 0x4cba <command_common+0x3ee>
    492e:	3f c2       	rjmp	.+1150   	; 0x4dae <command_common+0x4e2>
    4930:	86 31       	cpi	r24, 0x16	; 22
    4932:	09 f4       	brne	.+2      	; 0x4936 <command_common+0x6a>
    4934:	dd c1       	rjmp	.+954    	; 0x4cf0 <command_common+0x424>
    4936:	89 31       	cpi	r24, 0x19	; 25
    4938:	09 f0       	breq	.+2      	; 0x493c <command_common+0x70>
    493a:	39 c2       	rjmp	.+1138   	; 0x4dae <command_common+0x4e2>
            } else {
                print("\nmouse: off\n");
            }
            break;
        case KC_V: // print version & information
            print("\n\t- Version -\n");
    493c:	87 ed       	ldi	r24, 0xD7	; 215
    493e:	9b e0       	ldi	r25, 0x0B	; 11
    4940:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    4944:	8a ea       	ldi	r24, 0xAA	; 170
    4946:	9b e0       	ldi	r25, 0x0B	; 11
    4948:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    494c:	83 e7       	ldi	r24, 0x73	; 115
    494e:	9b e0       	ldi	r25, 0x0B	; 11
    4950:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    4954:	86 e4       	ldi	r24, 0x46	; 70
    4956:	9b e0       	ldi	r25, 0x0B	; 11
    4958:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
            /* build options */
            print("OPTIONS:"
    495c:	82 e0       	ldi	r24, 0x02	; 2
    495e:	9b e0       	ldi	r25, 0x0B	; 11
    4960:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    4964:	84 ed       	ldi	r24, 0xD4	; 212
    4966:	9a e0       	ldi	r25, 0x0A	; 10
    4968:	63 c1       	rjmp	.+710    	; 0x4c30 <command_common+0x364>
#endif

static bool command_common(uint8_t code)
{
    static host_driver_t *host_driver = 0;
    switch (code) {
    496a:	85 33       	cpi	r24, 0x35	; 53
    496c:	09 f4       	brne	.+2      	; 0x4970 <command_common+0xa4>
    496e:	19 c2       	rjmp	.+1074   	; 0x4da2 <command_common+0x4d6>
    4970:	68 f4       	brcc	.+26     	; 0x498c <command_common+0xc0>
    4972:	87 32       	cpi	r24, 0x27	; 39
    4974:	09 f4       	brne	.+2      	; 0x4978 <command_common+0xac>
    4976:	15 c2       	rjmp	.+1066   	; 0x4da2 <command_common+0x4d6>
    4978:	28 f4       	brcc	.+10     	; 0x4984 <command_common+0xb8>
    497a:	8e 31       	cpi	r24, 0x1E	; 30
    497c:	08 f4       	brcc	.+2      	; 0x4980 <command_common+0xb4>
    497e:	17 c2       	rjmp	.+1070   	; 0x4dae <command_common+0x4e2>
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    4980:	8d 51       	subi	r24, 0x1D	; 29
    4982:	12 c2       	rjmp	.+1060   	; 0x4da8 <command_common+0x4dc>
#endif

static bool command_common(uint8_t code)
{
    static host_driver_t *host_driver = 0;
    switch (code) {
    4984:	89 32       	cpi	r24, 0x29	; 41
    4986:	09 f4       	brne	.+2      	; 0x498a <command_common+0xbe>
    4988:	0c c2       	rjmp	.+1048   	; 0x4da2 <command_common+0x4d6>
    498a:	11 c2       	rjmp	.+1058   	; 0x4dae <command_common+0x4e2>
    498c:	83 34       	cpi	r24, 0x43	; 67
    498e:	38 f4       	brcc	.+14     	; 0x499e <command_common+0xd2>
    4990:	8a 33       	cpi	r24, 0x3A	; 58
    4992:	08 f0       	brcs	.+2      	; 0x4996 <command_common+0xca>
    4994:	08 c2       	rjmp	.+1040   	; 0x4da6 <command_common+0x4da>
    4996:	88 33       	cpi	r24, 0x38	; 56
    4998:	09 f4       	brne	.+2      	; 0x499c <command_common+0xd0>
    499a:	48 c1       	rjmp	.+656    	; 0x4c2c <command_common+0x360>
    499c:	08 c2       	rjmp	.+1040   	; 0x4dae <command_common+0x4e2>
    499e:	83 34       	cpi	r24, 0x43	; 67
    49a0:	09 f4       	brne	.+2      	; 0x49a4 <command_common+0xd8>
    49a2:	ff c1       	rjmp	.+1022   	; 0x4da2 <command_common+0x4d6>
    49a4:	88 34       	cpi	r24, 0x48	; 72
    49a6:	09 f0       	breq	.+2      	; 0x49aa <command_common+0xde>
    49a8:	02 c2       	rjmp	.+1028   	; 0x4dae <command_common+0x4e2>
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
            break;
        case KC_PAUSE:
            clear_keyboard();
    49aa:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <clear_keyboard>
            print("\n\nbootloader... ");
    49ae:	82 e5       	ldi	r24, 0x52	; 82
    49b0:	9c e0       	ldi	r25, 0x0C	; 12
    49b2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    49b6:	9f ef       	ldi	r25, 0xFF	; 255
    49b8:	23 ed       	ldi	r18, 0xD3	; 211
    49ba:	80 e3       	ldi	r24, 0x30	; 48
    49bc:	91 50       	subi	r25, 0x01	; 1
    49be:	20 40       	sbci	r18, 0x00	; 0
    49c0:	80 40       	sbci	r24, 0x00	; 0
    49c2:	e1 f7       	brne	.-8      	; 0x49bc <command_common+0xf0>
    49c4:	00 c0       	rjmp	.+0      	; 0x49c6 <command_common+0xfa>
    49c6:	00 00       	nop
            _delay_ms(1000);
            bootloader_jump(); // not return
    49c8:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <bootloader_jump>
    49cc:	33 c1       	rjmp	.+614    	; 0x4c34 <command_common+0x368>
            led_set(host_keyboard_leds());
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    49ce:	87 e6       	ldi	r24, 0x67	; 103
    49d0:	9c e0       	ldi	r25, 0x0C	; 12
    49d2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    49d6:	84 e3       	ldi	r24, 0x34	; 52
    49d8:	9a e0       	ldi	r25, 0x0A	; 10
    49da:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    49de:	0e 94 4f 20 	call	0x409e	; 0x409e <eeconfig_read_default_layer>
    49e2:	1f 92       	push	r1
    49e4:	8f 93       	push	r24
    49e6:	81 e3       	ldi	r24, 0x31	; 49
    49e8:	9a e0       	ldi	r25, 0x0A	; 10
    49ea:	9f 93       	push	r25
    49ec:	8f 93       	push	r24
    49ee:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    49f2:	8f e2       	ldi	r24, 0x2F	; 47
    49f4:	9a e0       	ldi	r25, 0x0A	; 10
    49f6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    49fa:	0e 94 46 20 	call	0x408c	; 0x408c <eeconfig_read_debug>
    49fe:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    4a00:	8c e1       	ldi	r24, 0x1C	; 28
    4a02:	9a e0       	ldi	r25, 0x0A	; 10
    4a04:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    4a08:	1f 92       	push	r1
    4a0a:	cf 93       	push	r28
    4a0c:	87 e1       	ldi	r24, 0x17	; 23
    4a0e:	9a e0       	ldi	r25, 0x0A	; 10
    4a10:	9f 93       	push	r25
    4a12:	8f 93       	push	r24
    4a14:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    4a18:	85 e1       	ldi	r24, 0x15	; 21
    4a1a:	9a e0       	ldi	r25, 0x0A	; 10
    4a1c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    4a20:	8b e0       	ldi	r24, 0x0B	; 11
    4a22:	9a e0       	ldi	r25, 0x0A	; 10
    4a24:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    4a28:	8c 2f       	mov	r24, r28
    4a2a:	81 70       	andi	r24, 0x01	; 1
    4a2c:	1f 92       	push	r1
    4a2e:	8f 93       	push	r24
    4a30:	88 e0       	ldi	r24, 0x08	; 8
    4a32:	9a e0       	ldi	r25, 0x0A	; 10
    4a34:	9f 93       	push	r25
    4a36:	8f 93       	push	r24
    4a38:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    4a3c:	86 e0       	ldi	r24, 0x06	; 6
    4a3e:	9a e0       	ldi	r25, 0x0A	; 10
    4a40:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    4a44:	8c ef       	ldi	r24, 0xFC	; 252
    4a46:	99 e0       	ldi	r25, 0x09	; 9
    4a48:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    4a4c:	c1 fb       	bst	r28, 1
    4a4e:	88 27       	eor	r24, r24
    4a50:	80 f9       	bld	r24, 0
    4a52:	1f 92       	push	r1
    4a54:	8f 93       	push	r24
    4a56:	89 ef       	ldi	r24, 0xF9	; 249
    4a58:	99 e0       	ldi	r25, 0x09	; 9
    4a5a:	9f 93       	push	r25
    4a5c:	8f 93       	push	r24
    4a5e:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    4a62:	87 ef       	ldi	r24, 0xF7	; 247
    4a64:	99 e0       	ldi	r25, 0x09	; 9
    4a66:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    4a6a:	8b ee       	ldi	r24, 0xEB	; 235
    4a6c:	99 e0       	ldi	r25, 0x09	; 9
    4a6e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    4a72:	c2 fb       	bst	r28, 2
    4a74:	88 27       	eor	r24, r24
    4a76:	80 f9       	bld	r24, 0
    4a78:	1f 92       	push	r1
    4a7a:	8f 93       	push	r24
    4a7c:	88 ee       	ldi	r24, 0xE8	; 232
    4a7e:	99 e0       	ldi	r25, 0x09	; 9
    4a80:	9f 93       	push	r25
    4a82:	8f 93       	push	r24
    4a84:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    4a88:	86 ee       	ldi	r24, 0xE6	; 230
    4a8a:	99 e0       	ldi	r25, 0x09	; 9
    4a8c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    4a90:	8d ed       	ldi	r24, 0xDD	; 221
    4a92:	99 e0       	ldi	r25, 0x09	; 9
    4a94:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    4a98:	c3 fb       	bst	r28, 3
    4a9a:	cc 27       	eor	r28, r28
    4a9c:	c0 f9       	bld	r28, 0
    4a9e:	1f 92       	push	r1
    4aa0:	cf 93       	push	r28
    4aa2:	8a ed       	ldi	r24, 0xDA	; 218
    4aa4:	99 e0       	ldi	r25, 0x09	; 9
    4aa6:	9f 93       	push	r25
    4aa8:	8f 93       	push	r24
    4aaa:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    4aae:	88 ed       	ldi	r24, 0xD8	; 216
    4ab0:	99 e0       	ldi	r25, 0x09	; 9
    4ab2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    4ab6:	0e 94 58 20 	call	0x40b0	; 0x40b0 <eeconfig_read_keymap>
    4aba:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    4abc:	84 ec       	ldi	r24, 0xC4	; 196
    4abe:	99 e0       	ldi	r25, 0x09	; 9
    4ac0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    4ac4:	1f 92       	push	r1
    4ac6:	cf 93       	push	r28
    4ac8:	8f eb       	ldi	r24, 0xBF	; 191
    4aca:	99 e0       	ldi	r25, 0x09	; 9
    4acc:	9f 93       	push	r25
    4ace:	8f 93       	push	r24
    4ad0:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    4ad4:	8d eb       	ldi	r24, 0xBD	; 189
    4ad6:	99 e0       	ldi	r25, 0x09	; 9
    4ad8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    4adc:	84 ea       	ldi	r24, 0xA4	; 164
    4ade:	99 e0       	ldi	r25, 0x09	; 9
    4ae0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    4ae4:	8c 2f       	mov	r24, r28
    4ae6:	81 70       	andi	r24, 0x01	; 1
    4ae8:	1f 92       	push	r1
    4aea:	8f 93       	push	r24
    4aec:	81 ea       	ldi	r24, 0xA1	; 161
    4aee:	99 e0       	ldi	r25, 0x09	; 9
    4af0:	9f 93       	push	r25
    4af2:	8f 93       	push	r24
    4af4:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    4af8:	8d b7       	in	r24, 0x3d	; 61
    4afa:	9e b7       	in	r25, 0x3e	; 62
    4afc:	80 96       	adiw	r24, 0x20	; 32
    4afe:	0f b6       	in	r0, 0x3f	; 63
    4b00:	f8 94       	cli
    4b02:	9e bf       	out	0x3e, r25	; 62
    4b04:	0f be       	out	0x3f, r0	; 63
    4b06:	8d bf       	out	0x3d, r24	; 61
    4b08:	8f e9       	ldi	r24, 0x9F	; 159
    4b0a:	99 e0       	ldi	r25, 0x09	; 9
    4b0c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    4b10:	88 e8       	ldi	r24, 0x88	; 136
    4b12:	99 e0       	ldi	r25, 0x09	; 9
    4b14:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    4b18:	c1 fb       	bst	r28, 1
    4b1a:	88 27       	eor	r24, r24
    4b1c:	80 f9       	bld	r24, 0
    4b1e:	1f 92       	push	r1
    4b20:	8f 93       	push	r24
    4b22:	85 e8       	ldi	r24, 0x85	; 133
    4b24:	99 e0       	ldi	r25, 0x09	; 9
    4b26:	9f 93       	push	r25
    4b28:	8f 93       	push	r24
    4b2a:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    4b2e:	83 e8       	ldi	r24, 0x83	; 131
    4b30:	99 e0       	ldi	r25, 0x09	; 9
    4b32:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    4b36:	81 e7       	ldi	r24, 0x71	; 113
    4b38:	99 e0       	ldi	r25, 0x09	; 9
    4b3a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    4b3e:	c2 fb       	bst	r28, 2
    4b40:	88 27       	eor	r24, r24
    4b42:	80 f9       	bld	r24, 0
    4b44:	1f 92       	push	r1
    4b46:	8f 93       	push	r24
    4b48:	8e e6       	ldi	r24, 0x6E	; 110
    4b4a:	99 e0       	ldi	r25, 0x09	; 9
    4b4c:	9f 93       	push	r25
    4b4e:	8f 93       	push	r24
    4b50:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    4b54:	8c e6       	ldi	r24, 0x6C	; 108
    4b56:	99 e0       	ldi	r25, 0x09	; 9
    4b58:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    4b5c:	8a e5       	ldi	r24, 0x5A	; 90
    4b5e:	99 e0       	ldi	r25, 0x09	; 9
    4b60:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    4b64:	c3 fb       	bst	r28, 3
    4b66:	88 27       	eor	r24, r24
    4b68:	80 f9       	bld	r24, 0
    4b6a:	1f 92       	push	r1
    4b6c:	8f 93       	push	r24
    4b6e:	87 e5       	ldi	r24, 0x57	; 87
    4b70:	99 e0       	ldi	r25, 0x09	; 9
    4b72:	9f 93       	push	r25
    4b74:	8f 93       	push	r24
    4b76:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    4b7a:	85 e5       	ldi	r24, 0x55	; 85
    4b7c:	99 e0       	ldi	r25, 0x09	; 9
    4b7e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    4b82:	8b e4       	ldi	r24, 0x4B	; 75
    4b84:	99 e0       	ldi	r25, 0x09	; 9
    4b86:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    4b8a:	c4 fb       	bst	r28, 4
    4b8c:	88 27       	eor	r24, r24
    4b8e:	80 f9       	bld	r24, 0
    4b90:	1f 92       	push	r1
    4b92:	8f 93       	push	r24
    4b94:	88 e4       	ldi	r24, 0x48	; 72
    4b96:	99 e0       	ldi	r25, 0x09	; 9
    4b98:	9f 93       	push	r25
    4b9a:	8f 93       	push	r24
    4b9c:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    4ba0:	86 e4       	ldi	r24, 0x46	; 70
    4ba2:	99 e0       	ldi	r25, 0x09	; 9
    4ba4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    4ba8:	84 e3       	ldi	r24, 0x34	; 52
    4baa:	99 e0       	ldi	r25, 0x09	; 9
    4bac:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    4bb0:	c5 fb       	bst	r28, 5
    4bb2:	88 27       	eor	r24, r24
    4bb4:	80 f9       	bld	r24, 0
    4bb6:	1f 92       	push	r1
    4bb8:	8f 93       	push	r24
    4bba:	81 e3       	ldi	r24, 0x31	; 49
    4bbc:	99 e0       	ldi	r25, 0x09	; 9
    4bbe:	9f 93       	push	r25
    4bc0:	8f 93       	push	r24
    4bc2:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    4bc6:	8f e2       	ldi	r24, 0x2F	; 47
    4bc8:	99 e0       	ldi	r25, 0x09	; 9
    4bca:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    4bce:	83 e1       	ldi	r24, 0x13	; 19
    4bd0:	99 e0       	ldi	r25, 0x09	; 9
    4bd2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    4bd6:	c6 fb       	bst	r28, 6
    4bd8:	88 27       	eor	r24, r24
    4bda:	80 f9       	bld	r24, 0
    4bdc:	1f 92       	push	r1
    4bde:	8f 93       	push	r24
    4be0:	80 e1       	ldi	r24, 0x10	; 16
    4be2:	99 e0       	ldi	r25, 0x09	; 9
    4be4:	9f 93       	push	r25
    4be6:	8f 93       	push	r24
    4be8:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    4bec:	8e e0       	ldi	r24, 0x0E	; 14
    4bee:	99 e0       	ldi	r25, 0x09	; 9
    4bf0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    4bf4:	86 e0       	ldi	r24, 0x06	; 6
    4bf6:	99 e0       	ldi	r25, 0x09	; 9
    4bf8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    4bfc:	c7 fb       	bst	r28, 7
    4bfe:	cc 27       	eor	r28, r28
    4c00:	c0 f9       	bld	r28, 0
    4c02:	1f 92       	push	r1
    4c04:	cf 93       	push	r28
    4c06:	83 e0       	ldi	r24, 0x03	; 3
    4c08:	99 e0       	ldi	r25, 0x09	; 9
    4c0a:	9f 93       	push	r25
    4c0c:	8f 93       	push	r24
    4c0e:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    4c12:	81 e0       	ldi	r24, 0x01	; 1
    4c14:	99 e0       	ldi	r25, 0x09	; 9
    4c16:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    4c1a:	8d b7       	in	r24, 0x3d	; 61
    4c1c:	9e b7       	in	r25, 0x3e	; 62
    4c1e:	4c 96       	adiw	r24, 0x1c	; 28
    4c20:	0f b6       	in	r0, 0x3f	; 63
    4c22:	f8 94       	cli
    4c24:	9e bf       	out	0x3e, r25	; 62
    4c26:	0f be       	out	0x3f, r0	; 63
    4c28:	8d bf       	out	0x3d, r24	; 61
    4c2a:	04 c0       	rjmp	.+8      	; 0x4c34 <command_common+0x368>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\t- Magic -\n"
    4c2c:	8c e5       	ldi	r24, 0x5C	; 92
    4c2e:	98 e0       	ldi	r25, 0x08	; 8
    4c30:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
            break;
        default:
            print("?");
            return false;
    }
    return true;
    4c34:	c1 e0       	ldi	r28, 0x01	; 1
    4c36:	c0 c0       	rjmp	.+384    	; 0x4db8 <command_common+0x4ec>
            print("\n\nbootloader... ");
            _delay_ms(1000);
            bootloader_jump(); // not return
            break;
        case KC_D:
            if (debug_enable) {
    4c38:	80 91 cb 01 	lds	r24, 0x01CB
    4c3c:	c8 2f       	mov	r28, r24
    4c3e:	c1 70       	andi	r28, 0x01	; 1
    4c40:	80 ff       	sbrs	r24, 0
    4c42:	09 c0       	rjmp	.+18     	; 0x4c56 <command_common+0x38a>
                print("\ndebug: off\n");
    4c44:	85 e4       	ldi	r24, 0x45	; 69
    4c46:	9c e0       	ldi	r25, 0x0C	; 12
    4c48:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
                debug_matrix   = false;
    4c4c:	80 91 cb 01 	lds	r24, 0x01CB
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    4c50:	81 7f       	andi	r24, 0xF1	; 241
    4c52:	8e 7f       	andi	r24, 0xFE	; 254
    4c54:	47 c0       	rjmp	.+142    	; 0x4ce4 <command_common+0x418>
            } else {
                print("\ndebug: on\n");
    4c56:	89 e3       	ldi	r24, 0x39	; 57
    4c58:	9c e0       	ldi	r25, 0x0C	; 12
    4c5a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
                debug_enable   = true;
    4c5e:	80 91 cb 01 	lds	r24, 0x01CB
    4c62:	81 60       	ori	r24, 0x01	; 1
    4c64:	80 93 cb 01 	sts	0x01CB, r24
    4c68:	e5 cf       	rjmp	.-54     	; 0x4c34 <command_common+0x368>
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    4c6a:	90 91 cb 01 	lds	r25, 0x01CB
    4c6e:	91 fb       	bst	r25, 1
    4c70:	cc 27       	eor	r28, r28
    4c72:	c0 f9       	bld	r28, 0
    4c74:	81 e0       	ldi	r24, 0x01	; 1
    4c76:	c8 27       	eor	r28, r24
    4c78:	89 2f       	mov	r24, r25
    4c7a:	c0 fb       	bst	r28, 0
    4c7c:	81 f9       	bld	r24, 1
    4c7e:	80 93 cb 01 	sts	0x01CB, r24
            if (debug_matrix) {
    4c82:	cc 23       	and	r28, r28
    4c84:	19 f0       	breq	.+6      	; 0x4c8c <command_common+0x3c0>
                print("\nmatrix: on\n");
    4c86:	8c e2       	ldi	r24, 0x2C	; 44
    4c88:	9c e0       	ldi	r25, 0x0C	; 12
    4c8a:	27 c0       	rjmp	.+78     	; 0x4cda <command_common+0x40e>
                debug_enable = true;
            } else {
                print("\nmatrix: off\n");
    4c8c:	8e e1       	ldi	r24, 0x1E	; 30
    4c8e:	9c e0       	ldi	r25, 0x0C	; 12
    4c90:	cf cf       	rjmp	.-98     	; 0x4c30 <command_common+0x364>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    4c92:	90 91 cb 01 	lds	r25, 0x01CB
    4c96:	92 fb       	bst	r25, 2
    4c98:	cc 27       	eor	r28, r28
    4c9a:	c0 f9       	bld	r28, 0
    4c9c:	81 e0       	ldi	r24, 0x01	; 1
    4c9e:	c8 27       	eor	r28, r24
    4ca0:	89 2f       	mov	r24, r25
    4ca2:	c0 fb       	bst	r28, 0
    4ca4:	82 f9       	bld	r24, 2
    4ca6:	80 93 cb 01 	sts	0x01CB, r24
            if (debug_keyboard) {
    4caa:	cc 23       	and	r28, r28
    4cac:	19 f0       	breq	.+6      	; 0x4cb4 <command_common+0x3e8>
                print("\nkeyboard: on\n");
    4cae:	8f e0       	ldi	r24, 0x0F	; 15
    4cb0:	9c e0       	ldi	r25, 0x0C	; 12
    4cb2:	13 c0       	rjmp	.+38     	; 0x4cda <command_common+0x40e>
                debug_enable = true;
            } else {
                print("\nkeyboard: off\n");
    4cb4:	8f ef       	ldi	r24, 0xFF	; 255
    4cb6:	9b e0       	ldi	r25, 0x0B	; 11
    4cb8:	bb cf       	rjmp	.-138    	; 0x4c30 <command_common+0x364>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    4cba:	90 91 cb 01 	lds	r25, 0x01CB
    4cbe:	93 fb       	bst	r25, 3
    4cc0:	cc 27       	eor	r28, r28
    4cc2:	c0 f9       	bld	r28, 0
    4cc4:	81 e0       	ldi	r24, 0x01	; 1
    4cc6:	c8 27       	eor	r28, r24
    4cc8:	89 2f       	mov	r24, r25
    4cca:	c0 fb       	bst	r28, 0
    4ccc:	83 f9       	bld	r24, 3
    4cce:	80 93 cb 01 	sts	0x01CB, r24
            if (debug_mouse) {
    4cd2:	cc 23       	and	r28, r28
    4cd4:	51 f0       	breq	.+20     	; 0x4cea <command_common+0x41e>
                print("\nmouse: on\n");
    4cd6:	83 ef       	ldi	r24, 0xF3	; 243
    4cd8:	9b e0       	ldi	r25, 0x0B	; 11
    4cda:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
                debug_enable = true;
    4cde:	80 91 cb 01 	lds	r24, 0x01CB
    4ce2:	81 60       	ori	r24, 0x01	; 1
    4ce4:	80 93 cb 01 	sts	0x01CB, r24
    4ce8:	67 c0       	rjmp	.+206    	; 0x4db8 <command_common+0x4ec>
            } else {
                print("\nmouse: off\n");
    4cea:	86 ee       	ldi	r24, 0xE6	; 230
    4cec:	9b e0       	ldi	r25, 0x0B	; 11
    4cee:	a0 cf       	rjmp	.-192    	; 0x4c30 <command_common+0x364>
            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
                  " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
                  " AVR_ARCH: avr" STR(__AVR_ARCH__) "\n");
            break;
        case KC_S:
            print("\n\t- Status -\n");
    4cf0:	86 ec       	ldi	r24, 0xC6	; 198
    4cf2:	9a e0       	ldi	r25, 0x0A	; 10
    4cf4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
            print_val_hex8(host_keyboard_leds());
    4cf8:	0e 94 20 10 	call	0x2040	; 0x2040 <host_keyboard_leds>
    4cfc:	1f 92       	push	r1
    4cfe:	8f 93       	push	r24
    4d00:	8c ea       	ldi	r24, 0xAC	; 172
    4d02:	9a e0       	ldi	r25, 0x0A	; 10
    4d04:	9f 93       	push	r25
    4d06:	8f 93       	push	r24
    4d08:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
            print_val_hex8(keyboard_protocol);
    4d0c:	80 91 0a 01 	lds	r24, 0x010A
    4d10:	1f 92       	push	r1
    4d12:	8f 93       	push	r24
    4d14:	85 e9       	ldi	r24, 0x95	; 149
    4d16:	9a e0       	ldi	r25, 0x0A	; 10
    4d18:	9f 93       	push	r25
    4d1a:	8f 93       	push	r24
    4d1c:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
            print_val_hex8(keyboard_idle);
    4d20:	80 91 66 01 	lds	r24, 0x0166
    4d24:	1f 92       	push	r1
    4d26:	8f 93       	push	r24
    4d28:	82 e8       	ldi	r24, 0x82	; 130
    4d2a:	9a e0       	ldi	r25, 0x0A	; 10
    4d2c:	9f 93       	push	r25
    4d2e:	8f 93       	push	r24
    4d30:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
#ifdef NKRO_ENABLE
            print_val_hex8(keyboard_nkro);
    4d34:	80 91 0b 01 	lds	r24, 0x010B
    4d38:	1f 92       	push	r1
    4d3a:	8f 93       	push	r24
    4d3c:	8f e6       	ldi	r24, 0x6F	; 111
    4d3e:	9a e0       	ldi	r25, 0x0A	; 10
    4d40:	9f 93       	push	r25
    4d42:	8f 93       	push	r24
    4d44:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
#endif
            print_val_hex32(timer_count);
    4d48:	80 91 cd 01 	lds	r24, 0x01CD
    4d4c:	90 91 ce 01 	lds	r25, 0x01CE
    4d50:	a0 91 cf 01 	lds	r26, 0x01CF
    4d54:	b0 91 d0 01 	lds	r27, 0x01D0
    4d58:	bf 93       	push	r27
    4d5a:	af 93       	push	r26
    4d5c:	9f 93       	push	r25
    4d5e:	8f 93       	push	r24
    4d60:	8b e5       	ldi	r24, 0x5B	; 91
    4d62:	9a e0       	ldi	r25, 0x0A	; 10
    4d64:	9f 93       	push	r25
    4d66:	8f 93       	push	r24
    4d68:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    4d6c:	8d b7       	in	r24, 0x3d	; 61
    4d6e:	9e b7       	in	r25, 0x3e	; 62
    4d70:	46 96       	adiw	r24, 0x16	; 22
    4d72:	0f b6       	in	r0, 0x3f	; 63
    4d74:	f8 94       	cli
    4d76:	9e bf       	out	0x3e, r25	; 62
    4d78:	0f be       	out	0x3f, r0	; 63
    4d7a:	8d bf       	out	0x3d, r24	; 61
    4d7c:	5b cf       	rjmp	.-330    	; 0x4c34 <command_common+0x368>
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
    4d7e:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    4d82:	c0 91 0b 01 	lds	r28, 0x010B
    4d86:	81 e0       	ldi	r24, 0x01	; 1
    4d88:	c8 27       	eor	r28, r24
    4d8a:	c0 93 0b 01 	sts	0x010B, r28
            if (keyboard_nkro)
    4d8e:	cc 23       	and	r28, r28
    4d90:	29 f0       	breq	.+10     	; 0x4d9c <command_common+0x4d0>
                print("NKRO: on\n");
    4d92:	81 e5       	ldi	r24, 0x51	; 81
    4d94:	9a e0       	ldi	r25, 0x0A	; 10
    4d96:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    4d9a:	0e c0       	rjmp	.+28     	; 0x4db8 <command_common+0x4ec>
            else
                print("NKRO: off\n");
    4d9c:	86 e4       	ldi	r24, 0x46	; 70
    4d9e:	9a e0       	ldi	r25, 0x0A	; 10
    4da0:	47 cf       	rjmp	.-370    	; 0x4c30 <command_common+0x364>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    4da2:	80 e0       	ldi	r24, 0x00	; 0
    4da4:	01 c0       	rjmp	.+2      	; 0x4da8 <command_common+0x4dc>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    4da6:	89 53       	subi	r24, 0x39	; 57
    4da8:	0e 94 46 24 	call	0x488c	; 0x488c <switch_default_layer>
    4dac:	43 cf       	rjmp	.-378    	; 0x4c34 <command_common+0x368>
            break;
        default:
            print("?");
    4dae:	84 e4       	ldi	r24, 0x44	; 68
    4db0:	9a e0       	ldi	r25, 0x0A	; 10
    4db2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
            return false;
    4db6:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return true;
}
    4db8:	8c 2f       	mov	r24, r28
    4dba:	cf 91       	pop	r28
    4dbc:	08 95       	ret

00004dbe <command_extra>:
/* This allows to define extra commands. return false when not processed. */
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    return false;
}
    4dbe:	80 e0       	ldi	r24, 0x00	; 0
    4dc0:	08 95       	ret

00004dc2 <command_console_extra>:

bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    return false;
}
    4dc2:	80 e0       	ldi	r24, 0x00	; 0
    4dc4:	08 95       	ret

00004dc6 <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    4dc6:	cf 93       	push	r28
    4dc8:	c8 2f       	mov	r28, r24
    switch (command_state) {
    4dca:	80 91 db 01 	lds	r24, 0x01DB
    4dce:	81 30       	cpi	r24, 0x01	; 1
    4dd0:	71 f0       	breq	.+28     	; 0x4dee <command_proc+0x28>
    4dd2:	20 f0       	brcs	.+8      	; 0x4ddc <command_proc+0x16>
    4dd4:	82 30       	cpi	r24, 0x02	; 2
    4dd6:	09 f4       	brne	.+2      	; 0x4dda <command_proc+0x14>
    4dd8:	4b c0       	rjmp	.+150    	; 0x4e70 <command_proc+0xaa>
    4dda:	42 c1       	rjmp	.+644    	; 0x5060 <command_proc+0x29a>
        case ONESHOT:
            if (!IS_COMMAND())
    4ddc:	e0 91 0c 01 	lds	r30, 0x010C
    4de0:	f0 91 0d 01 	lds	r31, 0x010D
    4de4:	80 81       	ld	r24, Z
    4de6:	82 32       	cpi	r24, 0x22	; 34
    4de8:	09 f0       	breq	.+2      	; 0x4dec <command_proc+0x26>
    4dea:	3c c1       	rjmp	.+632    	; 0x5064 <command_proc+0x29e>
    4dec:	07 c0       	rjmp	.+14     	; 0x4dfc <command_proc+0x36>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    4dee:	e0 91 0c 01 	lds	r30, 0x010C
    4df2:	f0 91 0d 01 	lds	r31, 0x010D
    4df6:	80 81       	ld	r24, Z
    4df8:	82 32       	cpi	r24, 0x22	; 34
    4dfa:	61 f4       	brne	.+24     	; 0x4e14 <command_proc+0x4e>
                return (command_extra(code) || command_common(code));
    4dfc:	8c 2f       	mov	r24, r28
    4dfe:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <command_extra>
    4e02:	81 11       	cpse	r24, r1
    4e04:	04 c0       	rjmp	.+8      	; 0x4e0e <command_proc+0x48>
    4e06:	8c 2f       	mov	r24, r28
    4e08:	0e 94 66 24 	call	0x48cc	; 0x48cc <command_common>
    4e0c:	2f c0       	rjmp	.+94     	; 0x4e6c <command_proc+0xa6>
    4e0e:	81 e0       	ldi	r24, 0x01	; 1
    4e10:	90 e0       	ldi	r25, 0x00	; 0
    4e12:	2c c0       	rjmp	.+88     	; 0x4e6c <command_proc+0xa6>
            else
                return (command_console_extra(code) || command_console(code));
    4e14:	8c 2f       	mov	r24, r28
    4e16:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <command_console_extra>
    4e1a:	81 11       	cpse	r24, r1
    4e1c:	26 c0       	rjmp	.+76     	; 0x4e6a <command_proc+0xa4>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    4e1e:	c4 31       	cpi	r28, 0x14	; 20
    4e20:	e1 f0       	breq	.+56     	; 0x4e5a <command_proc+0x94>
    4e22:	70 f4       	brcc	.+28     	; 0x4e40 <command_proc+0x7a>
    4e24:	cb 30       	cpi	r28, 0x0B	; 11
    4e26:	81 f0       	breq	.+32     	; 0x4e48 <command_proc+0x82>
    4e28:	c0 31       	cpi	r28, 0x10	; 16
    4e2a:	d1 f4       	brne	.+52     	; 0x4e60 <command_proc+0x9a>
        case KC_ESC:
            command_state = ONESHOT;
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    4e2c:	0e 94 0e 23 	call	0x461c	; 0x461c <mousekey_console_help>
            print("M> ");
    4e30:	88 e2       	ldi	r24, 0x28	; 40
    4e32:	98 e0       	ldi	r25, 0x08	; 8
    4e34:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
            command_state = MOUSEKEY;
    4e38:	82 e0       	ldi	r24, 0x02	; 2
    4e3a:	80 93 db 01 	sts	0x01DB, r24
    4e3e:	15 c0       	rjmp	.+42     	; 0x4e6a <command_proc+0xa4>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    4e40:	c9 32       	cpi	r28, 0x29	; 41
    4e42:	59 f0       	breq	.+22     	; 0x4e5a <command_proc+0x94>
    4e44:	c8 33       	cpi	r28, 0x38	; 56
    4e46:	61 f4       	brne	.+24     	; 0x4e60 <command_proc+0x9a>
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    4e48:	85 e3       	ldi	r24, 0x35	; 53
    4e4a:	98 e0       	ldi	r25, 0x08	; 8
    4e4c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    4e50:	8c e2       	ldi	r24, 0x2C	; 44
    4e52:	98 e0       	ldi	r25, 0x08	; 8
    4e54:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    4e58:	08 c0       	rjmp	.+16     	; 0x4e6a <command_proc+0xa4>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    4e5a:	10 92 db 01 	sts	0x01DB, r1
    4e5e:	04 c1       	rjmp	.+520    	; 0x5068 <command_proc+0x2a2>
            print("M> ");
            command_state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    4e60:	86 e2       	ldi	r24, 0x26	; 38
    4e62:	98 e0       	ldi	r25, 0x08	; 8
    4e64:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    4e68:	ff c0       	rjmp	.+510    	; 0x5068 <command_proc+0x2a2>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    4e6a:	81 e0       	ldi	r24, 0x01	; 1
    4e6c:	81 70       	andi	r24, 0x01	; 1
    4e6e:	fe c0       	rjmp	.+508    	; 0x506c <command_proc+0x2a6>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    4e70:	c4 32       	cpi	r28, 0x24	; 36
    4e72:	28 f5       	brcc	.+74     	; 0x4ebe <command_proc+0xf8>
    4e74:	ce 31       	cpi	r28, 0x1E	; 30
    4e76:	08 f0       	brcs	.+2      	; 0x4e7a <command_proc+0xb4>
    4e78:	c1 c0       	rjmp	.+386    	; 0x4ffc <command_proc+0x236>
    4e7a:	cb 30       	cpi	r28, 0x0B	; 11
    4e7c:	a1 f1       	breq	.+104    	; 0x4ee6 <command_proc+0x120>
    4e7e:	d0 f4       	brcc	.+52     	; 0x4eb4 <command_proc+0xee>
    4e80:	c7 30       	cpi	r28, 0x07	; 7
    4e82:	09 f0       	breq	.+2      	; 0x4e86 <command_proc+0xc0>
    4e84:	d3 c0       	rjmp	.+422    	; 0x502c <command_proc+0x266>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    4e86:	8e e1       	ldi	r24, 0x1E	; 30
    4e88:	80 93 13 01 	sts	0x0113, r24
            mk_interval = MOUSEKEY_INTERVAL;
    4e8c:	82 e3       	ldi	r24, 0x32	; 50
    4e8e:	80 93 12 01 	sts	0x0112, r24
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    4e92:	8a e0       	ldi	r24, 0x0A	; 10
    4e94:	80 93 11 01 	sts	0x0111, r24
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    4e98:	84 e1       	ldi	r24, 0x14	; 20
    4e9a:	80 93 10 01 	sts	0x0110, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    4e9e:	88 e0       	ldi	r24, 0x08	; 8
    4ea0:	80 93 0f 01 	sts	0x010F, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    4ea4:	88 e2       	ldi	r24, 0x28	; 40
    4ea6:	80 93 0e 01 	sts	0x010E, r24
            print("set default\n");
    4eaa:	8c ec       	ldi	r24, 0xCC	; 204
    4eac:	96 e0       	ldi	r25, 0x06	; 6
    4eae:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    4eb2:	bf c0       	rjmp	.+382    	; 0x5032 <command_proc+0x26c>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    4eb4:	c3 31       	cpi	r28, 0x13	; 19
    4eb6:	49 f1       	breq	.+82     	; 0x4f0a <command_proc+0x144>
    4eb8:	c4 31       	cpi	r28, 0x14	; 20
    4eba:	c1 f0       	breq	.+48     	; 0x4eec <command_proc+0x126>
    4ebc:	b7 c0       	rjmp	.+366    	; 0x502c <command_proc+0x266>
    4ebe:	cb 34       	cpi	r28, 0x4B	; 75
    4ec0:	09 f4       	brne	.+2      	; 0x4ec4 <command_proc+0xfe>
    4ec2:	a9 c0       	rjmp	.+338    	; 0x5016 <command_proc+0x250>
    4ec4:	28 f4       	brcc	.+10     	; 0x4ed0 <command_proc+0x10a>
    4ec6:	c9 32       	cpi	r28, 0x29	; 41
    4ec8:	89 f0       	breq	.+34     	; 0x4eec <command_proc+0x126>
    4eca:	c8 33       	cpi	r28, 0x38	; 56
    4ecc:	61 f0       	breq	.+24     	; 0x4ee6 <command_proc+0x120>
    4ece:	ae c0       	rjmp	.+348    	; 0x502c <command_proc+0x266>
    4ed0:	c1 35       	cpi	r28, 0x51	; 81
    4ed2:	09 f4       	brne	.+2      	; 0x4ed6 <command_proc+0x110>
    4ed4:	9e c0       	rjmp	.+316    	; 0x5012 <command_proc+0x24c>
    4ed6:	c2 35       	cpi	r28, 0x52	; 82
    4ed8:	09 f4       	brne	.+2      	; 0x4edc <command_proc+0x116>
    4eda:	99 c0       	rjmp	.+306    	; 0x500e <command_proc+0x248>
    4edc:	ce 34       	cpi	r28, 0x4E	; 78
    4ede:	09 f0       	breq	.+2      	; 0x4ee2 <command_proc+0x11c>
    4ee0:	a5 c0       	rjmp	.+330    	; 0x502c <command_proc+0x266>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    4ee2:	6a e0       	ldi	r22, 0x0A	; 10
    4ee4:	9e c0       	rjmp	.+316    	; 0x5022 <command_proc+0x25c>
static bool mousekey_console(uint8_t code)
{
    switch (code) {
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    4ee6:	0e 94 0e 23 	call	0x461c	; 0x461c <mousekey_console_help>
    4eea:	a3 c0       	rjmp	.+326    	; 0x5032 <command_proc+0x26c>
            break;
        case KC_Q:
        case KC_ESC:
            if (mousekey_param) {
    4eec:	80 91 da 01 	lds	r24, 0x01DA
    4ef0:	88 23       	and	r24, r24
    4ef2:	19 f0       	breq	.+6      	; 0x4efa <command_proc+0x134>
                mousekey_param = 0;
    4ef4:	10 92 da 01 	sts	0x01DA, r1
    4ef8:	9c c0       	rjmp	.+312    	; 0x5032 <command_proc+0x26c>
            } else {
                print("C> ");
    4efa:	89 ed       	ldi	r24, 0xD9	; 217
    4efc:	96 e0       	ldi	r25, 0x06	; 6
    4efe:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
                command_state = CONSOLE;
    4f02:	81 e0       	ldi	r24, 0x01	; 1
    4f04:	80 93 db 01 	sts	0x01DB, r24
    4f08:	b1 c0       	rjmp	.+354    	; 0x506c <command_proc+0x2a6>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\t- Values -\n");
    4f0a:	83 eb       	ldi	r24, 0xB3	; 179
    4f0c:	96 e0       	ldi	r25, 0x06	; 6
    4f0e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    4f12:	81 ea       	ldi	r24, 0xA1	; 161
    4f14:	96 e0       	ldi	r25, 0x06	; 6
    4f16:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    4f1a:	80 91 13 01 	lds	r24, 0x0113
    4f1e:	1f 92       	push	r1
    4f20:	8f 93       	push	r24
    4f22:	8e e9       	ldi	r24, 0x9E	; 158
    4f24:	96 e0       	ldi	r25, 0x06	; 6
    4f26:	9f 93       	push	r25
    4f28:	8f 93       	push	r24
    4f2a:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    4f2e:	8c e9       	ldi	r24, 0x9C	; 156
    4f30:	96 e0       	ldi	r25, 0x06	; 6
    4f32:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    4f36:	8a e8       	ldi	r24, 0x8A	; 138
    4f38:	96 e0       	ldi	r25, 0x06	; 6
    4f3a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    4f3e:	80 91 12 01 	lds	r24, 0x0112
    4f42:	1f 92       	push	r1
    4f44:	8f 93       	push	r24
    4f46:	87 e8       	ldi	r24, 0x87	; 135
    4f48:	96 e0       	ldi	r25, 0x06	; 6
    4f4a:	9f 93       	push	r25
    4f4c:	8f 93       	push	r24
    4f4e:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    4f52:	85 e8       	ldi	r24, 0x85	; 133
    4f54:	96 e0       	ldi	r25, 0x06	; 6
    4f56:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    4f5a:	86 e7       	ldi	r24, 0x76	; 118
    4f5c:	96 e0       	ldi	r25, 0x06	; 6
    4f5e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    4f62:	80 91 11 01 	lds	r24, 0x0111
    4f66:	1f 92       	push	r1
    4f68:	8f 93       	push	r24
    4f6a:	83 e7       	ldi	r24, 0x73	; 115
    4f6c:	96 e0       	ldi	r25, 0x06	; 6
    4f6e:	9f 93       	push	r25
    4f70:	8f 93       	push	r24
    4f72:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    4f76:	81 e7       	ldi	r24, 0x71	; 113
    4f78:	96 e0       	ldi	r25, 0x06	; 6
    4f7a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    4f7e:	80 e6       	ldi	r24, 0x60	; 96
    4f80:	96 e0       	ldi	r25, 0x06	; 6
    4f82:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    4f86:	80 91 10 01 	lds	r24, 0x0110
    4f8a:	1f 92       	push	r1
    4f8c:	8f 93       	push	r24
    4f8e:	8d e5       	ldi	r24, 0x5D	; 93
    4f90:	96 e0       	ldi	r25, 0x06	; 6
    4f92:	9f 93       	push	r25
    4f94:	8f 93       	push	r24
    4f96:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    4f9a:	8b e5       	ldi	r24, 0x5B	; 91
    4f9c:	96 e0       	ldi	r25, 0x06	; 6
    4f9e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    4fa2:	86 e4       	ldi	r24, 0x46	; 70
    4fa4:	96 e0       	ldi	r25, 0x06	; 6
    4fa6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    4faa:	80 91 0f 01 	lds	r24, 0x010F
    4fae:	1f 92       	push	r1
    4fb0:	8f 93       	push	r24
    4fb2:	83 e4       	ldi	r24, 0x43	; 67
    4fb4:	96 e0       	ldi	r25, 0x06	; 6
    4fb6:	9f 93       	push	r25
    4fb8:	8f 93       	push	r24
    4fba:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    4fbe:	81 e4       	ldi	r24, 0x41	; 65
    4fc0:	96 e0       	ldi	r25, 0x06	; 6
    4fc2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    4fc6:	8a e2       	ldi	r24, 0x2A	; 42
    4fc8:	96 e0       	ldi	r25, 0x06	; 6
    4fca:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    4fce:	80 91 0e 01 	lds	r24, 0x010E
    4fd2:	1f 92       	push	r1
    4fd4:	8f 93       	push	r24
    4fd6:	87 e2       	ldi	r24, 0x27	; 39
    4fd8:	96 e0       	ldi	r25, 0x06	; 6
    4fda:	9f 93       	push	r25
    4fdc:	8f 93       	push	r24
    4fde:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    4fe2:	85 e2       	ldi	r24, 0x25	; 37
    4fe4:	96 e0       	ldi	r25, 0x06	; 6
    4fe6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
    4fea:	8d b7       	in	r24, 0x3d	; 61
    4fec:	9e b7       	in	r25, 0x3e	; 62
    4fee:	48 96       	adiw	r24, 0x18	; 24
    4ff0:	0f b6       	in	r0, 0x3f	; 63
    4ff2:	f8 94       	cli
    4ff4:	9e bf       	out	0x3e, r25	; 62
    4ff6:	0f be       	out	0x3f, r0	; 63
    4ff8:	8d bf       	out	0x3d, r24	; 61
    4ffa:	1b c0       	rjmp	.+54     	; 0x5032 <command_proc+0x26c>
    4ffc:	ce 51       	subi	r28, 0x1E	; 30
    4ffe:	ec 2f       	mov	r30, r28
    5000:	f0 e0       	ldi	r31, 0x00	; 0
    5002:	e3 5d       	subi	r30, 0xD3	; 211
    5004:	fe 4f       	sbci	r31, 0xFE	; 254
        case KC_2:
        case KC_3:
        case KC_4:
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
    5006:	80 81       	ld	r24, Z
    5008:	80 93 da 01 	sts	0x01DA, r24
    500c:	12 c0       	rjmp	.+36     	; 0x5032 <command_proc+0x26c>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    500e:	61 e0       	ldi	r22, 0x01	; 1
    5010:	03 c0       	rjmp	.+6      	; 0x5018 <command_proc+0x252>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    5012:	61 e0       	ldi	r22, 0x01	; 1
    5014:	06 c0       	rjmp	.+12     	; 0x5022 <command_proc+0x25c>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    5016:	6a e0       	ldi	r22, 0x0A	; 10
    5018:	80 91 da 01 	lds	r24, 0x01DA
    501c:	0e 94 25 23 	call	0x464a	; 0x464a <mousekey_param_inc>
    5020:	08 c0       	rjmp	.+16     	; 0x5032 <command_proc+0x26c>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    5022:	80 91 da 01 	lds	r24, 0x01DA
    5026:	0e 94 c8 23 	call	0x4790	; 0x4790 <mousekey_param_dec>
    502a:	03 c0       	rjmp	.+6      	; 0x5032 <command_proc+0x26c>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
            print("set default\n");
            break;
        default:
            print("?");
    502c:	8a ec       	ldi	r24, 0xCA	; 202
    502e:	96 e0       	ldi	r25, 0x06	; 6
    5030:	13 c0       	rjmp	.+38     	; 0x5058 <command_proc+0x292>
            return false;
    }
    if (mousekey_param)
    5032:	80 91 da 01 	lds	r24, 0x01DA
    5036:	88 23       	and	r24, r24
    5038:	69 f0       	breq	.+26     	; 0x5054 <command_proc+0x28e>
        xprintf("M%d> ", mousekey_param);
    503a:	1f 92       	push	r1
    503c:	8f 93       	push	r24
    503e:	84 ec       	ldi	r24, 0xC4	; 196
    5040:	96 e0       	ldi	r25, 0x06	; 6
    5042:	9f 93       	push	r25
    5044:	8f 93       	push	r24
    5046:	0e 94 27 07 	call	0xe4e	; 0xe4e <__xprintf>
    504a:	0f 90       	pop	r0
    504c:	0f 90       	pop	r0
    504e:	0f 90       	pop	r0
    5050:	0f 90       	pop	r0
    5052:	04 c0       	rjmp	.+8      	; 0x505c <command_proc+0x296>
    else
        print("M>" );
    5054:	81 ec       	ldi	r24, 0xC1	; 193
    5056:	96 e0       	ldi	r25, 0x06	; 6
    5058:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xputs>
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    505c:	81 e0       	ldi	r24, 0x01	; 1
    505e:	06 c0       	rjmp	.+12     	; 0x506c <command_proc+0x2a6>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    5060:	10 92 db 01 	sts	0x01DB, r1
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    5064:	80 e0       	ldi	r24, 0x00	; 0
    5066:	02 c0       	rjmp	.+4      	; 0x506c <command_proc+0x2a6>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    5068:	80 e0       	ldi	r24, 0x00	; 0
    506a:	00 cf       	rjmp	.-512    	; 0x4e6c <command_proc+0xa6>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    506c:	cf 91       	pop	r28
    506e:	08 95       	ret

00005070 <__fixsfsi>:
    5070:	0e 94 3f 28 	call	0x507e	; 0x507e <__fixunssfsi>
    5074:	68 94       	set
    5076:	b1 11       	cpse	r27, r1
    5078:	0c 94 ce 28 	jmp	0x519c	; 0x519c <__fp_szero>
    507c:	08 95       	ret

0000507e <__fixunssfsi>:
    507e:	0e 94 b3 28 	call	0x5166	; 0x5166 <__fp_splitA>
    5082:	88 f0       	brcs	.+34     	; 0x50a6 <__fixunssfsi+0x28>
    5084:	9f 57       	subi	r25, 0x7F	; 127
    5086:	98 f0       	brcs	.+38     	; 0x50ae <__fixunssfsi+0x30>
    5088:	b9 2f       	mov	r27, r25
    508a:	99 27       	eor	r25, r25
    508c:	b7 51       	subi	r27, 0x17	; 23
    508e:	b0 f0       	brcs	.+44     	; 0x50bc <__fixunssfsi+0x3e>
    5090:	e1 f0       	breq	.+56     	; 0x50ca <__fixunssfsi+0x4c>
    5092:	66 0f       	add	r22, r22
    5094:	77 1f       	adc	r23, r23
    5096:	88 1f       	adc	r24, r24
    5098:	99 1f       	adc	r25, r25
    509a:	1a f0       	brmi	.+6      	; 0x50a2 <__fixunssfsi+0x24>
    509c:	ba 95       	dec	r27
    509e:	c9 f7       	brne	.-14     	; 0x5092 <__fixunssfsi+0x14>
    50a0:	14 c0       	rjmp	.+40     	; 0x50ca <__fixunssfsi+0x4c>
    50a2:	b1 30       	cpi	r27, 0x01	; 1
    50a4:	91 f0       	breq	.+36     	; 0x50ca <__fixunssfsi+0x4c>
    50a6:	0e 94 cd 28 	call	0x519a	; 0x519a <__fp_zero>
    50aa:	b1 e0       	ldi	r27, 0x01	; 1
    50ac:	08 95       	ret
    50ae:	0c 94 cd 28 	jmp	0x519a	; 0x519a <__fp_zero>
    50b2:	67 2f       	mov	r22, r23
    50b4:	78 2f       	mov	r23, r24
    50b6:	88 27       	eor	r24, r24
    50b8:	b8 5f       	subi	r27, 0xF8	; 248
    50ba:	39 f0       	breq	.+14     	; 0x50ca <__fixunssfsi+0x4c>
    50bc:	b9 3f       	cpi	r27, 0xF9	; 249
    50be:	cc f3       	brlt	.-14     	; 0x50b2 <__fixunssfsi+0x34>
    50c0:	86 95       	lsr	r24
    50c2:	77 95       	ror	r23
    50c4:	67 95       	ror	r22
    50c6:	b3 95       	inc	r27
    50c8:	d9 f7       	brne	.-10     	; 0x50c0 <__fixunssfsi+0x42>
    50ca:	3e f4       	brtc	.+14     	; 0x50da <__fixunssfsi+0x5c>
    50cc:	90 95       	com	r25
    50ce:	80 95       	com	r24
    50d0:	70 95       	com	r23
    50d2:	61 95       	neg	r22
    50d4:	7f 4f       	sbci	r23, 0xFF	; 255
    50d6:	8f 4f       	sbci	r24, 0xFF	; 255
    50d8:	9f 4f       	sbci	r25, 0xFF	; 255
    50da:	08 95       	ret

000050dc <__floatunsisf>:
    50dc:	e8 94       	clt
    50de:	09 c0       	rjmp	.+18     	; 0x50f2 <__floatsisf+0x12>

000050e0 <__floatsisf>:
    50e0:	97 fb       	bst	r25, 7
    50e2:	3e f4       	brtc	.+14     	; 0x50f2 <__floatsisf+0x12>
    50e4:	90 95       	com	r25
    50e6:	80 95       	com	r24
    50e8:	70 95       	com	r23
    50ea:	61 95       	neg	r22
    50ec:	7f 4f       	sbci	r23, 0xFF	; 255
    50ee:	8f 4f       	sbci	r24, 0xFF	; 255
    50f0:	9f 4f       	sbci	r25, 0xFF	; 255
    50f2:	99 23       	and	r25, r25
    50f4:	a9 f0       	breq	.+42     	; 0x5120 <__floatsisf+0x40>
    50f6:	f9 2f       	mov	r31, r25
    50f8:	96 e9       	ldi	r25, 0x96	; 150
    50fa:	bb 27       	eor	r27, r27
    50fc:	93 95       	inc	r25
    50fe:	f6 95       	lsr	r31
    5100:	87 95       	ror	r24
    5102:	77 95       	ror	r23
    5104:	67 95       	ror	r22
    5106:	b7 95       	ror	r27
    5108:	f1 11       	cpse	r31, r1
    510a:	f8 cf       	rjmp	.-16     	; 0x50fc <__floatsisf+0x1c>
    510c:	fa f4       	brpl	.+62     	; 0x514c <__floatsisf+0x6c>
    510e:	bb 0f       	add	r27, r27
    5110:	11 f4       	brne	.+4      	; 0x5116 <__floatsisf+0x36>
    5112:	60 ff       	sbrs	r22, 0
    5114:	1b c0       	rjmp	.+54     	; 0x514c <__floatsisf+0x6c>
    5116:	6f 5f       	subi	r22, 0xFF	; 255
    5118:	7f 4f       	sbci	r23, 0xFF	; 255
    511a:	8f 4f       	sbci	r24, 0xFF	; 255
    511c:	9f 4f       	sbci	r25, 0xFF	; 255
    511e:	16 c0       	rjmp	.+44     	; 0x514c <__floatsisf+0x6c>
    5120:	88 23       	and	r24, r24
    5122:	11 f0       	breq	.+4      	; 0x5128 <__floatsisf+0x48>
    5124:	96 e9       	ldi	r25, 0x96	; 150
    5126:	11 c0       	rjmp	.+34     	; 0x514a <__floatsisf+0x6a>
    5128:	77 23       	and	r23, r23
    512a:	21 f0       	breq	.+8      	; 0x5134 <__floatsisf+0x54>
    512c:	9e e8       	ldi	r25, 0x8E	; 142
    512e:	87 2f       	mov	r24, r23
    5130:	76 2f       	mov	r23, r22
    5132:	05 c0       	rjmp	.+10     	; 0x513e <__floatsisf+0x5e>
    5134:	66 23       	and	r22, r22
    5136:	71 f0       	breq	.+28     	; 0x5154 <__floatsisf+0x74>
    5138:	96 e8       	ldi	r25, 0x86	; 134
    513a:	86 2f       	mov	r24, r22
    513c:	70 e0       	ldi	r23, 0x00	; 0
    513e:	60 e0       	ldi	r22, 0x00	; 0
    5140:	2a f0       	brmi	.+10     	; 0x514c <__floatsisf+0x6c>
    5142:	9a 95       	dec	r25
    5144:	66 0f       	add	r22, r22
    5146:	77 1f       	adc	r23, r23
    5148:	88 1f       	adc	r24, r24
    514a:	da f7       	brpl	.-10     	; 0x5142 <__floatsisf+0x62>
    514c:	88 0f       	add	r24, r24
    514e:	96 95       	lsr	r25
    5150:	87 95       	ror	r24
    5152:	97 f9       	bld	r25, 7
    5154:	08 95       	ret

00005156 <__fp_split3>:
    5156:	57 fd       	sbrc	r21, 7
    5158:	90 58       	subi	r25, 0x80	; 128
    515a:	44 0f       	add	r20, r20
    515c:	55 1f       	adc	r21, r21
    515e:	59 f0       	breq	.+22     	; 0x5176 <__fp_splitA+0x10>
    5160:	5f 3f       	cpi	r21, 0xFF	; 255
    5162:	71 f0       	breq	.+28     	; 0x5180 <__fp_splitA+0x1a>
    5164:	47 95       	ror	r20

00005166 <__fp_splitA>:
    5166:	88 0f       	add	r24, r24
    5168:	97 fb       	bst	r25, 7
    516a:	99 1f       	adc	r25, r25
    516c:	61 f0       	breq	.+24     	; 0x5186 <__fp_splitA+0x20>
    516e:	9f 3f       	cpi	r25, 0xFF	; 255
    5170:	79 f0       	breq	.+30     	; 0x5190 <__fp_splitA+0x2a>
    5172:	87 95       	ror	r24
    5174:	08 95       	ret
    5176:	12 16       	cp	r1, r18
    5178:	13 06       	cpc	r1, r19
    517a:	14 06       	cpc	r1, r20
    517c:	55 1f       	adc	r21, r21
    517e:	f2 cf       	rjmp	.-28     	; 0x5164 <__fp_split3+0xe>
    5180:	46 95       	lsr	r20
    5182:	f1 df       	rcall	.-30     	; 0x5166 <__fp_splitA>
    5184:	08 c0       	rjmp	.+16     	; 0x5196 <__fp_splitA+0x30>
    5186:	16 16       	cp	r1, r22
    5188:	17 06       	cpc	r1, r23
    518a:	18 06       	cpc	r1, r24
    518c:	99 1f       	adc	r25, r25
    518e:	f1 cf       	rjmp	.-30     	; 0x5172 <__fp_splitA+0xc>
    5190:	86 95       	lsr	r24
    5192:	71 05       	cpc	r23, r1
    5194:	61 05       	cpc	r22, r1
    5196:	08 94       	sec
    5198:	08 95       	ret

0000519a <__fp_zero>:
    519a:	e8 94       	clt

0000519c <__fp_szero>:
    519c:	bb 27       	eor	r27, r27
    519e:	66 27       	eor	r22, r22
    51a0:	77 27       	eor	r23, r23
    51a2:	cb 01       	movw	r24, r22
    51a4:	97 f9       	bld	r25, 7
    51a6:	08 95       	ret

000051a8 <__mulsf3>:
    51a8:	0e 94 e7 28 	call	0x51ce	; 0x51ce <__mulsf3x>
    51ac:	0c 94 58 29 	jmp	0x52b0	; 0x52b0 <__fp_round>
    51b0:	0e 94 4a 29 	call	0x5294	; 0x5294 <__fp_pscA>
    51b4:	38 f0       	brcs	.+14     	; 0x51c4 <__mulsf3+0x1c>
    51b6:	0e 94 51 29 	call	0x52a2	; 0x52a2 <__fp_pscB>
    51ba:	20 f0       	brcs	.+8      	; 0x51c4 <__mulsf3+0x1c>
    51bc:	95 23       	and	r25, r21
    51be:	11 f0       	breq	.+4      	; 0x51c4 <__mulsf3+0x1c>
    51c0:	0c 94 41 29 	jmp	0x5282	; 0x5282 <__fp_inf>
    51c4:	0c 94 47 29 	jmp	0x528e	; 0x528e <__fp_nan>
    51c8:	11 24       	eor	r1, r1
    51ca:	0c 94 ce 28 	jmp	0x519c	; 0x519c <__fp_szero>

000051ce <__mulsf3x>:
    51ce:	0e 94 ab 28 	call	0x5156	; 0x5156 <__fp_split3>
    51d2:	70 f3       	brcs	.-36     	; 0x51b0 <__mulsf3+0x8>

000051d4 <__mulsf3_pse>:
    51d4:	95 9f       	mul	r25, r21
    51d6:	c1 f3       	breq	.-16     	; 0x51c8 <__mulsf3+0x20>
    51d8:	95 0f       	add	r25, r21
    51da:	50 e0       	ldi	r21, 0x00	; 0
    51dc:	55 1f       	adc	r21, r21
    51de:	62 9f       	mul	r22, r18
    51e0:	f0 01       	movw	r30, r0
    51e2:	72 9f       	mul	r23, r18
    51e4:	bb 27       	eor	r27, r27
    51e6:	f0 0d       	add	r31, r0
    51e8:	b1 1d       	adc	r27, r1
    51ea:	63 9f       	mul	r22, r19
    51ec:	aa 27       	eor	r26, r26
    51ee:	f0 0d       	add	r31, r0
    51f0:	b1 1d       	adc	r27, r1
    51f2:	aa 1f       	adc	r26, r26
    51f4:	64 9f       	mul	r22, r20
    51f6:	66 27       	eor	r22, r22
    51f8:	b0 0d       	add	r27, r0
    51fa:	a1 1d       	adc	r26, r1
    51fc:	66 1f       	adc	r22, r22
    51fe:	82 9f       	mul	r24, r18
    5200:	22 27       	eor	r18, r18
    5202:	b0 0d       	add	r27, r0
    5204:	a1 1d       	adc	r26, r1
    5206:	62 1f       	adc	r22, r18
    5208:	73 9f       	mul	r23, r19
    520a:	b0 0d       	add	r27, r0
    520c:	a1 1d       	adc	r26, r1
    520e:	62 1f       	adc	r22, r18
    5210:	83 9f       	mul	r24, r19
    5212:	a0 0d       	add	r26, r0
    5214:	61 1d       	adc	r22, r1
    5216:	22 1f       	adc	r18, r18
    5218:	74 9f       	mul	r23, r20
    521a:	33 27       	eor	r19, r19
    521c:	a0 0d       	add	r26, r0
    521e:	61 1d       	adc	r22, r1
    5220:	23 1f       	adc	r18, r19
    5222:	84 9f       	mul	r24, r20
    5224:	60 0d       	add	r22, r0
    5226:	21 1d       	adc	r18, r1
    5228:	82 2f       	mov	r24, r18
    522a:	76 2f       	mov	r23, r22
    522c:	6a 2f       	mov	r22, r26
    522e:	11 24       	eor	r1, r1
    5230:	9f 57       	subi	r25, 0x7F	; 127
    5232:	50 40       	sbci	r21, 0x00	; 0
    5234:	9a f0       	brmi	.+38     	; 0x525c <__mulsf3_pse+0x88>
    5236:	f1 f0       	breq	.+60     	; 0x5274 <__mulsf3_pse+0xa0>
    5238:	88 23       	and	r24, r24
    523a:	4a f0       	brmi	.+18     	; 0x524e <__mulsf3_pse+0x7a>
    523c:	ee 0f       	add	r30, r30
    523e:	ff 1f       	adc	r31, r31
    5240:	bb 1f       	adc	r27, r27
    5242:	66 1f       	adc	r22, r22
    5244:	77 1f       	adc	r23, r23
    5246:	88 1f       	adc	r24, r24
    5248:	91 50       	subi	r25, 0x01	; 1
    524a:	50 40       	sbci	r21, 0x00	; 0
    524c:	a9 f7       	brne	.-22     	; 0x5238 <__mulsf3_pse+0x64>
    524e:	9e 3f       	cpi	r25, 0xFE	; 254
    5250:	51 05       	cpc	r21, r1
    5252:	80 f0       	brcs	.+32     	; 0x5274 <__mulsf3_pse+0xa0>
    5254:	0c 94 41 29 	jmp	0x5282	; 0x5282 <__fp_inf>
    5258:	0c 94 ce 28 	jmp	0x519c	; 0x519c <__fp_szero>
    525c:	5f 3f       	cpi	r21, 0xFF	; 255
    525e:	e4 f3       	brlt	.-8      	; 0x5258 <__mulsf3_pse+0x84>
    5260:	98 3e       	cpi	r25, 0xE8	; 232
    5262:	d4 f3       	brlt	.-12     	; 0x5258 <__mulsf3_pse+0x84>
    5264:	86 95       	lsr	r24
    5266:	77 95       	ror	r23
    5268:	67 95       	ror	r22
    526a:	b7 95       	ror	r27
    526c:	f7 95       	ror	r31
    526e:	e7 95       	ror	r30
    5270:	9f 5f       	subi	r25, 0xFF	; 255
    5272:	c1 f7       	brne	.-16     	; 0x5264 <__mulsf3_pse+0x90>
    5274:	fe 2b       	or	r31, r30
    5276:	88 0f       	add	r24, r24
    5278:	91 1d       	adc	r25, r1
    527a:	96 95       	lsr	r25
    527c:	87 95       	ror	r24
    527e:	97 f9       	bld	r25, 7
    5280:	08 95       	ret

00005282 <__fp_inf>:
    5282:	97 f9       	bld	r25, 7
    5284:	9f 67       	ori	r25, 0x7F	; 127
    5286:	80 e8       	ldi	r24, 0x80	; 128
    5288:	70 e0       	ldi	r23, 0x00	; 0
    528a:	60 e0       	ldi	r22, 0x00	; 0
    528c:	08 95       	ret

0000528e <__fp_nan>:
    528e:	9f ef       	ldi	r25, 0xFF	; 255
    5290:	80 ec       	ldi	r24, 0xC0	; 192
    5292:	08 95       	ret

00005294 <__fp_pscA>:
    5294:	00 24       	eor	r0, r0
    5296:	0a 94       	dec	r0
    5298:	16 16       	cp	r1, r22
    529a:	17 06       	cpc	r1, r23
    529c:	18 06       	cpc	r1, r24
    529e:	09 06       	cpc	r0, r25
    52a0:	08 95       	ret

000052a2 <__fp_pscB>:
    52a2:	00 24       	eor	r0, r0
    52a4:	0a 94       	dec	r0
    52a6:	12 16       	cp	r1, r18
    52a8:	13 06       	cpc	r1, r19
    52aa:	14 06       	cpc	r1, r20
    52ac:	05 06       	cpc	r0, r21
    52ae:	08 95       	ret

000052b0 <__fp_round>:
    52b0:	09 2e       	mov	r0, r25
    52b2:	03 94       	inc	r0
    52b4:	00 0c       	add	r0, r0
    52b6:	11 f4       	brne	.+4      	; 0x52bc <__fp_round+0xc>
    52b8:	88 23       	and	r24, r24
    52ba:	52 f0       	brmi	.+20     	; 0x52d0 <__fp_round+0x20>
    52bc:	bb 0f       	add	r27, r27
    52be:	40 f4       	brcc	.+16     	; 0x52d0 <__fp_round+0x20>
    52c0:	bf 2b       	or	r27, r31
    52c2:	11 f4       	brne	.+4      	; 0x52c8 <__fp_round+0x18>
    52c4:	60 ff       	sbrs	r22, 0
    52c6:	04 c0       	rjmp	.+8      	; 0x52d0 <__fp_round+0x20>
    52c8:	6f 5f       	subi	r22, 0xFF	; 255
    52ca:	7f 4f       	sbci	r23, 0xFF	; 255
    52cc:	8f 4f       	sbci	r24, 0xFF	; 255
    52ce:	9f 4f       	sbci	r25, 0xFF	; 255
    52d0:	08 95       	ret

000052d2 <__udivmodqi4>:
    52d2:	99 1b       	sub	r25, r25
    52d4:	79 e0       	ldi	r23, 0x09	; 9
    52d6:	04 c0       	rjmp	.+8      	; 0x52e0 <__udivmodqi4_ep>

000052d8 <__udivmodqi4_loop>:
    52d8:	99 1f       	adc	r25, r25
    52da:	96 17       	cp	r25, r22
    52dc:	08 f0       	brcs	.+2      	; 0x52e0 <__udivmodqi4_ep>
    52de:	96 1b       	sub	r25, r22

000052e0 <__udivmodqi4_ep>:
    52e0:	88 1f       	adc	r24, r24
    52e2:	7a 95       	dec	r23
    52e4:	c9 f7       	brne	.-14     	; 0x52d8 <__udivmodqi4_loop>
    52e6:	80 95       	com	r24
    52e8:	08 95       	ret

000052ea <__divmodhi4>:
    52ea:	97 fb       	bst	r25, 7
    52ec:	07 2e       	mov	r0, r23
    52ee:	16 f4       	brtc	.+4      	; 0x52f4 <__divmodhi4+0xa>
    52f0:	00 94       	com	r0
    52f2:	07 d0       	rcall	.+14     	; 0x5302 <__divmodhi4_neg1>
    52f4:	77 fd       	sbrc	r23, 7
    52f6:	09 d0       	rcall	.+18     	; 0x530a <__divmodhi4_neg2>
    52f8:	0e 94 8f 29 	call	0x531e	; 0x531e <__udivmodhi4>
    52fc:	07 fc       	sbrc	r0, 7
    52fe:	05 d0       	rcall	.+10     	; 0x530a <__divmodhi4_neg2>
    5300:	3e f4       	brtc	.+14     	; 0x5310 <__divmodhi4_exit>

00005302 <__divmodhi4_neg1>:
    5302:	90 95       	com	r25
    5304:	81 95       	neg	r24
    5306:	9f 4f       	sbci	r25, 0xFF	; 255
    5308:	08 95       	ret

0000530a <__divmodhi4_neg2>:
    530a:	70 95       	com	r23
    530c:	61 95       	neg	r22
    530e:	7f 4f       	sbci	r23, 0xFF	; 255

00005310 <__divmodhi4_exit>:
    5310:	08 95       	ret

00005312 <__tablejump2__>:
    5312:	ee 0f       	add	r30, r30
    5314:	ff 1f       	adc	r31, r31
    5316:	05 90       	lpm	r0, Z+
    5318:	f4 91       	lpm	r31, Z
    531a:	e0 2d       	mov	r30, r0
    531c:	09 94       	ijmp

0000531e <__udivmodhi4>:
    531e:	aa 1b       	sub	r26, r26
    5320:	bb 1b       	sub	r27, r27
    5322:	51 e1       	ldi	r21, 0x11	; 17
    5324:	07 c0       	rjmp	.+14     	; 0x5334 <__udivmodhi4_ep>

00005326 <__udivmodhi4_loop>:
    5326:	aa 1f       	adc	r26, r26
    5328:	bb 1f       	adc	r27, r27
    532a:	a6 17       	cp	r26, r22
    532c:	b7 07       	cpc	r27, r23
    532e:	10 f0       	brcs	.+4      	; 0x5334 <__udivmodhi4_ep>
    5330:	a6 1b       	sub	r26, r22
    5332:	b7 0b       	sbc	r27, r23

00005334 <__udivmodhi4_ep>:
    5334:	88 1f       	adc	r24, r24
    5336:	99 1f       	adc	r25, r25
    5338:	5a 95       	dec	r21
    533a:	a9 f7       	brne	.-22     	; 0x5326 <__udivmodhi4_loop>
    533c:	80 95       	com	r24
    533e:	90 95       	com	r25
    5340:	bc 01       	movw	r22, r24
    5342:	cd 01       	movw	r24, r26
    5344:	08 95       	ret

00005346 <eeprom_read_byte>:
    5346:	f9 99       	sbic	0x1f, 1	; 31
    5348:	fe cf       	rjmp	.-4      	; 0x5346 <eeprom_read_byte>
    534a:	92 bd       	out	0x22, r25	; 34
    534c:	81 bd       	out	0x21, r24	; 33
    534e:	f8 9a       	sbi	0x1f, 0	; 31
    5350:	99 27       	eor	r25, r25
    5352:	80 b5       	in	r24, 0x20	; 32
    5354:	08 95       	ret

00005356 <eeprom_read_word>:
    5356:	a8 e1       	ldi	r26, 0x18	; 24
    5358:	b0 e0       	ldi	r27, 0x00	; 0
    535a:	42 e0       	ldi	r20, 0x02	; 2
    535c:	50 e0       	ldi	r21, 0x00	; 0
    535e:	0c 94 c6 29 	jmp	0x538c	; 0x538c <eeprom_read_blraw>

00005362 <eeprom_write_byte>:
    5362:	26 2f       	mov	r18, r22

00005364 <eeprom_write_r18>:
    5364:	f9 99       	sbic	0x1f, 1	; 31
    5366:	fe cf       	rjmp	.-4      	; 0x5364 <eeprom_write_r18>
    5368:	1f ba       	out	0x1f, r1	; 31
    536a:	92 bd       	out	0x22, r25	; 34
    536c:	81 bd       	out	0x21, r24	; 33
    536e:	20 bd       	out	0x20, r18	; 32
    5370:	0f b6       	in	r0, 0x3f	; 63
    5372:	f8 94       	cli
    5374:	fa 9a       	sbi	0x1f, 2	; 31
    5376:	f9 9a       	sbi	0x1f, 1	; 31
    5378:	0f be       	out	0x3f, r0	; 63
    537a:	01 96       	adiw	r24, 0x01	; 1
    537c:	08 95       	ret

0000537e <eeprom_write_word>:
    537e:	0e 94 b1 29 	call	0x5362	; 0x5362 <eeprom_write_byte>
    5382:	27 2f       	mov	r18, r23
    5384:	0c 94 b2 29 	jmp	0x5364	; 0x5364 <eeprom_write_r18>

00005388 <eeprom_read_block>:
    5388:	dc 01       	movw	r26, r24
    538a:	cb 01       	movw	r24, r22

0000538c <eeprom_read_blraw>:
    538c:	fc 01       	movw	r30, r24
    538e:	f9 99       	sbic	0x1f, 1	; 31
    5390:	fe cf       	rjmp	.-4      	; 0x538e <eeprom_read_blraw+0x2>
    5392:	06 c0       	rjmp	.+12     	; 0x53a0 <eeprom_read_blraw+0x14>
    5394:	f2 bd       	out	0x22, r31	; 34
    5396:	e1 bd       	out	0x21, r30	; 33
    5398:	f8 9a       	sbi	0x1f, 0	; 31
    539a:	31 96       	adiw	r30, 0x01	; 1
    539c:	00 b4       	in	r0, 0x20	; 32
    539e:	0d 92       	st	X+, r0
    53a0:	41 50       	subi	r20, 0x01	; 1
    53a2:	50 40       	sbci	r21, 0x00	; 0
    53a4:	b8 f7       	brcc	.-18     	; 0x5394 <eeprom_read_blraw+0x8>
    53a6:	08 95       	ret

000053a8 <_exit>:
    53a8:	f8 94       	cli

000053aa <__stop_program>:
    53aa:	ff cf       	rjmp	.-2      	; 0x53aa <__stop_program>
